diff --git a/src/csma/model/csma-net-device.cc b/src/csma/model/csma-net-device.cc
--- a/src/csma/model/csma-net-device.cc
+++ b/src/csma/model/csma-net-device.cc
@@ -831,6 +831,30 @@
       packetType = PACKET_OTHERHOST;
     }
 
+  //
+  // Check if this device is configure as an OpenFlow switch port.
+  //
+  if (!m_openFlowRxCallback.IsNull ())
+    {
+      // For all kinds of packet we receive, we hit the promiscuous sniffer
+      // hook. If the packet is addressed to this device (which is not supposed
+      // to happen in normal situations), we also hit the non-promiscuous
+      // sniffer hook, but in both cases we don't forward the packt up the
+      // stack.
+      m_promiscSnifferTrace (originalPacket);
+      if (packetType != PACKET_OTHERHOST)
+        {
+          m_snifferTrace (originalPacket);
+        }
+
+      // We forward the original packet (which includes the EthernetHeader) to
+      // the OpenFlow receive callback for all kinds of packetType we receive
+      // (broadcast, multicast, host or other host).
+      m_openFlowRxCallback (this, originalPacket, protocol,
+        header.GetSource (), header.GetDestination (), packetType);
+      return;
+    }
+
   // 
   // For all kinds of packetType we receive, we hit the promiscuous sniffer
   // hook and pass a copy up to the promiscuous callback.  Pass a copy to 
@@ -1056,6 +1080,13 @@
 }
 
 void
+CsmaNetDevice::SetOpenFlowReceiveCallback (NetDevice::PromiscReceiveCallback cb)
+{
+  NS_LOG_FUNCTION (&cb);
+  m_openFlowRxCallback = cb;
+}
+
+void
 CsmaNetDevice::SetReceiveCallback (NetDevice::ReceiveCallback cb)
 {
   NS_LOG_FUNCTION (&cb);
diff --git a/src/csma/model/csma-net-device.h b/src/csma/model/csma-net-device.h
--- a/src/csma/model/csma-net-device.h
+++ b/src/csma/model/csma-net-device.h
@@ -308,6 +308,14 @@
   virtual bool NeedsArp (void) const;
 
   /**
+   * Set the callback used to notify the OpenFlow when a packet has been
+   * received by this device.
+   *
+   * \param cb The callback.
+   */
+  virtual void SetOpenFlowReceiveCallback (NetDevice::PromiscReceiveCallback cb);
+  
+  /**
    * Set the callback to be used to notify higher layers when a packet has been
    * received.
    *
@@ -698,6 +706,11 @@
   Mac48Address m_address;
 
   /**
+   * The OpenFlow receive callback.
+   */
+  NetDevice::PromiscReceiveCallback m_openFlowRxCallback;
+  
+  /**
    * The callback used to notify higher layers that a packet has been received.
    */
   NetDevice::ReceiveCallback m_rxCallback;
diff --git a/src/virtual-net-device/model/virtual-net-device.cc b/src/virtual-net-device/model/virtual-net-device.cc
--- a/src/virtual-net-device/model/virtual-net-device.cc
+++ b/src/virtual-net-device/model/virtual-net-device.cc
@@ -141,6 +141,29 @@
                            const Address &source, const Address &destination,
                            PacketType packetType)
 {
+  //
+  // Check if this device is configure as an OpenFlow switch port.
+  //
+  if (!m_openFlowRxCallback.IsNull ())
+    {
+      // For all kinds of packetType we receive, we hit the promiscuous sniffer
+      // hook. If the packet is addressed to this device (which is not supposed
+      // to happen in normal situations), we also hit the non-promiscuous
+      // sniffer hook, but in both cases we don't forward the packt up the
+      // stack.
+      m_promiscSnifferTrace (packet);
+      if (packetType != PACKET_OTHERHOST)
+        {
+          m_snifferTrace (packet);
+        }
+
+      // We then forward the original packet to the OpenFlow receive callback
+      // for all kinds of packetType we receive (broadcast, multicast, host or
+      // other host).
+      m_openFlowRxCallback (this, packet, protocol, source, destination, packetType);
+      return true;
+    }
+
   // 
   // For all kinds of packetType we receive, we hit the promiscuous sniffer
   // hook and pass a copy up to the promiscuous callback.  Pass a copy to 
@@ -314,5 +337,11 @@
   return false;
 }
 
+void
+VirtualNetDevice::SetOpenFlowReceiveCallback (NetDevice::PromiscReceiveCallback cb)
+{
+  NS_LOG_FUNCTION (&cb);
+  m_openFlowRxCallback = cb;
+}
 
 } // namespace ns3
diff --git a/src/virtual-net-device/model/virtual-net-device.h b/src/virtual-net-device/model/virtual-net-device.h
--- a/src/virtual-net-device/model/virtual-net-device.h
+++ b/src/virtual-net-device/model/virtual-net-device.h
@@ -146,6 +146,14 @@
   virtual bool SupportsSendFrom () const;
   virtual bool IsBridge (void) const;
 
+  /**
+   * Set the callback used to notify the OpenFlow when a packet has been
+   * received by this device.
+   *
+   * \param cb The OpenFlow receive callback.
+   */
+  virtual void SetOpenFlowReceiveCallback (NetDevice::PromiscReceiveCallback cb);
+
 protected:
 
   virtual void DoDispose (void);
@@ -168,6 +176,9 @@
   bool m_needsArp;
   bool m_supportsSendFrom;
   bool m_isPointToPoint;
+
+  /** The OpenFlow receive callback. */
+  NetDevice::PromiscReceiveCallback m_openFlowRxCallback;
 };
 
 } // namespace ns3
