from pybindgen import Module, FileCodeSink, param, retval, cppclass, typehandlers


import pybindgen.settings
import warnings

class ErrorHandler(pybindgen.settings.ErrorHandler):
    def handle_error(self, wrapper, exception, traceback_):
        warnings.warn("exception %r in wrapper %s" % (exception, wrapper))
        return True
pybindgen.settings.error_handler = ErrorHandler()


import sys

def module_init():
    root_module = Module('ns.nr', cpp_namespace='::ns3')
    return root_module

def register_types(module):
    root_module = module.get_root()
    
    ## log.h (module 'core'): ns3::LogLevel [enumeration]
    module.add_enum('LogLevel', ['LOG_NONE', 'LOG_ERROR', 'LOG_LEVEL_ERROR', 'LOG_WARN', 'LOG_LEVEL_WARN', 'LOG_DEBUG', 'LOG_LEVEL_DEBUG', 'LOG_INFO', 'LOG_LEVEL_INFO', 'LOG_FUNCTION', 'LOG_LEVEL_FUNCTION', 'LOG_LOGIC', 'LOG_LEVEL_LOGIC', 'LOG_ALL', 'LOG_LEVEL_ALL', 'LOG_PREFIX_FUNC', 'LOG_PREFIX_TIME', 'LOG_PREFIX_NODE', 'LOG_PREFIX_LEVEL', 'LOG_PREFIX_ALL'], import_from_module='ns.core')
    ## ff-mac-common.h (module 'nr'): ns3::SetupRelease_e [enumeration]
    module.add_enum('SetupRelease_e', ['setup', 'release'])
    ## ff-mac-common.h (module 'nr'): ns3::Result_e [enumeration]
    module.add_enum('Result_e', ['SUCCESS', 'FAILURE'])
    ## ff-mac-common.h (module 'nr'): ns3::CeBitmap_e [enumeration]
    module.add_enum('CeBitmap_e', ['TA', 'DRX', 'CR'])
    ## ff-mac-common.h (module 'nr'): ns3::NormalExtended_e [enumeration]
    module.add_enum('NormalExtended_e', ['normal', 'extended'])
    ## address.h (module 'network'): ns3::Address [class]
    module.add_class('Address', import_from_module='ns.network')
    ## address.h (module 'network'): ns3::Address::MaxSize_e [enumeration]
    module.add_enum('MaxSize_e', ['MAX_SIZE'], outer_class=root_module['ns3::Address'], import_from_module='ns.network')
    ## eps-bearer.h (module 'nr'): ns3::AllocationRetentionPriority [struct]
    module.add_class('AllocationRetentionPriority')
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList [class]
    module.add_class('AttributeConstructionList', import_from_module='ns.core')
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item [struct]
    module.add_class('Item', import_from_module='ns.core', outer_class=root_module['ns3::AttributeConstructionList'])
    ## spectrum-model.h (module 'spectrum'): ns3::BandInfo [struct]
    module.add_class('BandInfo', import_from_module='ns.spectrum')
    ## buffer.h (module 'network'): ns3::Buffer [class]
    module.add_class('Buffer', import_from_module='ns.network')
    ## buffer.h (module 'network'): ns3::Buffer::Iterator [class]
    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::Buffer'])
    ## nr-common.h (module 'nr'): ns3::NrBufferSizeLevelBsr [class]
    module.add_class('NrBufferSizeLevelBsr')
    ## ff-mac-common.h (module 'nr'): ns3::BuildBroadcastListElement_s [struct]
    module.add_class('BuildBroadcastListElement_s')
    ## ff-mac-common.h (module 'nr'): ns3::BuildBroadcastListElement_s::Type_e [enumeration]
    module.add_enum('Type_e', ['BCCH', 'PCCH'], outer_class=root_module['ns3::BuildBroadcastListElement_s'])
    ## ff-mac-common.h (module 'nr'): ns3::BuildDataListElement_s [struct]
    module.add_class('BuildDataListElement_s')
    ## ff-mac-common.h (module 'nr'): ns3::BuildRarListElement_s [struct]
    module.add_class('BuildRarListElement_s')
    ## ff-mac-common.h (module 'nr'): ns3::BwPart_s [struct]
    module.add_class('BwPart_s')
    ## packet.h (module 'network'): ns3::ByteTagIterator [class]
    module.add_class('ByteTagIterator', import_from_module='ns.network')
    ## packet.h (module 'network'): ns3::ByteTagIterator::Item [class]
    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagIterator'])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList [class]
    module.add_class('ByteTagList', import_from_module='ns.network')
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator [class]
    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList'])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item [struct]
    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList::Iterator'])
    ## callback.h (module 'core'): ns3::CallbackBase [class]
    module.add_class('CallbackBase', import_from_module='ns.core')
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::CqasFlowPerf_t [struct]
    module.add_class('CqasFlowPerf_t')
    ## ff-mac-common.h (module 'nr'): ns3::CqiConfig_s [struct]
    module.add_class('CqiConfig_s')
    ## ff-mac-common.h (module 'nr'): ns3::CqiListElement_s [struct]
    module.add_class('CqiListElement_s')
    ## ff-mac-common.h (module 'nr'): ns3::CqiListElement_s::CqiType_e [enumeration]
    module.add_enum('CqiType_e', ['P10', 'P11', 'P20', 'P21', 'A12', 'A22', 'A20', 'A30', 'A31'], outer_class=root_module['ns3::CqiListElement_s'])
    ## data-output-interface.h (module 'stats'): ns3::DataOutputCallback [class]
    module.add_class('DataOutputCallback', allow_subclassing=True, import_from_module='ns.stats')
    ## data-rate.h (module 'network'): ns3::DataRate [class]
    module.add_class('DataRate', import_from_module='ns.network')
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s [struct]
    module.add_class('DlDciListElement_s')
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::Format_e [enumeration]
    module.add_enum('Format_e', ['ONE', 'ONE_A', 'ONE_B', 'ONE_C', 'ONE_D', 'TWO', 'TWO_A', 'TWO_B'], outer_class=root_module['ns3::DlDciListElement_s'])
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::VrbFormat_e [enumeration]
    module.add_enum('VrbFormat_e', ['VRB_DISTRIBUTED', 'VRB_LOCALIZED'], outer_class=root_module['ns3::DlDciListElement_s'])
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::Ngap_e [enumeration]
    module.add_enum('Ngap_e', ['GAP1', 'GAP2'], outer_class=root_module['ns3::DlDciListElement_s'])
    ## ff-mac-common.h (module 'nr'): ns3::DlInfoListElement_s [struct]
    module.add_class('DlInfoListElement_s')
    ## ff-mac-common.h (module 'nr'): ns3::DlInfoListElement_s::HarqStatus_e [enumeration]
    module.add_enum('HarqStatus_e', ['ACK', 'NACK', 'DTX'], outer_class=root_module['ns3::DlInfoListElement_s'])
    ## ff-mac-common.h (module 'nr'): ns3::DrxConfig_s [struct]
    module.add_class('DrxConfig_s')
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider [class]
    module.add_class('NgcEnbN2SapProvider', allow_subclassing=True)
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::BearerToBeSwitched [struct]
    module.add_class('BearerToBeSwitched', outer_class=root_module['ns3::NgcEnbN2SapProvider'])
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::PathSwitchRequestParameters [struct]
    module.add_class('PathSwitchRequestParameters', outer_class=root_module['ns3::NgcEnbN2SapProvider'])
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser [class]
    module.add_class('NgcEnbN2SapUser', allow_subclassing=True)
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequestParameters [struct]
    module.add_class('DataRadioBearerSetupRequestParameters', outer_class=root_module['ns3::NgcEnbN2SapUser'])
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::PathSwitchRequestAcknowledgeParameters [struct]
    module.add_class('PathSwitchRequestAcknowledgeParameters', outer_class=root_module['ns3::NgcEnbN2SapUser'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap [class]
    module.add_class('NgcN11Sap')
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::Fteid [struct]
    module.add_class('Fteid', outer_class=root_module['ns3::NgcN11Sap'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::GtpcMessage [struct]
    module.add_class('GtpcMessage', outer_class=root_module['ns3::NgcN11Sap'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::Uli [struct]
    module.add_class('Uli', outer_class=root_module['ns3::NgcN11Sap'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf [class]
    module.add_class('NgcN11SapAmf', parent=root_module['ns3::NgcN11Sap'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::BearerContextCreated [struct]
    module.add_class('BearerContextCreated', outer_class=root_module['ns3::NgcN11SapAmf'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::N2SMInformationCreated [struct]
    module.add_class('N2SMInformationCreated', outer_class=root_module['ns3::NgcN11SapAmf'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::BearerContextRemoved [struct]
    module.add_class('BearerContextRemoved', outer_class=root_module['ns3::NgcN11SapAmf'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::CreateSessionResponseMessage [struct]
    module.add_class('CreateSessionResponseMessage', parent=root_module['ns3::NgcN11Sap::GtpcMessage'], outer_class=root_module['ns3::NgcN11SapAmf'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::DeleteBearerRequestMessage [struct]
    module.add_class('DeleteBearerRequestMessage', parent=root_module['ns3::NgcN11Sap::GtpcMessage'], outer_class=root_module['ns3::NgcN11SapAmf'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::ModifyBearerResponseMessage [struct]
    module.add_class('ModifyBearerResponseMessage', parent=root_module['ns3::NgcN11Sap::GtpcMessage'], outer_class=root_module['ns3::NgcN11SapAmf'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::ModifyBearerResponseMessage::Cause [enumeration]
    module.add_enum('Cause', ['REQUEST_ACCEPTED', 'REQUEST_ACCEPTED_PARTIALLY', 'REQUEST_REJECTED', 'CONTEXT_NOT_FOUND'], outer_class=root_module['ns3::NgcN11SapAmf::ModifyBearerResponseMessage'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf [class]
    module.add_class('NgcN11SapSmf', parent=root_module['ns3::NgcN11Sap'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextRemovedSmfUpf [struct]
    module.add_class('BearerContextRemovedSmfUpf', outer_class=root_module['ns3::NgcN11SapSmf'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated [struct]
    module.add_class('BearerContextToBeCreated', outer_class=root_module['ns3::NgcN11SapSmf']) ##smsohn
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::N2SMInformationToBeCreated [struct]
    module.add_class('N2SMInformationToBeCreated', outer_class=root_module['ns3::NgcN11SapSmf'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeRemoved [struct]
    module.add_class('BearerContextToBeRemoved', outer_class=root_module['ns3::NgcN11SapSmf'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::CreateSessionRequestMessage [struct]
    module.add_class('CreateSessionRequestMessage', parent=root_module['ns3::NgcN11Sap::GtpcMessage'], outer_class=root_module['ns3::NgcN11SapSmf'])
    ##yjshin
    module.add_class('UpdateSMContextRequestMessage', parent=root_module['ns3::NgcN11Sap::GtpcMessage'], outer_class=root_module['ns3::NgcN11SapSmf'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::DeleteBearerCommandMessage [struct]
    module.add_class('DeleteBearerCommandMessage', parent=root_module['ns3::NgcN11Sap::GtpcMessage'], outer_class=root_module['ns3::NgcN11SapSmf'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::DeleteBearerResponseMessage [struct]
    module.add_class('DeleteBearerResponseMessage', parent=root_module['ns3::NgcN11Sap::GtpcMessage'], outer_class=root_module['ns3::NgcN11SapSmf'])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::ModifyBearerRequestMessage [struct]
    module.add_class('ModifyBearerRequestMessage', parent=root_module['ns3::NgcN11Sap::GtpcMessage'], outer_class=root_module['ns3::NgcN11SapSmf'])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSap [class]
    module.add_class('NgcN2apSap')
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb [class]
    module.add_class('NgcN2apSapEnb', parent=root_module['ns3::NgcN2apSap'])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem [struct]
    module.add_class('ErabSwitchedInUplinkItem', outer_class=root_module['ns3::NgcN2apSapEnb'])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::ErabToBeSetupItem [struct]
    module.add_class('ErabToBeSetupItem', outer_class=root_module['ns3::NgcN2apSapEnb'])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf [class]
    module.add_class('NgcN2apSapAmf', parent=root_module['ns3::NgcN2apSap'])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabSetupItem [struct]
    module.add_class('ErabSetupItem', outer_class=root_module['ns3::NgcN2apSapAmf'])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem [struct]
    module.add_class('ErabSwitchedInDownlinkItem', outer_class=root_module['ns3::NgcN2apSapAmf'])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabToBeReleasedIndication [struct]
    module.add_class('ErabToBeReleasedIndication', outer_class=root_module['ns3::NgcN2apSapAmf'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap [class]
    module.add_class('NgcX2Sap')
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UlInterferenceOverloadIndicationItem [enumeration]
    module.add_enum('UlInterferenceOverloadIndicationItem', ['HighInterference', 'MediumInterference', 'LowInterference'], outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::LoadIndicator [enumeration]
    module.add_enum('LoadIndicator', ['LowLoad', 'MediumLoad', 'HighLoad', 'Overload'], outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::IdCause [enumeration]
    module.add_enum('IdCause', ['HandoverDesirableForRadioReason', 'TimeCriticalHandover'], outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellInformationItem [struct]
    module.add_class('CellInformationItem', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem [struct]
    module.add_class('CellMeasurementResultItem', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CompositeAvailCapacity [struct]
    module.add_class('CompositeAvailCapacity', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabAdmittedItem [struct]
    module.add_class('ErabAdmittedItem', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabNotAdmittedItem [struct]
    module.add_class('ErabNotAdmittedItem', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabToBeSetupItem [struct]
    module.add_class('ErabToBeSetupItem', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem [struct]
    module.add_class('ErabsSubjectToStatusTransferItem', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverPreparationFailureParams [struct]
    module.add_class('HandoverPreparationFailureParams', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestAckParams [struct]
    module.add_class('HandoverRequestAckParams', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestParams [struct]
    module.add_class('HandoverRequestParams', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::LoadInformationParams [struct]
    module.add_class('LoadInformationParams', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::RelativeNarrowbandTxBand [struct]
    module.add_class('RelativeNarrowbandTxBand', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ResourceStatusUpdateParams [struct]
    module.add_class('ResourceStatusUpdateParams', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::SnStatusTransferParams [struct]
    module.add_class('SnStatusTransferParams', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeContextReleaseParams [struct]
    module.add_class('UeContextReleaseParams', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeDataParams [struct]
    module.add_class('UeDataParams', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UlHighInterferenceInformationItem [struct]
    module.add_class('UlHighInterferenceInformationItem', outer_class=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2SapProvider [class]
    module.add_class('NgcX2SapProvider', parent=root_module['ns3::NgcX2Sap'])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2SapUser [class]
    module.add_class('NgcX2SapUser', parent=root_module['ns3::NgcX2Sap'])
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer [struct]
    module.add_class('EpsBearer') ##
    module.add_class('QosFlow') ##yjshin
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::Qci [enumeration]
    module.add_enum('Qci', ['GBR_CONV_VOICE', 'GBR_CONV_VIDEO', 'GBR_GAMING', 'GBR_NON_CONV_VIDEO', 'NGBR_IMS', 'NGBR_VIDEO_TCP_OPERATOR', 'NGBR_VOICE_VIDEO_GAMING', 'NGBR_VIDEO_TCP_PREMIUM', 'NGBR_VIDEO_TCP_DEFAULT'], outer_class=root_module['ns3::EpsBearer'])
    ## nr-common.h (module 'nr'): ns3::NrEutranMeasurementMapping [class]
    module.add_class('NrEutranMeasurementMapping')
    ## event-id.h (module 'core'): ns3::EventId [class]
    module.add_class('EventId', import_from_module='ns.core')
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider [class]
    module.add_class('FfMacCschedSapProvider', allow_subclassing=True)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters [struct]
    module.add_class('CschedCellConfigReqParameters', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::HoppingMode_e [enumeration]
    module.add_enum('HoppingMode_e', ['inter', 'interintra'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::PhichResource_e [enumeration]
    module.add_enum('PhichResource_e', ['PHICH_R_ONE_SIXTH', 'PHICH_R_HALF', 'PHICH_R_ONE', 'PHICH_R_TWO'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::DuplexMode_e [enumeration]
    module.add_enum('DuplexMode_e', ['DM_TDD', 'DM_FDD'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::Enable64Qam_e [enumeration]
    module.add_enum('Enable64Qam_e', ['MOD_16QAM', 'MOD_64QAM'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters [struct]
    module.add_class('CschedLcConfigReqParameters', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters [struct]
    module.add_class('CschedLcReleaseReqParameters', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters [struct]
    module.add_class('CschedUeConfigReqParameters', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::MeasGapConfigPattern_e [enumeration]
    module.add_enum('MeasGapConfigPattern_e', ['MGP_GP1', 'MGP_GP2', 'OFF'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::OpenClosedLoop_e [enumeration]
    module.add_enum('OpenClosedLoop_e', ['noneloop', 'openloop', 'closedloop'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::RepMode_e [enumeration]
    module.add_enum('RepMode_e', ['rm12', 'rm20', 'rm22', 'rm30', 'rm31', 'nonemode'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::FeedbackMode_e [enumeration]
    module.add_enum('FeedbackMode_e', ['bundling', 'multiplexing'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters [struct]
    module.add_class('CschedUeReleaseReqParameters', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser [class]
    module.add_class('FfMacCschedSapUser', allow_subclassing=True)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters [struct]
    module.add_class('CschedCellConfigCnfParameters', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters [struct]
    module.add_class('CschedCellConfigUpdateIndParameters', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters [struct]
    module.add_class('CschedLcConfigCnfParameters', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters [struct]
    module.add_class('CschedLcReleaseCnfParameters', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters [struct]
    module.add_class('CschedUeConfigCnfParameters', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters [struct]
    module.add_class('CschedUeConfigUpdateIndParameters', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters [struct]
    module.add_class('CschedUeReleaseCnfParameters', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider [class]
    module.add_class('FfMacSchedSapProvider', allow_subclassing=True)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters [struct]
    module.add_class('SchedDlCqiInfoReqParameters', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters [struct]
    module.add_class('SchedDlMacBufferReqParameters', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters [struct]
    module.add_class('SchedDlPagingBufferReqParameters', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters [struct]
    module.add_class('SchedDlRachInfoReqParameters', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters [struct]
    module.add_class('SchedDlRlcBufferReqParameters', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters [struct]
    module.add_class('SchedDlTriggerReqParameters', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters [struct]
    module.add_class('SchedUlCqiInfoReqParameters', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters [struct]
    module.add_class('SchedUlMacCtrlInfoReqParameters', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters [struct]
    module.add_class('SchedUlNoiseInterferenceReqParameters', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters [struct]
    module.add_class('SchedUlSrInfoReqParameters', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters [struct]
    module.add_class('SchedUlTriggerReqParameters', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser [class]
    module.add_class('FfMacSchedSapUser', allow_subclassing=True)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters [struct]
    module.add_class('SchedDlConfigIndParameters', outer_class=root_module['ns3::FfMacSchedSapUser'])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedUlConfigIndParameters [struct]
    module.add_class('SchedUlConfigIndParameters', outer_class=root_module['ns3::FfMacSchedSapUser'])
    ## eps-bearer.h (module 'nr'): ns3::GbrQosInformation [struct]
    module.add_class('GbrQosInformation')
    ## nr-harq-phy.h (module 'nr'): ns3::HarqProcessInfoElement_t [struct]
    module.add_class('HarqProcessInfoElement_t')
    ## hash.h (module 'core'): ns3::Hasher [class]
    module.add_class('Hasher', import_from_module='ns.core')
    ## ff-mac-common.h (module 'nr'): ns3::HigherLayerSelected_s [struct]
    module.add_class('HigherLayerSelected_s')
    ## nr-common.h (module 'nr'): ns3::NrImsiLcidPair_t [struct]
    module.add_class('NrImsiLcidPair_t')
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
    module.add_class('Inet6SocketAddress', import_from_module='ns.network')
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
    root_module['ns3::Inet6SocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
    module.add_class('InetSocketAddress', import_from_module='ns.network')
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
    root_module['ns3::InetSocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
    module.add_class('Ipv4Address', import_from_module='ns.network')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
    root_module['ns3::Ipv4Address'].implicitly_converts_to(root_module['ns3::Address'])
    ## ipv4-address-helper.h (module 'internet'): ns3::Ipv4AddressHelper [class]
    module.add_class('Ipv4AddressHelper', import_from_module='ns.internet')
    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress [class]
    module.add_class('Ipv4InterfaceAddress', import_from_module='ns.internet')
    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e [enumeration]
    module.add_enum('InterfaceAddressScope_e', ['HOST', 'LINK', 'GLOBAL'], outer_class=root_module['ns3::Ipv4InterfaceAddress'], import_from_module='ns.internet')
    ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4InterfaceContainer [class]
    module.add_class('Ipv4InterfaceContainer', import_from_module='ns.internet')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask [class]
    module.add_class('Ipv4Mask', import_from_module='ns.network')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
    module.add_class('Ipv6Address', import_from_module='ns.network')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
    root_module['ns3::Ipv6Address'].implicitly_converts_to(root_module['ns3::Address'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix [class]
    module.add_class('Ipv6Prefix', import_from_module='ns.network')
    ## log.h (module 'core'): ns3::LogComponent [class]
    module.add_class('LogComponent', import_from_module='ns.core')
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s [struct]
    module.add_class('LogicalChannelConfigListElement_s')
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s::Direction_e [enumeration]
    module.add_enum('Direction_e', ['DIR_UL', 'DIR_DL', 'DIR_BOTH'], outer_class=root_module['ns3::LogicalChannelConfigListElement_s'])
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s::QosBearerType_e [enumeration]
    module.add_enum('QosBearerType_e', ['QBT_NON_GBR', 'QBT_GBR'], outer_class=root_module['ns3::LogicalChannelConfigListElement_s'])
    ## nr-anr-sap.h (module 'nr'): ns3::NrAnrSapProvider [class]
    module.add_class('NrAnrSapProvider', allow_subclassing=True)
    ## nr-anr-sap.h (module 'nr'): ns3::NrAnrSapUser [class]
    module.add_class('NrAnrSapUser', allow_subclassing=True)
    ## nr-as-sap.h (module 'nr'): ns3::NrAsSapProvider [class]
    module.add_class('NrAsSapProvider', allow_subclassing=True)
    ## nr-as-sap.h (module 'nr'): ns3::NrAsSapUser [class]
    module.add_class('NrAsSapUser', allow_subclassing=True)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider [class]
    module.add_class('NrEnbCmacSapProvider', allow_subclassing=True)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::AllocateNcRaPreambleReturnValue [struct]
    module.add_class('AllocateNcRaPreambleReturnValue', outer_class=root_module['ns3::NrEnbCmacSapProvider'])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::LcInfo [struct]
    module.add_class('LcInfo', outer_class=root_module['ns3::NrEnbCmacSapProvider'])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::RachConfig [struct]
    module.add_class('RachConfig', outer_class=root_module['ns3::NrEnbCmacSapProvider'])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::UeConfig [struct]
    module.add_class('UeConfig', outer_class=root_module['ns3::NrEnbCmacSapProvider'])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapUser [class]
    module.add_class('NrEnbCmacSapUser', allow_subclassing=True)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapUser::UeConfig [struct]
    module.add_class('UeConfig', outer_class=root_module['ns3::NrEnbCmacSapUser'])
    ## nr-enb-cphy-sap.h (module 'nr'): ns3::NrEnbCphySapProvider [class]
    module.add_class('NrEnbCphySapProvider', allow_subclassing=True)
    ## nr-enb-cphy-sap.h (module 'nr'): ns3::NrEnbCphySapUser [class]
    module.add_class('NrEnbCphySapUser')
    ## nr-enb-phy-sap.h (module 'nr'): ns3::NrEnbPhySapProvider [class]
    module.add_class('NrEnbPhySapProvider', allow_subclassing=True)
    ## nr-enb-phy-sap.h (module 'nr'): ns3::NrEnbPhySapUser [class]
    module.add_class('NrEnbPhySapUser', allow_subclassing=True)
    ## nr-common.h (module 'nr'): ns3::NrFfConverter [class]
    module.add_class('NrFfConverter')
    ## nr-ffr-rrc-sap.h (module 'nr'): ns3::NrFfrRrcSapProvider [class]
    module.add_class('NrFfrRrcSapProvider', allow_subclassing=True)
    ## nr-ffr-rrc-sap.h (module 'nr'): ns3::NrFfrRrcSapUser [class]
    module.add_class('NrFfrRrcSapUser', allow_subclassing=True)
    ## nr-ffr-sap.h (module 'nr'): ns3::NrFfrSapProvider [class]
    module.add_class('NrFfrSapProvider', allow_subclassing=True)
    ## nr-ffr-sap.h (module 'nr'): ns3::NrFfrSapUser [class]
    module.add_class('NrFfrSapUser')
    ## nr-common.h (module 'nr'): ns3::NrFlowId_t [struct]
    module.add_class('NrFlowId_t')
    ## nr-global-pathloss-database.h (module 'nr'): ns3::NrGlobalPathlossDatabase [class]
    module.add_class('NrGlobalPathlossDatabase', allow_subclassing=True)
    ## nr-handover-management-sap.h (module 'nr'): ns3::NrHandoverManagementSapProvider [class]
    module.add_class('NrHandoverManagementSapProvider', allow_subclassing=True)
    ## nr-handover-management-sap.h (module 'nr'): ns3::NrHandoverManagementSapUser [class]
    module.add_class('NrHandoverManagementSapUser', allow_subclassing=True)
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider [class]
    module.add_class('NrMacSapProvider', allow_subclassing=True)
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::ReportBufferStatusParameters [struct]
    module.add_class('ReportBufferStatusParameters', outer_class=root_module['ns3::NrMacSapProvider'])
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::TransmitPduParameters [struct]
    module.add_class('TransmitPduParameters', outer_class=root_module['ns3::NrMacSapProvider'])
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapUser [class]
    module.add_class('NrMacSapUser', allow_subclassing=True)
    ## nr-mi-error-model.h (module 'nr'): ns3::NrMiErrorModel [class]
    module.add_class('NrMiErrorModel')
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapProvider [class]
    module.add_class('NrPdcpSapProvider', allow_subclassing=True)
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapProvider::TransmitPdcpSduParameters [struct]
    module.add_class('TransmitPdcpSduParameters', outer_class=root_module['ns3::NrPdcpSapProvider'])
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapUser [class]
    module.add_class('NrPdcpSapUser', allow_subclassing=True)
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapUser::ReceivePdcpSduParameters [struct]
    module.add_class('ReceivePdcpSduParameters', outer_class=root_module['ns3::NrPdcpSapUser'])
    ## nr-rlc-sap.h (module 'nr'): ns3::NrRlcSapProvider [class]
    module.add_class('NrRlcSapProvider', allow_subclassing=True)
    ## nr-rlc-sap.h (module 'nr'): ns3::NrRlcSapProvider::TransmitPdcpPduParameters [struct]
    module.add_class('TransmitPdcpPduParameters', outer_class=root_module['ns3::NrRlcSapProvider'])
    ## nr-rlc-sap.h (module 'nr'): ns3::NrRlcSapUser [class]
    module.add_class('NrRlcSapUser', allow_subclassing=True)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap [class]
    module.add_class('NrRrcSap')
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReestablishmentCause [enumeration]
    module.add_enum('ReestablishmentCause', ['RECONFIGURATION_FAILURE', 'HANDOVER_FAILURE', 'OTHER_FAILURE'], outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AntennaInfoDedicated [struct]
    module.add_class('AntennaInfoDedicated', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AsConfig [struct]
    module.add_class('AsConfig', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::BlackCellsToAddMod [struct]
    module.add_class('BlackCellsToAddMod', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CarrierBandwidthEutra [struct]
    module.add_class('CarrierBandwidthEutra', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CarrierFreqEutra [struct]
    module.add_class('CarrierFreqEutra', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellAccessRelatedInfo [struct]
    module.add_class('CellAccessRelatedInfo', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellSelectionInfo [struct]
    module.add_class('CellSelectionInfo', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellsToAddMod [struct]
    module.add_class('CellsToAddMod', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CgiInfo [struct]
    module.add_class('CgiInfo', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::DrbToAddMod [struct]
    module.add_class('DrbToAddMod', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::FreqInfo [struct]
    module.add_class('FreqInfo', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::HandoverPreparationInfo [struct]
    module.add_class('HandoverPreparationInfo', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::LogicalChannelConfig [struct]
    module.add_class('LogicalChannelConfig', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MasterInformationBlock [struct]
    module.add_class('MasterInformationBlock', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig [struct]
    module.add_class('MeasConfig', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasGapConfig [struct]
    module.add_class('MeasGapConfig', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasGapConfig [enumeration]
    module.add_enum('', ['SETUP', 'RESET'], outer_class=root_module['ns3::NrRrcSap::MeasGapConfig'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasGapConfig [enumeration]
    module.add_enum('', ['GP0', 'GP1'], outer_class=root_module['ns3::NrRrcSap::MeasGapConfig'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasIdToAddMod [struct]
    module.add_class('MeasIdToAddMod', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra [struct]
    module.add_class('MeasObjectEutra', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectToAddMod [struct]
    module.add_class('MeasObjectToAddMod', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResultEutra [struct]
    module.add_class('MeasResultEutra', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResults [struct]
    module.add_class('MeasResults', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasurementReport [struct]
    module.add_class('MeasurementReport', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityControlInfo [struct]
    module.add_class('MobilityControlInfo', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityStateParameters [struct]
    module.add_class('MobilityStateParameters', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PdschConfigCommon [struct]
    module.add_class('PdschConfigCommon', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PdschConfigDedicated [struct]
    module.add_class('PdschConfigDedicated', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PdschConfigDedicated [enumeration]
    module.add_enum('', ['dB_6', 'dB_4dot77', 'dB_3', 'dB_1dot77', 'dB0', 'dB1', 'dB2', 'dB3'], outer_class=root_module['ns3::NrRrcSap::PdschConfigDedicated'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysCellIdRange [struct]
    module.add_class('PhysCellIdRange', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysicalConfigDedicated [struct]
    module.add_class('PhysicalConfigDedicated', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PlmnIdentityInfo [struct]
    module.add_class('PlmnIdentityInfo', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PreambleInfo [struct]
    module.add_class('PreambleInfo', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::QuantityConfig [struct]
    module.add_class('QuantityConfig', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RaSupervisionInfo [struct]
    module.add_class('RaSupervisionInfo', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RachConfigCommon [struct]
    module.add_class('RachConfigCommon', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RachConfigDedicated [struct]
    module.add_class('RachConfigDedicated', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigCommon [struct]
    module.add_class('RadioResourceConfigCommon', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigCommonSib [struct]
    module.add_class('RadioResourceConfigCommonSib', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigDedicated [struct]
    module.add_class('RadioResourceConfigDedicated', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReestabUeIdentity [struct]
    module.add_class('ReestabUeIdentity', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra [struct]
    module.add_class('ReportConfigEutra', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra [enumeration]
    module.add_enum('', ['EVENT', 'PERIODICAL'], outer_class=root_module['ns3::NrRrcSap::ReportConfigEutra'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra [enumeration]
    module.add_enum('', ['EVENT_A1', 'EVENT_A2', 'EVENT_A3', 'EVENT_A4', 'EVENT_A5'], outer_class=root_module['ns3::NrRrcSap::ReportConfigEutra'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra [enumeration]
    module.add_enum('', ['REPORT_STRONGEST_CELLS', 'REPORT_CGI'], outer_class=root_module['ns3::NrRrcSap::ReportConfigEutra'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra [enumeration]
    module.add_enum('', ['RSRP', 'RSRQ'], outer_class=root_module['ns3::NrRrcSap::ReportConfigEutra'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra [enumeration]
    module.add_enum('', ['SAME_AS_TRIGGER_QUANTITY', 'BOTH'], outer_class=root_module['ns3::NrRrcSap::ReportConfigEutra'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra [enumeration]
    module.add_enum('', ['MN220', 'MS240', 'MS480', 'MS640', 'MN2024', 'MS2048', 'MS5120', 'MN20240', 'MIN1', 'MIN6', 'MIN12', 'MIN30', 'MIN60', 'SPARE3', 'SPARE2', 'SPARE1'], outer_class=root_module['ns3::NrRrcSap::ReportConfigEutra'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigToAddMod [struct]
    module.add_class('ReportConfigToAddMod', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RlcConfig [struct]
    module.add_class('RlcConfig', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RlcConfig [enumeration]
    module.add_enum('', ['AM', 'UM_BI_DIRECTIONAL', 'UM_UNI_DIRECTIONAL_UL', 'UM_UNI_DIRECTIONAL_DL'], outer_class=root_module['ns3::NrRrcSap::RlcConfig'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfiguration [struct]
    module.add_class('RrcConnectionReconfiguration', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfigurationCompleted [struct]
    module.add_class('RrcConnectionReconfigurationCompleted', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishment [struct]
    module.add_class('RrcConnectionReestablishment', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentComplete [struct]
    module.add_class('RrcConnectionReestablishmentComplete', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentReject [struct]
    module.add_class('RrcConnectionReestablishmentReject', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentRequest [struct]
    module.add_class('RrcConnectionReestablishmentRequest', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReject [struct]
    module.add_class('RrcConnectionReject', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionRelease [struct]
    module.add_class('RrcConnectionRelease', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionRequest [struct]
    module.add_class('RrcConnectionRequest', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionSetup [struct]
    module.add_class('RrcConnectionSetup', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionSetupCompleted [struct]
    module.add_class('RrcConnectionSetupCompleted', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SoundingRsUlConfigCommon [struct]
    module.add_class('SoundingRsUlConfigCommon', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SoundingRsUlConfigCommon [enumeration]
    module.add_enum('', ['SETUP', 'RESET'], outer_class=root_module['ns3::NrRrcSap::SoundingRsUlConfigCommon'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SoundingRsUlConfigDedicated [struct]
    module.add_class('SoundingRsUlConfigDedicated', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SoundingRsUlConfigDedicated [enumeration]
    module.add_enum('', ['SETUP', 'RESET'], outer_class=root_module['ns3::NrRrcSap::SoundingRsUlConfigDedicated'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SpeedStatePars [struct]
    module.add_class('SpeedStatePars', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SpeedStatePars [enumeration]
    module.add_enum('', ['SETUP', 'RESET'], outer_class=root_module['ns3::NrRrcSap::SpeedStatePars'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SpeedStateScaleFactors [struct]
    module.add_class('SpeedStateScaleFactors', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SrbToAddMod [struct]
    module.add_class('SrbToAddMod', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformation [struct]
    module.add_class('SystemInformation', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformationBlockType1 [struct]
    module.add_class('SystemInformationBlockType1', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformationBlockType2 [struct]
    module.add_class('SystemInformationBlockType2', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ThresholdEutra [struct]
    module.add_class('ThresholdEutra', outer_class=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ThresholdEutra [enumeration]
    module.add_enum('', ['THRESHOLD_RSRP', 'THRESHOLD_RSRQ'], outer_class=root_module['ns3::NrRrcSap::ThresholdEutra'])
    ## nr-chunk-processor.h (module 'nr'): ns3::NrSpectrumValueCatcher [class]
    module.add_class('NrSpectrumValueCatcher')
    ## nr-spectrum-value-helper.h (module 'nr'): ns3::NrSpectrumValueHelper [class]
    module.add_class('NrSpectrumValueHelper')
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider [class]
    module.add_class('NrUeCmacSapProvider', allow_subclassing=True)
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::LogicalChannelConfig [struct]
    module.add_class('LogicalChannelConfig', outer_class=root_module['ns3::NrUeCmacSapProvider'])
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::RachConfig [struct]
    module.add_class('RachConfig', outer_class=root_module['ns3::NrUeCmacSapProvider'])
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapUser [class]
    module.add_class('NrUeCmacSapUser', allow_subclassing=True)
    ## nr-common.h (module 'nr'): ns3::NrUeConfig_t [struct]
    module.add_class('NrUeConfig_t')
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapProvider [class]
    module.add_class('NrUeCphySapProvider', allow_subclassing=True)
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapUser [class]
    module.add_class('NrUeCphySapUser', allow_subclassing=True)
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapUser::UeMeasurementsElement [struct]
    module.add_class('UeMeasurementsElement', outer_class=root_module['ns3::NrUeCphySapUser'])
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapUser::UeMeasurementsParameters [struct]
    module.add_class('UeMeasurementsParameters', outer_class=root_module['ns3::NrUeCphySapUser'])
    ## nr-ue-phy-sap.h (module 'nr'): ns3::NrUePhySapProvider [class]
    module.add_class('NrUePhySapProvider', allow_subclassing=True)
    ## nr-ue-phy-sap.h (module 'nr'): ns3::NrUePhySapUser [class]
    module.add_class('NrUePhySapUser', allow_subclassing=True)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapProvider [class]
    module.add_class('NrUeRrcSapProvider', parent=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapProvider::CompleteSetupParameters [struct]
    module.add_class('CompleteSetupParameters', outer_class=root_module['ns3::NrUeRrcSapProvider'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapUser [class]
    module.add_class('NrUeRrcSapUser', parent=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapUser::SetupParameters [struct]
    module.add_class('SetupParameters', outer_class=root_module['ns3::NrUeRrcSapUser'])
    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
    module.add_class('Mac48Address', import_from_module='ns.network')
    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
    root_module['ns3::Mac48Address'].implicitly_converts_to(root_module['ns3::Address'])
    ## ff-mac-common.h (module 'nr'): ns3::MacCeListElement_s [struct]
    module.add_class('MacCeListElement_s')
    ## ff-mac-common.h (module 'nr'): ns3::MacCeListElement_s::MacCeType_e [enumeration]
    module.add_enum('MacCeType_e', ['BSR', 'PHR', 'CRNTI'], outer_class=root_module['ns3::MacCeListElement_s'])
    ## ff-mac-common.h (module 'nr'): ns3::MacCeValue_u [struct]
    module.add_class('MacCeValue_u')
    ## names.h (module 'core'): ns3::Names [class]
    module.add_class('Names', import_from_module='ns.core')
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer [class]
    module.add_class('NetDeviceContainer', import_from_module='ns.network')
    ## node-container.h (module 'network'): ns3::NodeContainer [class]
    module.add_class('NodeContainer', import_from_module='ns.network')
    ## object-base.h (module 'core'): ns3::ObjectBase [class]
    module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
    ## object.h (module 'core'): ns3::ObjectDeleter [struct]
    module.add_class('ObjectDeleter', import_from_module='ns.core')
    ## object-factory.h (module 'core'): ns3::ObjectFactory [class]
    module.add_class('ObjectFactory', import_from_module='ns.core')
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata [class]
    module.add_class('PacketMetadata', import_from_module='ns.network')
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item [struct]
    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item [enumeration]
    module.add_enum('', ['PAYLOAD', 'HEADER', 'TRAILER'], outer_class=root_module['ns3::PacketMetadata::Item'], import_from_module='ns.network')
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator [class]
    module.add_class('ItemIterator', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
    ## packet.h (module 'network'): ns3::PacketTagIterator [class]
    module.add_class('PacketTagIterator', import_from_module='ns.network')
    ## packet.h (module 'network'): ns3::PacketTagIterator::Item [class]
    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagIterator'])
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList [class]
    module.add_class('PacketTagList', import_from_module='ns.network')
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData [struct]
    module.add_class('TagData', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagList'])
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData_e [enumeration]
    module.add_enum('TagData_e', ['MAX_SIZE'], outer_class=root_module['ns3::PacketTagList::TagData'], import_from_module='ns.network')
    ## ff-mac-common.h (module 'nr'): ns3::PagingInfoListElement_s [struct]
    module.add_class('PagingInfoListElement_s')
    ## log.h (module 'core'): ns3::ParameterLogger [class]
    module.add_class('ParameterLogger', import_from_module='ns.core')
    ## ff-mac-common.h (module 'nr'): ns3::PhichListElement_s [struct]
    module.add_class('PhichListElement_s')
    ## ff-mac-common.h (module 'nr'): ns3::PhichListElement_s::Phich_e [enumeration]
    module.add_enum('Phich_e', ['ACK', 'NACK'], outer_class=root_module['ns3::PhichListElement_s'])
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters [struct]
    module.add_class('NrPhyReceptionStatParameters')
    ## nr-common.h (module 'nr'): ns3::NrPhyTransmissionStatParameters [struct]
    module.add_class('NrPhyTransmissionStatParameters')
    ## ff-mac-common.h (module 'nr'): ns3::RachListElement_s [struct]
    module.add_class('RachListElement_s')
    ## nr-radio-bearer-stats-connector.h (module 'nr'): ns3::NrRadioBearerStatsConnector [class]
    module.add_class('NrRadioBearerStatsConnector')
    ## nr-rrc-protocol-real.h (module 'nr'): ns3::RealProtocolRlcSapUser [class]
    module.add_class('RealProtocolRlcSapUser', parent=root_module['ns3::NrRlcSapUser'])
    ## ff-mac-common.h (module 'nr'): ns3::RlcPduListElement_s [struct]
    module.add_class('RlcPduListElement_s')
    ## ff-mac-common.h (module 'nr'): ns3::SbMeasResult_s [struct]
    module.add_class('SbMeasResult_s')
    ## nr-rlc-sequence-number.h (module 'nr'): ns3::SequenceNumber10 [class]
    module.add_class('SequenceNumber10')
    ## ff-mac-common.h (module 'nr'): ns3::SiConfiguration_s [struct]
    module.add_class('SiConfiguration_s')
    ## ff-mac-common.h (module 'nr'): ns3::SiMessageListElement_s [struct]
    module.add_class('SiMessageListElement_s')
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simulator.h (module 'core'): ns3::Simulator [class]
    module.add_class('Simulator', destructor_visibility='private', import_from_module='ns.core')
    ## ff-mac-common.h (module 'nr'): ns3::SpsConfig_s [struct]
    module.add_class('SpsConfig_s')
    ## ff-mac-common.h (module 'nr'): ns3::SrConfig_s [struct]
    module.add_class('SrConfig_s')
    ## ff-mac-common.h (module 'nr'): ns3::SrListElement_s [struct]
    module.add_class('SrListElement_s')
    ## data-calculator.h (module 'stats'): ns3::StatisticalSummary [class]
    module.add_class('StatisticalSummary', allow_subclassing=True, import_from_module='ns.stats')
    ## tag.h (module 'network'): ns3::Tag [class]
    module.add_class('Tag', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
    ## tag-buffer.h (module 'network'): ns3::TagBuffer [class]
    module.add_class('TagBuffer', import_from_module='ns.network')
    ## nr-spectrum-phy.h (module 'nr'): ns3::TbId_t [struct]
    module.add_class('TbId_t')
    ## nr-mi-error-model.h (module 'nr'): ns3::TbStats_t [struct]
    module.add_class('TbStats_t')
    ## nstime.h (module 'core'): ns3::TimeWithUnit [class]
    module.add_class('TimeWithUnit', import_from_module='ns.core')
    ## nr-common.h (module 'nr'): ns3::NrTransmissionModesLayers [class]
    module.add_class('NrTransmissionModesLayers')
    ## type-id.h (module 'core'): ns3::TypeId [class]
    module.add_class('TypeId', import_from_module='ns.core')
    ## type-id.h (module 'core'): ns3::TypeId::AttributeFlag [enumeration]
    module.add_enum('AttributeFlag', ['ATTR_GET', 'ATTR_SET', 'ATTR_CONSTRUCT', 'ATTR_SGC'], outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation [struct]
    module.add_class('AttributeInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation [struct]
    module.add_class('TraceSourceInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
    ## ff-mac-common.h (module 'nr'): ns3::UeCapabilities_s [struct]
    module.add_class('UeCapabilities_s')
    ## ff-mac-common.h (module 'nr'): ns3::UeSelected_s [struct]
    module.add_class('UeSelected_s')
    ## ff-mac-common.h (module 'nr'): ns3::UlCqi_s [struct]
    module.add_class('UlCqi_s')
    ## ff-mac-common.h (module 'nr'): ns3::UlCqi_s::Type_e [enumeration]
    module.add_enum('Type_e', ['SRS', 'PUSCH', 'PUCCH_1', 'PUCCH_2', 'PRACH'], outer_class=root_module['ns3::UlCqi_s'])
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s [struct]
    module.add_class('UlDciListElement_s')
    ## ff-mac-common.h (module 'nr'): ns3::UlGrant_s [struct]
    module.add_class('UlGrant_s')
    ## ff-mac-common.h (module 'nr'): ns3::UlInfoListElement_s [struct]
    module.add_class('UlInfoListElement_s')
    ## ff-mac-common.h (module 'nr'): ns3::UlInfoListElement_s::ReceptionStatus_e [enumeration]
    module.add_enum('ReceptionStatus_e', ['Ok', 'NotOk', 'NotValid'], outer_class=root_module['ns3::UlInfoListElement_s'])
    ## nr-global-pathloss-database.h (module 'nr'): ns3::UplinkNrGlobalPathlossDatabase [class]
    module.add_class('UplinkNrGlobalPathlossDatabase', parent=root_module['ns3::NrGlobalPathlossDatabase'])
    ## vector.h (module 'core'): ns3::Vector2D [class]
    module.add_class('Vector2D', import_from_module='ns.core')
    ## vector.h (module 'core'): ns3::Vector3D [class]
    module.add_class('Vector3D', import_from_module='ns.core')
    ## ff-mac-common.h (module 'nr'): ns3::VendorSpecificListElement_s [struct]
    module.add_class('VendorSpecificListElement_s')
    ## empty.h (module 'core'): ns3::empty [class]
    module.add_class('empty', import_from_module='ns.core')
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): ns3::fdbetsFlowPerf_t [struct]
    module.add_class('fdbetsFlowPerf_t')
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::fdtbfqsFlowPerf_t [struct]
    module.add_class('fdtbfqsFlowPerf_t')
    ## int64x64-double.h (module 'core'): ns3::int64x64_t [class]
    module.add_class('int64x64_t', import_from_module='ns.core')
    ## int64x64-double.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
    module.add_enum('impl_type', ['int128_impl', 'cairo_impl', 'ld_impl'], outer_class=root_module['ns3::int64x64_t'], import_from_module='ns.core')
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): ns3::pfsFlowPerf_t [struct]
    module.add_class('pfsFlowPerf_t')
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::pssFlowPerf_t [struct]
    module.add_class('pssFlowPerf_t')
    ## nr-spectrum-phy.h (module 'nr'): ns3::tbInfo_t [struct]
    module.add_class('tbInfo_t')
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): ns3::tdbetsFlowPerf_t [struct]
    module.add_class('tdbetsFlowPerf_t')
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::tdtbfqsFlowPerf_t [struct]
    module.add_class('tdtbfqsFlowPerf_t')
    ## chunk.h (module 'network'): ns3::Chunk [class]
    module.add_class('Chunk', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
    ## nr-global-pathloss-database.h (module 'nr'): ns3::DownlinkNrGlobalPathlossDatabase [class]
    module.add_class('DownlinkNrGlobalPathlossDatabase', parent=root_module['ns3::NrGlobalPathlossDatabase'])
    ## eps-bearer-tag.h (module 'nr'): ns3::EpsBearerTag [class]
    module.add_class('EpsBearerTag', parent=root_module['ns3::Tag'])##
    ## qos-flow-tag.h (module 'nr'): ns3::QosFlowTag [class]
    module.add_class('QosFlowTag', parent=root_module['ns3::Tag'])
    ## header.h (module 'network'): ns3::Header [class]
    module.add_class('Header', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header [class]
    module.add_class('Ipv4Header', import_from_module='ns.internet', parent=root_module['ns3::Header'])
    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::DscpType [enumeration]
    module.add_enum('DscpType', ['DscpDefault', 'DSCP_CN2', 'DSCP_AF11', 'DSCP_AF12', 'DSCP_AF13', 'DSCP_CS2', 'DSCP_AF21', 'DSCP_AF22', 'DSCP_AF23', 'DSCP_CS3', 'DSCP_AF31', 'DSCP_AF32', 'DSCP_AF33', 'DSCP_CS4', 'DSCP_AF41', 'DSCP_AF42', 'DSCP_AF43', 'DSCP_CS5', 'DSCP_EF', 'DSCP_CS6', 'DSCP_CS7'], outer_class=root_module['ns3::Ipv4Header'], import_from_module='ns.internet')
    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::EcnType [enumeration]
    module.add_enum('EcnType', ['ECN_NotECT', 'ECN_ECT1', 'ECN_ECT0', 'ECN_CE'], outer_class=root_module['ns3::Ipv4Header'], import_from_module='ns.internet')
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapProvider [class]
    module.add_class('NrEnbRrcSapProvider', parent=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapProvider::CompleteSetupUeParameters [struct]
    module.add_class('CompleteSetupUeParameters', outer_class=root_module['ns3::NrEnbRrcSapProvider'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapUser [class]
    module.add_class('NrEnbRrcSapUser', parent=root_module['ns3::NrRrcSap'])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapUser::SetupUeParameters [struct]
    module.add_class('SetupUeParameters', outer_class=root_module['ns3::NrEnbRrcSapUser'])
    ## nr-pdcp-header.h (module 'nr'): ns3::NrPdcpHeader [class]
    module.add_class('NrPdcpHeader', parent=root_module['ns3::Header'])
    ## nr-pdcp-header.h (module 'nr'): ns3::NrPdcpHeader::DcBit_t [enumeration]
    module.add_enum('DcBit_t', ['CONTROL_PDU', 'DATA_PDU'], outer_class=root_module['ns3::NrPdcpHeader'])
    ## nr-phy-tag.h (module 'nr'): ns3::NrPhyTag [class]
    module.add_class('NrPhyTag', parent=root_module['ns3::Tag'])
    ## nr-radio-bearer-tag.h (module 'nr'): ns3::NrRadioBearerTag [class]
    module.add_class('NrRadioBearerTag', parent=root_module['ns3::Tag'])
    ## nr-rlc-am-header.h (module 'nr'): ns3::NrRlcAmHeader [class]
    module.add_class('NrRlcAmHeader', parent=root_module['ns3::Header'])
    ## nr-rlc-am-header.h (module 'nr'): ns3::NrRlcAmHeader::DataControlPdu_t [enumeration]
    module.add_enum('DataControlPdu_t', ['CONTROL_PDU', 'DATA_PDU'], outer_class=root_module['ns3::NrRlcAmHeader'])
    ## nr-rlc-am-header.h (module 'nr'): ns3::NrRlcAmHeader::ControPduType_t [enumeration]
    module.add_enum('ControPduType_t', ['STATUS_PDU'], outer_class=root_module['ns3::NrRlcAmHeader'])
    ## nr-rlc-am-header.h (module 'nr'): ns3::NrRlcAmHeader::FramingInfoFirstByte_t [enumeration]
    module.add_enum('FramingInfoFirstByte_t', ['FIRST_BYTE', 'NO_FIRST_BYTE'], outer_class=root_module['ns3::NrRlcAmHeader'])
    ## nr-rlc-am-header.h (module 'nr'): ns3::NrRlcAmHeader::FramingInfoLastByte_t [enumeration]
    module.add_enum('FramingInfoLastByte_t', ['LAST_BYTE', 'NO_LAST_BYTE'], outer_class=root_module['ns3::NrRlcAmHeader'])
    ## nr-rlc-am-header.h (module 'nr'): ns3::NrRlcAmHeader::ExtensionBit_t [enumeration]
    module.add_enum('ExtensionBit_t', ['DATA_FIELD_FOLLOWS', 'E_LI_FIELDS_FOLLOWS'], outer_class=root_module['ns3::NrRlcAmHeader'])
    ## nr-rlc-am-header.h (module 'nr'): ns3::NrRlcAmHeader::ResegmentationFlag_t [enumeration]
    module.add_enum('ResegmentationFlag_t', ['PDU', 'SEGMENT'], outer_class=root_module['ns3::NrRlcAmHeader'])
    ## nr-rlc-am-header.h (module 'nr'): ns3::NrRlcAmHeader::PollingBit_t [enumeration]
    module.add_enum('PollingBit_t', ['STATUS_REPORT_NOT_REQUESTED', 'STATUS_REPORT_IS_REQUESTED'], outer_class=root_module['ns3::NrRlcAmHeader'])
    ## nr-rlc-am-header.h (module 'nr'): ns3::NrRlcAmHeader::LastSegmentFlag_t [enumeration]
    module.add_enum('LastSegmentFlag_t', ['NO_LAST_PDU_SEGMENT', 'LAST_PDU_SEGMENT'], outer_class=root_module['ns3::NrRlcAmHeader'])
    ## nr-rlc-header.h (module 'nr'): ns3::NrRlcHeader [class]
    module.add_class('NrRlcHeader', parent=root_module['ns3::Header'])
    ## nr-rlc-header.h (module 'nr'): ns3::NrRlcHeader::ExtensionBit_t [enumeration]
    module.add_enum('ExtensionBit_t', ['DATA_FIELD_FOLLOWS', 'E_LI_FIELDS_FOLLOWS'], outer_class=root_module['ns3::NrRlcHeader'])
    ## nr-rlc-header.h (module 'nr'): ns3::NrRlcHeader::FramingInfoFirstByte_t [enumeration]
    module.add_enum('FramingInfoFirstByte_t', ['FIRST_BYTE', 'NO_FIRST_BYTE'], outer_class=root_module['ns3::NrRlcHeader'])
    ## nr-rlc-header.h (module 'nr'): ns3::NrRlcHeader::FramingInfoLastByte_t [enumeration]
    module.add_enum('FramingInfoLastByte_t', ['LAST_BYTE', 'NO_LAST_BYTE'], outer_class=root_module['ns3::NrRlcHeader'])
    ## nr-rlc-sdu-status-tag.h (module 'nr'): ns3::NrRlcSduStatusTag [class]
    module.add_class('NrRlcSduStatusTag', parent=root_module['ns3::Tag'])
    ## nr-rlc-sdu-status-tag.h (module 'nr'): ns3::NrRlcSduStatusTag::SduStatus_t [enumeration]
    module.add_enum('SduStatus_t', ['FULL_SDU', 'FIRST_SEGMENT', 'MIDDLE_SEGMENT', 'LAST_SEGMENT', 'ANY_SEGMENT'], outer_class=root_module['ns3::NrRlcSduStatusTag'])
    ## object.h (module 'core'): ns3::Object [class]
    module.add_class('Object', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >'])
    ## object.h (module 'core'): ns3::Object::AggregateIterator [class]
    module.add_class('AggregateIterator', import_from_module='ns.core', outer_class=root_module['ns3::Object'])
    ## packet-burst.h (module 'network'): ns3::PacketBurst [class]
    module.add_class('PacketBurst', import_from_module='ns.network', parent=root_module['ns3::Object'])
    ## nr-pdcp-tag.h (module 'nr'): ns3::PdcpTag [class]
    module.add_class('PdcpTag', parent=root_module['ns3::Tag'])
    ## nr-radio-environment-map-helper.h (module 'nr'): ns3::NrRadioEnvironmentMapHelper [class]
    module.add_class('NrRadioEnvironmentMapHelper', parent=root_module['ns3::Object'])
    ## random-variable-stream.h (module 'core'): ns3::RandomVariableStream [class]
    module.add_class('RandomVariableStream', import_from_module='ns.core', parent=root_module['ns3::Object'])
    ## nr-rlc-tag.h (module 'nr'): ns3::RlcTag [class]
    module.add_class('RlcTag', parent=root_module['ns3::Tag'])
    ## random-variable-stream.h (module 'core'): ns3::SequentialRandomVariable [class]
    module.add_class('SequentialRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NgcTft, ns3::empty, ns3::DefaultDeleter<ns3::NgcTft> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::NgcTft', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NgcTft>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NgcTftClassifier, ns3::empty, ns3::DefaultDeleter<ns3::NgcTftClassifier> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::NgcTftClassifier', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NgcTftClassifier>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Ipv4MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Ipv4Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4Route>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrChunkProcessor, ns3::empty, ns3::DefaultDeleter<ns3::NrChunkProcessor> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::NrChunkProcessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NrChunkProcessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::NrControlMessage> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::NrControlMessage', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NrControlMessage>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::NrHarqPhy> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::NrHarqPhy', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NrHarqPhy>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::SpectrumModel', 'ns3::empty', 'ns3::DefaultDeleter<ns3::SpectrumModel>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::SpectrumSignalParameters', 'ns3::empty', 'ns3::DefaultDeleter<ns3::SpectrumSignalParameters>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::SpectrumValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::SpectrumValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::VendorSpecificValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::VendorSpecificValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrX2CellInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2CellInfo> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::NrX2CellInfo', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NrX2CellInfo>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrX2IfaceInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2IfaceInfo> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::NrX2IfaceInfo', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NrX2IfaceInfo>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
    ## socket.h (module 'network'): ns3::Socket [class]
    module.add_class('Socket', import_from_module='ns.network', parent=root_module['ns3::Object'])
    ## socket.h (module 'network'): ns3::Socket::SocketErrno [enumeration]
    module.add_enum('SocketErrno', ['ERROR_NOTERROR', 'ERROR_ISCONN', 'ERROR_NOTCONN', 'ERROR_MSGSIZE', 'ERROR_AGAIN', 'ERROR_SHUTDOWN', 'ERROR_OPNOTSUPP', 'ERROR_AFNOSUPPORT', 'ERROR_INVAL', 'ERROR_BADF', 'ERROR_NOROUTETOHOST', 'ERROR_NODEV', 'ERROR_ADDRNOTAVAIL', 'ERROR_ADDRINUSE', 'SOCKET_ERRNO_LAST'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
    ## socket.h (module 'network'): ns3::Socket::SocketType [enumeration]
    module.add_enum('SocketType', ['NS3_SOCK_STREAM', 'NS3_SOCK_SEQPACKET', 'NS3_SOCK_DGRAM', 'NS3_SOCK_RAW'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
    ## socket.h (module 'network'): ns3::SocketAddressTag [class]
    module.add_class('SocketAddressTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketIpTosTag [class]
    module.add_class('SocketIpTosTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketIpTtlTag [class]
    module.add_class('SocketIpTtlTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag [class]
    module.add_class('SocketIpv6HopLimitTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag [class]
    module.add_class('SocketIpv6TclassTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag [class]
    module.add_class('SocketSetDontFragmentTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## spectrum-interference.h (module 'spectrum'): ns3::SpectrumInterference [class]
    module.add_class('SpectrumInterference', import_from_module='ns.spectrum', parent=root_module['ns3::Object'])
    ## spectrum-model.h (module 'spectrum'): ns3::SpectrumModel [class]
    module.add_class('SpectrumModel', import_from_module='ns.spectrum', parent=root_module['ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> >'])
    ## spectrum-phy.h (module 'spectrum'): ns3::SpectrumPhy [class]
    module.add_class('SpectrumPhy', import_from_module='ns.spectrum', parent=root_module['ns3::Object'])
    ## spectrum-propagation-loss-model.h (module 'spectrum'): ns3::SpectrumPropagationLossModel [class]
    module.add_class('SpectrumPropagationLossModel', import_from_module='ns.spectrum', parent=root_module['ns3::Object'])
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters [struct]
    module.add_class('SpectrumSignalParameters', import_from_module='ns.spectrum', parent=root_module['ns3::SimpleRefCount< ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> >'])
    ## spectrum-value.h (module 'spectrum'): ns3::SpectrumValue [class]
    module.add_class('SpectrumValue', import_from_module='ns.spectrum', parent=root_module['ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> >'])
    ## nstime.h (module 'core'): ns3::Time [class]
    module.add_class('Time', import_from_module='ns.core')
    ## nstime.h (module 'core'): ns3::Time::Unit [enumeration]
    module.add_enum('Unit', ['Y', 'D', 'H', 'MIN', 'S', 'MS', 'US', 'NS', 'PS', 'FS', 'LAST'], outer_class=root_module['ns3::Time'], import_from_module='ns.core')
    ## nstime.h (module 'core'): ns3::Time [class]
    root_module['ns3::Time'].implicitly_converts_to(root_module['ns3::int64x64_t'])
    ## nr-trace-fading-loss-model.h (module 'nr'): ns3::NrTraceFadingLossModel [class]
    module.add_class('NrTraceFadingLossModel', parent=root_module['ns3::SpectrumPropagationLossModel'])
    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor [class]
    module.add_class('TraceSourceAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >'])
    ## trailer.h (module 'network'): ns3::Trailer [class]
    module.add_class('Trailer', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
    ## random-variable-stream.h (module 'core'): ns3::TriangularRandomVariable [class]
    module.add_class('TriangularRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## nr-enb-rrc.h (module 'nr'): ns3::UeManager [class]
    module.add_class('UeManager', parent=root_module['ns3::Object'])
    ## nr-enb-rrc.h (module 'nr'): ns3::UeManager::State [enumeration]
    module.add_enum('State', ['INITIAL_RANDOM_ACCESS', 'CONNECTION_SETUP', 'CONNECTION_REJECTED', 'CONNECTED_NORMALLY', 'CONNECTION_RECONFIGURATION', 'CONNECTION_REESTABLISHMENT', 'HANDOVER_PREPARATION', 'HANDOVER_JOINING', 'HANDOVER_PATH_SWITCH', 'HANDOVER_LEAVING', 'NUM_STATES'], outer_class=root_module['ns3::UeManager'])
    ## random-variable-stream.h (module 'core'): ns3::UniformRandomVariable [class]
    module.add_class('UniformRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## ff-mac-common.h (module 'nr'): ns3::VendorSpecificValue [struct]
    module.add_class('VendorSpecificValue', parent=root_module['ns3::SimpleRefCount< ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue> >'])
    ## random-variable-stream.h (module 'core'): ns3::WeibullRandomVariable [class]
    module.add_class('WeibullRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## ngc-x2.h (module 'nr'): ns3::NrX2CellInfo [class]
    module.add_class('NrX2CellInfo', parent=root_module['ns3::SimpleRefCount< ns3::NrX2CellInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2CellInfo> >'])
    ## ngc-x2.h (module 'nr'): ns3::NrX2IfaceInfo [class]
    module.add_class('NrX2IfaceInfo', parent=root_module['ns3::SimpleRefCount< ns3::NrX2IfaceInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2IfaceInfo> >'])
    ## random-variable-stream.h (module 'core'): ns3::ZetaRandomVariable [class]
    module.add_class('ZetaRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## random-variable-stream.h (module 'core'): ns3::ZipfRandomVariable [class]
    module.add_class('ZipfRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## application.h (module 'network'): ns3::Application [class]
    module.add_class('Application', import_from_module='ns.network', parent=root_module['ns3::Object'])
    ## nr-asn1-header.h (module 'nr'): ns3::NrAsn1Header [class]
    module.add_class('NrAsn1Header', parent=root_module['ns3::Header'])
    ## attribute.h (module 'core'): ns3::AttributeAccessor [class]
    module.add_class('AttributeAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >'])
    ## attribute.h (module 'core'): ns3::AttributeChecker [class]
    module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
    ## attribute.h (module 'core'): ns3::AttributeValue [class]
    module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
    ## boolean.h (module 'core'): ns3::BooleanChecker [class]
    module.add_class('BooleanChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## boolean.h (module 'core'): ns3::BooleanValue [class]
    module.add_class('BooleanValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## callback.h (module 'core'): ns3::CallbackChecker [class]
    module.add_class('CallbackChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## callback.h (module 'core'): ns3::CallbackImplBase [class]
    module.add_class('CallbackImplBase', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >'])
    ## callback.h (module 'core'): ns3::CallbackValue [class]
    module.add_class('CallbackValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## channel.h (module 'network'): ns3::Channel [class]
    module.add_class('Channel', import_from_module='ns.network', parent=root_module['ns3::Object'])
    ## random-variable-stream.h (module 'core'): ns3::ConstantRandomVariable [class]
    module.add_class('ConstantRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## data-calculator.h (module 'stats'): ns3::DataCalculator [class]
    module.add_class('DataCalculator', import_from_module='ns.stats', parent=root_module['ns3::Object'])
    ## data-output-interface.h (module 'stats'): ns3::DataOutputInterface [class]
    module.add_class('DataOutputInterface', import_from_module='ns.stats', parent=root_module['ns3::Object'])
    ## data-rate.h (module 'network'): ns3::DataRateChecker [class]
    module.add_class('DataRateChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## data-rate.h (module 'network'): ns3::DataRateValue [class]
    module.add_class('DataRateValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## random-variable-stream.h (module 'core'): ns3::DeterministicRandomVariable [class]
    module.add_class('DeterministicRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## double.h (module 'core'): ns3::DoubleValue [class]
    module.add_class('DoubleValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## random-variable-stream.h (module 'core'): ns3::EmpiricalRandomVariable [class]
    module.add_class('EmpiricalRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## attribute.h (module 'core'): ns3::EmptyAttributeValue [class]
    module.add_class('EmptyAttributeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## enum.h (module 'core'): ns3::EnumChecker [class]
    module.add_class('EnumChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## enum.h (module 'core'): ns3::EnumValue [class]
    module.add_class('EnumValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## ngc-enb-application.h (module 'nr'): ns3::NgcEnbApplication [class]
    module.add_class('NgcEnbApplication', parent=root_module['ns3::Application'])
    ## ngc-enb-application.h (module 'nr'): ns3::NgcEnbApplication::EpsFlowId_t [struct]
    module.add_class('EpsFlowId_t', outer_class=root_module['ns3::NgcEnbApplication'])
    ## ngc-helper.h (module 'nr'): ns3::NgcHelper [class]
    module.add_class('NgcHelper', parent=root_module['ns3::Object'])
    ## ngc-amf.h (module 'nr'): ns3::NgcAmf [class]
    module.add_class('NgcAmf', parent=root_module['ns3::Object'])
    ## ngc-smf-upf-application.h (module 'nr'): ns3::NgcSmfUpfApplication [class]
    module.add_class('NgcSmfUpfApplication', parent=root_module['ns3::Application'])
    ## ngc-tft.h (module 'nr'): ns3::NgcTft [class]
    module.add_class('NgcTft', parent=root_module['ns3::SimpleRefCount< ns3::NgcTft, ns3::empty, ns3::DefaultDeleter<ns3::NgcTft> >'])
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::Direction [enumeration]
    module.add_enum('Direction', ['DOWNLINK', 'UPLINK', 'BIDIRECTIONAL'], outer_class=root_module['ns3::NgcTft'])
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter [struct]
    module.add_class('PacketFilter', outer_class=root_module['ns3::NgcTft'])
    ## ngc-tft-classifier.h (module 'nr'): ns3::NgcTftClassifier [class]
    module.add_class('NgcTftClassifier', parent=root_module['ns3::SimpleRefCount< ns3::NgcTftClassifier, ns3::empty, ns3::DefaultDeleter<ns3::NgcTftClassifier> >'])
    ## ngc-ue-nas.h (module 'nr'): ns3::NgcUeNas [class]
    module.add_class('NgcUeNas', parent=root_module['ns3::Object'])
    ## ngc-ue-nas.h (module 'nr'): ns3::NgcUeNas::State [enumeration]
    module.add_enum('State', ['OFF', 'ATTACHING', 'IDLE_REGISTERED', 'CONNECTING_TO_NGC', 'ACTIVE', 'NUM_STATES'], outer_class=root_module['ns3::NgcUeNas'])
    ## ngc-x2.h (module 'nr'): ns3::NgcX2 [class]
    module.add_class('NgcX2', parent=root_module['ns3::Object'])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2HandoverPreparationFailureHeader [class]
    module.add_class('NgcX2HandoverPreparationFailureHeader', parent=root_module['ns3::Header'])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2HandoverRequestAckHeader [class]
    module.add_class('NgcX2HandoverRequestAckHeader', parent=root_module['ns3::Header'])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2HandoverRequestHeader [class]
    module.add_class('NgcX2HandoverRequestHeader', parent=root_module['ns3::Header'])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2Header [class]
    module.add_class('NgcX2Header', parent=root_module['ns3::Header'])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2Header::ProcedureCode_t [enumeration]
    module.add_enum('ProcedureCode_t', ['HandoverPreparation', 'LoadIndication', 'SnStatusTransfer', 'UeContextRelease', 'ResourceStatusReporting'], outer_class=root_module['ns3::NgcX2Header'])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2Header::TypeOfMessage_t [enumeration]
    module.add_enum('TypeOfMessage_t', ['InitiatingMessage', 'SuccessfulOutcome', 'UnsuccessfulOutcome'], outer_class=root_module['ns3::NgcX2Header'])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2LoadInformationHeader [class]
    module.add_class('NgcX2LoadInformationHeader', parent=root_module['ns3::Header'])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2ResourceStatusUpdateHeader [class]
    module.add_class('NgcX2ResourceStatusUpdateHeader', parent=root_module['ns3::Header'])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2SnStatusTransferHeader [class]
    module.add_class('NgcX2SnStatusTransferHeader', parent=root_module['ns3::Header'])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2UeContextReleaseHeader [class]
    module.add_class('NgcX2UeContextReleaseHeader', parent=root_module['ns3::Header'])
    ## random-variable-stream.h (module 'core'): ns3::ErlangRandomVariable [class]
    module.add_class('ErlangRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## event-impl.h (module 'core'): ns3::EventImpl [class]
    module.add_class('EventImpl', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >'])
    ## random-variable-stream.h (module 'core'): ns3::ExponentialRandomVariable [class]
    module.add_class('ExponentialRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## nr-ff-mac-scheduler.h (module 'nr'): ns3::NrFfMacScheduler [class]
    module.add_class('NrFfMacScheduler', parent=root_module['ns3::Object'])
    ## nr-ff-mac-scheduler.h (module 'nr'): ns3::NrFfMacScheduler::UlCqiFilter_t [enumeration]
    module.add_enum('UlCqiFilter_t', ['SRS_UL_CQI', 'PUSCH_UL_CQI', 'ALL_UL_CQI'], outer_class=root_module['ns3::NrFfMacScheduler'])
    ## random-variable-stream.h (module 'core'): ns3::GammaRandomVariable [class]
    module.add_class('GammaRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## ngc-gtpu-header.h (module 'nr'): ns3::NrGtpuHeader [class]
    module.add_class('NrGtpuHeader', parent=root_module['ns3::Header'])
    ## integer.h (module 'core'): ns3::IntegerValue [class]
    module.add_class('IntegerValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## ipv4.h (module 'internet'): ns3::Ipv4 [class]
    module.add_class('Ipv4', import_from_module='ns.internet', parent=root_module['ns3::Object'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker [class]
    module.add_class('Ipv4AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue [class]
    module.add_class('Ipv4AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker [class]
    module.add_class('Ipv4MaskChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue [class]
    module.add_class('Ipv4MaskValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute [class]
    module.add_class('Ipv4MulticastRoute', import_from_module='ns.internet', parent=root_module['ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >'])
    ## ipv4-route.h (module 'internet'): ns3::Ipv4Route [class]
    module.add_class('Ipv4Route', import_from_module='ns.internet', parent=root_module['ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker [class]
    module.add_class('Ipv6AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue [class]
    module.add_class('Ipv6AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker [class]
    module.add_class('Ipv6PrefixChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue [class]
    module.add_class('Ipv6PrefixValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## random-variable-stream.h (module 'core'): ns3::LogNormalRandomVariable [class]
    module.add_class('LogNormalRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## nr-amc.h (module 'nr'): ns3::NrAmc [class]
    module.add_class('NrAmc', parent=root_module['ns3::Object'])
    ## nr-amc.h (module 'nr'): ns3::NrAmc::AmcModel [enumeration]
    module.add_enum('AmcModel', ['PiroEW2010', 'MiErrorModel'], outer_class=root_module['ns3::NrAmc'])
    ## nr-anr.h (module 'nr'): ns3::NrAnr [class]
    module.add_class('NrAnr', parent=root_module['ns3::Object'])
    ## nr-chunk-processor.h (module 'nr'): ns3::NrChunkProcessor [class]
    module.add_class('NrChunkProcessor', parent=root_module['ns3::SimpleRefCount< ns3::NrChunkProcessor, ns3::empty, ns3::DefaultDeleter<ns3::NrChunkProcessor> >'])
    ## nr-control-messages.h (module 'nr'): ns3::NrControlMessage [class]
    module.add_class('NrControlMessage', parent=root_module['ns3::SimpleRefCount< ns3::NrControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::NrControlMessage> >'])
    ## nr-control-messages.h (module 'nr'): ns3::NrControlMessage::MessageType [enumeration]
    module.add_enum('MessageType', ['DL_DCI', 'UL_DCI', 'DL_CQI', 'UL_CQI', 'BSR', 'DL_HARQ', 'RACH_PREAMBLE', 'RAR', 'MIB', 'SIB1'], outer_class=root_module['ns3::NrControlMessage'])
    ## nr-enb-mac.h (module 'nr'): ns3::NrEnbMac [class]
    module.add_class('NrEnbMac', parent=root_module['ns3::Object'])
    ## nr-enb-rrc.h (module 'nr'): ns3::NrEnbRrc [class]
    module.add_class('NrEnbRrc', parent=root_module['ns3::Object'])
    ## nr-enb-rrc.h (module 'nr'): ns3::NrEnbRrc::NrEpsBearerToRlcMapping_t [enumeration]
    module.add_enum('NrEpsBearerToRlcMapping_t', ['RLC_SM_ALWAYS', 'RLC_UM_ALWAYS', 'RLC_AM_ALWAYS', 'PER_BASED'], outer_class=root_module['ns3::NrEnbRrc'])
    ## nr-rrc-protocol-ideal.h (module 'nr'): ns3::NrEnbRrcProtocolIdeal [class]
    module.add_class('NrEnbRrcProtocolIdeal', parent=root_module['ns3::Object'])
    ## nr-rrc-protocol-real.h (module 'nr'): ns3::NrEnbRrcProtocolReal [class]
    module.add_class('NrEnbRrcProtocolReal', parent=root_module['ns3::Object'])
    ## nr-ffr-algorithm.h (module 'nr'): ns3::NrFfrAlgorithm [class]
    module.add_class('NrFfrAlgorithm', parent=root_module['ns3::Object'])
    ## nr-ffr-distributed-algorithm.h (module 'nr'): ns3::NrFfrDistributedAlgorithm [class]
    module.add_class('NrFfrDistributedAlgorithm', parent=root_module['ns3::NrFfrAlgorithm'])
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): ns3::NrFfrEnhancedAlgorithm [class]
    module.add_class('NrFfrEnhancedAlgorithm', parent=root_module['ns3::NrFfrAlgorithm'])
    ## nr-ffr-soft-algorithm.h (module 'nr'): ns3::NrFfrSoftAlgorithm [class]
    module.add_class('NrFfrSoftAlgorithm', parent=root_module['ns3::NrFfrAlgorithm'])
    ## nr-fr-hard-algorithm.h (module 'nr'): ns3::NrFrHardAlgorithm [class]
    module.add_class('NrFrHardAlgorithm', parent=root_module['ns3::NrFfrAlgorithm'])
    ## nr-fr-no-op-algorithm.h (module 'nr'): ns3::NrFrNoOpAlgorithm [class]
    module.add_class('NrFrNoOpAlgorithm', parent=root_module['ns3::NrFfrAlgorithm'])
    ## nr-fr-soft-algorithm.h (module 'nr'): ns3::NrFrSoftAlgorithm [class]
    module.add_class('NrFrSoftAlgorithm', parent=root_module['ns3::NrFfrAlgorithm'])
    ## nr-fr-strict-algorithm.h (module 'nr'): ns3::NrFrStrictAlgorithm [class]
    module.add_class('NrFrStrictAlgorithm', parent=root_module['ns3::NrFfrAlgorithm'])
    ## nr-handover-algorithm.h (module 'nr'): ns3::NrHandoverAlgorithm [class]
    module.add_class('NrHandoverAlgorithm', parent=root_module['ns3::Object'])
    ## nr-harq-phy.h (module 'nr'): ns3::NrHarqPhy [class]
    module.add_class('NrHarqPhy', parent=root_module['ns3::SimpleRefCount< ns3::NrHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::NrHarqPhy> >'])
    ## nr-helper.h (module 'nr'): ns3::NrHelper [class]
    module.add_class('NrHelper', parent=root_module['ns3::Object'])
    ## nr-hex-grid-enb-topology-helper.h (module 'nr'): ns3::NrHexGridEnbTopologyHelper [class]
    module.add_class('NrHexGridEnbTopologyHelper', parent=root_module['ns3::Object'])
    ## nr-interference.h (module 'nr'): ns3::NrInterference [class]
    module.add_class('NrInterference', parent=root_module['ns3::Object'])
    ## nr-pdcp.h (module 'nr'): ns3::NrPdcp [class]
    module.add_class('NrPdcp', parent=root_module['ns3::Object'])
    ## nr-pdcp.h (module 'nr'): ns3::NrPdcp::Status [struct]
    module.add_class('Status', outer_class=root_module['ns3::NrPdcp'])
    ## nr-phy.h (module 'nr'): ns3::NrPhy [class]
    module.add_class('NrPhy', parent=root_module['ns3::Object'])
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrRadioBearerInfo [class]
    module.add_class('NrRadioBearerInfo', parent=root_module['ns3::Object'])
    ## nr-rlc.h (module 'nr'): ns3::NrRlc [class]
    module.add_class('NrRlc', parent=root_module['ns3::Object'])
    ## nr-rlc-am.h (module 'nr'): ns3::NrRlcAm [class]
    module.add_class('NrRlcAm', parent=root_module['ns3::NrRlc'])
    ## nr-rlc.h (module 'nr'): ns3::NrRlcSm [class]
    module.add_class('NrRlcSm', parent=root_module['ns3::NrRlc'])
    ## nr-rlc-tm.h (module 'nr'): ns3::NrRlcTm [class]
    module.add_class('NrRlcTm', parent=root_module['ns3::NrRlc'])
    ## nr-rlc-um.h (module 'nr'): ns3::NrRlcUm [class]
    module.add_class('NrRlcUm', parent=root_module['ns3::NrRlc'])
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrSignalingRadioBearerInfo [class]
    module.add_class('NrSignalingRadioBearerInfo', parent=root_module['ns3::NrRadioBearerInfo'])
    ## nr-spectrum-phy.h (module 'nr'): ns3::NrSpectrumPhy [class]
    module.add_class('NrSpectrumPhy', parent=root_module['ns3::SpectrumPhy'])
    ## nr-spectrum-phy.h (module 'nr'): ns3::NrSpectrumPhy::State [enumeration]
    module.add_enum('State', ['IDLE', 'TX_DL_CTRL', 'TX_DATA', 'TX_UL_SRS', 'RX_DL_CTRL', 'RX_DATA', 'RX_UL_SRS'], outer_class=root_module['ns3::NrSpectrumPhy'])
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParameters [struct]
    module.add_class('NrSpectrumSignalParameters', parent=root_module['ns3::SpectrumSignalParameters'])
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersDataFrame [struct]
    module.add_class('NrSpectrumSignalParametersDataFrame', parent=root_module['ns3::SpectrumSignalParameters'])
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersDlCtrlFrame [struct]
    module.add_class('NrSpectrumSignalParametersDlCtrlFrame', parent=root_module['ns3::SpectrumSignalParameters'])
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersUlSrsFrame [struct]
    module.add_class('NrSpectrumSignalParametersUlSrsFrame', parent=root_module['ns3::SpectrumSignalParameters'])
    ## nr-stats-calculator.h (module 'nr'): ns3::NrStatsCalculator [class]
    module.add_class('NrStatsCalculator', parent=root_module['ns3::Object'])
    ## nr-ue-mac.h (module 'nr'): ns3::NrUeMac [class]
    module.add_class('NrUeMac', parent=root_module['ns3::Object'])
    ## nr-ue-phy.h (module 'nr'): ns3::NrUePhy [class]
    module.add_class('NrUePhy', parent=root_module['ns3::NrPhy'])
    ## nr-ue-phy.h (module 'nr'): ns3::NrUePhy::State [enumeration]
    module.add_enum('State', ['CELL_SEARCH', 'SYNCHRONIZED', 'NUM_STATES'], outer_class=root_module['ns3::NrUePhy'])
    ## nr-ue-power-control.h (module 'nr'): ns3::NrUePowerControl [class]
    module.add_class('NrUePowerControl', parent=root_module['ns3::Object'])
    ## nr-ue-rrc.h (module 'nr'): ns3::NrUeRrc [class]
    module.add_class('NrUeRrc', parent=root_module['ns3::Object'])
    ## nr-ue-rrc.h (module 'nr'): ns3::NrUeRrc::State [enumeration]
    module.add_enum('State', ['IDLE_START', 'IDLE_CELL_SEARCH', 'IDLE_WAIT_MIB_SIB1', 'IDLE_WAIT_MIB', 'IDLE_WAIT_SIB1', 'IDLE_CAMPED_NORMALLY', 'IDLE_WAIT_SIB2', 'IDLE_RANDOM_ACCESS', 'IDLE_CONNECTING', 'CONNECTED_NORMALLY', 'CONNECTED_HANDOVER', 'CONNECTED_PHY_PROBLEM', 'CONNECTED_REESTABLISHING', 'NUM_STATES'], outer_class=root_module['ns3::NrUeRrc'])
    ## nr-rrc-protocol-ideal.h (module 'nr'): ns3::NrUeRrcProtocolIdeal [class]
    module.add_class('NrUeRrcProtocolIdeal', parent=root_module['ns3::Object'])
    ## nr-rrc-protocol-real.h (module 'nr'): ns3::NrUeRrcProtocolReal [class]
    module.add_class('NrUeRrcProtocolReal', parent=root_module['ns3::Object'])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker [class]
    module.add_class('Mac48AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue [class]
    module.add_class('Mac48AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## nr-mac-stats-calculator.h (module 'nr'): ns3::NrMacStatsCalculator [class]
    module.add_class('NrMacStatsCalculator', parent=root_module['ns3::NrStatsCalculator'])
    ## nr-control-messages.h (module 'nr'): ns3::MibNrControlMessage [class]
    module.add_class('MibNrControlMessage', parent=root_module['ns3::NrControlMessage'])
    ## mobility-model.h (module 'mobility'): ns3::MobilityModel [class]
    module.add_class('MobilityModel', import_from_module='ns.mobility', parent=root_module['ns3::Object'])
    ## net-device.h (module 'network'): ns3::NetDevice [class]
    module.add_class('NetDevice', import_from_module='ns.network', parent=root_module['ns3::Object'])
    ## net-device.h (module 'network'): ns3::NetDevice::PacketType [enumeration]
    module.add_enum('PacketType', ['PACKET_HOST', 'NS3_PACKET_HOST', 'PACKET_BROADCAST', 'NS3_PACKET_BROADCAST', 'PACKET_MULTICAST', 'NS3_PACKET_MULTICAST', 'PACKET_OTHERHOST', 'NS3_PACKET_OTHERHOST'], outer_class=root_module['ns3::NetDevice'], import_from_module='ns.network')
    ## nix-vector.h (module 'network'): ns3::NixVector [class]
    module.add_class('NixVector', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
    ## no-op-handover-algorithm.h (module 'nr'): ns3::NrNoOpHandoverAlgorithm [class]
    module.add_class('NrNoOpHandoverAlgorithm', parent=root_module['ns3::NrHandoverAlgorithm'])
    ## node.h (module 'network'): ns3::Node [class]
    module.add_class('Node', import_from_module='ns.network', parent=root_module['ns3::Object'])
    ## random-variable-stream.h (module 'core'): ns3::NormalRandomVariable [class]
    module.add_class('NormalRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker [class]
    module.add_class('ObjectFactoryChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue [class]
    module.add_class('ObjectFactoryValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## packet.h (module 'network'): ns3::Packet [class]
    module.add_class('Packet', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
    ## random-variable-stream.h (module 'core'): ns3::ParetoRandomVariable [class]
    module.add_class('ParetoRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): ns3::NrPfFfMacScheduler [class]
    module.add_class('NrPfFfMacScheduler', parent=root_module['ns3::NrFfMacScheduler'])
    ## nr-phy-rx-stats-calculator.h (module 'nr'): ns3::NrPhyRxStatsCalculator [class]
    module.add_class('NrPhyRxStatsCalculator', parent=root_module['ns3::NrStatsCalculator'])
    ## nr-phy-stats-calculator.h (module 'nr'): ns3::NrPhyStatsCalculator [class]
    module.add_class('NrPhyStatsCalculator', parent=root_module['ns3::NrStatsCalculator'])
    ## nr-phy-tx-stats-calculator.h (module 'nr'): ns3::NrPhyTxStatsCalculator [class]
    module.add_class('NrPhyTxStatsCalculator', parent=root_module['ns3::NrStatsCalculator'])
    ## point-to-point-ngc-helper.h (module 'nr'): ns3::PointToPointNgcHelper [class]
    module.add_class('PointToPointNgcHelper', parent=root_module['ns3::NgcHelper'])
    ## pointer.h (module 'core'): ns3::PointerChecker [class]
    module.add_class('PointerChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## pointer.h (module 'core'): ns3::PointerValue [class]
    module.add_class('PointerValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::NrPssFfMacScheduler [class]
    module.add_class('NrPssFfMacScheduler', parent=root_module['ns3::NrFfMacScheduler'])
    ## nr-control-messages.h (module 'nr'): ns3::RachPreambleNrControlMessage [class]
    module.add_class('RachPreambleNrControlMessage', parent=root_module['ns3::NrControlMessage'])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): ns3::NrRadioBearerStatsCalculator [class]
    module.add_class('NrRadioBearerStatsCalculator', parent=root_module['ns3::NrStatsCalculator'])
    ## nr-control-messages.h (module 'nr'): ns3::RarNrControlMessage [class]
    module.add_class('RarNrControlMessage', parent=root_module['ns3::NrControlMessage'])
    ## nr-control-messages.h (module 'nr'): ns3::RarNrControlMessage::Rar [struct]
    module.add_class('Rar', outer_class=root_module['ns3::RarNrControlMessage'])
    ## nr-rem-spectrum-phy.h (module 'nr'): ns3::NrRemSpectrumPhy [class]
    module.add_class('NrRemSpectrumPhy', parent=root_module['ns3::SpectrumPhy'])
    ## nr-rr-ff-mac-scheduler.h (module 'nr'): ns3::NrRrFfMacScheduler [class]
    module.add_class('NrRrFfMacScheduler', parent=root_module['ns3::NrFfMacScheduler'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcNrAsn1Header [class]
    module.add_class('RrcNrAsn1Header', parent=root_module['ns3::NrAsn1Header'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcDlCcchMessage [class]
    module.add_class('RrcDlCcchMessage', parent=root_module['ns3::RrcNrAsn1Header'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcDlDcchMessage [class]
    module.add_class('RrcDlDcchMessage', parent=root_module['ns3::RrcNrAsn1Header'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcUlCcchMessage [class]
    module.add_class('RrcUlCcchMessage', parent=root_module['ns3::RrcNrAsn1Header'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcUlDcchMessage [class]
    module.add_class('RrcUlDcchMessage', parent=root_module['ns3::RrcNrAsn1Header'])
    ## nr-control-messages.h (module 'nr'): ns3::Sib1NrControlMessage [class]
    module.add_class('Sib1NrControlMessage', parent=root_module['ns3::NrControlMessage'])
    ## spectrum-channel.h (module 'spectrum'): ns3::SpectrumChannel [class]
    module.add_class('SpectrumChannel', import_from_module='ns.spectrum', parent=root_module['ns3::Channel'])
    ## nr-vendor-specific-parameters.h (module 'nr'): ns3::SrsCqiRntiVsp [class]
    module.add_class('SrsCqiRntiVsp', parent=root_module['ns3::VendorSpecificValue'])
    ## string.h (module 'core'): ns3::StringChecker [class]
    module.add_class('StringChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## string.h (module 'core'): ns3::StringValue [class]
    module.add_class('StringValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): ns3::NrTdBetFfMacScheduler [class]
    module.add_class('NrTdBetFfMacScheduler', parent=root_module['ns3::NrFfMacScheduler'])
    ## tdmt-nr-ff-mac-scheduler.h (module 'nr'): ns3::NrTdMtFfMacScheduler [class]
    module.add_class('NrTdMtFfMacScheduler', parent=root_module['ns3::NrFfMacScheduler'])
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::NrTdTbfqFfMacScheduler [class]
    module.add_class('NrTdTbfqFfMacScheduler', parent=root_module['ns3::NrFfMacScheduler'])
    ## nstime.h (module 'core'): ns3::TimeValue [class]
    module.add_class('TimeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## nr-tta-ff-mac-scheduler.h (module 'nr'): ns3::NrTtaFfMacScheduler [class]
    module.add_class('NrTtaFfMacScheduler', parent=root_module['ns3::NrFfMacScheduler'])
    ## type-id.h (module 'core'): ns3::TypeIdChecker [class]
    module.add_class('TypeIdChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## type-id.h (module 'core'): ns3::TypeIdValue [class]
    module.add_class('TypeIdValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## uinteger.h (module 'core'): ns3::UintegerValue [class]
    module.add_class('UintegerValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## nr-control-messages.h (module 'nr'): ns3::UlDciNrControlMessage [class]
    module.add_class('UlDciNrControlMessage', parent=root_module['ns3::NrControlMessage'])
    ## vector.h (module 'core'): ns3::Vector2DChecker [class]
    module.add_class('Vector2DChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## vector.h (module 'core'): ns3::Vector2DValue [class]
    module.add_class('Vector2DValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## vector.h (module 'core'): ns3::Vector3DChecker [class]
    module.add_class('Vector3DChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## vector.h (module 'core'): ns3::Vector3DValue [class]
    module.add_class('Vector3DValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## virtual-net-device.h (module 'virtual-net-device'): ns3::VirtualNetDevice [class]
    module.add_class('VirtualNetDevice', import_from_module='ns.virtual_net_device', parent=root_module['ns3::NetDevice'])
    ## a2-a4-rsrq-handover-algorithm.h (module 'nr'): ns3::NrA2A4RsrqHandoverAlgorithm [class]
    module.add_class('NrA2A4RsrqHandoverAlgorithm', parent=root_module['ns3::NrHandoverAlgorithm'])
    ## a3-rsrp-handover-algorithm.h (module 'nr'): ns3::NrA3RsrpHandoverAlgorithm [class]
    module.add_class('NrA3RsrpHandoverAlgorithm', parent=root_module['ns3::NrHandoverAlgorithm'])
    ## address.h (module 'network'): ns3::AddressChecker [class]
    module.add_class('AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## address.h (module 'network'): ns3::AddressValue [class]
    module.add_class('AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## nr-control-messages.h (module 'nr'): ns3::BsrNrControlMessage [class]
    module.add_class('BsrNrControlMessage', parent=root_module['ns3::NrControlMessage'])
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::NrCqaFfMacScheduler [class]
    module.add_class('NrCqaFfMacScheduler', parent=root_module['ns3::NrFfMacScheduler'])
    ## nr-control-messages.h (module 'nr'): ns3::DlCqiNrControlMessage [class]
    module.add_class('DlCqiNrControlMessage', parent=root_module['ns3::NrControlMessage'])
    ## nr-control-messages.h (module 'nr'): ns3::DlDciNrControlMessage [class]
    module.add_class('DlDciNrControlMessage', parent=root_module['ns3::NrControlMessage'])
    ## nr-control-messages.h (module 'nr'): ns3::DlHarqFeedbackNrControlMessage [class]
    module.add_class('DlHarqFeedbackNrControlMessage', parent=root_module['ns3::NrControlMessage'])
    ## emu-ngc-helper.h (module 'nr'): ns3::EmuNgcHelper [class]
    module.add_class('EmuNgcHelper', parent=root_module['ns3::NgcHelper'])
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): ns3::NrFdBetFfMacScheduler [class]
    module.add_class('NrFdBetFfMacScheduler', parent=root_module['ns3::NrFfMacScheduler'])
    ## nr-fdmt-nr-ff-mac-scheduler.h (module 'nr'): ns3::NrFdMtFfMacScheduler [class]
    module.add_class('NrFdMtFfMacScheduler', parent=root_module['ns3::NrFfMacScheduler'])
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::NrFdTbfqFfMacScheduler [class]
    module.add_class('NrFdTbfqFfMacScheduler', parent=root_module['ns3::NrFfMacScheduler'])
    ## nr-rrc-header.h (module 'nr'): ns3::HandoverPreparationInfoHeader [class]
    module.add_class('HandoverPreparationInfoHeader', parent=root_module['ns3::RrcNrAsn1Header'])
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrDataRadioBearerInfo [class]
    module.add_class('NrDataRadioBearerInfo', parent=root_module['ns3::NrRadioBearerInfo'])
    ## nr-enb-phy.h (module 'nr'): ns3::NrEnbPhy [class]
    module.add_class('NrEnbPhy', parent=root_module['ns3::NrPhy'])
    ## nr-net-device.h (module 'nr'): ns3::NrNetDevice [class]
    module.add_class('NrNetDevice', parent=root_module['ns3::NetDevice'])
    ## nr-ue-net-device.h (module 'nr'): ns3::NrUeNetDevice [class]
    module.add_class('NrUeNetDevice', parent=root_module['ns3::NrNetDevice'])
    ## nr-rrc-header.h (module 'nr'): ns3::MeasurementReportHeader [class]
    module.add_class('MeasurementReportHeader', parent=root_module['ns3::RrcUlDcchMessage'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReconfigurationCompleteHeader [class]
    module.add_class('RrcConnectionReconfigurationCompleteHeader', parent=root_module['ns3::RrcUlDcchMessage'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReconfigurationHeader [class]
    module.add_class('RrcConnectionReconfigurationHeader', parent=root_module['ns3::RrcDlDcchMessage'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReestablishmentCompleteHeader [class]
    module.add_class('RrcConnectionReestablishmentCompleteHeader', parent=root_module['ns3::RrcUlDcchMessage'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReestablishmentHeader [class]
    module.add_class('RrcConnectionReestablishmentHeader', parent=root_module['ns3::RrcDlCcchMessage'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReestablishmentRejectHeader [class]
    module.add_class('RrcConnectionReestablishmentRejectHeader', parent=root_module['ns3::RrcDlCcchMessage'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReestablishmentRequestHeader [class]
    module.add_class('RrcConnectionReestablishmentRequestHeader', parent=root_module['ns3::RrcUlCcchMessage'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionRejectHeader [class]
    module.add_class('RrcConnectionRejectHeader', parent=root_module['ns3::RrcDlCcchMessage'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReleaseHeader [class]
    module.add_class('RrcConnectionReleaseHeader', parent=root_module['ns3::RrcDlDcchMessage'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionRequestHeader [class]
    module.add_class('RrcConnectionRequestHeader', parent=root_module['ns3::RrcUlCcchMessage'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionSetupCompleteHeader [class]
    module.add_class('RrcConnectionSetupCompleteHeader', parent=root_module['ns3::RrcUlDcchMessage'])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionSetupHeader [class]
    module.add_class('RrcConnectionSetupHeader', parent=root_module['ns3::RrcDlCcchMessage'])
    ## nr-enb-net-device.h (module 'nr'): ns3::NrEnbNetDevice [class]
    module.add_class('NrEnbNetDevice', parent=root_module['ns3::NrNetDevice'])
    module.add_container('std::vector< ns3::CeBitmap_e >', 'ns3::CeBitmap_e', container_type=u'vector')
    module.add_container('std::vector< std::vector< ns3::RlcPduListElement_s > >', 'std::vector< ns3::RlcPduListElement_s >', container_type=u'vector')
    module.add_container('std::vector< unsigned char >', 'unsigned char', container_type=u'vector')
    module.add_container('std::vector< unsigned short >', 'short unsigned int', container_type=u'vector')
    module.add_container('std::vector< ns3::DlInfoListElement_s::HarqStatus_e >', 'ns3::DlInfoListElement_s::HarqStatus_e', container_type=u'vector')
    module.add_container('std::list< ns3::NgcEnbN2SapProvider::BearerToBeSwitched >', 'ns3::NgcEnbN2SapProvider::BearerToBeSwitched', container_type=u'list')
    module.add_container('std::list< ns3::NgcN11SapAmf::BearerContextCreated >', 'ns3::NgcN11SapAmf::BearerContextCreated', container_type=u'list') ##smsohn
    module.add_container('std::list< ns3::NgcN11SapAmf::N2SMInformationCreated >', 'ns3::NgcN11SapAmf::N2SMInformationCreated', container_type=u'list')
    module.add_container('std::list< ns3::NgcN11SapAmf::BearerContextRemoved >', 'ns3::NgcN11SapAmf::BearerContextRemoved', container_type=u'list')
    module.add_container('std::list< ns3::NgcN11SapSmf::BearerContextToBeCreated >', 'ns3::NgcN11SapSmf::BearerContextToBeCreated', container_type=u'list') ##smsohn
    module.add_container('std::list< ns3::NgcN11SapSmf::N2SMInformationToBeCreated >', 'ns3::NgcN11SapSmf::N2SMInformationToBeCreated', container_type=u'list')
    module.add_container('std::list< ns3::NgcN11SapSmf::BearerContextToBeRemoved >', 'ns3::NgcN11SapSmf::BearerContextToBeRemoved', container_type=u'list')
    module.add_container('std::list< ns3::NgcN11SapSmf::BearerContextRemovedSmfUpf >', 'ns3::NgcN11SapSmf::BearerContextRemovedSmfUpf', container_type=u'list')
    module.add_container('std::list< ns3::NgcN2apSapEnb::ErabToBeSetupItem >', 'ns3::NgcN2apSapEnb::ErabToBeSetupItem', container_type=u'list')
    module.add_container('std::list< ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem >', 'ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem', container_type=u'list')
    module.add_container('std::list< ns3::NgcN2apSapAmf::ErabToBeReleasedIndication >', 'ns3::NgcN2apSapAmf::ErabToBeReleasedIndication', container_type=u'list')
    module.add_container('std::list< ns3::NgcN2apSapAmf::ErabSetupItem >', 'ns3::NgcN2apSapAmf::ErabSetupItem', container_type=u'list')
    module.add_container('std::list< ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem >', 'ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem', container_type=u'list')
    module.add_container('std::vector< ns3::NgcX2Sap::UlInterferenceOverloadIndicationItem >', 'ns3::NgcX2Sap::UlInterferenceOverloadIndicationItem', container_type=u'vector')
    module.add_container('std::vector< ns3::NgcX2Sap::UlHighInterferenceInformationItem >', 'ns3::NgcX2Sap::UlHighInterferenceInformationItem', container_type=u'vector')
    module.add_container('std::vector< bool >', 'bool', container_type=u'vector')
    module.add_container('std::vector< ns3::NgcX2Sap::ErabToBeSetupItem >', 'ns3::NgcX2Sap::ErabToBeSetupItem', container_type=u'vector')
    module.add_container('std::vector< ns3::NgcX2Sap::ErabAdmittedItem >', 'ns3::NgcX2Sap::ErabAdmittedItem', container_type=u'vector')
    module.add_container('std::vector< ns3::NgcX2Sap::ErabNotAdmittedItem >', 'ns3::NgcX2Sap::ErabNotAdmittedItem', container_type=u'vector')
    module.add_container('std::vector< ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem >', 'ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem', container_type=u'vector')
    module.add_container('std::vector< ns3::NgcX2Sap::CellInformationItem >', 'ns3::NgcX2Sap::CellInformationItem', container_type=u'vector')
    module.add_container('std::vector< ns3::NgcX2Sap::CellMeasurementResultItem >', 'ns3::NgcX2Sap::CellMeasurementResultItem', container_type=u'vector')
    module.add_container('std::vector< ns3::VendorSpecificListElement_s >', 'ns3::VendorSpecificListElement_s', container_type=u'vector')
    module.add_container('std::vector< ns3::LogicalChannelConfigListElement_s >', 'ns3::LogicalChannelConfigListElement_s', container_type=u'vector')
    module.add_container('std::vector< ns3::PagingInfoListElement_s >', 'ns3::PagingInfoListElement_s', container_type=u'vector')
    module.add_container('std::vector< ns3::DlInfoListElement_s >', 'ns3::DlInfoListElement_s', container_type=u'vector')
    module.add_container('std::vector< ns3::RachListElement_s >', 'ns3::RachListElement_s', container_type=u'vector')
    module.add_container('std::vector< ns3::CqiListElement_s >', 'ns3::CqiListElement_s', container_type=u'vector')
    module.add_container('std::vector< ns3::UlInfoListElement_s >', 'ns3::UlInfoListElement_s', container_type=u'vector')
    module.add_container('std::vector< ns3::SrListElement_s >', 'ns3::SrListElement_s', container_type=u'vector')
    module.add_container('std::vector< ns3::MacCeListElement_s >', 'ns3::MacCeListElement_s', container_type=u'vector')
    module.add_container('std::vector< ns3::BuildDataListElement_s >', 'ns3::BuildDataListElement_s', container_type=u'vector')
    module.add_container('std::vector< ns3::BuildRarListElement_s >', 'ns3::BuildRarListElement_s', container_type=u'vector')
    module.add_container('std::vector< ns3::BuildBroadcastListElement_s >', 'ns3::BuildBroadcastListElement_s', container_type=u'vector')
    module.add_container('std::vector< ns3::UlDciListElement_s >', 'ns3::UlDciListElement_s', container_type=u'vector')
    module.add_container('std::vector< ns3::PhichListElement_s >', 'ns3::PhichListElement_s', container_type=u'vector')
    module.add_container('std::map< std::string, ns3::LogComponent * >', ('std::string', 'ns3::LogComponent *'), container_type=u'map')
    module.add_container('std::map< unsigned short, std::vector< double > >', ('short unsigned int', 'std::vector< double >'), container_type=u'map')
    module.add_container('std::vector< int >', 'int', container_type=u'vector')
    module.add_container('ns3::HarqProcessInfoList_t', 'ns3::HarqProcessInfoElement_t', container_type=u'vector')
    module.add_container('std::list< ns3::NrRrcSap::SrbToAddMod >', 'ns3::NrRrcSap::SrbToAddMod', container_type=u'list')
    module.add_container('std::list< ns3::NrRrcSap::DrbToAddMod >', 'ns3::NrRrcSap::DrbToAddMod', container_type=u'list')
    module.add_container('std::list< unsigned char >', 'unsigned char', container_type=u'list')
    module.add_container('std::list< ns3::NrRrcSap::CellsToAddMod >', 'ns3::NrRrcSap::CellsToAddMod', container_type=u'list')
    module.add_container('std::list< ns3::NrRrcSap::BlackCellsToAddMod >', 'ns3::NrRrcSap::BlackCellsToAddMod', container_type=u'list')
    module.add_container('std::list< ns3::NrRrcSap::MeasObjectToAddMod >', 'ns3::NrRrcSap::MeasObjectToAddMod', container_type=u'list')
    module.add_container('std::list< ns3::NrRrcSap::ReportConfigToAddMod >', 'ns3::NrRrcSap::ReportConfigToAddMod', container_type=u'list')
    module.add_container('std::list< ns3::NrRrcSap::MeasIdToAddMod >', 'ns3::NrRrcSap::MeasIdToAddMod', container_type=u'list')
    module.add_container('std::list< unsigned int >', 'unsigned int', container_type=u'list')
    module.add_container('std::list< ns3::NrRrcSap::MeasResultEutra >', 'ns3::NrRrcSap::MeasResultEutra', container_type=u'list')
    module.add_container('std::map< int, double >', ('int', 'double'), container_type=u'map')
    module.add_container('std::vector< ns3::NrUeCphySapUser::UeMeasurementsElement >', 'ns3::NrUeCphySapUser::UeMeasurementsElement', container_type=u'vector')
    module.add_container('std::vector< ns3::HigherLayerSelected_s >', 'ns3::HigherLayerSelected_s', container_type=u'vector')
    module.add_container('std::vector< ns3::SiMessageListElement_s >', 'ns3::SiMessageListElement_s', container_type=u'vector')
    module.add_container('std::list< ns3::Ptr< ns3::Packet > >', 'ns3::Ptr< ns3::Packet >', container_type=u'list')
    module.add_container('std::vector< double >', 'double', container_type=u'vector')
    module.add_container('ns3::Bands', 'ns3::BandInfo', container_type=u'vector')
    module.add_container('std::map< unsigned int, unsigned int >', ('unsigned int', 'unsigned int'), container_type=u'map')
    module.add_container('std::list< ns3::Ptr< ns3::NrControlMessage > >', 'ns3::Ptr< ns3::NrControlMessage >', container_type=u'list')
    module.add_container('std::list< ns3::UlDciNrControlMessage >', 'ns3::UlDciNrControlMessage', container_type=u'list')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, unsigned long, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, unsigned long > > >', u'ns3::Uint64Map')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, unsigned long, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, unsigned long > > >*', u'ns3::Uint64Map*')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, unsigned long, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, unsigned long > > >&', u'ns3::Uint64Map&')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::GenericPhyTxEndCallback')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::GenericPhyTxEndCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::GenericPhyTxEndCallback&')
    typehandlers.add_type_alias(u'std::vector< std::vector< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > >, std::allocator< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > > > >, std::allocator< std::vector< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > >, std::allocator< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > > > > > >', u'ns3::DlHarqRlcPduListBuffer_t')
    typehandlers.add_type_alias(u'std::vector< std::vector< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > >, std::allocator< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > > > >, std::allocator< std::vector< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > >, std::allocator< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > > > > > >*', u'ns3::DlHarqRlcPduListBuffer_t*')
    typehandlers.add_type_alias(u'std::vector< std::vector< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > >, std::allocator< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > > > >, std::allocator< std::vector< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > >, std::allocator< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > > > > > >&', u'ns3::DlHarqRlcPduListBuffer_t&')
    typehandlers.add_type_alias(u'std::vector< ns3::HarqProcessInfoElement_t, std::allocator< ns3::HarqProcessInfoElement_t > >', u'ns3::HarqProcessInfoList_t')
    typehandlers.add_type_alias(u'std::vector< ns3::HarqProcessInfoElement_t, std::allocator< ns3::HarqProcessInfoElement_t > >*', u'ns3::HarqProcessInfoList_t*')
    typehandlers.add_type_alias(u'std::vector< ns3::HarqProcessInfoElement_t, std::allocator< ns3::HarqProcessInfoElement_t > >&', u'ns3::HarqProcessInfoList_t&')
    typehandlers.add_type_alias(u'ns3::Callback< void, unsigned short, ns3::Ptr< ns3::SpectrumValue >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NrPhyRxPssCallback')
    typehandlers.add_type_alias(u'ns3::Callback< void, unsigned short, ns3::Ptr< ns3::SpectrumValue >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NrPhyRxPssCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< void, unsigned short, ns3::Ptr< ns3::SpectrumValue >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NrPhyRxPssCallback&')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NrPhyTxEndCallback')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NrPhyTxEndCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NrPhyTxEndCallback&')
    typehandlers.add_type_alias(u'void ( * ) ( std::ostream & ) *', u'ns3::LogNodePrinter')
    typehandlers.add_type_alias(u'void ( * ) ( std::ostream & ) **', u'ns3::LogNodePrinter*')
    typehandlers.add_type_alias(u'void ( * ) ( std::ostream & ) *&', u'ns3::LogNodePrinter&')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::GenericPhyRxStartCallback')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::GenericPhyRxStartCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::GenericPhyRxStartCallback&')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NrPhyRxDataEndOkCallback')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NrPhyRxDataEndOkCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NrPhyRxDataEndOkCallback&')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NrPhyRxDataEndErrorCallback')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NrPhyRxDataEndErrorCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NrPhyRxDataEndErrorCallback&')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NrPhyRxCtrlEndErrorCallback')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NrPhyRxCtrlEndErrorCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NrPhyRxCtrlEndErrorCallback&')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::GenericPhyRxEndErrorCallback')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::GenericPhyRxEndErrorCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::GenericPhyRxEndErrorCallback&')
    typehandlers.add_type_alias(u'std::vector< double, std::allocator< double > >', u'ns3::Values')
    typehandlers.add_type_alias(u'std::vector< double, std::allocator< double > >*', u'ns3::Values*')
    typehandlers.add_type_alias(u'std::vector< double, std::allocator< double > >&', u'ns3::Values&')
    typehandlers.add_type_alias(u'std::vector< unsigned char, std::allocator< unsigned char > >', u'ns3::DlHarqProcessesStatus_t')
    typehandlers.add_type_alias(u'std::vector< unsigned char, std::allocator< unsigned char > >*', u'ns3::DlHarqProcessesStatus_t*')
    typehandlers.add_type_alias(u'std::vector< unsigned char, std::allocator< unsigned char > >&', u'ns3::DlHarqProcessesStatus_t&')
    typehandlers.add_type_alias(u'std::vector< ns3::BandInfo, std::allocator< ns3::BandInfo > >', u'ns3::Bands')
    typehandlers.add_type_alias(u'std::vector< ns3::BandInfo, std::allocator< ns3::BandInfo > >*', u'ns3::Bands*')
    typehandlers.add_type_alias(u'std::vector< ns3::BandInfo, std::allocator< ns3::BandInfo > >&', u'ns3::Bands&')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::DlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NrPhyDlHarqFeedbackCallback')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::DlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NrPhyDlHarqFeedbackCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::DlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NrPhyDlHarqFeedbackCallback&')
    typehandlers.add_type_alias(u'std::map< ns3::TbId_t, ns3::tbInfo_t, std::less< ns3::TbId_t >, std::allocator< std::pair< ns3::TbId_t const, ns3::tbInfo_t > > >', u'ns3::expectedTbs_t')
    typehandlers.add_type_alias(u'std::map< ns3::TbId_t, ns3::tbInfo_t, std::less< ns3::TbId_t >, std::allocator< std::pair< ns3::TbId_t const, ns3::tbInfo_t > > >*', u'ns3::expectedTbs_t*')
    typehandlers.add_type_alias(u'std::map< ns3::TbId_t, ns3::tbInfo_t, std::less< ns3::TbId_t >, std::allocator< std::pair< ns3::TbId_t const, ns3::tbInfo_t > > >&', u'ns3::expectedTbs_t&')
    typehandlers.add_type_alias(u'ns3::Vector3D', u'ns3::Vector')
    typehandlers.add_type_alias(u'ns3::Vector3D*', u'ns3::Vector*')
    typehandlers.add_type_alias(u'ns3::Vector3D&', u'ns3::Vector&')
    module.add_typedef(root_module['ns3::Vector3D'], 'Vector')
    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::GenericPhyTxStartCallback')
    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::GenericPhyTxStartCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::GenericPhyTxStartCallback&')
    typehandlers.add_type_alias(u'void ( * ) ( std::ostream & ) *', u'ns3::LogTimePrinter')
    typehandlers.add_type_alias(u'void ( * ) ( std::ostream & ) **', u'ns3::LogTimePrinter*')
    typehandlers.add_type_alias(u'void ( * ) ( std::ostream & ) *&', u'ns3::LogTimePrinter&')
    typehandlers.add_type_alias(u'ns3::Vector3DValue', u'ns3::VectorValue')
    typehandlers.add_type_alias(u'ns3::Vector3DValue*', u'ns3::VectorValue*')
    typehandlers.add_type_alias(u'ns3::Vector3DValue&', u'ns3::VectorValue&')
    module.add_typedef(root_module['ns3::Vector3DValue'], 'VectorValue')
    typehandlers.add_type_alias(u'std::vector< ns3::UlDciListElement_s, std::allocator< ns3::UlDciListElement_s > >', u'ns3::UlHarqProcessesDciBuffer_t')
    typehandlers.add_type_alias(u'std::vector< ns3::UlDciListElement_s, std::allocator< ns3::UlDciListElement_s > >*', u'ns3::UlHarqProcessesDciBuffer_t*')
    typehandlers.add_type_alias(u'std::vector< ns3::UlDciListElement_s, std::allocator< ns3::UlDciListElement_s > >&', u'ns3::UlHarqProcessesDciBuffer_t&')
    typehandlers.add_type_alias(u'ns3::Callback< void, std::list< ns3::Ptr< ns3::NrControlMessage >, std::allocator< ns3::Ptr< ns3::NrControlMessage > > >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NrPhyRxCtrlEndOkCallback')
    typehandlers.add_type_alias(u'ns3::Callback< void, std::list< ns3::Ptr< ns3::NrControlMessage >, std::allocator< ns3::Ptr< ns3::NrControlMessage > > >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NrPhyRxCtrlEndOkCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< void, std::list< ns3::Ptr< ns3::NrControlMessage >, std::allocator< ns3::Ptr< ns3::NrControlMessage > > >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NrPhyRxCtrlEndOkCallback&')
    typehandlers.add_type_alias(u'uint32_t', u'ns3::SpectrumModelUid_t')
    typehandlers.add_type_alias(u'uint32_t*', u'ns3::SpectrumModelUid_t*')
    typehandlers.add_type_alias(u'uint32_t&', u'ns3::SpectrumModelUid_t&')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, double, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, double > > >', u'ns3::DoubleMap')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, double, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, double > > >*', u'ns3::DoubleMap*')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, double, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, double > > >&', u'ns3::DoubleMap&')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, unsigned int, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, unsigned int > > >', u'ns3::Uint32Map')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, unsigned int, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, unsigned int > > >*', u'ns3::Uint32Map*')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, unsigned int, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, unsigned int > > >&', u'ns3::Uint32Map&')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::UlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NrPhyUlHarqFeedbackCallback')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::UlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NrPhyUlHarqFeedbackCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::UlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NrPhyUlHarqFeedbackCallback&')
    typehandlers.add_type_alias(u'std::vector< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > >, std::allocator< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > > > >', u'ns3::RlcPduList_t')
    typehandlers.add_type_alias(u'std::vector< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > >, std::allocator< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > > > >*', u'ns3::RlcPduList_t*')
    typehandlers.add_type_alias(u'std::vector< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > >, std::allocator< std::vector< ns3::RlcPduListElement_s, std::allocator< ns3::RlcPduListElement_s > > > >&', u'ns3::RlcPduList_t&')
    typehandlers.add_type_alias(u'std::vector< ns3::DlDciListElement_s, std::allocator< ns3::DlDciListElement_s > >', u'ns3::DlHarqProcessesDciBuffer_t')
    typehandlers.add_type_alias(u'std::vector< ns3::DlDciListElement_s, std::allocator< ns3::DlDciListElement_s > >*', u'ns3::DlHarqProcessesDciBuffer_t*')
    typehandlers.add_type_alias(u'std::vector< ns3::DlDciListElement_s, std::allocator< ns3::DlDciListElement_s > >&', u'ns3::DlHarqProcessesDciBuffer_t&')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::SpectrumValue const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NrChunkProcessorCallback')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::SpectrumValue const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NrChunkProcessorCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::SpectrumValue const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NrChunkProcessorCallback&')
    typehandlers.add_type_alias(u'ns3::Vector3DChecker', u'ns3::VectorChecker')
    typehandlers.add_type_alias(u'ns3::Vector3DChecker*', u'ns3::VectorChecker*')
    typehandlers.add_type_alias(u'ns3::Vector3DChecker&', u'ns3::VectorChecker&')
    module.add_typedef(root_module['ns3::Vector3DChecker'], 'VectorChecker')
    typehandlers.add_type_alias(u'std::vector< unsigned char, std::allocator< unsigned char > >', u'ns3::DlHarqProcessesTimer_t')
    typehandlers.add_type_alias(u'std::vector< unsigned char, std::allocator< unsigned char > >*', u'ns3::DlHarqProcessesTimer_t*')
    typehandlers.add_type_alias(u'std::vector< unsigned char, std::allocator< unsigned char > >&', u'ns3::DlHarqProcessesTimer_t&')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, ns3::NrFlowId_t, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, ns3::NrFlowId_t > > >', u'ns3::FlowIdMap')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, ns3::NrFlowId_t, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, ns3::NrFlowId_t > > >*', u'ns3::FlowIdMap*')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, ns3::NrFlowId_t, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, ns3::NrFlowId_t > > >&', u'ns3::FlowIdMap&')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned int > >, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned int > > > > >', u'ns3::Uint32StatsMap')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned int > >, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned int > > > > >*', u'ns3::Uint32StatsMap*')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned int > >, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned int > > > > >&', u'ns3::Uint32StatsMap&')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::GenericPhyRxEndOkCallback')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::GenericPhyRxEndOkCallback*')
    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::GenericPhyRxEndOkCallback&')
    typehandlers.add_type_alias(u'std::vector< std::vector< ns3::Ptr< ns3::PacketBurst >, std::allocator< ns3::Ptr< ns3::PacketBurst > > >, std::allocator< std::vector< ns3::Ptr< ns3::PacketBurst >, std::allocator< ns3::Ptr< ns3::PacketBurst > > > > >', u'ns3::DlHarqProcessesBuffer_t')
    typehandlers.add_type_alias(u'std::vector< std::vector< ns3::Ptr< ns3::PacketBurst >, std::allocator< ns3::Ptr< ns3::PacketBurst > > >, std::allocator< std::vector< ns3::Ptr< ns3::PacketBurst >, std::allocator< ns3::Ptr< ns3::PacketBurst > > > > >*', u'ns3::DlHarqProcessesBuffer_t*')
    typehandlers.add_type_alias(u'std::vector< std::vector< ns3::Ptr< ns3::PacketBurst >, std::allocator< ns3::Ptr< ns3::PacketBurst > > >, std::allocator< std::vector< ns3::Ptr< ns3::PacketBurst >, std::allocator< ns3::Ptr< ns3::PacketBurst > > > > >&', u'ns3::DlHarqProcessesBuffer_t&')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned long > >, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned long > > > > >', u'ns3::Uint64StatsMap')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned long > >, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned long > > > > >*', u'ns3::Uint64StatsMap*')
    typehandlers.add_type_alias(u'std::map< ns3::NrImsiLcidPair_t, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned long > >, std::less< ns3::NrImsiLcidPair_t >, std::allocator< std::pair< ns3::NrImsiLcidPair_t const, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned long > > > > >&', u'ns3::Uint64StatsMap&')
    typehandlers.add_type_alias(u'std::vector< unsigned char, std::allocator< unsigned char > >', u'ns3::UlHarqProcessesStatus_t')
    typehandlers.add_type_alias(u'std::vector< unsigned char, std::allocator< unsigned char > >*', u'ns3::UlHarqProcessesStatus_t*')
    typehandlers.add_type_alias(u'std::vector< unsigned char, std::allocator< unsigned char > >&', u'ns3::UlHarqProcessesStatus_t&')
    
    ## Register a nested module for the namespace Config
    
    nested_module = module.add_cpp_namespace('Config')
    register_types_ns3_Config(nested_module)
    
    
    ## Register a nested module for the namespace FatalImpl
    
    nested_module = module.add_cpp_namespace('FatalImpl')
    register_types_ns3_FatalImpl(nested_module)
    
    
    ## Register a nested module for the namespace Hash
    
    nested_module = module.add_cpp_namespace('Hash')
    register_types_ns3_Hash(nested_module)
    
    
    ## Register a nested module for the namespace TracedValueCallback
    
    nested_module = module.add_cpp_namespace('TracedValueCallback')
    register_types_ns3_TracedValueCallback(nested_module)
    
    
    ## Register a nested module for the namespace internal
    
    nested_module = module.add_cpp_namespace('internal')
    register_types_ns3_internal(nested_module)
    

def register_types_ns3_Config(module):
    root_module = module.get_root()
    
    ## config.h (module 'core'): ns3::Config::MatchContainer [class]
    module.add_class('MatchContainer', import_from_module='ns.core')
    module.add_container('std::vector< ns3::Ptr< ns3::Object > >', 'ns3::Ptr< ns3::Object >', container_type=u'vector')
    module.add_container('std::vector< std::string >', 'std::string', container_type=u'vector')

def register_types_ns3_FatalImpl(module):
    root_module = module.get_root()
    

def register_types_ns3_Hash(module):
    root_module = module.get_root()
    
    ## hash-function.h (module 'core'): ns3::Hash::Implementation [class]
    module.add_class('Implementation', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >'])
    typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) *', u'ns3::Hash::Hash64Function_ptr')
    typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) **', u'ns3::Hash::Hash64Function_ptr*')
    typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) *&', u'ns3::Hash::Hash64Function_ptr&')
    typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) *', u'ns3::Hash::Hash32Function_ptr')
    typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) **', u'ns3::Hash::Hash32Function_ptr*')
    typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) *&', u'ns3::Hash::Hash32Function_ptr&')
    
    ## Register a nested module for the namespace Function
    
    nested_module = module.add_cpp_namespace('Function')
    register_types_ns3_Hash_Function(nested_module)
    

def register_types_ns3_Hash_Function(module):
    root_module = module.get_root()
    
    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a [class]
    module.add_class('Fnv1a', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32 [class]
    module.add_class('Hash32', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64 [class]
    module.add_class('Hash64', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3 [class]
    module.add_class('Murmur3', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])

def register_types_ns3_TracedValueCallback(module):
    root_module = module.get_root()
    
    typehandlers.add_type_alias(u'void ( * ) ( double, double ) *', u'ns3::TracedValueCallback::Double')
    typehandlers.add_type_alias(u'void ( * ) ( double, double ) **', u'ns3::TracedValueCallback::Double*')
    typehandlers.add_type_alias(u'void ( * ) ( double, double ) *&', u'ns3::TracedValueCallback::Double&')
    typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t ) *', u'ns3::TracedValueCallback::Int8')
    typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t ) **', u'ns3::TracedValueCallback::Int8*')
    typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t ) *&', u'ns3::TracedValueCallback::Int8&')
    typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t ) *', u'ns3::TracedValueCallback::Uint8')
    typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t ) **', u'ns3::TracedValueCallback::Uint8*')
    typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t ) *&', u'ns3::TracedValueCallback::Uint8&')
    typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t ) *', u'ns3::TracedValueCallback::Int32')
    typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t ) **', u'ns3::TracedValueCallback::Int32*')
    typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t ) *&', u'ns3::TracedValueCallback::Int32&')
    typehandlers.add_type_alias(u'void ( * ) ( bool, bool ) *', u'ns3::TracedValueCallback::Bool')
    typehandlers.add_type_alias(u'void ( * ) ( bool, bool ) **', u'ns3::TracedValueCallback::Bool*')
    typehandlers.add_type_alias(u'void ( * ) ( bool, bool ) *&', u'ns3::TracedValueCallback::Bool&')
    typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t ) *', u'ns3::TracedValueCallback::Uint16')
    typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t ) **', u'ns3::TracedValueCallback::Uint16*')
    typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t ) *&', u'ns3::TracedValueCallback::Uint16&')
    typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t ) *', u'ns3::TracedValueCallback::Uint32')
    typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t ) **', u'ns3::TracedValueCallback::Uint32*')
    typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t ) *&', u'ns3::TracedValueCallback::Uint32&')
    typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t ) *', u'ns3::TracedValueCallback::Int16')
    typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t ) **', u'ns3::TracedValueCallback::Int16*')
    typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t ) *&', u'ns3::TracedValueCallback::Int16&')
    typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) *', u'ns3::TracedValueCallback::Time')
    typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) **', u'ns3::TracedValueCallback::Time*')
    typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) *&', u'ns3::TracedValueCallback::Time&')

def register_types_ns3_internal(module):
    root_module = module.get_root()
    

def register_methods(root_module):
    register_Ns3Address_methods(root_module, root_module['ns3::Address'])
    register_Ns3AllocationRetentionPriority_methods(root_module, root_module['ns3::AllocationRetentionPriority'])
    register_Ns3AttributeConstructionList_methods(root_module, root_module['ns3::AttributeConstructionList'])
    register_Ns3AttributeConstructionListItem_methods(root_module, root_module['ns3::AttributeConstructionList::Item'])
    register_Ns3BandInfo_methods(root_module, root_module['ns3::BandInfo'])
    register_Ns3Buffer_methods(root_module, root_module['ns3::Buffer'])
    register_Ns3BufferIterator_methods(root_module, root_module['ns3::Buffer::Iterator'])
    register_Ns3NrBufferSizeLevelBsr_methods(root_module, root_module['ns3::NrBufferSizeLevelBsr'])
    register_Ns3BuildBroadcastListElement_s_methods(root_module, root_module['ns3::BuildBroadcastListElement_s'])
    register_Ns3BuildDataListElement_s_methods(root_module, root_module['ns3::BuildDataListElement_s'])
    register_Ns3BuildRarListElement_s_methods(root_module, root_module['ns3::BuildRarListElement_s'])
    register_Ns3BwPart_s_methods(root_module, root_module['ns3::BwPart_s'])
    register_Ns3ByteTagIterator_methods(root_module, root_module['ns3::ByteTagIterator'])
    register_Ns3ByteTagIteratorItem_methods(root_module, root_module['ns3::ByteTagIterator::Item'])
    register_Ns3ByteTagList_methods(root_module, root_module['ns3::ByteTagList'])
    register_Ns3ByteTagListIterator_methods(root_module, root_module['ns3::ByteTagList::Iterator'])
    register_Ns3ByteTagListIteratorItem_methods(root_module, root_module['ns3::ByteTagList::Iterator::Item'])
    register_Ns3CallbackBase_methods(root_module, root_module['ns3::CallbackBase'])
    register_Ns3CqasFlowPerf_t_methods(root_module, root_module['ns3::CqasFlowPerf_t'])
    register_Ns3CqiConfig_s_methods(root_module, root_module['ns3::CqiConfig_s'])
    register_Ns3CqiListElement_s_methods(root_module, root_module['ns3::CqiListElement_s'])
    register_Ns3DataOutputCallback_methods(root_module, root_module['ns3::DataOutputCallback'])
    register_Ns3DataRate_methods(root_module, root_module['ns3::DataRate'])
    register_Ns3DlDciListElement_s_methods(root_module, root_module['ns3::DlDciListElement_s'])
    register_Ns3DlInfoListElement_s_methods(root_module, root_module['ns3::DlInfoListElement_s'])
    register_Ns3DrxConfig_s_methods(root_module, root_module['ns3::DrxConfig_s'])
    register_Ns3NgcEnbN2SapProvider_methods(root_module, root_module['ns3::NgcEnbN2SapProvider'])
    register_Ns3NgcEnbN2SapProviderBearerToBeSwitched_methods(root_module, root_module['ns3::NgcEnbN2SapProvider::BearerToBeSwitched'])
    register_Ns3NgcEnbN2SapProviderPathSwitchRequestParameters_methods(root_module, root_module['ns3::NgcEnbN2SapProvider::PathSwitchRequestParameters'])
    register_Ns3NgcEnbN2SapUser_methods(root_module, root_module['ns3::NgcEnbN2SapUser'])
    register_Ns3NgcEnbN2SapUserDataRadioBearerSetupRequestParameters_methods(root_module, root_module['ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequestParameters'])
    register_Ns3NgcEnbN2SapUserPathSwitchRequestAcknowledgeParameters_methods(root_module, root_module['ns3::NgcEnbN2SapUser::PathSwitchRequestAcknowledgeParameters'])
    register_Ns3NgcN11Sap_methods(root_module, root_module['ns3::NgcN11Sap'])
    register_Ns3NgcN11SapFteid_methods(root_module, root_module['ns3::NgcN11Sap::Fteid'])
    register_Ns3NgcN11SapGtpcMessage_methods(root_module, root_module['ns3::NgcN11Sap::GtpcMessage'])
    register_Ns3NgcN11SapUli_methods(root_module, root_module['ns3::NgcN11Sap::Uli'])
    register_Ns3NgcN11SapAmf_methods(root_module, root_module['ns3::NgcN11SapAmf'])
    register_Ns3NgcN11SapAmfBearerContextCreated_methods(root_module, root_module['ns3::NgcN11SapAmf::BearerContextCreated']) ##smsohn
    register_Ns3NgcN11SapAmfN2SMInformationCreated_methods(root_module, root_module['ns3::NgcN11SapAmf::N2SMInformationCreated']) 
    register_Ns3NgcN11SapAmfBearerContextRemoved_methods(root_module, root_module['ns3::NgcN11SapAmf::BearerContextRemoved'])
    register_Ns3NgcN11SapAmfCreateSessionResponseMessage_methods(root_module, root_module['ns3::NgcN11SapAmf::CreateSessionResponseMessage'])
    register_Ns3NgcN11SapAmfDeleteBearerRequestMessage_methods(root_module, root_module['ns3::NgcN11SapAmf::DeleteBearerRequestMessage'])
    register_Ns3NgcN11SapAmfModifyBearerResponseMessage_methods(root_module, root_module['ns3::NgcN11SapAmf::ModifyBearerResponseMessage'])
    register_Ns3NgcN11SapSmf_methods(root_module, root_module['ns3::NgcN11SapSmf'])
    register_Ns3NgcN11SapSmfBearerContextRemovedSmfUpf_methods(root_module, root_module['ns3::NgcN11SapSmf::BearerContextRemovedSmfUpf'])
    register_Ns3NgcN11SapSmfBearerContextToBeCreated_methods(root_module, root_module['ns3::NgcN11SapSmf::BearerContextToBeCreated']) ##smsohn
    register_Ns3NgcN11SapSmfN2SMInformationToBeCreated_methods(root_module, root_module['ns3::NgcN11SapSmf::N2SMInformationToBeCreated'])
    register_Ns3NgcN11SapSmfBearerContextToBeRemoved_methods(root_module, root_module['ns3::NgcN11SapSmf::BearerContextToBeRemoved'])
    register_Ns3NgcN11SapSmfCreateSessionRequestMessage_methods(root_module, root_module['ns3::NgcN11SapSmf::CreateSessionRequestMessage'])
    register_Ns3NgcN11SapSmfUpdateSMContextRequestMessage_methods(root_module, root_module['ns3::NgcN11SapSmf::UpdateSMContextRequestMessage']) ##yjshin
    register_Ns3NgcN11SapSmfDeleteBearerCommandMessage_methods(root_module, root_module['ns3::NgcN11SapSmf::DeleteBearerCommandMessage'])
    register_Ns3NgcN11SapSmfDeleteBearerResponseMessage_methods(root_module, root_module['ns3::NgcN11SapSmf::DeleteBearerResponseMessage'])
    register_Ns3NgcN11SapSmfModifyBearerRequestMessage_methods(root_module, root_module['ns3::NgcN11SapSmf::ModifyBearerRequestMessage'])
    register_Ns3NgcN2apSap_methods(root_module, root_module['ns3::NgcN2apSap'])
    register_Ns3NgcN2apSapEnb_methods(root_module, root_module['ns3::NgcN2apSapEnb'])
    register_Ns3NgcN2apSapEnbErabSwitchedInUplinkItem_methods(root_module, root_module['ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem'])
    register_Ns3NgcN2apSapEnbErabToBeSetupItem_methods(root_module, root_module['ns3::NgcN2apSapEnb::ErabToBeSetupItem'])
    register_Ns3NgcN2apSapAmf_methods(root_module, root_module['ns3::NgcN2apSapAmf'])
    register_Ns3NgcN2apSapAmfErabSetupItem_methods(root_module, root_module['ns3::NgcN2apSapAmf::ErabSetupItem'])
    register_Ns3NgcN2apSapAmfErabSwitchedInDownlinkItem_methods(root_module, root_module['ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem'])
    register_Ns3NgcN2apSapAmfErabToBeReleasedIndication_methods(root_module, root_module['ns3::NgcN2apSapAmf::ErabToBeReleasedIndication'])
    register_Ns3NgcX2Sap_methods(root_module, root_module['ns3::NgcX2Sap'])
    register_Ns3NgcX2SapCellInformationItem_methods(root_module, root_module['ns3::NgcX2Sap::CellInformationItem'])
    register_Ns3NgcX2SapCellMeasurementResultItem_methods(root_module, root_module['ns3::NgcX2Sap::CellMeasurementResultItem'])
    register_Ns3NgcX2SapCompositeAvailCapacity_methods(root_module, root_module['ns3::NgcX2Sap::CompositeAvailCapacity'])
    register_Ns3NgcX2SapErabAdmittedItem_methods(root_module, root_module['ns3::NgcX2Sap::ErabAdmittedItem'])
    register_Ns3NgcX2SapErabNotAdmittedItem_methods(root_module, root_module['ns3::NgcX2Sap::ErabNotAdmittedItem'])
    register_Ns3NgcX2SapErabToBeSetupItem_methods(root_module, root_module['ns3::NgcX2Sap::ErabToBeSetupItem'])
    register_Ns3NgcX2SapErabsSubjectToStatusTransferItem_methods(root_module, root_module['ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem'])
    register_Ns3NgcX2SapHandoverPreparationFailureParams_methods(root_module, root_module['ns3::NgcX2Sap::HandoverPreparationFailureParams'])
    register_Ns3NgcX2SapHandoverRequestAckParams_methods(root_module, root_module['ns3::NgcX2Sap::HandoverRequestAckParams'])
    register_Ns3NgcX2SapHandoverRequestParams_methods(root_module, root_module['ns3::NgcX2Sap::HandoverRequestParams'])
    register_Ns3NgcX2SapLoadInformationParams_methods(root_module, root_module['ns3::NgcX2Sap::LoadInformationParams'])
    register_Ns3NgcX2SapRelativeNarrowbandTxBand_methods(root_module, root_module['ns3::NgcX2Sap::RelativeNarrowbandTxBand'])
    register_Ns3NgcX2SapResourceStatusUpdateParams_methods(root_module, root_module['ns3::NgcX2Sap::ResourceStatusUpdateParams'])
    register_Ns3NgcX2SapSnStatusTransferParams_methods(root_module, root_module['ns3::NgcX2Sap::SnStatusTransferParams'])
    register_Ns3NgcX2SapUeContextReleaseParams_methods(root_module, root_module['ns3::NgcX2Sap::UeContextReleaseParams'])
    register_Ns3NgcX2SapUeDataParams_methods(root_module, root_module['ns3::NgcX2Sap::UeDataParams'])
    register_Ns3NgcX2SapUlHighInterferenceInformationItem_methods(root_module, root_module['ns3::NgcX2Sap::UlHighInterferenceInformationItem'])
    register_Ns3NgcX2SapProvider_methods(root_module, root_module['ns3::NgcX2SapProvider'])
    register_Ns3NgcX2SapUser_methods(root_module, root_module['ns3::NgcX2SapUser'])
    register_Ns3EpsBearer_methods(root_module, root_module['ns3::EpsBearer']) ##smsohn
    register_Ns3QosFlow_methods(root_module, root_module['ns3::QosFlow']) 
    register_Ns3NrEutranMeasurementMapping_methods(root_module, root_module['ns3::NrEutranMeasurementMapping'])
    register_Ns3EventId_methods(root_module, root_module['ns3::EventId'])
    register_Ns3FfMacCschedSapProvider_methods(root_module, root_module['ns3::FfMacCschedSapProvider'])
    register_Ns3FfMacCschedSapProviderCschedCellConfigReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters'])
    register_Ns3FfMacCschedSapProviderCschedLcConfigReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters'])
    register_Ns3FfMacCschedSapProviderCschedLcReleaseReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters'])
    register_Ns3FfMacCschedSapProviderCschedUeConfigReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters'])
    register_Ns3FfMacCschedSapProviderCschedUeReleaseReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters'])
    register_Ns3FfMacCschedSapUser_methods(root_module, root_module['ns3::FfMacCschedSapUser'])
    register_Ns3FfMacCschedSapUserCschedCellConfigCnfParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters'])
    register_Ns3FfMacCschedSapUserCschedCellConfigUpdateIndParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters'])
    register_Ns3FfMacCschedSapUserCschedLcConfigCnfParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters'])
    register_Ns3FfMacCschedSapUserCschedLcReleaseCnfParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters'])
    register_Ns3FfMacCschedSapUserCschedUeConfigCnfParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters'])
    register_Ns3FfMacCschedSapUserCschedUeConfigUpdateIndParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters'])
    register_Ns3FfMacCschedSapUserCschedUeReleaseCnfParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters'])
    register_Ns3FfMacSchedSapProvider_methods(root_module, root_module['ns3::FfMacSchedSapProvider'])
    register_Ns3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedDlMacBufferReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedDlRachInfoReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedDlTriggerReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedUlSrInfoReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedUlTriggerReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters'])
    register_Ns3FfMacSchedSapUser_methods(root_module, root_module['ns3::FfMacSchedSapUser'])
    register_Ns3FfMacSchedSapUserSchedDlConfigIndParameters_methods(root_module, root_module['ns3::FfMacSchedSapUser::SchedDlConfigIndParameters'])
    register_Ns3FfMacSchedSapUserSchedUlConfigIndParameters_methods(root_module, root_module['ns3::FfMacSchedSapUser::SchedUlConfigIndParameters'])
    register_Ns3GbrQosInformation_methods(root_module, root_module['ns3::GbrQosInformation'])
    register_Ns3HarqProcessInfoElement_t_methods(root_module, root_module['ns3::HarqProcessInfoElement_t'])
    register_Ns3Hasher_methods(root_module, root_module['ns3::Hasher'])
    register_Ns3HigherLayerSelected_s_methods(root_module, root_module['ns3::HigherLayerSelected_s'])
    register_Ns3NrImsiLcidPair_t_methods(root_module, root_module['ns3::NrImsiLcidPair_t'])
    register_Ns3Inet6SocketAddress_methods(root_module, root_module['ns3::Inet6SocketAddress'])
    register_Ns3InetSocketAddress_methods(root_module, root_module['ns3::InetSocketAddress'])
    register_Ns3Ipv4Address_methods(root_module, root_module['ns3::Ipv4Address'])
    register_Ns3Ipv4AddressHelper_methods(root_module, root_module['ns3::Ipv4AddressHelper'])
    register_Ns3Ipv4InterfaceAddress_methods(root_module, root_module['ns3::Ipv4InterfaceAddress'])
    register_Ns3Ipv4InterfaceContainer_methods(root_module, root_module['ns3::Ipv4InterfaceContainer'])
    register_Ns3Ipv4Mask_methods(root_module, root_module['ns3::Ipv4Mask'])
    register_Ns3Ipv6Address_methods(root_module, root_module['ns3::Ipv6Address'])
    register_Ns3Ipv6Prefix_methods(root_module, root_module['ns3::Ipv6Prefix'])
    register_Ns3LogComponent_methods(root_module, root_module['ns3::LogComponent'])
    register_Ns3LogicalChannelConfigListElement_s_methods(root_module, root_module['ns3::LogicalChannelConfigListElement_s'])
    register_Ns3NrAnrSapProvider_methods(root_module, root_module['ns3::NrAnrSapProvider'])
    register_Ns3NrAnrSapUser_methods(root_module, root_module['ns3::NrAnrSapUser'])
    register_Ns3NrAsSapProvider_methods(root_module, root_module['ns3::NrAsSapProvider'])
    register_Ns3NrAsSapUser_methods(root_module, root_module['ns3::NrAsSapUser'])
    register_Ns3NrEnbCmacSapProvider_methods(root_module, root_module['ns3::NrEnbCmacSapProvider'])
    register_Ns3NrEnbCmacSapProviderAllocateNcRaPreambleReturnValue_methods(root_module, root_module['ns3::NrEnbCmacSapProvider::AllocateNcRaPreambleReturnValue'])
    register_Ns3NrEnbCmacSapProviderLcInfo_methods(root_module, root_module['ns3::NrEnbCmacSapProvider::LcInfo'])
    register_Ns3NrEnbCmacSapProviderRachConfig_methods(root_module, root_module['ns3::NrEnbCmacSapProvider::RachConfig'])
    register_Ns3NrEnbCmacSapProviderUeConfig_methods(root_module, root_module['ns3::NrEnbCmacSapProvider::UeConfig'])
    register_Ns3NrEnbCmacSapUser_methods(root_module, root_module['ns3::NrEnbCmacSapUser'])
    register_Ns3NrEnbCmacSapUserUeConfig_methods(root_module, root_module['ns3::NrEnbCmacSapUser::UeConfig'])
    register_Ns3NrEnbCphySapProvider_methods(root_module, root_module['ns3::NrEnbCphySapProvider'])
    register_Ns3NrEnbCphySapUser_methods(root_module, root_module['ns3::NrEnbCphySapUser'])
    register_Ns3NrEnbPhySapProvider_methods(root_module, root_module['ns3::NrEnbPhySapProvider'])
    register_Ns3NrEnbPhySapUser_methods(root_module, root_module['ns3::NrEnbPhySapUser'])
    register_Ns3NrFfConverter_methods(root_module, root_module['ns3::NrFfConverter'])
    register_Ns3NrFfrRrcSapProvider_methods(root_module, root_module['ns3::NrFfrRrcSapProvider'])
    register_Ns3NrFfrRrcSapUser_methods(root_module, root_module['ns3::NrFfrRrcSapUser'])
    register_Ns3NrFfrSapProvider_methods(root_module, root_module['ns3::NrFfrSapProvider'])
    register_Ns3NrFfrSapUser_methods(root_module, root_module['ns3::NrFfrSapUser'])
    register_Ns3NrFlowId_t_methods(root_module, root_module['ns3::NrFlowId_t'])
    register_Ns3NrGlobalPathlossDatabase_methods(root_module, root_module['ns3::NrGlobalPathlossDatabase'])
    register_Ns3NrHandoverManagementSapProvider_methods(root_module, root_module['ns3::NrHandoverManagementSapProvider'])
    register_Ns3NrHandoverManagementSapUser_methods(root_module, root_module['ns3::NrHandoverManagementSapUser'])
    register_Ns3NrMacSapProvider_methods(root_module, root_module['ns3::NrMacSapProvider'])
    register_Ns3NrMacSapProviderReportBufferStatusParameters_methods(root_module, root_module['ns3::NrMacSapProvider::ReportBufferStatusParameters'])
    register_Ns3NrMacSapProviderTransmitPduParameters_methods(root_module, root_module['ns3::NrMacSapProvider::TransmitPduParameters'])
    register_Ns3NrMacSapUser_methods(root_module, root_module['ns3::NrMacSapUser'])
    register_Ns3NrMiErrorModel_methods(root_module, root_module['ns3::NrMiErrorModel'])
    register_Ns3NrPdcpSapProvider_methods(root_module, root_module['ns3::NrPdcpSapProvider'])
    register_Ns3NrPdcpSapProviderTransmitPdcpSduParameters_methods(root_module, root_module['ns3::NrPdcpSapProvider::TransmitPdcpSduParameters'])
    register_Ns3NrPdcpSapUser_methods(root_module, root_module['ns3::NrPdcpSapUser'])
    register_Ns3NrPdcpSapUserReceivePdcpSduParameters_methods(root_module, root_module['ns3::NrPdcpSapUser::ReceivePdcpSduParameters'])
    register_Ns3NrRlcSapProvider_methods(root_module, root_module['ns3::NrRlcSapProvider'])
    register_Ns3NrRlcSapProviderTransmitPdcpPduParameters_methods(root_module, root_module['ns3::NrRlcSapProvider::TransmitPdcpPduParameters'])
    register_Ns3NrRlcSapUser_methods(root_module, root_module['ns3::NrRlcSapUser'])
    register_Ns3NrRrcSap_methods(root_module, root_module['ns3::NrRrcSap'])
    register_Ns3NrRrcSapAntennaInfoDedicated_methods(root_module, root_module['ns3::NrRrcSap::AntennaInfoDedicated'])
    register_Ns3NrRrcSapAsConfig_methods(root_module, root_module['ns3::NrRrcSap::AsConfig'])
    register_Ns3NrRrcSapBlackCellsToAddMod_methods(root_module, root_module['ns3::NrRrcSap::BlackCellsToAddMod'])
    register_Ns3NrRrcSapCarrierBandwidthEutra_methods(root_module, root_module['ns3::NrRrcSap::CarrierBandwidthEutra'])
    register_Ns3NrRrcSapCarrierFreqEutra_methods(root_module, root_module['ns3::NrRrcSap::CarrierFreqEutra'])
    register_Ns3NrRrcSapCellAccessRelatedInfo_methods(root_module, root_module['ns3::NrRrcSap::CellAccessRelatedInfo'])
    register_Ns3NrRrcSapCellSelectionInfo_methods(root_module, root_module['ns3::NrRrcSap::CellSelectionInfo'])
    register_Ns3NrRrcSapCellsToAddMod_methods(root_module, root_module['ns3::NrRrcSap::CellsToAddMod'])
    register_Ns3NrRrcSapCgiInfo_methods(root_module, root_module['ns3::NrRrcSap::CgiInfo'])
    register_Ns3NrRrcSapDrbToAddMod_methods(root_module, root_module['ns3::NrRrcSap::DrbToAddMod'])
    register_Ns3NrRrcSapFreqInfo_methods(root_module, root_module['ns3::NrRrcSap::FreqInfo'])
    register_Ns3NrRrcSapHandoverPreparationInfo_methods(root_module, root_module['ns3::NrRrcSap::HandoverPreparationInfo'])
    register_Ns3NrRrcSapLogicalChannelConfig_methods(root_module, root_module['ns3::NrRrcSap::LogicalChannelConfig'])
    register_Ns3NrRrcSapMasterInformationBlock_methods(root_module, root_module['ns3::NrRrcSap::MasterInformationBlock'])
    register_Ns3NrRrcSapMeasConfig_methods(root_module, root_module['ns3::NrRrcSap::MeasConfig'])
    register_Ns3NrRrcSapMeasGapConfig_methods(root_module, root_module['ns3::NrRrcSap::MeasGapConfig'])
    register_Ns3NrRrcSapMeasIdToAddMod_methods(root_module, root_module['ns3::NrRrcSap::MeasIdToAddMod'])
    register_Ns3NrRrcSapMeasObjectEutra_methods(root_module, root_module['ns3::NrRrcSap::MeasObjectEutra'])
    register_Ns3NrRrcSapMeasObjectToAddMod_methods(root_module, root_module['ns3::NrRrcSap::MeasObjectToAddMod'])
    register_Ns3NrRrcSapMeasResultEutra_methods(root_module, root_module['ns3::NrRrcSap::MeasResultEutra'])
    register_Ns3NrRrcSapMeasResults_methods(root_module, root_module['ns3::NrRrcSap::MeasResults'])
    register_Ns3NrRrcSapMeasurementReport_methods(root_module, root_module['ns3::NrRrcSap::MeasurementReport'])
    register_Ns3NrRrcSapMobilityControlInfo_methods(root_module, root_module['ns3::NrRrcSap::MobilityControlInfo'])
    register_Ns3NrRrcSapMobilityStateParameters_methods(root_module, root_module['ns3::NrRrcSap::MobilityStateParameters'])
    register_Ns3NrRrcSapPdschConfigCommon_methods(root_module, root_module['ns3::NrRrcSap::PdschConfigCommon'])
    register_Ns3NrRrcSapPdschConfigDedicated_methods(root_module, root_module['ns3::NrRrcSap::PdschConfigDedicated'])
    register_Ns3NrRrcSapPhysCellIdRange_methods(root_module, root_module['ns3::NrRrcSap::PhysCellIdRange'])
    register_Ns3NrRrcSapPhysicalConfigDedicated_methods(root_module, root_module['ns3::NrRrcSap::PhysicalConfigDedicated'])
    register_Ns3NrRrcSapPlmnIdentityInfo_methods(root_module, root_module['ns3::NrRrcSap::PlmnIdentityInfo'])
    register_Ns3NrRrcSapPreambleInfo_methods(root_module, root_module['ns3::NrRrcSap::PreambleInfo'])
    register_Ns3NrRrcSapQuantityConfig_methods(root_module, root_module['ns3::NrRrcSap::QuantityConfig'])
    register_Ns3NrRrcSapRaSupervisionInfo_methods(root_module, root_module['ns3::NrRrcSap::RaSupervisionInfo'])
    register_Ns3NrRrcSapRachConfigCommon_methods(root_module, root_module['ns3::NrRrcSap::RachConfigCommon'])
    register_Ns3NrRrcSapRachConfigDedicated_methods(root_module, root_module['ns3::NrRrcSap::RachConfigDedicated'])
    register_Ns3NrRrcSapRadioResourceConfigCommon_methods(root_module, root_module['ns3::NrRrcSap::RadioResourceConfigCommon'])
    register_Ns3NrRrcSapRadioResourceConfigCommonSib_methods(root_module, root_module['ns3::NrRrcSap::RadioResourceConfigCommonSib'])
    register_Ns3NrRrcSapRadioResourceConfigDedicated_methods(root_module, root_module['ns3::NrRrcSap::RadioResourceConfigDedicated'])
    register_Ns3NrRrcSapReestabUeIdentity_methods(root_module, root_module['ns3::NrRrcSap::ReestabUeIdentity'])
    register_Ns3NrRrcSapReportConfigEutra_methods(root_module, root_module['ns3::NrRrcSap::ReportConfigEutra'])
    register_Ns3NrRrcSapReportConfigToAddMod_methods(root_module, root_module['ns3::NrRrcSap::ReportConfigToAddMod'])
    register_Ns3NrRrcSapRlcConfig_methods(root_module, root_module['ns3::NrRrcSap::RlcConfig'])
    register_Ns3NrRrcSapRrcConnectionReconfiguration_methods(root_module, root_module['ns3::NrRrcSap::RrcConnectionReconfiguration'])
    register_Ns3NrRrcSapRrcConnectionReconfigurationCompleted_methods(root_module, root_module['ns3::NrRrcSap::RrcConnectionReconfigurationCompleted'])
    register_Ns3NrRrcSapRrcConnectionReestablishment_methods(root_module, root_module['ns3::NrRrcSap::RrcConnectionReestablishment'])
    register_Ns3NrRrcSapRrcConnectionReestablishmentComplete_methods(root_module, root_module['ns3::NrRrcSap::RrcConnectionReestablishmentComplete'])
    register_Ns3NrRrcSapRrcConnectionReestablishmentReject_methods(root_module, root_module['ns3::NrRrcSap::RrcConnectionReestablishmentReject'])
    register_Ns3NrRrcSapRrcConnectionReestablishmentRequest_methods(root_module, root_module['ns3::NrRrcSap::RrcConnectionReestablishmentRequest'])
    register_Ns3NrRrcSapRrcConnectionReject_methods(root_module, root_module['ns3::NrRrcSap::RrcConnectionReject'])
    register_Ns3NrRrcSapRrcConnectionRelease_methods(root_module, root_module['ns3::NrRrcSap::RrcConnectionRelease'])
    register_Ns3NrRrcSapRrcConnectionRequest_methods(root_module, root_module['ns3::NrRrcSap::RrcConnectionRequest'])
    register_Ns3NrRrcSapRrcConnectionSetup_methods(root_module, root_module['ns3::NrRrcSap::RrcConnectionSetup'])
    register_Ns3NrRrcSapRrcConnectionSetupCompleted_methods(root_module, root_module['ns3::NrRrcSap::RrcConnectionSetupCompleted'])
    register_Ns3NrRrcSapSoundingRsUlConfigCommon_methods(root_module, root_module['ns3::NrRrcSap::SoundingRsUlConfigCommon'])
    register_Ns3NrRrcSapSoundingRsUlConfigDedicated_methods(root_module, root_module['ns3::NrRrcSap::SoundingRsUlConfigDedicated'])
    register_Ns3NrRrcSapSpeedStatePars_methods(root_module, root_module['ns3::NrRrcSap::SpeedStatePars'])
    register_Ns3NrRrcSapSpeedStateScaleFactors_methods(root_module, root_module['ns3::NrRrcSap::SpeedStateScaleFactors'])
    register_Ns3NrRrcSapSrbToAddMod_methods(root_module, root_module['ns3::NrRrcSap::SrbToAddMod'])
    register_Ns3NrRrcSapSystemInformation_methods(root_module, root_module['ns3::NrRrcSap::SystemInformation'])
    register_Ns3NrRrcSapSystemInformationBlockType1_methods(root_module, root_module['ns3::NrRrcSap::SystemInformationBlockType1'])
    register_Ns3NrRrcSapSystemInformationBlockType2_methods(root_module, root_module['ns3::NrRrcSap::SystemInformationBlockType2'])
    register_Ns3NrRrcSapThresholdEutra_methods(root_module, root_module['ns3::NrRrcSap::ThresholdEutra'])
    register_Ns3NrSpectrumValueCatcher_methods(root_module, root_module['ns3::NrSpectrumValueCatcher'])
    register_Ns3NrSpectrumValueHelper_methods(root_module, root_module['ns3::NrSpectrumValueHelper'])
    register_Ns3NrUeCmacSapProvider_methods(root_module, root_module['ns3::NrUeCmacSapProvider'])
    register_Ns3NrUeCmacSapProviderLogicalChannelConfig_methods(root_module, root_module['ns3::NrUeCmacSapProvider::LogicalChannelConfig'])
    register_Ns3NrUeCmacSapProviderRachConfig_methods(root_module, root_module['ns3::NrUeCmacSapProvider::RachConfig'])
    register_Ns3NrUeCmacSapUser_methods(root_module, root_module['ns3::NrUeCmacSapUser'])
    register_Ns3NrUeConfig_t_methods(root_module, root_module['ns3::NrUeConfig_t'])
    register_Ns3NrUeCphySapProvider_methods(root_module, root_module['ns3::NrUeCphySapProvider'])
    register_Ns3NrUeCphySapUser_methods(root_module, root_module['ns3::NrUeCphySapUser'])
    register_Ns3NrUeCphySapUserUeMeasurementsElement_methods(root_module, root_module['ns3::NrUeCphySapUser::UeMeasurementsElement'])
    register_Ns3NrUeCphySapUserUeMeasurementsParameters_methods(root_module, root_module['ns3::NrUeCphySapUser::UeMeasurementsParameters'])
    register_Ns3NrUePhySapProvider_methods(root_module, root_module['ns3::NrUePhySapProvider'])
    register_Ns3NrUePhySapUser_methods(root_module, root_module['ns3::NrUePhySapUser'])
    register_Ns3NrUeRrcSapProvider_methods(root_module, root_module['ns3::NrUeRrcSapProvider'])
    register_Ns3NrUeRrcSapProviderCompleteSetupParameters_methods(root_module, root_module['ns3::NrUeRrcSapProvider::CompleteSetupParameters'])
    register_Ns3NrUeRrcSapUser_methods(root_module, root_module['ns3::NrUeRrcSapUser'])
    register_Ns3NrUeRrcSapUserSetupParameters_methods(root_module, root_module['ns3::NrUeRrcSapUser::SetupParameters'])
    register_Ns3Mac48Address_methods(root_module, root_module['ns3::Mac48Address'])
    register_Ns3MacCeListElement_s_methods(root_module, root_module['ns3::MacCeListElement_s'])
    register_Ns3MacCeValue_u_methods(root_module, root_module['ns3::MacCeValue_u'])
    register_Ns3Names_methods(root_module, root_module['ns3::Names'])
    register_Ns3NetDeviceContainer_methods(root_module, root_module['ns3::NetDeviceContainer'])
    register_Ns3NodeContainer_methods(root_module, root_module['ns3::NodeContainer'])
    register_Ns3ObjectBase_methods(root_module, root_module['ns3::ObjectBase'])
    register_Ns3ObjectDeleter_methods(root_module, root_module['ns3::ObjectDeleter'])
    register_Ns3ObjectFactory_methods(root_module, root_module['ns3::ObjectFactory'])
    register_Ns3PacketMetadata_methods(root_module, root_module['ns3::PacketMetadata'])
    register_Ns3PacketMetadataItem_methods(root_module, root_module['ns3::PacketMetadata::Item'])
    register_Ns3PacketMetadataItemIterator_methods(root_module, root_module['ns3::PacketMetadata::ItemIterator'])
    register_Ns3PacketTagIterator_methods(root_module, root_module['ns3::PacketTagIterator'])
    register_Ns3PacketTagIteratorItem_methods(root_module, root_module['ns3::PacketTagIterator::Item'])
    register_Ns3PacketTagList_methods(root_module, root_module['ns3::PacketTagList'])
    register_Ns3PacketTagListTagData_methods(root_module, root_module['ns3::PacketTagList::TagData'])
    register_Ns3PagingInfoListElement_s_methods(root_module, root_module['ns3::PagingInfoListElement_s'])
    register_Ns3ParameterLogger_methods(root_module, root_module['ns3::ParameterLogger'])
    register_Ns3PhichListElement_s_methods(root_module, root_module['ns3::PhichListElement_s'])
    register_Ns3NrPhyReceptionStatParameters_methods(root_module, root_module['ns3::NrPhyReceptionStatParameters'])
    register_Ns3NrPhyTransmissionStatParameters_methods(root_module, root_module['ns3::NrPhyTransmissionStatParameters'])
    register_Ns3RachListElement_s_methods(root_module, root_module['ns3::RachListElement_s'])
    register_Ns3NrRadioBearerStatsConnector_methods(root_module, root_module['ns3::NrRadioBearerStatsConnector'])
    register_Ns3RealProtocolRlcSapUser_methods(root_module, root_module['ns3::RealProtocolRlcSapUser'])
    register_Ns3RlcPduListElement_s_methods(root_module, root_module['ns3::RlcPduListElement_s'])
    register_Ns3SbMeasResult_s_methods(root_module, root_module['ns3::SbMeasResult_s'])
    register_Ns3SequenceNumber10_methods(root_module, root_module['ns3::SequenceNumber10'])
    register_Ns3SiConfiguration_s_methods(root_module, root_module['ns3::SiConfiguration_s'])
    register_Ns3SiMessageListElement_s_methods(root_module, root_module['ns3::SiMessageListElement_s'])
    register_Ns3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_methods(root_module, root_module['ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >'])
    register_Ns3Simulator_methods(root_module, root_module['ns3::Simulator'])
    register_Ns3SpsConfig_s_methods(root_module, root_module['ns3::SpsConfig_s'])
    register_Ns3SrConfig_s_methods(root_module, root_module['ns3::SrConfig_s'])
    register_Ns3SrListElement_s_methods(root_module, root_module['ns3::SrListElement_s'])
    register_Ns3StatisticalSummary_methods(root_module, root_module['ns3::StatisticalSummary'])
    register_Ns3Tag_methods(root_module, root_module['ns3::Tag'])
    register_Ns3TagBuffer_methods(root_module, root_module['ns3::TagBuffer'])
    register_Ns3TbId_t_methods(root_module, root_module['ns3::TbId_t'])
    register_Ns3TbStats_t_methods(root_module, root_module['ns3::TbStats_t'])
    register_Ns3TimeWithUnit_methods(root_module, root_module['ns3::TimeWithUnit'])
    register_Ns3NrTransmissionModesLayers_methods(root_module, root_module['ns3::NrTransmissionModesLayers'])
    register_Ns3TypeId_methods(root_module, root_module['ns3::TypeId'])
    register_Ns3TypeIdAttributeInformation_methods(root_module, root_module['ns3::TypeId::AttributeInformation'])
    register_Ns3TypeIdTraceSourceInformation_methods(root_module, root_module['ns3::TypeId::TraceSourceInformation'])
    register_Ns3UeCapabilities_s_methods(root_module, root_module['ns3::UeCapabilities_s'])
    register_Ns3UeSelected_s_methods(root_module, root_module['ns3::UeSelected_s'])
    register_Ns3UlCqi_s_methods(root_module, root_module['ns3::UlCqi_s'])
    register_Ns3UlDciListElement_s_methods(root_module, root_module['ns3::UlDciListElement_s'])
    register_Ns3UlGrant_s_methods(root_module, root_module['ns3::UlGrant_s'])
    register_Ns3UlInfoListElement_s_methods(root_module, root_module['ns3::UlInfoListElement_s'])
    register_Ns3UplinkNrGlobalPathlossDatabase_methods(root_module, root_module['ns3::UplinkNrGlobalPathlossDatabase'])
    register_Ns3Vector2D_methods(root_module, root_module['ns3::Vector2D'])
    register_Ns3Vector3D_methods(root_module, root_module['ns3::Vector3D'])
    register_Ns3VendorSpecificListElement_s_methods(root_module, root_module['ns3::VendorSpecificListElement_s'])
    register_Ns3Empty_methods(root_module, root_module['ns3::empty'])
    register_Ns3FdbetsFlowPerf_t_methods(root_module, root_module['ns3::fdbetsFlowPerf_t'])
    register_Ns3FdtbfqsFlowPerf_t_methods(root_module, root_module['ns3::fdtbfqsFlowPerf_t'])
    register_Ns3Int64x64_t_methods(root_module, root_module['ns3::int64x64_t'])
    register_Ns3PfsFlowPerf_t_methods(root_module, root_module['ns3::pfsFlowPerf_t'])
    register_Ns3PssFlowPerf_t_methods(root_module, root_module['ns3::pssFlowPerf_t'])
    register_Ns3TbInfo_t_methods(root_module, root_module['ns3::tbInfo_t'])
    register_Ns3TdbetsFlowPerf_t_methods(root_module, root_module['ns3::tdbetsFlowPerf_t'])
    register_Ns3TdtbfqsFlowPerf_t_methods(root_module, root_module['ns3::tdtbfqsFlowPerf_t'])
    register_Ns3Chunk_methods(root_module, root_module['ns3::Chunk'])
    register_Ns3DownlinkNrGlobalPathlossDatabase_methods(root_module, root_module['ns3::DownlinkNrGlobalPathlossDatabase'])
    register_Ns3EpsBearerTag_methods(root_module, root_module['ns3::EpsBearerTag']) ##smsohn
    register_Ns3QosFlowTag_methods(root_module, root_module['ns3::QosFlowTag'])
    register_Ns3Header_methods(root_module, root_module['ns3::Header'])
    register_Ns3Ipv4Header_methods(root_module, root_module['ns3::Ipv4Header'])
    register_Ns3NrEnbRrcSapProvider_methods(root_module, root_module['ns3::NrEnbRrcSapProvider'])
    register_Ns3NrEnbRrcSapProviderCompleteSetupUeParameters_methods(root_module, root_module['ns3::NrEnbRrcSapProvider::CompleteSetupUeParameters'])
    register_Ns3NrEnbRrcSapUser_methods(root_module, root_module['ns3::NrEnbRrcSapUser'])
    register_Ns3NrEnbRrcSapUserSetupUeParameters_methods(root_module, root_module['ns3::NrEnbRrcSapUser::SetupUeParameters'])
    register_Ns3NrPdcpHeader_methods(root_module, root_module['ns3::NrPdcpHeader'])
    register_Ns3NrPhyTag_methods(root_module, root_module['ns3::NrPhyTag'])
    register_Ns3NrRadioBearerTag_methods(root_module, root_module['ns3::NrRadioBearerTag'])
    register_Ns3NrRlcAmHeader_methods(root_module, root_module['ns3::NrRlcAmHeader'])
    register_Ns3NrRlcHeader_methods(root_module, root_module['ns3::NrRlcHeader'])
    register_Ns3NrRlcSduStatusTag_methods(root_module, root_module['ns3::NrRlcSduStatusTag'])
    register_Ns3Object_methods(root_module, root_module['ns3::Object'])
    register_Ns3ObjectAggregateIterator_methods(root_module, root_module['ns3::Object::AggregateIterator'])
    register_Ns3PacketBurst_methods(root_module, root_module['ns3::PacketBurst'])
    register_Ns3PdcpTag_methods(root_module, root_module['ns3::PdcpTag'])
    register_Ns3NrRadioEnvironmentMapHelper_methods(root_module, root_module['ns3::NrRadioEnvironmentMapHelper'])
    register_Ns3RandomVariableStream_methods(root_module, root_module['ns3::RandomVariableStream'])
    register_Ns3RlcTag_methods(root_module, root_module['ns3::RlcTag'])
    register_Ns3SequentialRandomVariable_methods(root_module, root_module['ns3::SequentialRandomVariable'])
    register_Ns3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >'])
    register_Ns3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
    register_Ns3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
    register_Ns3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >'])
    register_Ns3SimpleRefCount__Ns3NgcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3NgcTft__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NgcTft, ns3::empty, ns3::DefaultDeleter<ns3::NgcTft> >'])
    register_Ns3SimpleRefCount__Ns3NgcTftClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3NgcTftClassifier__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NgcTftClassifier, ns3::empty, ns3::DefaultDeleter<ns3::NgcTftClassifier> >'])
    register_Ns3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >'])
    register_Ns3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >'])
    register_Ns3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >'])
    register_Ns3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >'])
    register_Ns3SimpleRefCount__Ns3NrChunkProcessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3NrChunkProcessor__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NrChunkProcessor, ns3::empty, ns3::DefaultDeleter<ns3::NrChunkProcessor> >'])
    register_Ns3SimpleRefCount__Ns3NrControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3NrControlMessage__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NrControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::NrControlMessage> >'])
    register_Ns3SimpleRefCount__Ns3NrHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3NrHarqPhy__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NrHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::NrHarqPhy> >'])
    register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
    register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
    register_Ns3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> >'])
    register_Ns3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> >'])
    register_Ns3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> >'])
    register_Ns3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >'])
    register_Ns3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue> >'])
    register_Ns3SimpleRefCount__Ns3NrX2CellInfo_Ns3Empty_Ns3DefaultDeleter__lt__ns3NrX2CellInfo__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NrX2CellInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2CellInfo> >'])
    register_Ns3SimpleRefCount__Ns3NrX2IfaceInfo_Ns3Empty_Ns3DefaultDeleter__lt__ns3NrX2IfaceInfo__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NrX2IfaceInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2IfaceInfo> >'])
    register_Ns3Socket_methods(root_module, root_module['ns3::Socket'])
    register_Ns3SocketAddressTag_methods(root_module, root_module['ns3::SocketAddressTag'])
    register_Ns3SocketIpTosTag_methods(root_module, root_module['ns3::SocketIpTosTag'])
    register_Ns3SocketIpTtlTag_methods(root_module, root_module['ns3::SocketIpTtlTag'])
    register_Ns3SocketIpv6HopLimitTag_methods(root_module, root_module['ns3::SocketIpv6HopLimitTag'])
    register_Ns3SocketIpv6TclassTag_methods(root_module, root_module['ns3::SocketIpv6TclassTag'])
    register_Ns3SocketSetDontFragmentTag_methods(root_module, root_module['ns3::SocketSetDontFragmentTag'])
    register_Ns3SpectrumInterference_methods(root_module, root_module['ns3::SpectrumInterference'])
    register_Ns3SpectrumModel_methods(root_module, root_module['ns3::SpectrumModel'])
    register_Ns3SpectrumPhy_methods(root_module, root_module['ns3::SpectrumPhy'])
    register_Ns3SpectrumPropagationLossModel_methods(root_module, root_module['ns3::SpectrumPropagationLossModel'])
    register_Ns3SpectrumSignalParameters_methods(root_module, root_module['ns3::SpectrumSignalParameters'])
    register_Ns3SpectrumValue_methods(root_module, root_module['ns3::SpectrumValue'])
    register_Ns3Time_methods(root_module, root_module['ns3::Time'])
    register_Ns3NrTraceFadingLossModel_methods(root_module, root_module['ns3::NrTraceFadingLossModel'])
    register_Ns3TraceSourceAccessor_methods(root_module, root_module['ns3::TraceSourceAccessor'])
    register_Ns3Trailer_methods(root_module, root_module['ns3::Trailer'])
    register_Ns3TriangularRandomVariable_methods(root_module, root_module['ns3::TriangularRandomVariable'])
    register_Ns3UeManager_methods(root_module, root_module['ns3::UeManager'])
    register_Ns3UniformRandomVariable_methods(root_module, root_module['ns3::UniformRandomVariable'])
    register_Ns3VendorSpecificValue_methods(root_module, root_module['ns3::VendorSpecificValue'])
    register_Ns3WeibullRandomVariable_methods(root_module, root_module['ns3::WeibullRandomVariable'])
    register_Ns3NrX2CellInfo_methods(root_module, root_module['ns3::NrX2CellInfo'])
    register_Ns3NrX2IfaceInfo_methods(root_module, root_module['ns3::NrX2IfaceInfo'])
    register_Ns3ZetaRandomVariable_methods(root_module, root_module['ns3::ZetaRandomVariable'])
    register_Ns3ZipfRandomVariable_methods(root_module, root_module['ns3::ZipfRandomVariable'])
    register_Ns3Application_methods(root_module, root_module['ns3::Application'])
    register_Ns3NrAsn1Header_methods(root_module, root_module['ns3::NrAsn1Header'])
    register_Ns3AttributeAccessor_methods(root_module, root_module['ns3::AttributeAccessor'])
    register_Ns3AttributeChecker_methods(root_module, root_module['ns3::AttributeChecker'])
    register_Ns3AttributeValue_methods(root_module, root_module['ns3::AttributeValue'])
    register_Ns3BooleanChecker_methods(root_module, root_module['ns3::BooleanChecker'])
    register_Ns3BooleanValue_methods(root_module, root_module['ns3::BooleanValue'])
    register_Ns3CallbackChecker_methods(root_module, root_module['ns3::CallbackChecker'])
    register_Ns3CallbackImplBase_methods(root_module, root_module['ns3::CallbackImplBase'])
    register_Ns3CallbackValue_methods(root_module, root_module['ns3::CallbackValue'])
    register_Ns3Channel_methods(root_module, root_module['ns3::Channel'])
    register_Ns3ConstantRandomVariable_methods(root_module, root_module['ns3::ConstantRandomVariable'])
    register_Ns3DataCalculator_methods(root_module, root_module['ns3::DataCalculator'])
    register_Ns3DataOutputInterface_methods(root_module, root_module['ns3::DataOutputInterface'])
    register_Ns3DataRateChecker_methods(root_module, root_module['ns3::DataRateChecker'])
    register_Ns3DataRateValue_methods(root_module, root_module['ns3::DataRateValue'])
    register_Ns3DeterministicRandomVariable_methods(root_module, root_module['ns3::DeterministicRandomVariable'])
    register_Ns3DoubleValue_methods(root_module, root_module['ns3::DoubleValue'])
    register_Ns3EmpiricalRandomVariable_methods(root_module, root_module['ns3::EmpiricalRandomVariable'])
    register_Ns3EmptyAttributeValue_methods(root_module, root_module['ns3::EmptyAttributeValue'])
    register_Ns3EnumChecker_methods(root_module, root_module['ns3::EnumChecker'])
    register_Ns3EnumValue_methods(root_module, root_module['ns3::EnumValue'])
    register_Ns3NgcEnbApplication_methods(root_module, root_module['ns3::NgcEnbApplication'])
    register_Ns3NgcEnbApplicationEpsFlowId_t_methods(root_module, root_module['ns3::NgcEnbApplication::EpsFlowId_t'])
    register_Ns3NgcHelper_methods(root_module, root_module['ns3::NgcHelper'])
    register_Ns3NgcAmf_methods(root_module, root_module['ns3::NgcAmf'])
    register_Ns3NgcSmfUpfApplication_methods(root_module, root_module['ns3::NgcSmfUpfApplication'])
    register_Ns3NgcTft_methods(root_module, root_module['ns3::NgcTft'])
    register_Ns3NgcTftPacketFilter_methods(root_module, root_module['ns3::NgcTft::PacketFilter'])
    register_Ns3NgcTftClassifier_methods(root_module, root_module['ns3::NgcTftClassifier'])
    register_Ns3NgcUeNas_methods(root_module, root_module['ns3::NgcUeNas'])
    register_Ns3NgcX2_methods(root_module, root_module['ns3::NgcX2'])
    register_Ns3NgcX2HandoverPreparationFailureHeader_methods(root_module, root_module['ns3::NgcX2HandoverPreparationFailureHeader'])
    register_Ns3NgcX2HandoverRequestAckHeader_methods(root_module, root_module['ns3::NgcX2HandoverRequestAckHeader'])
    register_Ns3NgcX2HandoverRequestHeader_methods(root_module, root_module['ns3::NgcX2HandoverRequestHeader'])
    register_Ns3NgcX2Header_methods(root_module, root_module['ns3::NgcX2Header'])
    register_Ns3NgcX2LoadInformationHeader_methods(root_module, root_module['ns3::NgcX2LoadInformationHeader'])
    register_Ns3NgcX2ResourceStatusUpdateHeader_methods(root_module, root_module['ns3::NgcX2ResourceStatusUpdateHeader'])
    register_Ns3NgcX2SnStatusTransferHeader_methods(root_module, root_module['ns3::NgcX2SnStatusTransferHeader'])
    register_Ns3NgcX2UeContextReleaseHeader_methods(root_module, root_module['ns3::NgcX2UeContextReleaseHeader'])
    register_Ns3ErlangRandomVariable_methods(root_module, root_module['ns3::ErlangRandomVariable'])
    register_Ns3EventImpl_methods(root_module, root_module['ns3::EventImpl'])
    register_Ns3ExponentialRandomVariable_methods(root_module, root_module['ns3::ExponentialRandomVariable'])
    register_Ns3FfMacScheduler_methods(root_module, root_module['ns3::NrFfMacScheduler'])
    register_Ns3GammaRandomVariable_methods(root_module, root_module['ns3::GammaRandomVariable'])
    register_Ns3NrGtpuHeader_methods(root_module, root_module['ns3::NrGtpuHeader'])
    register_Ns3IntegerValue_methods(root_module, root_module['ns3::IntegerValue'])
    register_Ns3Ipv4_methods(root_module, root_module['ns3::Ipv4'])
    register_Ns3Ipv4AddressChecker_methods(root_module, root_module['ns3::Ipv4AddressChecker'])
    register_Ns3Ipv4AddressValue_methods(root_module, root_module['ns3::Ipv4AddressValue'])
    register_Ns3Ipv4MaskChecker_methods(root_module, root_module['ns3::Ipv4MaskChecker'])
    register_Ns3Ipv4MaskValue_methods(root_module, root_module['ns3::Ipv4MaskValue'])
    register_Ns3Ipv4MulticastRoute_methods(root_module, root_module['ns3::Ipv4MulticastRoute'])
    register_Ns3Ipv4Route_methods(root_module, root_module['ns3::Ipv4Route'])
    register_Ns3Ipv6AddressChecker_methods(root_module, root_module['ns3::Ipv6AddressChecker'])
    register_Ns3Ipv6AddressValue_methods(root_module, root_module['ns3::Ipv6AddressValue'])
    register_Ns3Ipv6PrefixChecker_methods(root_module, root_module['ns3::Ipv6PrefixChecker'])
    register_Ns3Ipv6PrefixValue_methods(root_module, root_module['ns3::Ipv6PrefixValue'])
    register_Ns3LogNormalRandomVariable_methods(root_module, root_module['ns3::LogNormalRandomVariable'])
    register_Ns3NrAmc_methods(root_module, root_module['ns3::NrAmc'])
    register_Ns3NrAnr_methods(root_module, root_module['ns3::NrAnr'])
    register_Ns3NrChunkProcessor_methods(root_module, root_module['ns3::NrChunkProcessor'])
    register_Ns3NrControlMessage_methods(root_module, root_module['ns3::NrControlMessage'])
    register_Ns3NrEnbMac_methods(root_module, root_module['ns3::NrEnbMac'])
    register_Ns3NrEnbRrc_methods(root_module, root_module['ns3::NrEnbRrc'])
    register_Ns3NrEnbRrcProtocolIdeal_methods(root_module, root_module['ns3::NrEnbRrcProtocolIdeal'])
    register_Ns3NrEnbRrcProtocolReal_methods(root_module, root_module['ns3::NrEnbRrcProtocolReal'])
    register_Ns3NrFfrAlgorithm_methods(root_module, root_module['ns3::NrFfrAlgorithm'])
    register_Ns3NrFfrDistributedAlgorithm_methods(root_module, root_module['ns3::NrFfrDistributedAlgorithm'])
    register_Ns3NrFfrEnhancedAlgorithm_methods(root_module, root_module['ns3::NrFfrEnhancedAlgorithm'])
    register_Ns3NrFfrSoftAlgorithm_methods(root_module, root_module['ns3::NrFfrSoftAlgorithm'])
    register_Ns3NrFrHardAlgorithm_methods(root_module, root_module['ns3::NrFrHardAlgorithm'])
    register_Ns3NrFrNoOpAlgorithm_methods(root_module, root_module['ns3::NrFrNoOpAlgorithm'])
    register_Ns3NrFrSoftAlgorithm_methods(root_module, root_module['ns3::NrFrSoftAlgorithm'])
    register_Ns3NrFrStrictAlgorithm_methods(root_module, root_module['ns3::NrFrStrictAlgorithm'])
    register_Ns3NrHandoverAlgorithm_methods(root_module, root_module['ns3::NrHandoverAlgorithm'])
    register_Ns3NrHarqPhy_methods(root_module, root_module['ns3::NrHarqPhy'])
    register_Ns3NrHelper_methods(root_module, root_module['ns3::NrHelper'])
    register_Ns3NrHexGridEnbTopologyHelper_methods(root_module, root_module['ns3::NrHexGridEnbTopologyHelper'])
    register_Ns3NrInterference_methods(root_module, root_module['ns3::NrInterference'])
    register_Ns3NrPdcp_methods(root_module, root_module['ns3::NrPdcp'])
    register_Ns3NrPdcpStatus_methods(root_module, root_module['ns3::NrPdcp::Status'])
    register_Ns3NrPhy_methods(root_module, root_module['ns3::NrPhy'])
    register_Ns3NrRadioBearerInfo_methods(root_module, root_module['ns3::NrRadioBearerInfo'])
    register_Ns3NrRlc_methods(root_module, root_module['ns3::NrRlc'])
    register_Ns3NrRlcAm_methods(root_module, root_module['ns3::NrRlcAm'])
    register_Ns3NrRlcSm_methods(root_module, root_module['ns3::NrRlcSm'])
    register_Ns3NrRlcTm_methods(root_module, root_module['ns3::NrRlcTm'])
    register_Ns3NrRlcUm_methods(root_module, root_module['ns3::NrRlcUm'])
    register_Ns3NrSignalingRadioBearerInfo_methods(root_module, root_module['ns3::NrSignalingRadioBearerInfo'])
    register_Ns3NrSpectrumPhy_methods(root_module, root_module['ns3::NrSpectrumPhy'])
    register_Ns3NrSpectrumSignalParameters_methods(root_module, root_module['ns3::NrSpectrumSignalParameters'])
    register_Ns3NrSpectrumSignalParametersDataFrame_methods(root_module, root_module['ns3::NrSpectrumSignalParametersDataFrame'])
    register_Ns3NrSpectrumSignalParametersDlCtrlFrame_methods(root_module, root_module['ns3::NrSpectrumSignalParametersDlCtrlFrame'])
    register_Ns3NrSpectrumSignalParametersUlSrsFrame_methods(root_module, root_module['ns3::NrSpectrumSignalParametersUlSrsFrame'])
    register_Ns3NrStatsCalculator_methods(root_module, root_module['ns3::NrStatsCalculator'])
    register_Ns3NrUeMac_methods(root_module, root_module['ns3::NrUeMac'])
    register_Ns3NrUePhy_methods(root_module, root_module['ns3::NrUePhy'])
    register_Ns3NrUePowerControl_methods(root_module, root_module['ns3::NrUePowerControl'])
    register_Ns3NrUeRrc_methods(root_module, root_module['ns3::NrUeRrc'])
    register_Ns3NrUeRrcProtocolIdeal_methods(root_module, root_module['ns3::NrUeRrcProtocolIdeal'])
    register_Ns3NrUeRrcProtocolReal_methods(root_module, root_module['ns3::NrUeRrcProtocolReal'])
    register_Ns3Mac48AddressChecker_methods(root_module, root_module['ns3::Mac48AddressChecker'])
    register_Ns3Mac48AddressValue_methods(root_module, root_module['ns3::Mac48AddressValue'])
    register_Ns3NrMacStatsCalculator_methods(root_module, root_module['ns3::NrMacStatsCalculator'])
    register_Ns3MibNrControlMessage_methods(root_module, root_module['ns3::MibNrControlMessage'])
    register_Ns3MobilityModel_methods(root_module, root_module['ns3::MobilityModel'])
    register_Ns3NetDevice_methods(root_module, root_module['ns3::NetDevice'])
    register_Ns3NixVector_methods(root_module, root_module['ns3::NixVector'])
    register_Ns3NrNoOpHandoverAlgorithm_methods(root_module, root_module['ns3::NrNoOpHandoverAlgorithm'])
    register_Ns3Node_methods(root_module, root_module['ns3::Node'])
    register_Ns3NormalRandomVariable_methods(root_module, root_module['ns3::NormalRandomVariable'])
    register_Ns3ObjectFactoryChecker_methods(root_module, root_module['ns3::ObjectFactoryChecker'])
    register_Ns3ObjectFactoryValue_methods(root_module, root_module['ns3::ObjectFactoryValue'])
    register_Ns3Packet_methods(root_module, root_module['ns3::Packet'])
    register_Ns3ParetoRandomVariable_methods(root_module, root_module['ns3::ParetoRandomVariable'])
    register_Ns3NrPfFfMacScheduler_methods(root_module, root_module['ns3::NrPfFfMacScheduler'])
    register_Ns3NrPhyRxStatsCalculator_methods(root_module, root_module['ns3::NrPhyRxStatsCalculator'])
    register_Ns3NrPhyStatsCalculator_methods(root_module, root_module['ns3::NrPhyStatsCalculator'])
    register_Ns3NrPhyTxStatsCalculator_methods(root_module, root_module['ns3::NrPhyTxStatsCalculator'])
    register_Ns3PointToPointNgcHelper_methods(root_module, root_module['ns3::PointToPointNgcHelper'])
    register_Ns3PointerChecker_methods(root_module, root_module['ns3::PointerChecker'])
    register_Ns3PointerValue_methods(root_module, root_module['ns3::PointerValue'])
    register_Ns3NrPssFfMacScheduler_methods(root_module, root_module['ns3::NrPssFfMacScheduler'])
    register_Ns3RachPreambleNrControlMessage_methods(root_module, root_module['ns3::RachPreambleNrControlMessage'])
    register_Ns3NrRadioBearerStatsCalculator_methods(root_module, root_module['ns3::NrRadioBearerStatsCalculator'])
    register_Ns3RarNrControlMessage_methods(root_module, root_module['ns3::RarNrControlMessage'])
    register_Ns3RarNrControlMessageRar_methods(root_module, root_module['ns3::RarNrControlMessage::Rar'])
    register_Ns3NrRemSpectrumPhy_methods(root_module, root_module['ns3::NrRemSpectrumPhy'])
    register_Ns3NrRrFfMacScheduler_methods(root_module, root_module['ns3::NrRrFfMacScheduler'])
    register_Ns3RrcNrAsn1Header_methods(root_module, root_module['ns3::RrcNrAsn1Header'])
    register_Ns3RrcDlCcchMessage_methods(root_module, root_module['ns3::RrcDlCcchMessage'])
    register_Ns3RrcDlDcchMessage_methods(root_module, root_module['ns3::RrcDlDcchMessage'])
    register_Ns3RrcUlCcchMessage_methods(root_module, root_module['ns3::RrcUlCcchMessage'])
    register_Ns3RrcUlDcchMessage_methods(root_module, root_module['ns3::RrcUlDcchMessage'])
    register_Ns3Sib1NrControlMessage_methods(root_module, root_module['ns3::Sib1NrControlMessage'])
    register_Ns3SpectrumChannel_methods(root_module, root_module['ns3::SpectrumChannel'])
    register_Ns3SrsCqiRntiVsp_methods(root_module, root_module['ns3::SrsCqiRntiVsp'])
    register_Ns3StringChecker_methods(root_module, root_module['ns3::StringChecker'])
    register_Ns3StringValue_methods(root_module, root_module['ns3::StringValue'])
    register_Ns3NrTdBetFfMacScheduler_methods(root_module, root_module['ns3::NrTdBetFfMacScheduler'])
    register_Ns3NrTdMtFfMacScheduler_methods(root_module, root_module['ns3::NrTdMtFfMacScheduler'])
    register_Ns3NrTdTbfqFfMacScheduler_methods(root_module, root_module['ns3::NrTdTbfqFfMacScheduler'])
    register_Ns3TimeValue_methods(root_module, root_module['ns3::TimeValue'])
    register_Ns3NrTtaFfMacScheduler_methods(root_module, root_module['ns3::NrTtaFfMacScheduler'])
    register_Ns3TypeIdChecker_methods(root_module, root_module['ns3::TypeIdChecker'])
    register_Ns3TypeIdValue_methods(root_module, root_module['ns3::TypeIdValue'])
    register_Ns3UintegerValue_methods(root_module, root_module['ns3::UintegerValue'])
    register_Ns3UlDciNrControlMessage_methods(root_module, root_module['ns3::UlDciNrControlMessage'])
    register_Ns3Vector2DChecker_methods(root_module, root_module['ns3::Vector2DChecker'])
    register_Ns3Vector2DValue_methods(root_module, root_module['ns3::Vector2DValue'])
    register_Ns3Vector3DChecker_methods(root_module, root_module['ns3::Vector3DChecker'])
    register_Ns3Vector3DValue_methods(root_module, root_module['ns3::Vector3DValue'])
    register_Ns3VirtualNetDevice_methods(root_module, root_module['ns3::VirtualNetDevice'])
    register_Ns3NrA2A4RsrqHandoverAlgorithm_methods(root_module, root_module['ns3::NrA2A4RsrqHandoverAlgorithm'])
    register_Ns3NrA3RsrpHandoverAlgorithm_methods(root_module, root_module['ns3::NrA3RsrpHandoverAlgorithm'])
    register_Ns3AddressChecker_methods(root_module, root_module['ns3::AddressChecker'])
    register_Ns3AddressValue_methods(root_module, root_module['ns3::AddressValue'])
    register_Ns3BsrNrControlMessage_methods(root_module, root_module['ns3::BsrNrControlMessage'])
    register_Ns3NrCqaFfMacScheduler_methods(root_module, root_module['ns3::NrCqaFfMacScheduler'])
    register_Ns3DlCqiNrControlMessage_methods(root_module, root_module['ns3::DlCqiNrControlMessage'])
    register_Ns3DlDciNrControlMessage_methods(root_module, root_module['ns3::DlDciNrControlMessage'])
    register_Ns3DlHarqFeedbackNrControlMessage_methods(root_module, root_module['ns3::DlHarqFeedbackNrControlMessage'])
    register_Ns3EmuNgcHelper_methods(root_module, root_module['ns3::EmuNgcHelper'])
    register_Ns3NrFdBetFfMacScheduler_methods(root_module, root_module['ns3::NrFdBetFfMacScheduler'])
    register_Ns3NrFdMtFfMacScheduler_methods(root_module, root_module['ns3::NrFdMtFfMacScheduler'])
    register_Ns3NrFdTbfqFfMacScheduler_methods(root_module, root_module['ns3::NrFdTbfqFfMacScheduler'])
    register_Ns3HandoverPreparationInfoHeader_methods(root_module, root_module['ns3::HandoverPreparationInfoHeader'])
    register_Ns3NrDataRadioBearerInfo_methods(root_module, root_module['ns3::NrDataRadioBearerInfo'])
    register_Ns3NrEnbPhy_methods(root_module, root_module['ns3::NrEnbPhy'])
    register_Ns3NrNetDevice_methods(root_module, root_module['ns3::NrNetDevice'])
    register_Ns3NrUeNetDevice_methods(root_module, root_module['ns3::NrUeNetDevice'])
    register_Ns3MeasurementReportHeader_methods(root_module, root_module['ns3::MeasurementReportHeader'])
    register_Ns3RrcConnectionReconfigurationCompleteHeader_methods(root_module, root_module['ns3::RrcConnectionReconfigurationCompleteHeader'])
    register_Ns3RrcConnectionReconfigurationHeader_methods(root_module, root_module['ns3::RrcConnectionReconfigurationHeader'])
    register_Ns3RrcConnectionReestablishmentCompleteHeader_methods(root_module, root_module['ns3::RrcConnectionReestablishmentCompleteHeader'])
    register_Ns3RrcConnectionReestablishmentHeader_methods(root_module, root_module['ns3::RrcConnectionReestablishmentHeader'])
    register_Ns3RrcConnectionReestablishmentRejectHeader_methods(root_module, root_module['ns3::RrcConnectionReestablishmentRejectHeader'])
    register_Ns3RrcConnectionReestablishmentRequestHeader_methods(root_module, root_module['ns3::RrcConnectionReestablishmentRequestHeader'])
    register_Ns3RrcConnectionRejectHeader_methods(root_module, root_module['ns3::RrcConnectionRejectHeader'])
    register_Ns3RrcConnectionReleaseHeader_methods(root_module, root_module['ns3::RrcConnectionReleaseHeader'])
    register_Ns3RrcConnectionRequestHeader_methods(root_module, root_module['ns3::RrcConnectionRequestHeader'])
    register_Ns3RrcConnectionSetupCompleteHeader_methods(root_module, root_module['ns3::RrcConnectionSetupCompleteHeader'])
    register_Ns3RrcConnectionSetupHeader_methods(root_module, root_module['ns3::RrcConnectionSetupHeader'])
    register_Ns3NrEnbNetDevice_methods(root_module, root_module['ns3::NrEnbNetDevice'])
    register_Ns3ConfigMatchContainer_methods(root_module, root_module['ns3::Config::MatchContainer'])
    register_Ns3HashImplementation_methods(root_module, root_module['ns3::Hash::Implementation'])
    register_Ns3HashFunctionFnv1a_methods(root_module, root_module['ns3::Hash::Function::Fnv1a'])
    register_Ns3HashFunctionHash32_methods(root_module, root_module['ns3::Hash::Function::Hash32'])
    register_Ns3HashFunctionHash64_methods(root_module, root_module['ns3::Hash::Function::Hash64'])
    register_Ns3HashFunctionMurmur3_methods(root_module, root_module['ns3::Hash::Function::Murmur3'])
    return

def register_Ns3Address_methods(root_module, cls):
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    ## address.h (module 'network'): ns3::Address::Address() [constructor]
    cls.add_constructor([])
    ## address.h (module 'network'): ns3::Address::Address(uint8_t type, uint8_t const * buffer, uint8_t len) [constructor]
    cls.add_constructor([param('uint8_t', 'type'), param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
    ## address.h (module 'network'): ns3::Address::Address(ns3::Address const & address) [copy constructor]
    cls.add_constructor([param('ns3::Address const &', 'address')])
    ## address.h (module 'network'): bool ns3::Address::CheckCompatible(uint8_t type, uint8_t len) const [member function]
    cls.add_method('CheckCompatible', 
                   'bool', 
                   [param('uint8_t', 'type'), param('uint8_t', 'len')], 
                   is_const=True)
    ## address.h (module 'network'): uint32_t ns3::Address::CopyAllFrom(uint8_t const * buffer, uint8_t len) [member function]
    cls.add_method('CopyAllFrom', 
                   'uint32_t', 
                   [param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
    ## address.h (module 'network'): uint32_t ns3::Address::CopyAllTo(uint8_t * buffer, uint8_t len) const [member function]
    cls.add_method('CopyAllTo', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint8_t', 'len')], 
                   is_const=True)
    ## address.h (module 'network'): uint32_t ns3::Address::CopyFrom(uint8_t const * buffer, uint8_t len) [member function]
    cls.add_method('CopyFrom', 
                   'uint32_t', 
                   [param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
    ## address.h (module 'network'): uint32_t ns3::Address::CopyTo(uint8_t * buffer) const [member function]
    cls.add_method('CopyTo', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer')], 
                   is_const=True)
    ## address.h (module 'network'): void ns3::Address::Deserialize(ns3::TagBuffer buffer) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'buffer')])
    ## address.h (module 'network'): uint8_t ns3::Address::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## address.h (module 'network'): uint32_t ns3::Address::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## address.h (module 'network'): bool ns3::Address::IsInvalid() const [member function]
    cls.add_method('IsInvalid', 
                   'bool', 
                   [], 
                   is_const=True)
    ## address.h (module 'network'): bool ns3::Address::IsMatchingType(uint8_t type) const [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('uint8_t', 'type')], 
                   is_const=True)
    ## address.h (module 'network'): static uint8_t ns3::Address::Register() [member function]
    cls.add_method('Register', 
                   'uint8_t', 
                   [], 
                   is_static=True)
    ## address.h (module 'network'): void ns3::Address::Serialize(ns3::TagBuffer buffer) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'buffer')], 
                   is_const=True)
    return

def register_Ns3AllocationRetentionPriority_methods(root_module, cls):
    ## eps-bearer.h (module 'nr'): ns3::AllocationRetentionPriority::AllocationRetentionPriority(ns3::AllocationRetentionPriority const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::AllocationRetentionPriority const &', 'arg0')])
    ## eps-bearer.h (module 'nr'): ns3::AllocationRetentionPriority::AllocationRetentionPriority() [constructor]
    cls.add_constructor([])
    ## eps-bearer.h (module 'nr'): ns3::AllocationRetentionPriority::preemptionCapability [variable]
    cls.add_instance_attribute('preemptionCapability', 'bool', is_const=False)
    ## eps-bearer.h (module 'nr'): ns3::AllocationRetentionPriority::preemptionVulnerability [variable]
    cls.add_instance_attribute('preemptionVulnerability', 'bool', is_const=False)
    ## eps-bearer.h (module 'nr'): ns3::AllocationRetentionPriority::priorityLevel [variable]
    cls.add_instance_attribute('priorityLevel', 'uint8_t', is_const=False)
    return

def register_Ns3AttributeConstructionList_methods(root_module, cls):
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList(ns3::AttributeConstructionList const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::AttributeConstructionList const &', 'arg0')])
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList() [constructor]
    cls.add_constructor([])
    ## attribute-construction-list.h (module 'core'): void ns3::AttributeConstructionList::Add(std::string name, ns3::Ptr<ns3::AttributeChecker const> checker, ns3::Ptr<ns3::AttributeValue> value) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::Ptr< ns3::AttributeValue >', 'value')])
    ## attribute-construction-list.h (module 'core'): std::_List_const_iterator<ns3::AttributeConstructionList::Item> ns3::AttributeConstructionList::Begin() const [member function]
    cls.add_method('Begin', 
                   'std::_List_const_iterator< ns3::AttributeConstructionList::Item >', 
                   [], 
                   is_const=True)
    ## attribute-construction-list.h (module 'core'): std::_List_const_iterator<ns3::AttributeConstructionList::Item> ns3::AttributeConstructionList::End() const [member function]
    cls.add_method('End', 
                   'std::_List_const_iterator< ns3::AttributeConstructionList::Item >', 
                   [], 
                   is_const=True)
    ## attribute-construction-list.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeConstructionList::Find(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('Find', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True)
    return

def register_Ns3AttributeConstructionListItem_methods(root_module, cls):
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item() [constructor]
    cls.add_constructor([])
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item(ns3::AttributeConstructionList::Item const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::AttributeConstructionList::Item const &', 'arg0')])
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::checker [variable]
    cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::value [variable]
    cls.add_instance_attribute('value', 'ns3::Ptr< ns3::AttributeValue >', is_const=False)
    return

def register_Ns3BandInfo_methods(root_module, cls):
    ## spectrum-model.h (module 'spectrum'): ns3::BandInfo::BandInfo() [constructor]
    cls.add_constructor([])
    ## spectrum-model.h (module 'spectrum'): ns3::BandInfo::BandInfo(ns3::BandInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::BandInfo const &', 'arg0')])
    ## spectrum-model.h (module 'spectrum'): ns3::BandInfo::fc [variable]
    cls.add_instance_attribute('fc', 'double', is_const=False)
    ## spectrum-model.h (module 'spectrum'): ns3::BandInfo::fh [variable]
    cls.add_instance_attribute('fh', 'double', is_const=False)
    ## spectrum-model.h (module 'spectrum'): ns3::BandInfo::fl [variable]
    cls.add_instance_attribute('fl', 'double', is_const=False)
    return

def register_Ns3Buffer_methods(root_module, cls):
    ## buffer.h (module 'network'): ns3::Buffer::Buffer() [constructor]
    cls.add_constructor([])
    ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize) [constructor]
    cls.add_constructor([param('uint32_t', 'dataSize')])
    ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize, bool initialize) [constructor]
    cls.add_constructor([param('uint32_t', 'dataSize'), param('bool', 'initialize')])
    ## buffer.h (module 'network'): ns3::Buffer::Buffer(ns3::Buffer const & o) [copy constructor]
    cls.add_constructor([param('ns3::Buffer const &', 'o')])
    ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(uint32_t end) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('uint32_t', 'end')])
    ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(ns3::Buffer const & o) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('ns3::Buffer const &', 'o')])
    ## buffer.h (module 'network'): void ns3::Buffer::AddAtStart(uint32_t start) [member function]
    cls.add_method('AddAtStart', 
                   'void', 
                   [param('uint32_t', 'start')])
    ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::Buffer::Iterator', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): void ns3::Buffer::CopyData(std::ostream * os, uint32_t size) const [member function]
    cls.add_method('CopyData', 
                   'void', 
                   [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::CopyData(uint8_t * buffer, uint32_t size) const [member function]
    cls.add_method('CopyData', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
                   is_const=True)
    ## buffer.h (module 'network'): ns3::Buffer ns3::Buffer::CreateFragment(uint32_t start, uint32_t length) const [member function]
    cls.add_method('CreateFragment', 
                   'ns3::Buffer', 
                   [param('uint32_t', 'start'), param('uint32_t', 'length')], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::End() const [member function]
    cls.add_method('End', 
                   'ns3::Buffer::Iterator', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): uint8_t const * ns3::Buffer::PeekData() const [member function]
    cls.add_method('PeekData', 
                   'uint8_t const *', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtEnd(uint32_t end) [member function]
    cls.add_method('RemoveAtEnd', 
                   'void', 
                   [param('uint32_t', 'end')])
    ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtStart(uint32_t start) [member function]
    cls.add_method('RemoveAtStart', 
                   'void', 
                   [param('uint32_t', 'start')])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    return

def register_Ns3BufferIterator_methods(root_module, cls):
    ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator(ns3::Buffer::Iterator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Buffer::Iterator const &', 'arg0')])
    ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator() [constructor]
    cls.add_constructor([])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size) [member function]
    cls.add_method('CalculateIpChecksum', 
                   'uint16_t', 
                   [param('uint16_t', 'size')])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size, uint32_t initialChecksum) [member function]
    cls.add_method('CalculateIpChecksum', 
                   'uint16_t', 
                   [param('uint16_t', 'size'), param('uint32_t', 'initialChecksum')])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetDistanceFrom(ns3::Buffer::Iterator const & o) const [member function]
    cls.add_method('GetDistanceFrom', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator const &', 'o')], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsEnd() const [member function]
    cls.add_method('IsEnd', 
                   'bool', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsStart() const [member function]
    cls.add_method('IsStart', 
                   'bool', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next() [member function]
    cls.add_method('Next', 
                   'void', 
                   [])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next(uint32_t delta) [member function]
    cls.add_method('Next', 
                   'void', 
                   [param('uint32_t', 'delta')])
    ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::PeekU8() [member function]
    cls.add_method('PeekU8', 
                   'uint8_t', 
                   [])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev() [member function]
    cls.add_method('Prev', 
                   'void', 
                   [])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev(uint32_t delta) [member function]
    cls.add_method('Prev', 
                   'void', 
                   [param('uint32_t', 'delta')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(uint8_t * buffer, uint32_t size) [member function]
    cls.add_method('Read', 
                   'void', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(ns3::Buffer::Iterator start, uint32_t size) [member function]
    cls.add_method('Read', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start'), param('uint32_t', 'size')])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadLsbtohU16() [member function]
    cls.add_method('ReadLsbtohU16', 
                   'uint16_t', 
                   [])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadLsbtohU32() [member function]
    cls.add_method('ReadLsbtohU32', 
                   'uint32_t', 
                   [])
    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadLsbtohU64() [member function]
    cls.add_method('ReadLsbtohU64', 
                   'uint64_t', 
                   [])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadNtohU16() [member function]
    cls.add_method('ReadNtohU16', 
                   'uint16_t', 
                   [])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadNtohU32() [member function]
    cls.add_method('ReadNtohU32', 
                   'uint32_t', 
                   [])
    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadNtohU64() [member function]
    cls.add_method('ReadNtohU64', 
                   'uint64_t', 
                   [])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadU16() [member function]
    cls.add_method('ReadU16', 
                   'uint16_t', 
                   [])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadU32() [member function]
    cls.add_method('ReadU32', 
                   'uint32_t', 
                   [])
    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadU64() [member function]
    cls.add_method('ReadU64', 
                   'uint64_t', 
                   [])
    ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::ReadU8() [member function]
    cls.add_method('ReadU8', 
                   'uint8_t', 
                   [])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(uint8_t const * buffer, uint32_t size) [member function]
    cls.add_method('Write', 
                   'void', 
                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
    cls.add_method('Write', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU16(uint16_t data) [member function]
    cls.add_method('WriteHtolsbU16', 
                   'void', 
                   [param('uint16_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU32(uint32_t data) [member function]
    cls.add_method('WriteHtolsbU32', 
                   'void', 
                   [param('uint32_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU64(uint64_t data) [member function]
    cls.add_method('WriteHtolsbU64', 
                   'void', 
                   [param('uint64_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU16(uint16_t data) [member function]
    cls.add_method('WriteHtonU16', 
                   'void', 
                   [param('uint16_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU32(uint32_t data) [member function]
    cls.add_method('WriteHtonU32', 
                   'void', 
                   [param('uint32_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU64(uint64_t data) [member function]
    cls.add_method('WriteHtonU64', 
                   'void', 
                   [param('uint64_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU16(uint16_t data) [member function]
    cls.add_method('WriteU16', 
                   'void', 
                   [param('uint16_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU32(uint32_t data) [member function]
    cls.add_method('WriteU32', 
                   'void', 
                   [param('uint32_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU64(uint64_t data) [member function]
    cls.add_method('WriteU64', 
                   'void', 
                   [param('uint64_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data) [member function]
    cls.add_method('WriteU8', 
                   'void', 
                   [param('uint8_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data, uint32_t len) [member function]
    cls.add_method('WriteU8', 
                   'void', 
                   [param('uint8_t', 'data'), param('uint32_t', 'len')])
    return

def register_Ns3NrBufferSizeLevelBsr_methods(root_module, cls):
    ## nr-common.h (module 'nr'): ns3::NrBufferSizeLevelBsr::NrBufferSizeLevelBsr() [constructor]
    cls.add_constructor([])
    ## nr-common.h (module 'nr'): ns3::NrBufferSizeLevelBsr::NrBufferSizeLevelBsr(ns3::NrBufferSizeLevelBsr const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrBufferSizeLevelBsr const &', 'arg0')])
    ## nr-common.h (module 'nr'): static uint32_t ns3::NrBufferSizeLevelBsr::BsrId2BufferSize(uint8_t val) [member function]
    cls.add_method('BsrId2BufferSize', 
                   'uint32_t', 
                   [param('uint8_t', 'val')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static uint8_t ns3::NrBufferSizeLevelBsr::BufferSize2BsrId(uint32_t val) [member function]
    cls.add_method('BufferSize2BsrId', 
                   'uint8_t', 
                   [param('uint32_t', 'val')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): ns3::NrBufferSizeLevelBsr::m_bufferSizeLevelBsr [variable]
    cls.add_static_attribute('m_bufferSizeLevelBsr', 'int [ 64 ]', is_const=False)
    return

def register_Ns3BuildBroadcastListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::BuildBroadcastListElement_s::BuildBroadcastListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::BuildBroadcastListElement_s::BuildBroadcastListElement_s(ns3::BuildBroadcastListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::BuildBroadcastListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::BuildBroadcastListElement_s::m_dci [variable]
    cls.add_instance_attribute('m_dci', 'ns3::DlDciListElement_s', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::BuildBroadcastListElement_s::m_index [variable]
    cls.add_instance_attribute('m_index', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::BuildBroadcastListElement_s::m_type [variable]
    cls.add_instance_attribute('m_type', 'ns3::BuildBroadcastListElement_s::Type_e', is_const=False)
    return

def register_Ns3BuildDataListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::BuildDataListElement_s::BuildDataListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::BuildDataListElement_s::BuildDataListElement_s(ns3::BuildDataListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::BuildDataListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::BuildDataListElement_s::m_ceBitmap [variable]
    cls.add_instance_attribute('m_ceBitmap', 'std::vector< ns3::CeBitmap_e >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::BuildDataListElement_s::m_dci [variable]
    cls.add_instance_attribute('m_dci', 'ns3::DlDciListElement_s', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::BuildDataListElement_s::m_rlcPduList [variable]
    cls.add_instance_attribute('m_rlcPduList', 'std::vector< std::vector< ns3::RlcPduListElement_s > >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::BuildDataListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3BuildRarListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::BuildRarListElement_s::BuildRarListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::BuildRarListElement_s::BuildRarListElement_s(ns3::BuildRarListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::BuildRarListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::BuildRarListElement_s::m_dci [variable]
    cls.add_instance_attribute('m_dci', 'ns3::DlDciListElement_s', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::BuildRarListElement_s::m_grant [variable]
    cls.add_instance_attribute('m_grant', 'ns3::UlGrant_s', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::BuildRarListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3BwPart_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::BwPart_s::BwPart_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::BwPart_s::BwPart_s(ns3::BwPart_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::BwPart_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::BwPart_s::m_bwPartIndex [variable]
    cls.add_instance_attribute('m_bwPartIndex', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::BwPart_s::m_cqi [variable]
    cls.add_instance_attribute('m_cqi', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::BwPart_s::m_sb [variable]
    cls.add_instance_attribute('m_sb', 'uint8_t', is_const=False)
    return

def register_Ns3ByteTagIterator_methods(root_module, cls):
    ## packet.h (module 'network'): ns3::ByteTagIterator::ByteTagIterator(ns3::ByteTagIterator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::ByteTagIterator const &', 'arg0')])
    ## packet.h (module 'network'): bool ns3::ByteTagIterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::ByteTagIterator::Item ns3::ByteTagIterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::ByteTagIterator::Item', 
                   [])
    return

def register_Ns3ByteTagIteratorItem_methods(root_module, cls):
    ## packet.h (module 'network'): ns3::ByteTagIterator::Item::Item(ns3::ByteTagIterator::Item const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::ByteTagIterator::Item const &', 'arg0')])
    ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetEnd() const [member function]
    cls.add_method('GetEnd', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetStart() const [member function]
    cls.add_method('GetStart', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::ByteTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
    cls.add_method('GetTag', 
                   'void', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::TypeId ns3::ByteTagIterator::Item::GetTypeId() const [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    return

def register_Ns3ByteTagList_methods(root_module, cls):
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList() [constructor]
    cls.add_constructor([])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList(ns3::ByteTagList const & o) [copy constructor]
    cls.add_constructor([param('ns3::ByteTagList const &', 'o')])
    ## byte-tag-list.h (module 'network'): ns3::TagBuffer ns3::ByteTagList::Add(ns3::TypeId tid, uint32_t bufferSize, int32_t start, int32_t end) [member function]
    cls.add_method('Add', 
                   'ns3::TagBuffer', 
                   [param('ns3::TypeId', 'tid'), param('uint32_t', 'bufferSize'), param('int32_t', 'start'), param('int32_t', 'end')])
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Add(ns3::ByteTagList const & o) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::ByteTagList const &', 'o')])
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtEnd(int32_t appendOffset) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('int32_t', 'appendOffset')])
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtStart(int32_t prependOffset) [member function]
    cls.add_method('AddAtStart', 
                   'void', 
                   [param('int32_t', 'prependOffset')])
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Adjust(int32_t adjustment) [member function]
    cls.add_method('Adjust', 
                   'void', 
                   [param('int32_t', 'adjustment')])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator ns3::ByteTagList::Begin(int32_t offsetStart, int32_t offsetEnd) const [member function]
    cls.add_method('Begin', 
                   'ns3::ByteTagList::Iterator', 
                   [param('int32_t', 'offsetStart'), param('int32_t', 'offsetEnd')], 
                   is_const=True)
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::RemoveAll() [member function]
    cls.add_method('RemoveAll', 
                   'void', 
                   [])
    return

def register_Ns3ByteTagListIterator_methods(root_module, cls):
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Iterator(ns3::ByteTagList::Iterator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::ByteTagList::Iterator const &', 'arg0')])
    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Iterator::GetOffsetStart() const [member function]
    cls.add_method('GetOffsetStart', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## byte-tag-list.h (module 'network'): bool ns3::ByteTagList::Iterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item ns3::ByteTagList::Iterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::ByteTagList::Iterator::Item', 
                   [])
    return

def register_Ns3ByteTagListIteratorItem_methods(root_module, cls):
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::ByteTagList::Iterator::Item const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::ByteTagList::Iterator::Item const &', 'arg0')])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::TagBuffer buf) [constructor]
    cls.add_constructor([param('ns3::TagBuffer', 'buf')])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::buf [variable]
    cls.add_instance_attribute('buf', 'ns3::TagBuffer', is_const=False)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::end [variable]
    cls.add_instance_attribute('end', 'int32_t', is_const=False)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::size [variable]
    cls.add_instance_attribute('size', 'uint32_t', is_const=False)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::start [variable]
    cls.add_instance_attribute('start', 'int32_t', is_const=False)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::tid [variable]
    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
    return

def register_Ns3CallbackBase_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::CallbackBase const &', 'arg0')])
    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::Ptr<ns3::CallbackImplBase> ns3::CallbackBase::GetImpl() const [member function]
    cls.add_method('GetImpl', 
                   'ns3::Ptr< ns3::CallbackImplBase >', 
                   [], 
                   is_const=True)
    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::Ptr<ns3::CallbackImplBase> impl) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::CallbackImplBase >', 'impl')], 
                        visibility='protected')
    return

def register_Ns3CqasFlowPerf_t_methods(root_module, cls):
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::CqasFlowPerf_t::CqasFlowPerf_t() [constructor]
    cls.add_constructor([])
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::CqasFlowPerf_t::CqasFlowPerf_t(ns3::CqasFlowPerf_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::CqasFlowPerf_t const &', 'arg0')])
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::CqasFlowPerf_t::flowStart [variable]
    cls.add_instance_attribute('flowStart', 'ns3::Time', is_const=False)
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::CqasFlowPerf_t::lastAveragedThroughput [variable]
    cls.add_instance_attribute('lastAveragedThroughput', 'double', is_const=False)
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::CqasFlowPerf_t::lastTtiBytesTransmitted [variable]
    cls.add_instance_attribute('lastTtiBytesTransmitted', 'unsigned int', is_const=False)
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::CqasFlowPerf_t::secondLastAveragedThroughput [variable]
    cls.add_instance_attribute('secondLastAveragedThroughput', 'double', is_const=False)
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::CqasFlowPerf_t::targetThroughput [variable]
    cls.add_instance_attribute('targetThroughput', 'double', is_const=False)
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::CqasFlowPerf_t::totalBytesTransmitted [variable]
    cls.add_instance_attribute('totalBytesTransmitted', 'long unsigned int', is_const=False)
    return

def register_Ns3CqiConfig_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::CqiConfig_s::CqiConfig_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::CqiConfig_s::CqiConfig_s(ns3::CqiConfig_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::CqiConfig_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::CqiConfig_s::m_action [variable]
    cls.add_instance_attribute('m_action', 'ns3::SetupRelease_e', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::CqiConfig_s::m_cqiSchedInterval [variable]
    cls.add_instance_attribute('m_cqiSchedInterval', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::CqiConfig_s::m_riSchedInterval [variable]
    cls.add_instance_attribute('m_riSchedInterval', 'uint8_t', is_const=False)
    return

def register_Ns3CqiListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::CqiListElement_s::CqiListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::CqiListElement_s::CqiListElement_s(ns3::CqiListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::CqiListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::CqiListElement_s::m_cqiType [variable]
    cls.add_instance_attribute('m_cqiType', 'ns3::CqiListElement_s::CqiType_e', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::CqiListElement_s::m_ri [variable]
    cls.add_instance_attribute('m_ri', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::CqiListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::CqiListElement_s::m_sbMeasResult [variable]
    cls.add_instance_attribute('m_sbMeasResult', 'ns3::SbMeasResult_s', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::CqiListElement_s::m_wbCqi [variable]
    cls.add_instance_attribute('m_wbCqi', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::CqiListElement_s::m_wbPmi [variable]
    cls.add_instance_attribute('m_wbPmi', 'uint8_t', is_const=False)
    return

def register_Ns3DataOutputCallback_methods(root_module, cls):
    ## data-output-interface.h (module 'stats'): ns3::DataOutputCallback::DataOutputCallback() [constructor]
    cls.add_constructor([])
    ## data-output-interface.h (module 'stats'): ns3::DataOutputCallback::DataOutputCallback(ns3::DataOutputCallback const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DataOutputCallback const &', 'arg0')])
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputCallback::OutputSingleton(std::string key, std::string variable, int val) [member function]
    cls.add_method('OutputSingleton', 
                   'void', 
                   [param('std::string', 'key'), param('std::string', 'variable'), param('int', 'val')], 
                   is_pure_virtual=True, is_virtual=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputCallback::OutputSingleton(std::string key, std::string variable, uint32_t val) [member function]
    cls.add_method('OutputSingleton', 
                   'void', 
                   [param('std::string', 'key'), param('std::string', 'variable'), param('uint32_t', 'val')], 
                   is_pure_virtual=True, is_virtual=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputCallback::OutputSingleton(std::string key, std::string variable, double val) [member function]
    cls.add_method('OutputSingleton', 
                   'void', 
                   [param('std::string', 'key'), param('std::string', 'variable'), param('double', 'val')], 
                   is_pure_virtual=True, is_virtual=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputCallback::OutputSingleton(std::string key, std::string variable, std::string val) [member function]
    cls.add_method('OutputSingleton', 
                   'void', 
                   [param('std::string', 'key'), param('std::string', 'variable'), param('std::string', 'val')], 
                   is_pure_virtual=True, is_virtual=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputCallback::OutputSingleton(std::string key, std::string variable, ns3::Time val) [member function]
    cls.add_method('OutputSingleton', 
                   'void', 
                   [param('std::string', 'key'), param('std::string', 'variable'), param('ns3::Time', 'val')], 
                   is_pure_virtual=True, is_virtual=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputCallback::OutputStatistic(std::string key, std::string variable, ns3::StatisticalSummary const * statSum) [member function]
    cls.add_method('OutputStatistic', 
                   'void', 
                   [param('std::string', 'key'), param('std::string', 'variable'), param('ns3::StatisticalSummary const *', 'statSum')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3DataRate_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('<=')
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('>')
    cls.add_binary_comparison_operator('>=')
    ## data-rate.h (module 'network'): ns3::DataRate::DataRate(ns3::DataRate const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DataRate const &', 'arg0')])
    ## data-rate.h (module 'network'): ns3::DataRate::DataRate() [constructor]
    cls.add_constructor([])
    ## data-rate.h (module 'network'): ns3::DataRate::DataRate(uint64_t bps) [constructor]
    cls.add_constructor([param('uint64_t', 'bps')])
    ## data-rate.h (module 'network'): ns3::DataRate::DataRate(std::string rate) [constructor]
    cls.add_constructor([param('std::string', 'rate')])
    ## data-rate.h (module 'network'): ns3::Time ns3::DataRate::CalculateBitsTxTime(uint32_t bits) const [member function]
    cls.add_method('CalculateBitsTxTime', 
                   'ns3::Time', 
                   [param('uint32_t', 'bits')], 
                   is_const=True)
    ## data-rate.h (module 'network'): ns3::Time ns3::DataRate::CalculateBytesTxTime(uint32_t bytes) const [member function]
    cls.add_method('CalculateBytesTxTime', 
                   'ns3::Time', 
                   [param('uint32_t', 'bytes')], 
                   is_const=True)
    ## data-rate.h (module 'network'): double ns3::DataRate::CalculateTxTime(uint32_t bytes) const [member function]
    cls.add_method('CalculateTxTime', 
                   'double', 
                   [param('uint32_t', 'bytes')], 
                   deprecated=True, is_const=True)
    ## data-rate.h (module 'network'): uint64_t ns3::DataRate::GetBitRate() const [member function]
    cls.add_method('GetBitRate', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3DlDciListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::DlDciListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::DlDciListElement_s(ns3::DlDciListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DlDciListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_aggrLevel [variable]
    cls.add_instance_attribute('m_aggrLevel', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_cceIndex [variable]
    cls.add_instance_attribute('m_cceIndex', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_dai [variable]
    cls.add_instance_attribute('m_dai', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_dlPowerOffset [variable]
    cls.add_instance_attribute('m_dlPowerOffset', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_format [variable]
    cls.add_instance_attribute('m_format', 'ns3::DlDciListElement_s::Format_e', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_harqProcess [variable]
    cls.add_instance_attribute('m_harqProcess', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_mcs [variable]
    cls.add_instance_attribute('m_mcs', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_nGap [variable]
    cls.add_instance_attribute('m_nGap', 'ns3::DlDciListElement_s::Ngap_e', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_ndi [variable]
    cls.add_instance_attribute('m_ndi', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_pdcchOrder [variable]
    cls.add_instance_attribute('m_pdcchOrder', 'bool', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_pdcchPowerOffset [variable]
    cls.add_instance_attribute('m_pdcchPowerOffset', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_prachMaskIndex [variable]
    cls.add_instance_attribute('m_prachMaskIndex', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_preambleIndex [variable]
    cls.add_instance_attribute('m_preambleIndex', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_precodingInfo [variable]
    cls.add_instance_attribute('m_precodingInfo', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_rbBitmap [variable]
    cls.add_instance_attribute('m_rbBitmap', 'uint32_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_rbShift [variable]
    cls.add_instance_attribute('m_rbShift', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_resAlloc [variable]
    cls.add_instance_attribute('m_resAlloc', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_rv [variable]
    cls.add_instance_attribute('m_rv', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_spsRelease [variable]
    cls.add_instance_attribute('m_spsRelease', 'bool', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_tbSwap [variable]
    cls.add_instance_attribute('m_tbSwap', 'bool', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_tbsIdx [variable]
    cls.add_instance_attribute('m_tbsIdx', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_tbsSize [variable]
    cls.add_instance_attribute('m_tbsSize', 'std::vector< unsigned short >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_tpc [variable]
    cls.add_instance_attribute('m_tpc', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlDciListElement_s::m_vrbFormat [variable]
    cls.add_instance_attribute('m_vrbFormat', 'ns3::DlDciListElement_s::VrbFormat_e', is_const=False)
    return

def register_Ns3DlInfoListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::DlInfoListElement_s::DlInfoListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::DlInfoListElement_s::DlInfoListElement_s(ns3::DlInfoListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DlInfoListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::DlInfoListElement_s::m_harqProcessId [variable]
    cls.add_instance_attribute('m_harqProcessId', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlInfoListElement_s::m_harqStatus [variable]
    cls.add_instance_attribute('m_harqStatus', 'std::vector< ns3::DlInfoListElement_s::HarqStatus_e >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DlInfoListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3DrxConfig_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::DrxConfig_s::DrxConfig_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::DrxConfig_s::DrxConfig_s(ns3::DrxConfig_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DrxConfig_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::DrxConfig_s::m_drxInactivityTimer [variable]
    cls.add_instance_attribute('m_drxInactivityTimer', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DrxConfig_s::m_drxRetransmissionTimer [variable]
    cls.add_instance_attribute('m_drxRetransmissionTimer', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DrxConfig_s::m_drxShortCycleTimer [variable]
    cls.add_instance_attribute('m_drxShortCycleTimer', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DrxConfig_s::m_longDrxCycle [variable]
    cls.add_instance_attribute('m_longDrxCycle', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DrxConfig_s::m_longDrxCycleStartOffset [variable]
    cls.add_instance_attribute('m_longDrxCycleStartOffset', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DrxConfig_s::m_onDurationTimer [variable]
    cls.add_instance_attribute('m_onDurationTimer', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::DrxConfig_s::m_shortDrxCycle [variable]
    cls.add_instance_attribute('m_shortDrxCycle', 'uint16_t', is_const=False)
    return

def register_Ns3NgcEnbN2SapProvider_methods(root_module, cls):
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::NgcEnbN2SapProvider() [constructor]
    cls.add_constructor([])
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::NgcEnbN2SapProvider(ns3::NgcEnbN2SapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcEnbN2SapProvider const &', 'arg0')])
    ## ngc-enb-n2-sap.h (module 'nr'): void ns3::NgcEnbN2SapProvider::DoSendReleaseIndication(uint64_t imsi, uint16_t rnti, uint8_t bearerId) [member function]
    cls.add_method('DoSendReleaseIndication', 
                   'void', 
                   [param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('uint8_t', 'bearerId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-enb-n2-sap.h (module 'nr'): void ns3::NgcEnbN2SapProvider::InitialUeMessage(uint64_t imsi, uint16_t rnti) [member function]
    cls.add_method('InitialUeMessage', 
                   'void', 
                   [param('uint64_t', 'imsi'), param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ##yjshin
    cls.add_method('N2Message', 
                   'void', 
                   [param('uint64_t', 'imsi'), param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-enb-n2-sap.h (module 'nr'): void ns3::NgcEnbN2SapProvider::PathSwitchRequest(ns3::NgcEnbN2SapProvider::PathSwitchRequestParameters params) [member function]
    cls.add_method('PathSwitchRequest', 
                   'void', 
                   [param('ns3::NgcEnbN2SapProvider::PathSwitchRequestParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-enb-n2-sap.h (module 'nr'): void ns3::NgcEnbN2SapProvider::UeContextRelease(uint16_t rnti) [member function]
    cls.add_method('UeContextRelease', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NgcEnbN2SapProviderBearerToBeSwitched_methods(root_module, cls):
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::BearerToBeSwitched::BearerToBeSwitched() [constructor]
    cls.add_constructor([])
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::BearerToBeSwitched::BearerToBeSwitched(ns3::NgcEnbN2SapProvider::BearerToBeSwitched const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcEnbN2SapProvider::BearerToBeSwitched const &', 'arg0')])
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::BearerToBeSwitched::epsBearerId [variable]
    cls.add_instance_attribute('epsBearerId', 'uint8_t', is_const=False)
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::BearerToBeSwitched::teid [variable]
    cls.add_instance_attribute('teid', 'uint32_t', is_const=False)
    return

def register_Ns3NgcEnbN2SapProviderPathSwitchRequestParameters_methods(root_module, cls):
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::PathSwitchRequestParameters::PathSwitchRequestParameters() [constructor]
    cls.add_constructor([])
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::PathSwitchRequestParameters::PathSwitchRequestParameters(ns3::NgcEnbN2SapProvider::PathSwitchRequestParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcEnbN2SapProvider::PathSwitchRequestParameters const &', 'arg0')])
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::PathSwitchRequestParameters::bearersToBeSwitched [variable]
    cls.add_instance_attribute('bearersToBeSwitched', 'std::list< ns3::NgcEnbN2SapProvider::BearerToBeSwitched >', is_const=False)
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::PathSwitchRequestParameters::cellId [variable]
    cls.add_instance_attribute('cellId', 'uint16_t', is_const=False)
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::PathSwitchRequestParameters::amfUeN2Id [variable]
    cls.add_instance_attribute('amfUeN2Id', 'uint32_t', is_const=False)
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapProvider::PathSwitchRequestParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    return

def register_Ns3NgcEnbN2SapUser_methods(root_module, cls):
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::NgcEnbN2SapUser() [constructor]
    cls.add_constructor([])
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::NgcEnbN2SapUser(ns3::NgcEnbN2SapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcEnbN2SapUser const &', 'arg0')])
    ## ngc-enb-n2-sap.h (module 'nr'): void ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequest(ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequestParameters params) [member function]
    cls.add_method('DataRadioBearerSetupRequest', 
                   'void', 
                   [param('ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequestParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-enb-n2-sap.h (module 'nr'): void ns3::NgcEnbN2SapUser::PathSwitchRequestAcknowledge(ns3::NgcEnbN2SapUser::PathSwitchRequestAcknowledgeParameters params) [member function]
    cls.add_method('PathSwitchRequestAcknowledge', 
                   'void', 
                   [param('ns3::NgcEnbN2SapUser::PathSwitchRequestAcknowledgeParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NgcEnbN2SapUserDataRadioBearerSetupRequestParameters_methods(root_module, cls):
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequestParameters::DataRadioBearerSetupRequestParameters() [constructor]
    cls.add_constructor([])
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequestParameters::DataRadioBearerSetupRequestParameters(ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequestParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequestParameters const &', 'arg0')])
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequestParameters::bearer [variable]
    cls.add_instance_attribute('bearer', 'ns3::EpsBearer', is_const=False)
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequestParameters::bearerId [variable]
    cls.add_instance_attribute('bearerId', 'uint8_t', is_const=False)
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequestParameters::gtpTeid [variable]
    cls.add_instance_attribute('gtpTeid', 'uint32_t', is_const=False)
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequestParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::DataRadioBearerSetupRequestParameters::transportLayerAddress [variable]
    cls.add_instance_attribute('transportLayerAddress', 'ns3::Ipv4Address', is_const=False)
    return

def register_Ns3NgcEnbN2SapUserPathSwitchRequestAcknowledgeParameters_methods(root_module, cls):
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::PathSwitchRequestAcknowledgeParameters::PathSwitchRequestAcknowledgeParameters() [constructor]
    cls.add_constructor([])
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::PathSwitchRequestAcknowledgeParameters::PathSwitchRequestAcknowledgeParameters(ns3::NgcEnbN2SapUser::PathSwitchRequestAcknowledgeParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcEnbN2SapUser::PathSwitchRequestAcknowledgeParameters const &', 'arg0')])
    ## ngc-enb-n2-sap.h (module 'nr'): ns3::NgcEnbN2SapUser::PathSwitchRequestAcknowledgeParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    return

def register_Ns3NgcN11Sap_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::NgcN11Sap() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::NgcN11Sap(ns3::NgcN11Sap const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11Sap const &', 'arg0')])
    return

def register_Ns3NgcN11SapFteid_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::Fteid::Fteid() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::Fteid::Fteid(ns3::NgcN11Sap::Fteid const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11Sap::Fteid const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::Fteid::address [variable]
    cls.add_instance_attribute('address', 'ns3::Ipv4Address', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::Fteid::teid [variable]
    cls.add_instance_attribute('teid', 'uint32_t', is_const=False)
    return

def register_Ns3NgcN11SapGtpcMessage_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::GtpcMessage::GtpcMessage() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::GtpcMessage::GtpcMessage(ns3::NgcN11Sap::GtpcMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11Sap::GtpcMessage const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::GtpcMessage::teid [variable]
    cls.add_instance_attribute('teid', 'uint32_t', is_const=False)
    return

def register_Ns3NgcN11SapUli_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::Uli::Uli() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::Uli::Uli(ns3::NgcN11Sap::Uli const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11Sap::Uli const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11Sap::Uli::gci [variable]
    cls.add_instance_attribute('gci', 'uint16_t', is_const=False)
    return

def register_Ns3NgcN11SapAmf_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::NgcN11SapAmf() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::NgcN11SapAmf(ns3::NgcN11SapAmf const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapAmf const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): void ns3::NgcN11SapAmf::CreateSessionResponse(ns3::NgcN11SapAmf::CreateSessionResponseMessage msg) [member function]
    cls.add_method('CreateSessionResponse', 
                   'void', 
                   [param('ns3::NgcN11SapAmf::CreateSessionResponseMessage', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-n11-sap.h (module 'nr'): void ns3::NgcN11SapAmf::DeleteBearerRequest(ns3::NgcN11SapAmf::DeleteBearerRequestMessage msg) [member function]
    cls.add_method('DeleteBearerRequest', 
                   'void', 
                   [param('ns3::NgcN11SapAmf::DeleteBearerRequestMessage', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-n11-sap.h (module 'nr'): void ns3::NgcN11SapAmf::ModifyBearerResponse(ns3::NgcN11SapAmf::ModifyBearerResponseMessage msg) [member function]
    cls.add_method('ModifyBearerResponse', 
                   'void', 
                   [param('ns3::NgcN11SapAmf::ModifyBearerResponseMessage', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NgcN11SapAmfBearerContextCreated_methods(root_module, cls): ##smsohn
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::BearerContextCreated::BearerContextCreated() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::BearerContextCreated::BearerContextCreated(ns3::NgcN11SapAmf::BearerContextCreated const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapAmf::BearerContextCreated const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::BearerContextCreated::bearerLevelQos [variable]
    cls.add_instance_attribute('bearerLevelQos', 'ns3::EpsBearer', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::BearerContextCreated::epsBearerId [variable]
    cls.add_instance_attribute('epsBearerId', 'uint8_t', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::BearerContextCreated::smfFteid [variable]
    cls.add_instance_attribute('smfFteid', 'ns3::NgcN11Sap::Fteid', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::BearerContextCreated::tft [variable]
    cls.add_instance_attribute('tft', 'ns3::Ptr< ns3::NgcTft >', is_const=False)
    return

def register_Ns3NgcN11SapAmfN2SMInformationCreated_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::BearerContextToBeCreated() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::BearerContextToBeCreated(ns3::NgcN11SapSmf::BearerContextToBeCreated const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapAmf::N2SMInformationCreated const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::bearerLevelQos [variable]
    cls.add_instance_attribute('flowLevelQos', 'ns3::QosFlow', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::epsBearerId [variable]
    cls.add_instanch_attribute('pduSessionId', 'uint8_t', is_const=False)
    cls.add_instanch_attribute('qosFlowId', 'uint8_t', is_const=False)
    cls.add_instanch_attribute('qosProfile', 'uint8_t', is_const=False)
    cls.add_instanch_attribute('cnN3TunnelInfo', 'uint8_t', is_const=False)
    cls.add_instanch_attribute('s-nssai', 'uint8_t', is_const=False)
    cls.add_instanch_attribute('userPlaneSecurityEnforcement', 'uint8_t', is_const=False)
    cls.add_instanch_attribute('ueIntegrityProtectionMaximumDataRate', 'uint8_t', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::smfFteid [variable]
    cls.add_instance_attribute('smfFteid', 'ns3::NgcN11Sap::Fteid', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::tft [variable]
    cls.add_instance_attribute('tft', 'ns3::Ptr< ns3::NgcTft >', is_const=False)
    return


def register_Ns3NgcN11SapAmfBearerContextRemoved_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::BearerContextRemoved::BearerContextRemoved() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::BearerContextRemoved::BearerContextRemoved(ns3::NgcN11SapAmf::BearerContextRemoved const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapAmf::BearerContextRemoved const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::BearerContextRemoved::epsBearerId [variable]
    cls.add_instance_attribute('epsBearerId', 'uint8_t', is_const=False)
    return

def register_Ns3NgcN11SapAmfCreateSessionResponseMessage_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::CreateSessionResponseMessage::CreateSessionResponseMessage() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::CreateSessionResponseMessage::CreateSessionResponseMessage(ns3::NgcN11SapAmf::CreateSessionResponseMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapAmf::CreateSessionResponseMessage const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::CreateSessionResponseMessage::bearerContextsCreated [variable]
    cls.add_instance_attribute('bearerContextsCreated', 'std::list< ns3::NgcN11SapAmf::BearerContextCreated >', is_const=False)
    return

def register_Ns3NgcN11SapAmfDeleteBearerRequestMessage_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::DeleteBearerRequestMessage::DeleteBearerRequestMessage() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::DeleteBearerRequestMessage::DeleteBearerRequestMessage(ns3::NgcN11SapAmf::DeleteBearerRequestMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapAmf::DeleteBearerRequestMessage const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::DeleteBearerRequestMessage::bearerContextsRemoved [variable]
    cls.add_instance_attribute('bearerContextsRemoved', 'std::list< ns3::NgcN11SapAmf::BearerContextRemoved >', is_const=False)
    return

def register_Ns3NgcN11SapAmfModifyBearerResponseMessage_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::ModifyBearerResponseMessage::ModifyBearerResponseMessage() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::ModifyBearerResponseMessage::ModifyBearerResponseMessage(ns3::NgcN11SapAmf::ModifyBearerResponseMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapAmf::ModifyBearerResponseMessage const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapAmf::ModifyBearerResponseMessage::cause [variable]
    cls.add_instance_attribute('cause', 'ns3::NgcN11SapAmf::ModifyBearerResponseMessage::Cause', is_const=False)
    return

def register_Ns3NgcN11SapSmf_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::NgcN11SapSmf() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::NgcN11SapSmf(ns3::NgcN11SapSmf const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapSmf const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): void ns3::NgcN11SapSmf::CreateSessionRequest(ns3::NgcN11SapSmf::CreateSessionRequestMessage msg) [member function]
    cls.add_method('CreateSessionRequest', 
                   'void', 
                   [param('ns3::NgcN11SapSmf::CreateSessionRequestMessage', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ##yjshin
    cls.add_method('UpdateSMContextRequest', 
                   'void', 
                   [param('ns3::NgcN11SapSmf::UpdateSMContextRequestMessage', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-n11-sap.h (module 'nr'): void ns3::NgcN11SapSmf::DeleteBearerCommand(ns3::NgcN11SapSmf::DeleteBearerCommandMessage msg) [member function]
    cls.add_method('DeleteBearerCommand', 
                   'void', 
                   [param('ns3::NgcN11SapSmf::DeleteBearerCommandMessage', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-n11-sap.h (module 'nr'): void ns3::NgcN11SapSmf::DeleteBearerResponse(ns3::NgcN11SapSmf::DeleteBearerResponseMessage msg) [member function]
    cls.add_method('DeleteBearerResponse', 
                   'void', 
                   [param('ns3::NgcN11SapSmf::DeleteBearerResponseMessage', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-n11-sap.h (module 'nr'): void ns3::NgcN11SapSmf::ModifyBearerRequest(ns3::NgcN11SapSmf::ModifyBearerRequestMessage msg) [member function]
    cls.add_method('ModifyBearerRequest', 
                   'void', 
                   [param('ns3::NgcN11SapSmf::ModifyBearerRequestMessage', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NgcN11SapSmfBearerContextRemovedSmfUpf_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextRemovedSmfUpf::BearerContextRemovedSmfUpf() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextRemovedSmfUpf::BearerContextRemovedSmfUpf(ns3::NgcN11SapSmf::BearerContextRemovedSmfUpf const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapSmf::BearerContextRemovedSmfUpf const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextRemovedSmfUpf::epsBearerId [variable]
    cls.add_instance_attribute('epsBearerId', 'uint8_t', is_const=False)
    return

def register_Ns3NgcN11SapSmfBearerContextToBeCreated_methods(root_module, cls): ##smsohn
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::BearerContextToBeCreated() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::BearerContextToBeCreated(ns3::NgcN11SapSmf::BearerContextToBeCreated const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapSmf::BearerContextToBeCreated const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::bearerLevelQos [variable]
    cls.add_instance_attribute('bearerLevelQos', 'ns3::EpsBearer', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::epsBearerId [variable]
    cls.add_instance_attribute('epsBearerId', 'uint8_t', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::smfFteid [variable]
    cls.add_instance_attribute('smfFteid', 'ns3::NgcN11Sap::Fteid', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::tft [variable]
    cls.add_instance_attribute('tft', 'ns3::Ptr< ns3::NgcTft >', is_const=False)
    return

def register_Ns3NgcN11SapSmfN2SMInformationToBeCreated_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::BearerContextToBeCreated() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::BearerContextToBeCreated(ns3::NgcN11SapSmf::BearerContextToBeCreated const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapSmf::N2SMInformationToBeCreated const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::bearerLevelQos [variable]
    cls.add_instance_attribute('flowLevelQos', 'ns3::QosFlow', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::epsBearerId [variable]
    cls.add_instanch_attribute('pduSessionId', 'uint8_t', is_const=False)
    cls.add_instanch_attribute('qosFlowId', 'uint8_t', is_const=False)
    cls.add_instanch_attribute('qosProfile', 'uint8_t', is_const=False)
    cls.add_instanch_attribute('cnN3TunnelInfo', 'uint8_t', is_const=False)
    cls.add_instanch_attribute('s-nssai', 'uint8_t', is_const=False)
    cls.add_instanch_attribute('userPlaneSecurityEnforcement', 'uint8_t', is_const=False)
    cls.add_instanch_attribute('ueIntegrityProtectionMaximumDataRate', 'uint8_t', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::smfFteid [variable]
    cls.add_instance_attribute('smfFteid', 'ns3::NgcN11Sap::Fteid', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeCreated::tft [variable]
    cls.add_instance_attribute('tft', 'ns3::Ptr< ns3::NgcTft >', is_const=False)
    return



def register_Ns3NgcN11SapSmfBearerContextToBeRemoved_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeRemoved::BearerContextToBeRemoved() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeRemoved::BearerContextToBeRemoved(ns3::NgcN11SapSmf::BearerContextToBeRemoved const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapSmf::BearerContextToBeRemoved const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::BearerContextToBeRemoved::epsBearerId [variable]
    cls.add_instance_attribute('epsBearerId', 'uint8_t', is_const=False)
    return

def register_Ns3NgcN11SapSmfCreateSessionRequestMessage_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::CreateSessionRequestMessage::CreateSessionRequestMessage() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::CreateSessionRequestMessage::CreateSessionRequestMessage(ns3::NgcN11SapSmf::CreateSessionRequestMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapSmf::CreateSessionRequestMessage const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::CreateSessionRequestMessage::bearerContextsToBeCreated [variable]
    cls.add_instance_attribute('bearerContextsToBeCreated', 'std::list< ns3::NgcN11SapSmf::BearerContextToBeCreated >', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::CreateSessionRequestMessage::imsi [variable]
    cls.add_instance_attribute('imsi', 'uint64_t', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::CreateSessionRequestMessage::uli [variable]
    cls.add_instance_attribute('uli', 'ns3::NgcN11Sap::Uli', is_const=False)
    return

##yjshin
def register_Ns3NgcN11SapSmfUpdateSMContextRequestMessage_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::CreateSessionRequestMessage::CreateSessionRequestMessage() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::CreateSessionRequestMessage::CreateSessionRequestMessage(ns3::NgcN11SapSmf::CreateSessionRequestMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapSmf::UpdateSMContextRequestMessage const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::CreateSessionRequestMessage::bearerContextsToBeCreated [variable]
    cls.add_instance_attribute('n2SMInformationToBeCreated', 'std::list< ns3::NgcN11SapSmf::N2SMInformationToBeCreated >', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::CreateSessionRequestMessage::imsi [variable]
    cls.add_instance_attribute('imsi', 'uint64_t', is_const=False)
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::CreateSessionRequestMessage::uli [variable]
    cls.add_instance_attribute('uli', 'ns3::NgcN11Sap::Uli', is_const=False)
    return

def register_Ns3NgcN11SapSmfDeleteBearerCommandMessage_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::DeleteBearerCommandMessage::DeleteBearerCommandMessage() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::DeleteBearerCommandMessage::DeleteBearerCommandMessage(ns3::NgcN11SapSmf::DeleteBearerCommandMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapSmf::DeleteBearerCommandMessage const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::DeleteBearerCommandMessage::bearerContextsToBeRemoved [variable]
    cls.add_instance_attribute('bearerContextsToBeRemoved', 'std::list< ns3::NgcN11SapSmf::BearerContextToBeRemoved >', is_const=False)
    return

def register_Ns3NgcN11SapSmfDeleteBearerResponseMessage_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::DeleteBearerResponseMessage::DeleteBearerResponseMessage() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::DeleteBearerResponseMessage::DeleteBearerResponseMessage(ns3::NgcN11SapSmf::DeleteBearerResponseMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapSmf::DeleteBearerResponseMessage const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::DeleteBearerResponseMessage::bearerContextsRemoved [variable]
    cls.add_instance_attribute('bearerContextsRemoved', 'std::list< ns3::NgcN11SapSmf::BearerContextRemovedSmfUpf >', is_const=False)
    return

def register_Ns3NgcN11SapSmfModifyBearerRequestMessage_methods(root_module, cls):
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::ModifyBearerRequestMessage::ModifyBearerRequestMessage() [constructor]
    cls.add_constructor([])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::ModifyBearerRequestMessage::ModifyBearerRequestMessage(ns3::NgcN11SapSmf::ModifyBearerRequestMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN11SapSmf::ModifyBearerRequestMessage const &', 'arg0')])
    ## ngc-n11-sap.h (module 'nr'): ns3::NgcN11SapSmf::ModifyBearerRequestMessage::uli [variable]
    cls.add_instance_attribute('uli', 'ns3::NgcN11Sap::Uli', is_const=False)
    return

def register_Ns3NgcN2apSap_methods(root_module, cls):
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSap::NgcN2apSap() [constructor]
    cls.add_constructor([])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSap::NgcN2apSap(ns3::NgcN2apSap const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN2apSap const &', 'arg0')])
    return

def register_Ns3NgcN2apSapEnb_methods(root_module, cls):
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::NgcN2apSapEnb() [constructor]
    cls.add_constructor([])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::NgcN2apSapEnb(ns3::NgcN2apSapEnb const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN2apSapEnb const &', 'arg0')])
    ## ngc-n2ap-sap.h (module 'nr'): void ns3::NgcN2apSapEnb::InitialContextSetupRequest(uint64_t amfUeN2Id, uint16_t enbUeN2Id, std::list<ns3::NgcN2apSapEnb::ErabToBeSetupItem, std::allocator<ns3::NgcN2apSapEnb::ErabToBeSetupItem> > erabToBeSetupList) [member function]
    cls.add_method('InitialContextSetupRequest', 
                   'void', 
                   [param('uint64_t', 'amfUeN2Id'), param('uint16_t', 'enbUeN2Id'), param('std::list< ns3::NgcN2apSapEnb::ErabToBeSetupItem >', 'erabToBeSetupList')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-n2ap-sap.h (module 'nr'): void ns3::NgcN2apSapEnb::PathSwitchRequestAcknowledge(uint64_t enbUeN2Id, uint64_t amfUeN2Id, uint16_t cgi, std::list<ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem, std::allocator<ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem> > erabToBeSwitchedInUplinkList) [member function]
    cls.add_method('PathSwitchRequestAcknowledge', 
                   'void', 
                   [param('uint64_t', 'enbUeN2Id'), param('uint64_t', 'amfUeN2Id'), param('uint16_t', 'cgi'), param('std::list< ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem >', 'erabToBeSwitchedInUplinkList')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NgcN2apSapEnbErabSwitchedInUplinkItem_methods(root_module, cls):
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem::ErabSwitchedInUplinkItem() [constructor]
    cls.add_constructor([])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem::ErabSwitchedInUplinkItem(ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem const &', 'arg0')])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem::enbTeid [variable]
    cls.add_instance_attribute('enbTeid', 'uint32_t', is_const=False)
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem::erabId [variable]
    cls.add_instance_attribute('erabId', 'uint8_t', is_const=False)
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::ErabSwitchedInUplinkItem::transportLayerAddress [variable]
    cls.add_instance_attribute('transportLayerAddress', 'ns3::Ipv4Address', is_const=False)
    return

def register_Ns3NgcN2apSapEnbErabToBeSetupItem_methods(root_module, cls):
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::ErabToBeSetupItem::ErabToBeSetupItem() [constructor]
    cls.add_constructor([])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::ErabToBeSetupItem::ErabToBeSetupItem(ns3::NgcN2apSapEnb::ErabToBeSetupItem const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN2apSapEnb::ErabToBeSetupItem const &', 'arg0')])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::ErabToBeSetupItem::erabId [variable]
    cls.add_instance_attribute('erabId', 'uint8_t', is_const=False)
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::ErabToBeSetupItem::erabLevelQosParameters [variable]
    cls.add_instance_attribute('erabLevelQosParameters', 'ns3::EpsBearer', is_const=False)
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::ErabToBeSetupItem::smfTeid [variable]
    cls.add_instance_attribute('smfTeid', 'uint32_t', is_const=False)
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapEnb::ErabToBeSetupItem::transportLayerAddress [variable]
    cls.add_instance_attribute('transportLayerAddress', 'ns3::Ipv4Address', is_const=False)
    return

def register_Ns3NgcN2apSapAmf_methods(root_module, cls):
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::NgcN2apSapAmf() [constructor]
    cls.add_constructor([])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::NgcN2apSapAmf(ns3::NgcN2apSapAmf const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN2apSapAmf const &', 'arg0')])
    ## ngc-n2ap-sap.h (module 'nr'): void ns3::NgcN2apSapAmf::ErabReleaseIndication(uint64_t amfUeN2Id, uint16_t enbUeN2Id, std::list<ns3::NgcN2apSapAmf::ErabToBeReleasedIndication, std::allocator<ns3::NgcN2apSapAmf::ErabToBeReleasedIndication> > erabToBeReleaseIndication) [member function]
    cls.add_method('ErabReleaseIndication', 
                   'void', 
                   [param('uint64_t', 'amfUeN2Id'), param('uint16_t', 'enbUeN2Id'), param('std::list< ns3::NgcN2apSapAmf::ErabToBeReleasedIndication >', 'erabToBeReleaseIndication')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-n2ap-sap.h (module 'nr'): void ns3::NgcN2apSapAmf::InitialContextSetupResponse(uint64_t amfUeN2Id, uint16_t enbUeN2Id, std::list<ns3::NgcN2apSapAmf::ErabSetupItem, std::allocator<ns3::NgcN2apSapAmf::ErabSetupItem> > erabSetupList) [member function]
    cls.add_method('InitialContextSetupResponse', 
                   'void', 
                   [param('uint64_t', 'amfUeN2Id'), param('uint16_t', 'enbUeN2Id'), param('std::list< ns3::NgcN2apSapAmf::ErabSetupItem >', 'erabSetupList')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-n2ap-sap.h (module 'nr'): void ns3::NgcN2apSapAmf::InitialUeMessage(uint64_t amfUeN2Id, uint16_t enbUeN2Id, uint64_t stmsi, uint16_t ecgi) [member function]
    cls.add_method('InitialUeMessage', 
                   'void', 
                   [param('uint64_t', 'amfUeN2Id'), param('uint16_t', 'enbUeN2Id'), param('uint64_t', 'stmsi'), param('uint16_t', 'ecgi')], 
                   is_pure_virtual=True, is_virtual=True)
    ##yjshin
    cls.add_method('N2Message', 
                   'void', 
                   [param('uint64_t', 'amfUeN2Id'), param('uint16_t', 'enbUeN2Id'), param('uint64_t', 'stmsi'), param('uint16_t', 'ecgi')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-n2ap-sap.h (module 'nr'): void ns3::NgcN2apSapAmf::PathSwitchRequest(uint64_t enbUeN2Id, uint64_t amfUeN2Id, uint16_t gci, std::list<ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem, std::allocator<ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem> > erabToBeSwitchedInDownlinkList) [member function]
    cls.add_method('PathSwitchRequest', 
                   'void', 
                   [param('uint64_t', 'enbUeN2Id'), param('uint64_t', 'amfUeN2Id'), param('uint16_t', 'gci'), param('std::list< ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem >', 'erabToBeSwitchedInDownlinkList')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NgcN2apSapAmfErabSetupItem_methods(root_module, cls):
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabSetupItem::ErabSetupItem() [constructor]
    cls.add_constructor([])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabSetupItem::ErabSetupItem(ns3::NgcN2apSapAmf::ErabSetupItem const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN2apSapAmf::ErabSetupItem const &', 'arg0')])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabSetupItem::enbTeid [variable]
    cls.add_instance_attribute('enbTeid', 'uint32_t', is_const=False)
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabSetupItem::enbTransportLayerAddress [variable]
    cls.add_instance_attribute('enbTransportLayerAddress', 'ns3::Ipv4Address', is_const=False)
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabSetupItem::erabId [variable]
    cls.add_instance_attribute('erabId', 'uint16_t', is_const=False)
    return

def register_Ns3NgcN2apSapAmfErabSwitchedInDownlinkItem_methods(root_module, cls):
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem::ErabSwitchedInDownlinkItem() [constructor]
    cls.add_constructor([])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem::ErabSwitchedInDownlinkItem(ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem const &', 'arg0')])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem::enbTeid [variable]
    cls.add_instance_attribute('enbTeid', 'uint32_t', is_const=False)
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem::enbTransportLayerAddress [variable]
    cls.add_instance_attribute('enbTransportLayerAddress', 'ns3::Ipv4Address', is_const=False)
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabSwitchedInDownlinkItem::erabId [variable]
    cls.add_instance_attribute('erabId', 'uint16_t', is_const=False)
    return

def register_Ns3NgcN2apSapAmfErabToBeReleasedIndication_methods(root_module, cls):
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabToBeReleasedIndication::ErabToBeReleasedIndication() [constructor]
    cls.add_constructor([])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabToBeReleasedIndication::ErabToBeReleasedIndication(ns3::NgcN2apSapAmf::ErabToBeReleasedIndication const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcN2apSapAmf::ErabToBeReleasedIndication const &', 'arg0')])
    ## ngc-n2ap-sap.h (module 'nr'): ns3::NgcN2apSapAmf::ErabToBeReleasedIndication::erabId [variable]
    cls.add_instance_attribute('erabId', 'uint8_t', is_const=False)
    return

def register_Ns3NgcX2Sap_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::NgcX2Sap() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::NgcX2Sap(ns3::NgcX2Sap const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::m_maxPdcpSn [variable]
    cls.add_static_attribute('m_maxPdcpSn', 'uint16_t const', is_const=True)
    return

def register_Ns3NgcX2SapCellInformationItem_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellInformationItem::CellInformationItem() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellInformationItem::CellInformationItem(ns3::NgcX2Sap::CellInformationItem const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::CellInformationItem const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellInformationItem::relativeNarrowbandTxBand [variable]
    cls.add_instance_attribute('relativeNarrowbandTxBand', 'ns3::NgcX2Sap::RelativeNarrowbandTxBand', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellInformationItem::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellInformationItem::ulHighInterferenceInformationList [variable]
    cls.add_instance_attribute('ulHighInterferenceInformationList', 'std::vector< ns3::NgcX2Sap::UlHighInterferenceInformationItem >', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellInformationItem::ulInterferenceOverloadIndicationList [variable]
    cls.add_instance_attribute('ulInterferenceOverloadIndicationList', 'std::vector< ns3::NgcX2Sap::UlInterferenceOverloadIndicationItem >', is_const=False)
    return

def register_Ns3NgcX2SapCellMeasurementResultItem_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::CellMeasurementResultItem() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::CellMeasurementResultItem(ns3::NgcX2Sap::CellMeasurementResultItem const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::CellMeasurementResultItem const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::dlCompositeAvailableCapacity [variable]
    cls.add_instance_attribute('dlCompositeAvailableCapacity', 'ns3::NgcX2Sap::CompositeAvailCapacity', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::dlGbrPrbUsage [variable]
    cls.add_instance_attribute('dlGbrPrbUsage', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::dlHardwareLoadIndicator [variable]
    cls.add_instance_attribute('dlHardwareLoadIndicator', 'ns3::NgcX2Sap::LoadIndicator', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::dlNonGbrPrbUsage [variable]
    cls.add_instance_attribute('dlNonGbrPrbUsage', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::dlN2TnlLoadIndicator [variable]
    cls.add_instance_attribute('dlN2TnlLoadIndicator', 'ns3::NgcX2Sap::LoadIndicator', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::dlTotalPrbUsage [variable]
    cls.add_instance_attribute('dlTotalPrbUsage', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::ulCompositeAvailableCapacity [variable]
    cls.add_instance_attribute('ulCompositeAvailableCapacity', 'ns3::NgcX2Sap::CompositeAvailCapacity', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::ulGbrPrbUsage [variable]
    cls.add_instance_attribute('ulGbrPrbUsage', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::ulHardwareLoadIndicator [variable]
    cls.add_instance_attribute('ulHardwareLoadIndicator', 'ns3::NgcX2Sap::LoadIndicator', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::ulNonGbrPrbUsage [variable]
    cls.add_instance_attribute('ulNonGbrPrbUsage', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::ulN2TnlLoadIndicator [variable]
    cls.add_instance_attribute('ulN2TnlLoadIndicator', 'ns3::NgcX2Sap::LoadIndicator', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CellMeasurementResultItem::ulTotalPrbUsage [variable]
    cls.add_instance_attribute('ulTotalPrbUsage', 'uint16_t', is_const=False)
    return

def register_Ns3NgcX2SapCompositeAvailCapacity_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CompositeAvailCapacity::CompositeAvailCapacity() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CompositeAvailCapacity::CompositeAvailCapacity(ns3::NgcX2Sap::CompositeAvailCapacity const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::CompositeAvailCapacity const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CompositeAvailCapacity::capacityValue [variable]
    cls.add_instance_attribute('capacityValue', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::CompositeAvailCapacity::cellCapacityClassValue [variable]
    cls.add_instance_attribute('cellCapacityClassValue', 'uint16_t', is_const=False)
    return

def register_Ns3NgcX2SapErabAdmittedItem_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabAdmittedItem::ErabAdmittedItem() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabAdmittedItem::ErabAdmittedItem(ns3::NgcX2Sap::ErabAdmittedItem const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::ErabAdmittedItem const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabAdmittedItem::dlGtpTeid [variable]
    cls.add_instance_attribute('dlGtpTeid', 'uint32_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabAdmittedItem::erabId [variable]
    cls.add_instance_attribute('erabId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabAdmittedItem::ulGtpTeid [variable]
    cls.add_instance_attribute('ulGtpTeid', 'uint32_t', is_const=False)
    return

def register_Ns3NgcX2SapErabNotAdmittedItem_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabNotAdmittedItem::ErabNotAdmittedItem() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabNotAdmittedItem::ErabNotAdmittedItem(ns3::NgcX2Sap::ErabNotAdmittedItem const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::ErabNotAdmittedItem const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabNotAdmittedItem::cause [variable]
    cls.add_instance_attribute('cause', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabNotAdmittedItem::erabId [variable]
    cls.add_instance_attribute('erabId', 'uint16_t', is_const=False)
    return

def register_Ns3NgcX2SapErabToBeSetupItem_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabToBeSetupItem::ErabToBeSetupItem(ns3::NgcX2Sap::ErabToBeSetupItem const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::ErabToBeSetupItem const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabToBeSetupItem::ErabToBeSetupItem() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabToBeSetupItem::dlForwarding [variable]
    cls.add_instance_attribute('dlForwarding', 'bool', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabToBeSetupItem::erabId [variable]
    cls.add_instance_attribute('erabId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabToBeSetupItem::erabLevelQosParameters [variable]
    cls.add_instance_attribute('erabLevelQosParameters', 'ns3::EpsBearer', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabToBeSetupItem::gtpTeid [variable]
    cls.add_instance_attribute('gtpTeid', 'uint32_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabToBeSetupItem::transportLayerAddress [variable]
    cls.add_instance_attribute('transportLayerAddress', 'ns3::Ipv4Address', is_const=False)
    return

def register_Ns3NgcX2SapErabsSubjectToStatusTransferItem_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem::ErabsSubjectToStatusTransferItem() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem::ErabsSubjectToStatusTransferItem(ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem::dlHfn [variable]
    cls.add_instance_attribute('dlHfn', 'uint32_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem::dlPdcpSn [variable]
    cls.add_instance_attribute('dlPdcpSn', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem::erabId [variable]
    cls.add_instance_attribute('erabId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem::receiveStatusOfUlPdcpSdus [variable]
    cls.add_instance_attribute('receiveStatusOfUlPdcpSdus', 'std::bitset< 4096ul >', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem::ulHfn [variable]
    cls.add_instance_attribute('ulHfn', 'uint32_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem::ulPdcpSn [variable]
    cls.add_instance_attribute('ulPdcpSn', 'uint16_t', is_const=False)
    return

def register_Ns3NgcX2SapHandoverPreparationFailureParams_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverPreparationFailureParams::HandoverPreparationFailureParams() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverPreparationFailureParams::HandoverPreparationFailureParams(ns3::NgcX2Sap::HandoverPreparationFailureParams const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::HandoverPreparationFailureParams const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverPreparationFailureParams::cause [variable]
    cls.add_instance_attribute('cause', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverPreparationFailureParams::criticalityDiagnostics [variable]
    cls.add_instance_attribute('criticalityDiagnostics', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverPreparationFailureParams::oldEnbUeX2apId [variable]
    cls.add_instance_attribute('oldEnbUeX2apId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverPreparationFailureParams::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverPreparationFailureParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    return

def register_Ns3NgcX2SapHandoverRequestAckParams_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestAckParams::HandoverRequestAckParams() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestAckParams::HandoverRequestAckParams(ns3::NgcX2Sap::HandoverRequestAckParams const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::HandoverRequestAckParams const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestAckParams::admittedBearers [variable]
    cls.add_instance_attribute('admittedBearers', 'std::vector< ns3::NgcX2Sap::ErabAdmittedItem >', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestAckParams::newEnbUeX2apId [variable]
    cls.add_instance_attribute('newEnbUeX2apId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestAckParams::notAdmittedBearers [variable]
    cls.add_instance_attribute('notAdmittedBearers', 'std::vector< ns3::NgcX2Sap::ErabNotAdmittedItem >', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestAckParams::oldEnbUeX2apId [variable]
    cls.add_instance_attribute('oldEnbUeX2apId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestAckParams::rrcContext [variable]
    cls.add_instance_attribute('rrcContext', 'ns3::Ptr< ns3::Packet >', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestAckParams::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestAckParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    return

def register_Ns3NgcX2SapHandoverRequestParams_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestParams::HandoverRequestParams() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestParams::HandoverRequestParams(ns3::NgcX2Sap::HandoverRequestParams const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::HandoverRequestParams const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestParams::bearers [variable]
    cls.add_instance_attribute('bearers', 'std::vector< ns3::NgcX2Sap::ErabToBeSetupItem >', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestParams::cause [variable]
    cls.add_instance_attribute('cause', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestParams::amfUeN2apId [variable]
    cls.add_instance_attribute('amfUeN2apId', 'uint32_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestParams::oldEnbUeX2apId [variable]
    cls.add_instance_attribute('oldEnbUeX2apId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestParams::rrcContext [variable]
    cls.add_instance_attribute('rrcContext', 'ns3::Ptr< ns3::Packet >', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestParams::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestParams::ueAggregateMaxBitRateDownlink [variable]
    cls.add_instance_attribute('ueAggregateMaxBitRateDownlink', 'uint64_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::HandoverRequestParams::ueAggregateMaxBitRateUplink [variable]
    cls.add_instance_attribute('ueAggregateMaxBitRateUplink', 'uint64_t', is_const=False)
    return

def register_Ns3NgcX2SapLoadInformationParams_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::LoadInformationParams::LoadInformationParams() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::LoadInformationParams::LoadInformationParams(ns3::NgcX2Sap::LoadInformationParams const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::LoadInformationParams const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::LoadInformationParams::cellInformationList [variable]
    cls.add_instance_attribute('cellInformationList', 'std::vector< ns3::NgcX2Sap::CellInformationItem >', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::LoadInformationParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    return

def register_Ns3NgcX2SapRelativeNarrowbandTxBand_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::RelativeNarrowbandTxBand::RelativeNarrowbandTxBand() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::RelativeNarrowbandTxBand::RelativeNarrowbandTxBand(ns3::NgcX2Sap::RelativeNarrowbandTxBand const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::RelativeNarrowbandTxBand const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::RelativeNarrowbandTxBand::antennaPorts [variable]
    cls.add_instance_attribute('antennaPorts', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::RelativeNarrowbandTxBand::pB [variable]
    cls.add_instance_attribute('pB', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::RelativeNarrowbandTxBand::pdcchInterferenceImpact [variable]
    cls.add_instance_attribute('pdcchInterferenceImpact', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::RelativeNarrowbandTxBand::rntpPerPrbList [variable]
    cls.add_instance_attribute('rntpPerPrbList', 'std::vector< bool >', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::RelativeNarrowbandTxBand::rntpThreshold [variable]
    cls.add_instance_attribute('rntpThreshold', 'int16_t', is_const=False)
    return

def register_Ns3NgcX2SapResourceStatusUpdateParams_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ResourceStatusUpdateParams::ResourceStatusUpdateParams() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ResourceStatusUpdateParams::ResourceStatusUpdateParams(ns3::NgcX2Sap::ResourceStatusUpdateParams const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::ResourceStatusUpdateParams const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ResourceStatusUpdateParams::cellMeasurementResultList [variable]
    cls.add_instance_attribute('cellMeasurementResultList', 'std::vector< ns3::NgcX2Sap::CellMeasurementResultItem >', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ResourceStatusUpdateParams::enb1MeasurementId [variable]
    cls.add_instance_attribute('enb1MeasurementId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ResourceStatusUpdateParams::enb2MeasurementId [variable]
    cls.add_instance_attribute('enb2MeasurementId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::ResourceStatusUpdateParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    return

def register_Ns3NgcX2SapSnStatusTransferParams_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::SnStatusTransferParams::SnStatusTransferParams() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::SnStatusTransferParams::SnStatusTransferParams(ns3::NgcX2Sap::SnStatusTransferParams const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::SnStatusTransferParams const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::SnStatusTransferParams::erabsSubjectToStatusTransferList [variable]
    cls.add_instance_attribute('erabsSubjectToStatusTransferList', 'std::vector< ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem >', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::SnStatusTransferParams::newEnbUeX2apId [variable]
    cls.add_instance_attribute('newEnbUeX2apId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::SnStatusTransferParams::oldEnbUeX2apId [variable]
    cls.add_instance_attribute('oldEnbUeX2apId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::SnStatusTransferParams::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::SnStatusTransferParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    return

def register_Ns3NgcX2SapUeContextReleaseParams_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeContextReleaseParams::UeContextReleaseParams() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeContextReleaseParams::UeContextReleaseParams(ns3::NgcX2Sap::UeContextReleaseParams const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::UeContextReleaseParams const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeContextReleaseParams::newEnbUeX2apId [variable]
    cls.add_instance_attribute('newEnbUeX2apId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeContextReleaseParams::oldEnbUeX2apId [variable]
    cls.add_instance_attribute('oldEnbUeX2apId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeContextReleaseParams::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeContextReleaseParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    return

def register_Ns3NgcX2SapUeDataParams_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeDataParams::UeDataParams() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeDataParams::UeDataParams(ns3::NgcX2Sap::UeDataParams const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::UeDataParams const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeDataParams::gtpTeid [variable]
    cls.add_instance_attribute('gtpTeid', 'uint32_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeDataParams::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeDataParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UeDataParams::ueData [variable]
    cls.add_instance_attribute('ueData', 'ns3::Ptr< ns3::Packet >', is_const=False)
    return

def register_Ns3NgcX2SapUlHighInterferenceInformationItem_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UlHighInterferenceInformationItem::UlHighInterferenceInformationItem() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UlHighInterferenceInformationItem::UlHighInterferenceInformationItem(ns3::NgcX2Sap::UlHighInterferenceInformationItem const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Sap::UlHighInterferenceInformationItem const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UlHighInterferenceInformationItem::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2Sap::UlHighInterferenceInformationItem::ulHighInterferenceIndicationList [variable]
    cls.add_instance_attribute('ulHighInterferenceIndicationList', 'std::vector< bool >', is_const=False)
    return

def register_Ns3NgcX2SapProvider_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2SapProvider::NgcX2SapProvider() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2SapProvider::NgcX2SapProvider(ns3::NgcX2SapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2SapProvider const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapProvider::SendHandoverPreparationFailure(ns3::NgcX2Sap::HandoverPreparationFailureParams params) [member function]
    cls.add_method('SendHandoverPreparationFailure', 
                   'void', 
                   [param('ns3::NgcX2Sap::HandoverPreparationFailureParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapProvider::SendHandoverRequest(ns3::NgcX2Sap::HandoverRequestParams params) [member function]
    cls.add_method('SendHandoverRequest', 
                   'void', 
                   [param('ns3::NgcX2Sap::HandoverRequestParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapProvider::SendHandoverRequestAck(ns3::NgcX2Sap::HandoverRequestAckParams params) [member function]
    cls.add_method('SendHandoverRequestAck', 
                   'void', 
                   [param('ns3::NgcX2Sap::HandoverRequestAckParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapProvider::SendLoadInformation(ns3::NgcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('SendLoadInformation', 
                   'void', 
                   [param('ns3::NgcX2Sap::LoadInformationParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapProvider::SendResourceStatusUpdate(ns3::NgcX2Sap::ResourceStatusUpdateParams params) [member function]
    cls.add_method('SendResourceStatusUpdate', 
                   'void', 
                   [param('ns3::NgcX2Sap::ResourceStatusUpdateParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapProvider::SendSnStatusTransfer(ns3::NgcX2Sap::SnStatusTransferParams params) [member function]
    cls.add_method('SendSnStatusTransfer', 
                   'void', 
                   [param('ns3::NgcX2Sap::SnStatusTransferParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapProvider::SendUeContextRelease(ns3::NgcX2Sap::UeContextReleaseParams params) [member function]
    cls.add_method('SendUeContextRelease', 
                   'void', 
                   [param('ns3::NgcX2Sap::UeContextReleaseParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapProvider::SendUeData(ns3::NgcX2Sap::UeDataParams params) [member function]
    cls.add_method('SendUeData', 
                   'void', 
                   [param('ns3::NgcX2Sap::UeDataParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NgcX2SapUser_methods(root_module, cls):
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2SapUser::NgcX2SapUser() [constructor]
    cls.add_constructor([])
    ## ngc-x2-sap.h (module 'nr'): ns3::NgcX2SapUser::NgcX2SapUser(ns3::NgcX2SapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2SapUser const &', 'arg0')])
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapUser::RecvHandoverPreparationFailure(ns3::NgcX2Sap::HandoverPreparationFailureParams params) [member function]
    cls.add_method('RecvHandoverPreparationFailure', 
                   'void', 
                   [param('ns3::NgcX2Sap::HandoverPreparationFailureParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapUser::RecvHandoverRequest(ns3::NgcX2Sap::HandoverRequestParams params) [member function]
    cls.add_method('RecvHandoverRequest', 
                   'void', 
                   [param('ns3::NgcX2Sap::HandoverRequestParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapUser::RecvHandoverRequestAck(ns3::NgcX2Sap::HandoverRequestAckParams params) [member function]
    cls.add_method('RecvHandoverRequestAck', 
                   'void', 
                   [param('ns3::NgcX2Sap::HandoverRequestAckParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapUser::RecvLoadInformation(ns3::NgcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('RecvLoadInformation', 
                   'void', 
                   [param('ns3::NgcX2Sap::LoadInformationParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapUser::RecvResourceStatusUpdate(ns3::NgcX2Sap::ResourceStatusUpdateParams params) [member function]
    cls.add_method('RecvResourceStatusUpdate', 
                   'void', 
                   [param('ns3::NgcX2Sap::ResourceStatusUpdateParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapUser::RecvSnStatusTransfer(ns3::NgcX2Sap::SnStatusTransferParams params) [member function]
    cls.add_method('RecvSnStatusTransfer', 
                   'void', 
                   [param('ns3::NgcX2Sap::SnStatusTransferParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapUser::RecvUeContextRelease(ns3::NgcX2Sap::UeContextReleaseParams params) [member function]
    cls.add_method('RecvUeContextRelease', 
                   'void', 
                   [param('ns3::NgcX2Sap::UeContextReleaseParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-x2-sap.h (module 'nr'): void ns3::NgcX2SapUser::RecvUeData(ns3::NgcX2Sap::UeDataParams params) [member function]
    cls.add_method('RecvUeData', 
                   'void', 
                   [param('ns3::NgcX2Sap::UeDataParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3EpsBearer_methods(root_module, cls):
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::EpsBearer(ns3::EpsBearer const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::EpsBearer const &', 'arg0')])
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::EpsBearer() [constructor]
    cls.add_constructor([])
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::EpsBearer(ns3::EpsBearer::Qci x) [constructor]
    cls.add_constructor([param('ns3::EpsBearer::Qci', 'x')])
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::EpsBearer(ns3::EpsBearer::Qci x, ns3::GbrQosInformation y) [constructor]
    cls.add_constructor([param('ns3::EpsBearer::Qci', 'x'), param('ns3::GbrQosInformation', 'y')])
    ## eps-bearer.h (module 'nr'): uint16_t ns3::EpsBearer::GetPacketDelayBudgetMs() const [member function]
    cls.add_method('GetPacketDelayBudgetMs', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## eps-bearer.h (module 'nr'): double ns3::EpsBearer::GetPacketErrorLossRate() const [member function]
    cls.add_method('GetPacketErrorLossRate', 
                   'double', 
                   [], 
                   is_const=True)
    ## eps-bearer.h (module 'nr'): uint8_t ns3::EpsBearer::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## eps-bearer.h (module 'nr'): bool ns3::EpsBearer::IsGbr() const [member function]
    cls.add_method('IsGbr', 
                   'bool', 
                   [], 
                   is_const=True)
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::arp [variable]
    cls.add_instance_attribute('arp', 'ns3::AllocationRetentionPriority', is_const=False)
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::gbrQosInfo [variable]
    cls.add_instance_attribute('gbrQosInfo', 'ns3::GbrQosInformation', is_const=False)
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::qci [variable]
    cls.add_instance_attribute('qci', 'ns3::EpsBearer::Qci', is_const=False)
    return

def register_Ns3QosFlow_methods(root_module, cls):
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::EpsBearer(ns3::EpsBearer const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::QosFlow const &', 'arg0')])
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::EpsBearer() [constructor]
    cls.add_constructor([])
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::EpsBearer(ns3::EpsBearer::Qci x) [constructor]
    cls.add_constructor([param('ns3::QosFlow::Qci', 'x')])
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::EpsBearer(ns3::EpsBearer::Qci x, ns3::GbrQosInformation y) [constructor]
    cls.add_constructor([param('ns3::QosFlow::Qci', 'x'), param('ns3::GbrQosInformation', 'y')])
    ## eps-bearer.h (module 'nr'): uint16_t ns3::EpsBearer::GetPacketDelayBudgetMs() const [member function]
    cls.add_method('GetPacketDelayBudgetMs', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## eps-bearer.h (module 'nr'): double ns3::EpsBearer::GetPacketErrorLossRate() const [member function]
    cls.add_method('GetPacketErrorLossRate', 
                   'double', 
                   [], 
                   is_const=True)
    ## eps-bearer.h (module 'nr'): uint8_t ns3::EpsBearer::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## eps-bearer.h (module 'nr'): bool ns3::EpsBearer::IsGbr() const [member function]
    cls.add_method('IsGbr', 
                   'bool', 
                   [], 
                   is_const=True)
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::arp [variable]
    cls.add_instance_attribute('arp', 'ns3::AllocationRetentionPriority', is_const=False)
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::gbrQosInfo [variable]
    cls.add_instance_attribute('gbrQosInfo', 'ns3::GbrQosInformation', is_const=False)
    ## eps-bearer.h (module 'nr'): ns3::EpsBearer::qci [variable]
    cls.add_instance_attribute('qci', 'ns3::EpsBearer::Qci', is_const=False)
    return



def register_Ns3NrEutranMeasurementMapping_methods(root_module, cls):
    ## nr-common.h (module 'nr'): ns3::NrEutranMeasurementMapping::NrEutranMeasurementMapping() [constructor]
    cls.add_constructor([])
    ## nr-common.h (module 'nr'): ns3::NrEutranMeasurementMapping::NrEutranMeasurementMapping(ns3::NrEutranMeasurementMapping const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEutranMeasurementMapping const &', 'arg0')])
    ## nr-common.h (module 'nr'): static int8_t ns3::NrEutranMeasurementMapping::ActualA3Offset2IeValue(double a3OffsetDb) [member function]
    cls.add_method('ActualA3Offset2IeValue', 
                   'int8_t', 
                   [param('double', 'a3OffsetDb')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static uint8_t ns3::NrEutranMeasurementMapping::ActualHysteresis2IeValue(double hysteresisDb) [member function]
    cls.add_method('ActualHysteresis2IeValue', 
                   'uint8_t', 
                   [param('double', 'hysteresisDb')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static uint8_t ns3::NrEutranMeasurementMapping::Db2RsrqRange(double db) [member function]
    cls.add_method('Db2RsrqRange', 
                   'uint8_t', 
                   [param('double', 'db')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static uint8_t ns3::NrEutranMeasurementMapping::Dbm2RsrpRange(double dbm) [member function]
    cls.add_method('Dbm2RsrpRange', 
                   'uint8_t', 
                   [param('double', 'dbm')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static double ns3::NrEutranMeasurementMapping::IeValue2ActualA3Offset(int8_t a3OffsetIeValue) [member function]
    cls.add_method('IeValue2ActualA3Offset', 
                   'double', 
                   [param('int8_t', 'a3OffsetIeValue')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static double ns3::NrEutranMeasurementMapping::IeValue2ActualHysteresis(uint8_t hysteresisIeValue) [member function]
    cls.add_method('IeValue2ActualHysteresis', 
                   'double', 
                   [param('uint8_t', 'hysteresisIeValue')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static double ns3::NrEutranMeasurementMapping::IeValue2ActualQQualMin(int8_t qQualMinIeValue) [member function]
    cls.add_method('IeValue2ActualQQualMin', 
                   'double', 
                   [param('int8_t', 'qQualMinIeValue')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static double ns3::NrEutranMeasurementMapping::IeValue2ActualQRxLevMin(int8_t qRxLevMinIeValue) [member function]
    cls.add_method('IeValue2ActualQRxLevMin', 
                   'double', 
                   [param('int8_t', 'qRxLevMinIeValue')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static double ns3::NrEutranMeasurementMapping::QuantizeRsrp(double v) [member function]
    cls.add_method('QuantizeRsrp', 
                   'double', 
                   [param('double', 'v')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static double ns3::NrEutranMeasurementMapping::QuantizeRsrq(double v) [member function]
    cls.add_method('QuantizeRsrq', 
                   'double', 
                   [param('double', 'v')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static double ns3::NrEutranMeasurementMapping::RsrpRange2Dbm(uint8_t range) [member function]
    cls.add_method('RsrpRange2Dbm', 
                   'double', 
                   [param('uint8_t', 'range')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static double ns3::NrEutranMeasurementMapping::RsrqRange2Db(uint8_t range) [member function]
    cls.add_method('RsrqRange2Db', 
                   'double', 
                   [param('uint8_t', 'range')], 
                   is_static=True)
    return

def register_Ns3EventId_methods(root_module, cls):
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('==')
    ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::EventId const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::EventId const &', 'arg0')])
    ## event-id.h (module 'core'): ns3::EventId::EventId() [constructor]
    cls.add_constructor([])
    ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::Ptr<ns3::EventImpl> const & impl, uint64_t ts, uint32_t context, uint32_t uid) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::EventImpl > const &', 'impl'), param('uint64_t', 'ts'), param('uint32_t', 'context'), param('uint32_t', 'uid')])
    ## event-id.h (module 'core'): void ns3::EventId::Cancel() [member function]
    cls.add_method('Cancel', 
                   'void', 
                   [])
    ## event-id.h (module 'core'): uint32_t ns3::EventId::GetContext() const [member function]
    cls.add_method('GetContext', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): uint64_t ns3::EventId::GetTs() const [member function]
    cls.add_method('GetTs', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): uint32_t ns3::EventId::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): bool ns3::EventId::IsExpired() const [member function]
    cls.add_method('IsExpired', 
                   'bool', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): bool ns3::EventId::IsRunning() const [member function]
    cls.add_method('IsRunning', 
                   'bool', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): ns3::EventImpl * ns3::EventId::PeekEventImpl() const [member function]
    cls.add_method('PeekEventImpl', 
                   'ns3::EventImpl *', 
                   [], 
                   is_const=True)
    return

def register_Ns3FfMacCschedSapProvider_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::FfMacCschedSapProvider() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::FfMacCschedSapProvider(ns3::FfMacCschedSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): void ns3::FfMacCschedSapProvider::CschedCellConfigReq(ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters const & params) [member function]
    cls.add_method('CschedCellConfigReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'nr'): void ns3::FfMacCschedSapProvider::CschedLcConfigReq(ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters const & params) [member function]
    cls.add_method('CschedLcConfigReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'nr'): void ns3::FfMacCschedSapProvider::CschedLcReleaseReq(ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters const & params) [member function]
    cls.add_method('CschedLcReleaseReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'nr'): void ns3::FfMacCschedSapProvider::CschedUeConfigReq(ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters const & params) [member function]
    cls.add_method('CschedUeConfigReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'nr'): void ns3::FfMacCschedSapProvider::CschedUeReleaseReq(ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters const & params) [member function]
    cls.add_method('CschedUeReleaseReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3FfMacCschedSapProviderCschedCellConfigReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::CschedCellConfigReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::CschedCellConfigReqParameters(ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_antennaPortsCount [variable]
    cls.add_instance_attribute('m_antennaPortsCount', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_deltaPucchShift [variable]
    cls.add_instance_attribute('m_deltaPucchShift', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_dlBandwidth [variable]
    cls.add_instance_attribute('m_dlBandwidth', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_dlCyclicPrefixLength [variable]
    cls.add_instance_attribute('m_dlCyclicPrefixLength', 'ns3::NormalExtended_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_duplexMode [variable]
    cls.add_instance_attribute('m_duplexMode', 'ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::DuplexMode_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_enable64Qam [variable]
    cls.add_instance_attribute('m_enable64Qam', 'ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::Enable64Qam_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_hoppingMode [variable]
    cls.add_instance_attribute('m_hoppingMode', 'ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::HoppingMode_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_initialNrOfPdcchOfdmSymbols [variable]
    cls.add_instance_attribute('m_initialNrOfPdcchOfdmSymbols', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_macContentionResolutionTimer [variable]
    cls.add_instance_attribute('m_macContentionResolutionTimer', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_maxHarqMsg3Tx [variable]
    cls.add_instance_attribute('m_maxHarqMsg3Tx', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_mbsfnSubframeConfigRfOffset [variable]
    cls.add_instance_attribute('m_mbsfnSubframeConfigRfOffset', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_mbsfnSubframeConfigRfPeriod [variable]
    cls.add_instance_attribute('m_mbsfnSubframeConfigRfPeriod', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_mbsfnSubframeConfigSfAllocation [variable]
    cls.add_instance_attribute('m_mbsfnSubframeConfigSfAllocation', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_n1PucchAn [variable]
    cls.add_instance_attribute('m_n1PucchAn', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_nSb [variable]
    cls.add_instance_attribute('m_nSb', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_ncsAn [variable]
    cls.add_instance_attribute('m_ncsAn', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_nrbCqi [variable]
    cls.add_instance_attribute('m_nrbCqi', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_phichDuration [variable]
    cls.add_instance_attribute('m_phichDuration', 'ns3::NormalExtended_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_phichResource [variable]
    cls.add_instance_attribute('m_phichResource', 'ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::PhichResource_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_prachConfigurationIndex [variable]
    cls.add_instance_attribute('m_prachConfigurationIndex', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_prachFreqOffset [variable]
    cls.add_instance_attribute('m_prachFreqOffset', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_puschHoppingOffset [variable]
    cls.add_instance_attribute('m_puschHoppingOffset', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_raResponseWindowSize [variable]
    cls.add_instance_attribute('m_raResponseWindowSize', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_siConfiguration [variable]
    cls.add_instance_attribute('m_siConfiguration', 'ns3::SiConfiguration_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_specialSubframePatterns [variable]
    cls.add_instance_attribute('m_specialSubframePatterns', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_srsBandwidthConfiguration [variable]
    cls.add_instance_attribute('m_srsBandwidthConfiguration', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_srsMaxUpPts [variable]
    cls.add_instance_attribute('m_srsMaxUpPts', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_srsSubframeConfiguration [variable]
    cls.add_instance_attribute('m_srsSubframeConfiguration', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_srsSubframeOffset [variable]
    cls.add_instance_attribute('m_srsSubframeOffset', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_subframeAssignment [variable]
    cls.add_instance_attribute('m_subframeAssignment', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_ulBandwidth [variable]
    cls.add_instance_attribute('m_ulBandwidth', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_ulCyclicPrefixLength [variable]
    cls.add_instance_attribute('m_ulCyclicPrefixLength', 'ns3::NormalExtended_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapProviderCschedLcConfigReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters::CschedLcConfigReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters::CschedLcConfigReqParameters(ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters::m_logicalChannelConfigList [variable]
    cls.add_instance_attribute('m_logicalChannelConfigList', 'std::vector< ns3::LogicalChannelConfigListElement_s >', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters::m_reconfigureFlag [variable]
    cls.add_instance_attribute('m_reconfigureFlag', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapProviderCschedLcReleaseReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters::CschedLcReleaseReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters::CschedLcReleaseReqParameters(ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapProviderCschedUeConfigReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::CschedUeConfigReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::CschedUeConfigReqParameters(ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ackNackRepetitionFactor [variable]
    cls.add_instance_attribute('m_ackNackRepetitionFactor', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ackNackSrsSimultaneousTransmission [variable]
    cls.add_instance_attribute('m_ackNackSrsSimultaneousTransmission', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_aperiodicCqiRepMode [variable]
    cls.add_instance_attribute('m_aperiodicCqiRepMode', 'ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::RepMode_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_betaOffsetAckIndex [variable]
    cls.add_instance_attribute('m_betaOffsetAckIndex', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_betaOffsetCqiIndex [variable]
    cls.add_instance_attribute('m_betaOffsetCqiIndex', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_betaOffsetRiIndex [variable]
    cls.add_instance_attribute('m_betaOffsetRiIndex', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_cqiConfig [variable]
    cls.add_instance_attribute('m_cqiConfig', 'ns3::CqiConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_cqiConfigPresent [variable]
    cls.add_instance_attribute('m_cqiConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_drxConfig [variable]
    cls.add_instance_attribute('m_drxConfig', 'ns3::DrxConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_drxConfigPresent [variable]
    cls.add_instance_attribute('m_drxConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_maxHarqTx [variable]
    cls.add_instance_attribute('m_maxHarqTx', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_measGapConfigPattern [variable]
    cls.add_instance_attribute('m_measGapConfigPattern', 'ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::MeasGapConfigPattern_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_measGapConfigSubframeOffset [variable]
    cls.add_instance_attribute('m_measGapConfigSubframeOffset', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_reconfigureFlag [variable]
    cls.add_instance_attribute('m_reconfigureFlag', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_simultaneousAckNackAndCqi [variable]
    cls.add_instance_attribute('m_simultaneousAckNackAndCqi', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_spsConfig [variable]
    cls.add_instance_attribute('m_spsConfig', 'ns3::SpsConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_spsConfigPresent [variable]
    cls.add_instance_attribute('m_spsConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_srConfig [variable]
    cls.add_instance_attribute('m_srConfig', 'ns3::SrConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_srConfigPresent [variable]
    cls.add_instance_attribute('m_srConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_tddAckNackFeedbackMode [variable]
    cls.add_instance_attribute('m_tddAckNackFeedbackMode', 'ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::FeedbackMode_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_timeAlignmentTimer [variable]
    cls.add_instance_attribute('m_timeAlignmentTimer', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_transmissionMode [variable]
    cls.add_instance_attribute('m_transmissionMode', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ttiBundling [variable]
    cls.add_instance_attribute('m_ttiBundling', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ueAggregatedMaximumBitrateDl [variable]
    cls.add_instance_attribute('m_ueAggregatedMaximumBitrateDl', 'uint64_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ueAggregatedMaximumBitrateUl [variable]
    cls.add_instance_attribute('m_ueAggregatedMaximumBitrateUl', 'uint64_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ueCapabilities [variable]
    cls.add_instance_attribute('m_ueCapabilities', 'ns3::UeCapabilities_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ueTransmitAntennaSelection [variable]
    cls.add_instance_attribute('m_ueTransmitAntennaSelection', 'ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::OpenClosedLoop_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapProviderCschedUeReleaseReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters::CschedUeReleaseReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters::CschedUeReleaseReqParameters(ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUser_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::FfMacCschedSapUser() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::FfMacCschedSapUser(ns3::FfMacCschedSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): void ns3::FfMacCschedSapUser::CschedCellConfigCnf(ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters const & params) [member function]
    cls.add_method('CschedCellConfigCnf', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'nr'): void ns3::FfMacCschedSapUser::CschedCellConfigUpdateInd(ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters const & params) [member function]
    cls.add_method('CschedCellConfigUpdateInd', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'nr'): void ns3::FfMacCschedSapUser::CschedLcConfigCnf(ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters const & params) [member function]
    cls.add_method('CschedLcConfigCnf', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'nr'): void ns3::FfMacCschedSapUser::CschedLcReleaseCnf(ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters const & params) [member function]
    cls.add_method('CschedLcReleaseCnf', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'nr'): void ns3::FfMacCschedSapUser::CschedUeConfigCnf(ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters const & params) [member function]
    cls.add_method('CschedUeConfigCnf', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'nr'): void ns3::FfMacCschedSapUser::CschedUeConfigUpdateInd(ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters const & params) [member function]
    cls.add_method('CschedUeConfigUpdateInd', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'nr'): void ns3::FfMacCschedSapUser::CschedUeReleaseCnf(ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters const & params) [member function]
    cls.add_method('CschedUeReleaseCnf', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3FfMacCschedSapUserCschedCellConfigCnfParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters::CschedCellConfigCnfParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters::CschedCellConfigCnfParameters(ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters::m_result [variable]
    cls.add_instance_attribute('m_result', 'ns3::Result_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUserCschedCellConfigUpdateIndParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters::CschedCellConfigUpdateIndParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters::CschedCellConfigUpdateIndParameters(ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters::m_prbUtilizationDl [variable]
    cls.add_instance_attribute('m_prbUtilizationDl', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters::m_prbUtilizationUl [variable]
    cls.add_instance_attribute('m_prbUtilizationUl', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUserCschedLcConfigCnfParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters::CschedLcConfigCnfParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters::CschedLcConfigCnfParameters(ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters::m_result [variable]
    cls.add_instance_attribute('m_result', 'ns3::Result_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUserCschedLcReleaseCnfParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters::CschedLcReleaseCnfParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters::CschedLcReleaseCnfParameters(ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters::m_result [variable]
    cls.add_instance_attribute('m_result', 'ns3::Result_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUserCschedUeConfigCnfParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters::CschedUeConfigCnfParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters::CschedUeConfigCnfParameters(ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters::m_result [variable]
    cls.add_instance_attribute('m_result', 'ns3::Result_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUserCschedUeConfigUpdateIndParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::CschedUeConfigUpdateIndParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::CschedUeConfigUpdateIndParameters(ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_cqiConfig [variable]
    cls.add_instance_attribute('m_cqiConfig', 'ns3::CqiConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_cqiConfigPresent [variable]
    cls.add_instance_attribute('m_cqiConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_spsConfig [variable]
    cls.add_instance_attribute('m_spsConfig', 'ns3::SpsConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_spsConfigPresent [variable]
    cls.add_instance_attribute('m_spsConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_srConfig [variable]
    cls.add_instance_attribute('m_srConfig', 'ns3::SrConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_srConfigPresent [variable]
    cls.add_instance_attribute('m_srConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_transmissionMode [variable]
    cls.add_instance_attribute('m_transmissionMode', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUserCschedUeReleaseCnfParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters::CschedUeReleaseCnfParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters::CschedUeReleaseCnfParameters(ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters::m_result [variable]
    cls.add_instance_attribute('m_result', 'ns3::Result_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'nr'): ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProvider_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::FfMacSchedSapProvider() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::FfMacSchedSapProvider(ns3::FfMacSchedSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): void ns3::FfMacSchedSapProvider::SchedDlCqiInfoReq(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & params) [member function]
    cls.add_method('SchedDlCqiInfoReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'nr'): void ns3::FfMacSchedSapProvider::SchedDlMacBufferReq(ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters const & params) [member function]
    cls.add_method('SchedDlMacBufferReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'nr'): void ns3::FfMacSchedSapProvider::SchedDlPagingBufferReq(ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters const & params) [member function]
    cls.add_method('SchedDlPagingBufferReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'nr'): void ns3::FfMacSchedSapProvider::SchedDlRachInfoReq(ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters const & params) [member function]
    cls.add_method('SchedDlRachInfoReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'nr'): void ns3::FfMacSchedSapProvider::SchedDlRlcBufferReq(ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters const & params) [member function]
    cls.add_method('SchedDlRlcBufferReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'nr'): void ns3::FfMacSchedSapProvider::SchedDlTriggerReq(ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters const & params) [member function]
    cls.add_method('SchedDlTriggerReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'nr'): void ns3::FfMacSchedSapProvider::SchedUlCqiInfoReq(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & params) [member function]
    cls.add_method('SchedUlCqiInfoReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'nr'): void ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReq(ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters const & params) [member function]
    cls.add_method('SchedUlMacCtrlInfoReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'nr'): void ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReq(ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters const & params) [member function]
    cls.add_method('SchedUlNoiseInterferenceReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'nr'): void ns3::FfMacSchedSapProvider::SchedUlSrInfoReq(ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters const & params) [member function]
    cls.add_method('SchedUlSrInfoReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'nr'): void ns3::FfMacSchedSapProvider::SchedUlTriggerReq(ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters const & params) [member function]
    cls.add_method('SchedUlTriggerReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters::SchedDlCqiInfoReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters::SchedDlCqiInfoReqParameters(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters::m_cqiList [variable]
    cls.add_instance_attribute('m_cqiList', 'std::vector< ns3::CqiListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedDlMacBufferReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters::SchedDlMacBufferReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters::SchedDlMacBufferReqParameters(ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters::m_ceBitmap [variable]
    cls.add_instance_attribute('m_ceBitmap', 'ns3::CeBitmap_e', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters::SchedDlPagingBufferReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters::SchedDlPagingBufferReqParameters(ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters::m_pagingInfoList [variable]
    cls.add_instance_attribute('m_pagingInfoList', 'std::vector< ns3::PagingInfoListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedDlRachInfoReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters::SchedDlRachInfoReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters::SchedDlRachInfoReqParameters(ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters::m_rachList [variable]
    cls.add_instance_attribute('m_rachList', 'std::vector< ns3::RachListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::SchedDlRlcBufferReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::SchedDlRlcBufferReqParameters(ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'uint8_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_rlcRetransmissionHolDelay [variable]
    cls.add_instance_attribute('m_rlcRetransmissionHolDelay', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_rlcRetransmissionQueueSize [variable]
    cls.add_instance_attribute('m_rlcRetransmissionQueueSize', 'uint32_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_rlcStatusPduSize [variable]
    cls.add_instance_attribute('m_rlcStatusPduSize', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_rlcTransmissionQueueHolDelay [variable]
    cls.add_instance_attribute('m_rlcTransmissionQueueHolDelay', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_rlcTransmissionQueueSize [variable]
    cls.add_instance_attribute('m_rlcTransmissionQueueSize', 'uint32_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedDlTriggerReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters::SchedDlTriggerReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters::SchedDlTriggerReqParameters(ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters::m_dlInfoList [variable]
    cls.add_instance_attribute('m_dlInfoList', 'std::vector< ns3::DlInfoListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters::SchedUlCqiInfoReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters::SchedUlCqiInfoReqParameters(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters::m_ulCqi [variable]
    cls.add_instance_attribute('m_ulCqi', 'ns3::UlCqi_s', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters::SchedUlMacCtrlInfoReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters::SchedUlMacCtrlInfoReqParameters(ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters::m_macCeList [variable]
    cls.add_instance_attribute('m_macCeList', 'std::vector< ns3::MacCeListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters::SchedUlNoiseInterferenceReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters::SchedUlNoiseInterferenceReqParameters(ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters::m_rip [variable]
    cls.add_instance_attribute('m_rip', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters::m_tnp [variable]
    cls.add_instance_attribute('m_tnp', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedUlSrInfoReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters::SchedUlSrInfoReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters::SchedUlSrInfoReqParameters(ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters::m_srList [variable]
    cls.add_instance_attribute('m_srList', 'std::vector< ns3::SrListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedUlTriggerReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters::SchedUlTriggerReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters::SchedUlTriggerReqParameters(ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters::m_ulInfoList [variable]
    cls.add_instance_attribute('m_ulInfoList', 'std::vector< ns3::UlInfoListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapUser_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::FfMacSchedSapUser() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::FfMacSchedSapUser(ns3::FfMacSchedSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapUser const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): void ns3::FfMacSchedSapUser::SchedDlConfigInd(ns3::FfMacSchedSapUser::SchedDlConfigIndParameters const & params) [member function]
    cls.add_method('SchedDlConfigInd', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser::SchedDlConfigIndParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'nr'): void ns3::FfMacSchedSapUser::SchedUlConfigInd(ns3::FfMacSchedSapUser::SchedUlConfigIndParameters const & params) [member function]
    cls.add_method('SchedUlConfigInd', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser::SchedUlConfigIndParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3FfMacSchedSapUserSchedDlConfigIndParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::SchedDlConfigIndParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::SchedDlConfigIndParameters(ns3::FfMacSchedSapUser::SchedDlConfigIndParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapUser::SchedDlConfigIndParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::m_buildBroadcastList [variable]
    cls.add_instance_attribute('m_buildBroadcastList', 'std::vector< ns3::BuildBroadcastListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::m_buildDataList [variable]
    cls.add_instance_attribute('m_buildDataList', 'std::vector< ns3::BuildDataListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::m_buildRarList [variable]
    cls.add_instance_attribute('m_buildRarList', 'std::vector< ns3::BuildRarListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::m_nrOfPdcchOfdmSymbols [variable]
    cls.add_instance_attribute('m_nrOfPdcchOfdmSymbols', 'uint8_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapUserSchedUlConfigIndParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedUlConfigIndParameters::SchedUlConfigIndParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedUlConfigIndParameters::SchedUlConfigIndParameters(ns3::FfMacSchedSapUser::SchedUlConfigIndParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapUser::SchedUlConfigIndParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedUlConfigIndParameters::m_dciList [variable]
    cls.add_instance_attribute('m_dciList', 'std::vector< ns3::UlDciListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedUlConfigIndParameters::m_phichList [variable]
    cls.add_instance_attribute('m_phichList', 'std::vector< ns3::PhichListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'nr'): ns3::FfMacSchedSapUser::SchedUlConfigIndParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3GbrQosInformation_methods(root_module, cls):
    ## eps-bearer.h (module 'nr'): ns3::GbrQosInformation::GbrQosInformation(ns3::GbrQosInformation const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::GbrQosInformation const &', 'arg0')])
    ## eps-bearer.h (module 'nr'): ns3::GbrQosInformation::GbrQosInformation() [constructor]
    cls.add_constructor([])
    ## eps-bearer.h (module 'nr'): ns3::GbrQosInformation::gbrDl [variable]
    cls.add_instance_attribute('gbrDl', 'uint64_t', is_const=False)
    ## eps-bearer.h (module 'nr'): ns3::GbrQosInformation::gbrUl [variable]
    cls.add_instance_attribute('gbrUl', 'uint64_t', is_const=False)
    ## eps-bearer.h (module 'nr'): ns3::GbrQosInformation::mbrDl [variable]
    cls.add_instance_attribute('mbrDl', 'uint64_t', is_const=False)
    ## eps-bearer.h (module 'nr'): ns3::GbrQosInformation::mbrUl [variable]
    cls.add_instance_attribute('mbrUl', 'uint64_t', is_const=False)
    return

def register_Ns3HarqProcessInfoElement_t_methods(root_module, cls):
    ## nr-harq-phy.h (module 'nr'): ns3::HarqProcessInfoElement_t::HarqProcessInfoElement_t() [constructor]
    cls.add_constructor([])
    ## nr-harq-phy.h (module 'nr'): ns3::HarqProcessInfoElement_t::HarqProcessInfoElement_t(ns3::HarqProcessInfoElement_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::HarqProcessInfoElement_t const &', 'arg0')])
    ## nr-harq-phy.h (module 'nr'): ns3::HarqProcessInfoElement_t::m_codeBits [variable]
    cls.add_instance_attribute('m_codeBits', 'uint16_t', is_const=False)
    ## nr-harq-phy.h (module 'nr'): ns3::HarqProcessInfoElement_t::m_infoBits [variable]
    cls.add_instance_attribute('m_infoBits', 'uint16_t', is_const=False)
    ## nr-harq-phy.h (module 'nr'): ns3::HarqProcessInfoElement_t::m_mi [variable]
    cls.add_instance_attribute('m_mi', 'double', is_const=False)
    ## nr-harq-phy.h (module 'nr'): ns3::HarqProcessInfoElement_t::m_rv [variable]
    cls.add_instance_attribute('m_rv', 'uint8_t', is_const=False)
    return

def register_Ns3Hasher_methods(root_module, cls):
    ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Hasher const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Hasher const &', 'arg0')])
    ## hash.h (module 'core'): ns3::Hasher::Hasher() [constructor]
    cls.add_constructor([])
    ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Ptr<ns3::Hash::Implementation> hp) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::Hash::Implementation >', 'hp')])
    ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')])
    ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(std::string const s) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('std::string const', 's')])
    ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')])
    ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(std::string const s) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('std::string const', 's')])
    ## hash.h (module 'core'): ns3::Hasher & ns3::Hasher::clear() [member function]
    cls.add_method('clear', 
                   'ns3::Hasher &', 
                   [])
    return

def register_Ns3HigherLayerSelected_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::HigherLayerSelected_s::HigherLayerSelected_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::HigherLayerSelected_s::HigherLayerSelected_s(ns3::HigherLayerSelected_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::HigherLayerSelected_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::HigherLayerSelected_s::m_sbCqi [variable]
    cls.add_instance_attribute('m_sbCqi', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::HigherLayerSelected_s::m_sbPmi [variable]
    cls.add_instance_attribute('m_sbPmi', 'uint8_t', is_const=False)
    return

def register_Ns3NrImsiLcidPair_t_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    ## nr-common.h (module 'nr'): ns3::NrImsiLcidPair_t::NrImsiLcidPair_t(ns3::NrImsiLcidPair_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrImsiLcidPair_t const &', 'arg0')])
    ## nr-common.h (module 'nr'): ns3::NrImsiLcidPair_t::NrImsiLcidPair_t() [constructor]
    cls.add_constructor([])
    ## nr-common.h (module 'nr'): ns3::NrImsiLcidPair_t::NrImsiLcidPair_t(uint64_t const a, uint8_t const b) [constructor]
    cls.add_constructor([param('uint64_t const', 'a'), param('uint8_t const', 'b')])
    ## nr-common.h (module 'nr'): ns3::NrImsiLcidPair_t::m_imsi [variable]
    cls.add_instance_attribute('m_imsi', 'uint64_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrImsiLcidPair_t::m_lcId [variable]
    cls.add_instance_attribute('m_lcId', 'uint8_t', is_const=False)
    return

def register_Ns3Inet6SocketAddress_methods(root_module, cls):
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Inet6SocketAddress const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Inet6SocketAddress const &', 'arg0')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Ipv6Address ipv6, uint16_t port) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address', 'ipv6'), param('uint16_t', 'port')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Ipv6Address ipv6) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address', 'ipv6')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(uint16_t port) [constructor]
    cls.add_constructor([param('uint16_t', 'port')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(char const * ipv6, uint16_t port) [constructor]
    cls.add_constructor([param('char const *', 'ipv6'), param('uint16_t', 'port')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(char const * ipv6) [constructor]
    cls.add_constructor([param('char const *', 'ipv6')])
    ## inet6-socket-address.h (module 'network'): static ns3::Inet6SocketAddress ns3::Inet6SocketAddress::ConvertFrom(ns3::Address const & addr) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Inet6SocketAddress', 
                   [param('ns3::Address const &', 'addr')], 
                   is_static=True)
    ## inet6-socket-address.h (module 'network'): ns3::Ipv6Address ns3::Inet6SocketAddress::GetIpv6() const [member function]
    cls.add_method('GetIpv6', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_const=True)
    ## inet6-socket-address.h (module 'network'): uint16_t ns3::Inet6SocketAddress::GetPort() const [member function]
    cls.add_method('GetPort', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## inet6-socket-address.h (module 'network'): static bool ns3::Inet6SocketAddress::IsMatchingType(ns3::Address const & addr) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'addr')], 
                   is_static=True)
    ## inet6-socket-address.h (module 'network'): void ns3::Inet6SocketAddress::SetIpv6(ns3::Ipv6Address ipv6) [member function]
    cls.add_method('SetIpv6', 
                   'void', 
                   [param('ns3::Ipv6Address', 'ipv6')])
    ## inet6-socket-address.h (module 'network'): void ns3::Inet6SocketAddress::SetPort(uint16_t port) [member function]
    cls.add_method('SetPort', 
                   'void', 
                   [param('uint16_t', 'port')])
    return

def register_Ns3InetSocketAddress_methods(root_module, cls):
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::InetSocketAddress const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::InetSocketAddress const &', 'arg0')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::Ipv4Address ipv4, uint16_t port) [constructor]
    cls.add_constructor([param('ns3::Ipv4Address', 'ipv4'), param('uint16_t', 'port')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::Ipv4Address ipv4) [constructor]
    cls.add_constructor([param('ns3::Ipv4Address', 'ipv4')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(uint16_t port) [constructor]
    cls.add_constructor([param('uint16_t', 'port')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(char const * ipv4, uint16_t port) [constructor]
    cls.add_constructor([param('char const *', 'ipv4'), param('uint16_t', 'port')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(char const * ipv4) [constructor]
    cls.add_constructor([param('char const *', 'ipv4')])
    ## inet-socket-address.h (module 'network'): static ns3::InetSocketAddress ns3::InetSocketAddress::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::InetSocketAddress', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## inet-socket-address.h (module 'network'): ns3::Ipv4Address ns3::InetSocketAddress::GetIpv4() const [member function]
    cls.add_method('GetIpv4', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## inet-socket-address.h (module 'network'): uint16_t ns3::InetSocketAddress::GetPort() const [member function]
    cls.add_method('GetPort', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## inet-socket-address.h (module 'network'): static bool ns3::InetSocketAddress::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetIpv4(ns3::Ipv4Address address) [member function]
    cls.add_method('SetIpv4', 
                   'void', 
                   [param('ns3::Ipv4Address', 'address')])
    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetPort(uint16_t port) [member function]
    cls.add_method('SetPort', 
                   'void', 
                   [param('uint16_t', 'port')])
    return

def register_Ns3Ipv4Address_methods(root_module, cls):
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(ns3::Ipv4Address const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv4Address const &', 'arg0')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(uint32_t address) [constructor]
    cls.add_constructor([param('uint32_t', 'address')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(char const * address) [constructor]
    cls.add_constructor([param('char const *', 'address')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4Address::CombineMask(ns3::Ipv4Mask const & mask) const [member function]
    cls.add_method('CombineMask', 
                   'ns3::Ipv4Address', 
                   [param('ns3::Ipv4Mask const &', 'mask')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Ipv4Address', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::Deserialize(uint8_t const * buf) [member function]
    cls.add_method('Deserialize', 
                   'ns3::Ipv4Address', 
                   [param('uint8_t const *', 'buf')], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Address::Get() const [member function]
    cls.add_method('Get', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetAny() [member function]
    cls.add_method('GetAny', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetBroadcast() [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetLoopback() [member function]
    cls.add_method('GetLoopback', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4Address::GetSubnetDirectedBroadcast(ns3::Ipv4Mask const & mask) const [member function]
    cls.add_method('GetSubnetDirectedBroadcast', 
                   'ns3::Ipv4Address', 
                   [param('ns3::Ipv4Mask const &', 'mask')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetZero() [member function]
    cls.add_method('GetZero', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsEqual(ns3::Ipv4Address const & other) const [member function]
    cls.add_method('IsEqual', 
                   'bool', 
                   [param('ns3::Ipv4Address const &', 'other')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsLocalMulticast() const [member function]
    cls.add_method('IsLocalMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static bool ns3::Ipv4Address::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsSubnetDirectedBroadcast(ns3::Ipv4Mask const & mask) const [member function]
    cls.add_method('IsSubnetDirectedBroadcast', 
                   'bool', 
                   [param('ns3::Ipv4Mask const &', 'mask')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Serialize(uint8_t * buf) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('uint8_t *', 'buf')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Set(uint32_t address) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('uint32_t', 'address')])
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Set(char const * address) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('char const *', 'address')])
    return

def register_Ns3Ipv4AddressHelper_methods(root_module, cls):
    ## ipv4-address-helper.h (module 'internet'): ns3::Ipv4AddressHelper::Ipv4AddressHelper(ns3::Ipv4AddressHelper const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv4AddressHelper const &', 'arg0')])
    ## ipv4-address-helper.h (module 'internet'): ns3::Ipv4AddressHelper::Ipv4AddressHelper() [constructor]
    cls.add_constructor([])
    ## ipv4-address-helper.h (module 'internet'): ns3::Ipv4AddressHelper::Ipv4AddressHelper(ns3::Ipv4Address network, ns3::Ipv4Mask mask, ns3::Ipv4Address base="0.0.0.1") [constructor]
    cls.add_constructor([param('ns3::Ipv4Address', 'network'), param('ns3::Ipv4Mask', 'mask'), param('ns3::Ipv4Address', 'base', default_value='"0.0.0.1"')])
    ## ipv4-address-helper.h (module 'internet'): ns3::Ipv4InterfaceContainer ns3::Ipv4AddressHelper::Assign(ns3::NetDeviceContainer const & c) [member function]
    cls.add_method('Assign', 
                   'ns3::Ipv4InterfaceContainer', 
                   [param('ns3::NetDeviceContainer const &', 'c')])
    ## ipv4-address-helper.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4AddressHelper::NewAddress() [member function]
    cls.add_method('NewAddress', 
                   'ns3::Ipv4Address', 
                   [])
    ## ipv4-address-helper.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4AddressHelper::NewNetwork() [member function]
    cls.add_method('NewNetwork', 
                   'ns3::Ipv4Address', 
                   [])
    ## ipv4-address-helper.h (module 'internet'): void ns3::Ipv4AddressHelper::SetBase(ns3::Ipv4Address network, ns3::Ipv4Mask mask, ns3::Ipv4Address base="0.0.0.1") [member function]
    cls.add_method('SetBase', 
                   'void', 
                   [param('ns3::Ipv4Address', 'network'), param('ns3::Ipv4Mask', 'mask'), param('ns3::Ipv4Address', 'base', default_value='"0.0.0.1"')])
    return

def register_Ns3Ipv4InterfaceAddress_methods(root_module, cls):
    cls.add_binary_comparison_operator('!=')
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::Ipv4InterfaceAddress() [constructor]
    cls.add_constructor([])
    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::Ipv4InterfaceAddress(ns3::Ipv4Address local, ns3::Ipv4Mask mask) [constructor]
    cls.add_constructor([param('ns3::Ipv4Address', 'local'), param('ns3::Ipv4Mask', 'mask')])
    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::Ipv4InterfaceAddress(ns3::Ipv4InterfaceAddress const & o) [copy constructor]
    cls.add_constructor([param('ns3::Ipv4InterfaceAddress const &', 'o')])
    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4InterfaceAddress::GetBroadcast() const [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4InterfaceAddress::GetLocal() const [member function]
    cls.add_method('GetLocal', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4Mask ns3::Ipv4InterfaceAddress::GetMask() const [member function]
    cls.add_method('GetMask', 
                   'ns3::Ipv4Mask', 
                   [], 
                   is_const=True)
    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e ns3::Ipv4InterfaceAddress::GetScope() const [member function]
    cls.add_method('GetScope', 
                   'ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e', 
                   [], 
                   is_const=True)
    ## ipv4-interface-address.h (module 'internet'): bool ns3::Ipv4InterfaceAddress::IsSecondary() const [member function]
    cls.add_method('IsSecondary', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetBroadcast(ns3::Ipv4Address broadcast) [member function]
    cls.add_method('SetBroadcast', 
                   'void', 
                   [param('ns3::Ipv4Address', 'broadcast')])
    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetLocal(ns3::Ipv4Address local) [member function]
    cls.add_method('SetLocal', 
                   'void', 
                   [param('ns3::Ipv4Address', 'local')])
    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetMask(ns3::Ipv4Mask mask) [member function]
    cls.add_method('SetMask', 
                   'void', 
                   [param('ns3::Ipv4Mask', 'mask')])
    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetPrimary() [member function]
    cls.add_method('SetPrimary', 
                   'void', 
                   [])
    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetScope(ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e scope) [member function]
    cls.add_method('SetScope', 
                   'void', 
                   [param('ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e', 'scope')])
    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetSecondary() [member function]
    cls.add_method('SetSecondary', 
                   'void', 
                   [])
    return

def register_Ns3Ipv4InterfaceContainer_methods(root_module, cls):
    ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4InterfaceContainer::Ipv4InterfaceContainer(ns3::Ipv4InterfaceContainer const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv4InterfaceContainer const &', 'arg0')])
    ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4InterfaceContainer::Ipv4InterfaceContainer() [constructor]
    cls.add_constructor([])
    ## ipv4-interface-container.h (module 'internet'): void ns3::Ipv4InterfaceContainer::Add(ns3::Ipv4InterfaceContainer other) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ipv4InterfaceContainer', 'other')])
    ## ipv4-interface-container.h (module 'internet'): void ns3::Ipv4InterfaceContainer::Add(ns3::Ptr<ns3::Ipv4> ipv4, uint32_t interface) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::Ipv4 >', 'ipv4'), param('uint32_t', 'interface')])
    ## ipv4-interface-container.h (module 'internet'): void ns3::Ipv4InterfaceContainer::Add(std::pair<ns3::Ptr<ns3::Ipv4>,unsigned int> ipInterfacePair) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int >', 'ipInterfacePair')])
    ## ipv4-interface-container.h (module 'internet'): void ns3::Ipv4InterfaceContainer::Add(std::string ipv4Name, uint32_t interface) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'ipv4Name'), param('uint32_t', 'interface')])
    ## ipv4-interface-container.h (module 'internet'): __gnu_cxx::__normal_iterator<const std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int>*,std::vector<std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int>, std::allocator<std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int> > > > ns3::Ipv4InterfaceContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   '__gnu_cxx::__normal_iterator< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > const, std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > >', 
                   [], 
                   is_const=True)
    ## ipv4-interface-container.h (module 'internet'): __gnu_cxx::__normal_iterator<const std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int>*,std::vector<std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int>, std::allocator<std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int> > > > ns3::Ipv4InterfaceContainer::End() const [member function]
    cls.add_method('End', 
                   '__gnu_cxx::__normal_iterator< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > const, std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > >', 
                   [], 
                   is_const=True)
    ## ipv4-interface-container.h (module 'internet'): std::pair<ns3::Ptr<ns3::Ipv4>,unsigned int> ns3::Ipv4InterfaceContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4InterfaceContainer::GetAddress(uint32_t i, uint32_t j=0) const [member function]
    cls.add_method('GetAddress', 
                   'ns3::Ipv4Address', 
                   [param('uint32_t', 'i'), param('uint32_t', 'j', default_value='0')], 
                   is_const=True)
    ## ipv4-interface-container.h (module 'internet'): uint32_t ns3::Ipv4InterfaceContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ipv4-interface-container.h (module 'internet'): void ns3::Ipv4InterfaceContainer::SetMetric(uint32_t i, uint16_t metric) [member function]
    cls.add_method('SetMetric', 
                   'void', 
                   [param('uint32_t', 'i'), param('uint16_t', 'metric')])
    return

def register_Ns3Ipv4Mask_methods(root_module, cls):
    cls.add_binary_comparison_operator('!=')
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(ns3::Ipv4Mask const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv4Mask const &', 'arg0')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(uint32_t mask) [constructor]
    cls.add_constructor([param('uint32_t', 'mask')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(char const * mask) [constructor]
    cls.add_constructor([param('char const *', 'mask')])
    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Mask::Get() const [member function]
    cls.add_method('Get', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Mask::GetInverse() const [member function]
    cls.add_method('GetInverse', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetLoopback() [member function]
    cls.add_method('GetLoopback', 
                   'ns3::Ipv4Mask', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetOnes() [member function]
    cls.add_method('GetOnes', 
                   'ns3::Ipv4Mask', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): uint16_t ns3::Ipv4Mask::GetPrefixLength() const [member function]
    cls.add_method('GetPrefixLength', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetZero() [member function]
    cls.add_method('GetZero', 
                   'ns3::Ipv4Mask', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Mask::IsEqual(ns3::Ipv4Mask other) const [member function]
    cls.add_method('IsEqual', 
                   'bool', 
                   [param('ns3::Ipv4Mask', 'other')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Mask::IsMatch(ns3::Ipv4Address a, ns3::Ipv4Address b) const [member function]
    cls.add_method('IsMatch', 
                   'bool', 
                   [param('ns3::Ipv4Address', 'a'), param('ns3::Ipv4Address', 'b')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Mask::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Mask::Set(uint32_t mask) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('uint32_t', 'mask')])
    return

def register_Ns3Ipv6Address_methods(root_module, cls):
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(char const * address) [constructor]
    cls.add_constructor([param('char const *', 'address')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(uint8_t * address) [constructor]
    cls.add_constructor([param('uint8_t *', 'address')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const & addr) [copy constructor]
    cls.add_constructor([param('ns3::Ipv6Address const &', 'addr')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const * addr) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address const *', 'addr')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) [member function]
    cls.add_method('CombinePrefix', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Ipv6Prefix const &', 'prefix')])
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::Deserialize(uint8_t const * buf) [member function]
    cls.add_method('Deserialize', 
                   'ns3::Ipv6Address', 
                   [param('uint8_t const *', 'buf')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllHostsMulticast() [member function]
    cls.add_method('GetAllHostsMulticast', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllNodesMulticast() [member function]
    cls.add_method('GetAllNodesMulticast', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllRoutersMulticast() [member function]
    cls.add_method('GetAllRoutersMulticast', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAny() [member function]
    cls.add_method('GetAny', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::GetBytes(uint8_t * buf) const [member function]
    cls.add_method('GetBytes', 
                   'void', 
                   [param('uint8_t *', 'buf')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv6Address::GetIpv4MappedAddress() const [member function]
    cls.add_method('GetIpv4MappedAddress', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetLoopback() [member function]
    cls.add_method('GetLoopback', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetOnes() [member function]
    cls.add_method('GetOnes', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetZero() [member function]
    cls.add_method('GetZero', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAllHostsMulticast() const [member function]
    cls.add_method('IsAllHostsMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAllNodesMulticast() const [member function]
    cls.add_method('IsAllNodesMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAllRoutersMulticast() const [member function]
    cls.add_method('IsAllRoutersMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAny() const [member function]
    cls.add_method('IsAny', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsDocumentation() const [member function]
    cls.add_method('IsDocumentation', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsEqual(ns3::Ipv6Address const & other) const [member function]
    cls.add_method('IsEqual', 
                   'bool', 
                   [param('ns3::Ipv6Address const &', 'other')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsIpv4MappedAddress() const [member function]
    cls.add_method('IsIpv4MappedAddress', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLinkLocal() const [member function]
    cls.add_method('IsLinkLocal', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLinkLocalMulticast() const [member function]
    cls.add_method('IsLinkLocalMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLocalhost() const [member function]
    cls.add_method('IsLocalhost', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static bool ns3::Ipv6Address::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsSolicitedMulticast() const [member function]
    cls.add_method('IsSolicitedMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac16Address addr, ns3::Ipv6Address prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac16Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac48Address addr, ns3::Ipv6Address prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac48Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac64Address addr, ns3::Ipv6Address prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac64Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac16Address mac) [member function]
    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac16Address', 'mac')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac48Address mac) [member function]
    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac48Address', 'mac')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac64Address mac) [member function]
    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac64Address', 'mac')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeIpv4MappedAddress(ns3::Ipv4Address addr) [member function]
    cls.add_method('MakeIpv4MappedAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Ipv4Address', 'addr')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeSolicitedAddress(ns3::Ipv6Address addr) [member function]
    cls.add_method('MakeSolicitedAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Ipv6Address', 'addr')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Serialize(uint8_t * buf) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('uint8_t *', 'buf')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Set(char const * address) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('char const *', 'address')])
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Set(uint8_t * address) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('uint8_t *', 'address')])
    return

def register_Ns3Ipv6Prefix_methods(root_module, cls):
    cls.add_binary_comparison_operator('!=')
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix) [constructor]
    cls.add_constructor([param('uint8_t *', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix) [constructor]
    cls.add_constructor([param('char const *', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t prefix) [constructor]
    cls.add_constructor([param('uint8_t', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const & prefix) [copy constructor]
    cls.add_constructor([param('ns3::Ipv6Prefix const &', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const * prefix) [constructor]
    cls.add_constructor([param('ns3::Ipv6Prefix const *', 'prefix')])
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::GetBytes(uint8_t * buf) const [member function]
    cls.add_method('GetBytes', 
                   'void', 
                   [param('uint8_t *', 'buf')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetLoopback() [member function]
    cls.add_method('GetLoopback', 
                   'ns3::Ipv6Prefix', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetOnes() [member function]
    cls.add_method('GetOnes', 
                   'ns3::Ipv6Prefix', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetPrefixLength() const [member function]
    cls.add_method('GetPrefixLength', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetZero() [member function]
    cls.add_method('GetZero', 
                   'ns3::Ipv6Prefix', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Prefix::IsEqual(ns3::Ipv6Prefix const & other) const [member function]
    cls.add_method('IsEqual', 
                   'bool', 
                   [param('ns3::Ipv6Prefix const &', 'other')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Prefix::IsMatch(ns3::Ipv6Address a, ns3::Ipv6Address b) const [member function]
    cls.add_method('IsMatch', 
                   'bool', 
                   [param('ns3::Ipv6Address', 'a'), param('ns3::Ipv6Address', 'b')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    return

def register_Ns3LogComponent_methods(root_module, cls):
    ## log.h (module 'core'): ns3::LogComponent::LogComponent(ns3::LogComponent const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::LogComponent const &', 'arg0')])
    ## log.h (module 'core'): ns3::LogComponent::LogComponent(std::string const & name, std::string const & file, ns3::LogLevel const mask=::ns3::LOG_NONE) [constructor]
    cls.add_constructor([param('std::string const &', 'name'), param('std::string const &', 'file'), param('ns3::LogLevel const', 'mask', default_value='::ns3::LOG_NONE')])
    ## log.h (module 'core'): void ns3::LogComponent::Disable(ns3::LogLevel const level) [member function]
    cls.add_method('Disable', 
                   'void', 
                   [param('ns3::LogLevel const', 'level')])
    ## log.h (module 'core'): void ns3::LogComponent::Enable(ns3::LogLevel const level) [member function]
    cls.add_method('Enable', 
                   'void', 
                   [param('ns3::LogLevel const', 'level')])
    ## log.h (module 'core'): std::string ns3::LogComponent::File() const [member function]
    cls.add_method('File', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## log.h (module 'core'): static std::map<std::basic_string<char, std::char_traits<char>, std::allocator<char> >,ns3::LogComponent*,std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >,std::allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char> >, ns3::LogComponent*> > > * ns3::LogComponent::GetComponentList() [member function]
    cls.add_method('GetComponentList', 
                   'std::map< std::string, ns3::LogComponent * > *', 
                   [], 
                   is_static=True)
    ## log.h (module 'core'): static std::string ns3::LogComponent::GetLevelLabel(ns3::LogLevel const level) [member function]
    cls.add_method('GetLevelLabel', 
                   'std::string', 
                   [param('ns3::LogLevel const', 'level')], 
                   is_static=True)
    ## log.h (module 'core'): bool ns3::LogComponent::IsEnabled(ns3::LogLevel const level) const [member function]
    cls.add_method('IsEnabled', 
                   'bool', 
                   [param('ns3::LogLevel const', 'level')], 
                   is_const=True)
    ## log.h (module 'core'): bool ns3::LogComponent::IsNoneEnabled() const [member function]
    cls.add_method('IsNoneEnabled', 
                   'bool', 
                   [], 
                   is_const=True)
    ## log.h (module 'core'): char const * ns3::LogComponent::Name() const [member function]
    cls.add_method('Name', 
                   'char const *', 
                   [], 
                   is_const=True)
    ## log.h (module 'core'): void ns3::LogComponent::SetMask(ns3::LogLevel const level) [member function]
    cls.add_method('SetMask', 
                   'void', 
                   [param('ns3::LogLevel const', 'level')])
    return

def register_Ns3LogicalChannelConfigListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s::LogicalChannelConfigListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s::LogicalChannelConfigListElement_s(ns3::LogicalChannelConfigListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::LogicalChannelConfigListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s::m_direction [variable]
    cls.add_instance_attribute('m_direction', 'ns3::LogicalChannelConfigListElement_s::Direction_e', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s::m_eRabGuaranteedBitrateDl [variable]
    cls.add_instance_attribute('m_eRabGuaranteedBitrateDl', 'uint64_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s::m_eRabGuaranteedBitrateUl [variable]
    cls.add_instance_attribute('m_eRabGuaranteedBitrateUl', 'uint64_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s::m_eRabMaximulBitrateDl [variable]
    cls.add_instance_attribute('m_eRabMaximulBitrateDl', 'uint64_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s::m_eRabMaximulBitrateUl [variable]
    cls.add_instance_attribute('m_eRabMaximulBitrateUl', 'uint64_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s::m_logicalChannelGroup [variable]
    cls.add_instance_attribute('m_logicalChannelGroup', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s::m_qci [variable]
    cls.add_instance_attribute('m_qci', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::LogicalChannelConfigListElement_s::m_qosBearerType [variable]
    cls.add_instance_attribute('m_qosBearerType', 'ns3::LogicalChannelConfigListElement_s::QosBearerType_e', is_const=False)
    return

def register_Ns3NrAnrSapProvider_methods(root_module, cls):
    ## nr-anr-sap.h (module 'nr'): ns3::NrAnrSapProvider::NrAnrSapProvider() [constructor]
    cls.add_constructor([])
    ## nr-anr-sap.h (module 'nr'): ns3::NrAnrSapProvider::NrAnrSapProvider(ns3::NrAnrSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrAnrSapProvider const &', 'arg0')])
    ## nr-anr-sap.h (module 'nr'): void ns3::NrAnrSapProvider::AddNeighbourRelation(uint16_t cellId) [member function]
    cls.add_method('AddNeighbourRelation', 
                   'void', 
                   [param('uint16_t', 'cellId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-anr-sap.h (module 'nr'): bool ns3::NrAnrSapProvider::GetNoHo(uint16_t cellId) const [member function]
    cls.add_method('GetNoHo', 
                   'bool', 
                   [param('uint16_t', 'cellId')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## nr-anr-sap.h (module 'nr'): bool ns3::NrAnrSapProvider::GetNoRemove(uint16_t cellId) const [member function]
    cls.add_method('GetNoRemove', 
                   'bool', 
                   [param('uint16_t', 'cellId')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## nr-anr-sap.h (module 'nr'): bool ns3::NrAnrSapProvider::GetNoX2(uint16_t cellId) const [member function]
    cls.add_method('GetNoX2', 
                   'bool', 
                   [param('uint16_t', 'cellId')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## nr-anr-sap.h (module 'nr'): void ns3::NrAnrSapProvider::ReportUeMeas(ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('ReportUeMeas', 
                   'void', 
                   [param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrAnrSapUser_methods(root_module, cls):
    ## nr-anr-sap.h (module 'nr'): ns3::NrAnrSapUser::NrAnrSapUser() [constructor]
    cls.add_constructor([])
    ## nr-anr-sap.h (module 'nr'): ns3::NrAnrSapUser::NrAnrSapUser(ns3::NrAnrSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrAnrSapUser const &', 'arg0')])
    ## nr-anr-sap.h (module 'nr'): uint8_t ns3::NrAnrSapUser::AddUeMeasReportConfigForAnr(ns3::NrRrcSap::ReportConfigEutra reportConfig) [member function]
    cls.add_method('AddUeMeasReportConfigForAnr', 
                   'uint8_t', 
                   [param('ns3::NrRrcSap::ReportConfigEutra', 'reportConfig')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrAsSapProvider_methods(root_module, cls):
    ## nr-as-sap.h (module 'nr'): ns3::NrAsSapProvider::NrAsSapProvider() [constructor]
    cls.add_constructor([])
    ## nr-as-sap.h (module 'nr'): ns3::NrAsSapProvider::NrAsSapProvider(ns3::NrAsSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrAsSapProvider const &', 'arg0')])
    ## nr-as-sap.h (module 'nr'): void ns3::NrAsSapProvider::Connect() [member function]
    cls.add_method('Connect', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-as-sap.h (module 'nr'): void ns3::NrAsSapProvider::Disconnect() [member function]
    cls.add_method('Disconnect', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-as-sap.h (module 'nr'): void ns3::NrAsSapProvider::ForceCampedOnEnb(uint16_t cellId, uint16_t dlEarfcn) [member function]
    cls.add_method('ForceCampedOnEnb', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint16_t', 'dlEarfcn')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-as-sap.h (module 'nr'): void ns3::NrAsSapProvider::SendData(ns3::Ptr<ns3::Packet> packet, uint8_t bid) [member function]
    cls.add_method('SendData', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint8_t', 'bid')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-as-sap.h (module 'nr'): void ns3::NrAsSapProvider::SetCsgWhiteList(uint32_t csgId) [member function]
    cls.add_method('SetCsgWhiteList', 
                   'void', 
                   [param('uint32_t', 'csgId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-as-sap.h (module 'nr'): void ns3::NrAsSapProvider::StartCellSelection(uint16_t dlEarfcn) [member function]
    cls.add_method('StartCellSelection', 
                   'void', 
                   [param('uint16_t', 'dlEarfcn')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrAsSapUser_methods(root_module, cls):
    ## nr-as-sap.h (module 'nr'): ns3::NrAsSapUser::NrAsSapUser() [constructor]
    cls.add_constructor([])
    ## nr-as-sap.h (module 'nr'): ns3::NrAsSapUser::NrAsSapUser(ns3::NrAsSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrAsSapUser const &', 'arg0')])
    ## nr-as-sap.h (module 'nr'): void ns3::NrAsSapUser::NotifyConnectionFailed() [member function]
    cls.add_method('NotifyConnectionFailed', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-as-sap.h (module 'nr'): void ns3::NrAsSapUser::NotifyConnectionReleased() [member function]
    cls.add_method('NotifyConnectionReleased', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-as-sap.h (module 'nr'): void ns3::NrAsSapUser::NotifyConnectionSuccessful() [member function]
    cls.add_method('NotifyConnectionSuccessful', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-as-sap.h (module 'nr'): void ns3::NrAsSapUser::RecvData(ns3::Ptr<ns3::Packet> packet) [member function]
    cls.add_method('RecvData', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrEnbCmacSapProvider_methods(root_module, cls):
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::NrEnbCmacSapProvider() [constructor]
    cls.add_constructor([])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::NrEnbCmacSapProvider(ns3::NrEnbCmacSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbCmacSapProvider const &', 'arg0')])
    ## nr-enb-cmac-sap.h (module 'nr'): void ns3::NrEnbCmacSapProvider::AddLc(ns3::NrEnbCmacSapProvider::LcInfo lcinfo, ns3::NrMacSapUser * msu) [member function]
    cls.add_method('AddLc', 
                   'void', 
                   [param('ns3::NrEnbCmacSapProvider::LcInfo', 'lcinfo'), param('ns3::NrMacSapUser *', 'msu')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cmac-sap.h (module 'nr'): void ns3::NrEnbCmacSapProvider::AddUe(uint16_t rnti) [member function]
    cls.add_method('AddUe', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::AllocateNcRaPreambleReturnValue ns3::NrEnbCmacSapProvider::AllocateNcRaPreamble(uint16_t rnti) [member function]
    cls.add_method('AllocateNcRaPreamble', 
                   'ns3::NrEnbCmacSapProvider::AllocateNcRaPreambleReturnValue', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cmac-sap.h (module 'nr'): void ns3::NrEnbCmacSapProvider::ConfigureMac(uint8_t ulBandwidth, uint8_t dlBandwidth) [member function]
    cls.add_method('ConfigureMac', 
                   'void', 
                   [param('uint8_t', 'ulBandwidth'), param('uint8_t', 'dlBandwidth')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::RachConfig ns3::NrEnbCmacSapProvider::GetRachConfig() [member function]
    cls.add_method('GetRachConfig', 
                   'ns3::NrEnbCmacSapProvider::RachConfig', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cmac-sap.h (module 'nr'): void ns3::NrEnbCmacSapProvider::ReconfigureLc(ns3::NrEnbCmacSapProvider::LcInfo lcinfo) [member function]
    cls.add_method('ReconfigureLc', 
                   'void', 
                   [param('ns3::NrEnbCmacSapProvider::LcInfo', 'lcinfo')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cmac-sap.h (module 'nr'): void ns3::NrEnbCmacSapProvider::ReleaseLc(uint16_t rnti, uint8_t lcid) [member function]
    cls.add_method('ReleaseLc', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'lcid')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cmac-sap.h (module 'nr'): void ns3::NrEnbCmacSapProvider::RemoveUe(uint16_t rnti) [member function]
    cls.add_method('RemoveUe', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cmac-sap.h (module 'nr'): void ns3::NrEnbCmacSapProvider::UeUpdateConfigurationReq(ns3::NrEnbCmacSapProvider::UeConfig params) [member function]
    cls.add_method('UeUpdateConfigurationReq', 
                   'void', 
                   [param('ns3::NrEnbCmacSapProvider::UeConfig', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrEnbCmacSapProviderAllocateNcRaPreambleReturnValue_methods(root_module, cls):
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::AllocateNcRaPreambleReturnValue::AllocateNcRaPreambleReturnValue() [constructor]
    cls.add_constructor([])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::AllocateNcRaPreambleReturnValue::AllocateNcRaPreambleReturnValue(ns3::NrEnbCmacSapProvider::AllocateNcRaPreambleReturnValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbCmacSapProvider::AllocateNcRaPreambleReturnValue const &', 'arg0')])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::AllocateNcRaPreambleReturnValue::raPrachMaskIndex [variable]
    cls.add_instance_attribute('raPrachMaskIndex', 'uint8_t', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::AllocateNcRaPreambleReturnValue::raPreambleId [variable]
    cls.add_instance_attribute('raPreambleId', 'uint8_t', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::AllocateNcRaPreambleReturnValue::valid [variable]
    cls.add_instance_attribute('valid', 'bool', is_const=False)
    return

def register_Ns3NrEnbCmacSapProviderLcInfo_methods(root_module, cls):
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::LcInfo::LcInfo() [constructor]
    cls.add_constructor([])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::LcInfo::LcInfo(ns3::NrEnbCmacSapProvider::LcInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbCmacSapProvider::LcInfo const &', 'arg0')])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::LcInfo::gbrDl [variable]
    cls.add_instance_attribute('gbrDl', 'uint64_t', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::LcInfo::gbrUl [variable]
    cls.add_instance_attribute('gbrUl', 'uint64_t', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::LcInfo::isGbr [variable]
    cls.add_instance_attribute('isGbr', 'bool', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::LcInfo::lcGroup [variable]
    cls.add_instance_attribute('lcGroup', 'uint8_t', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::LcInfo::lcId [variable]
    cls.add_instance_attribute('lcId', 'uint8_t', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::LcInfo::mbrDl [variable]
    cls.add_instance_attribute('mbrDl', 'uint64_t', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::LcInfo::mbrUl [variable]
    cls.add_instance_attribute('mbrUl', 'uint64_t', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::LcInfo::qci [variable]
    cls.add_instance_attribute('qci', 'uint8_t', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::LcInfo::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    return

def register_Ns3NrEnbCmacSapProviderRachConfig_methods(root_module, cls):
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::RachConfig::RachConfig() [constructor]
    cls.add_constructor([])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::RachConfig::RachConfig(ns3::NrEnbCmacSapProvider::RachConfig const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbCmacSapProvider::RachConfig const &', 'arg0')])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::RachConfig::numberOfRaPreambles [variable]
    cls.add_instance_attribute('numberOfRaPreambles', 'uint8_t', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::RachConfig::preambleTransMax [variable]
    cls.add_instance_attribute('preambleTransMax', 'uint8_t', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::RachConfig::raResponseWindowSize [variable]
    cls.add_instance_attribute('raResponseWindowSize', 'uint8_t', is_const=False)
    return

def register_Ns3NrEnbCmacSapProviderUeConfig_methods(root_module, cls):
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::UeConfig::UeConfig() [constructor]
    cls.add_constructor([])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::UeConfig::UeConfig(ns3::NrEnbCmacSapProvider::UeConfig const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbCmacSapProvider::UeConfig const &', 'arg0')])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::UeConfig::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapProvider::UeConfig::m_transmissionMode [variable]
    cls.add_instance_attribute('m_transmissionMode', 'uint8_t', is_const=False)
    return

def register_Ns3NrEnbCmacSapUser_methods(root_module, cls):
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapUser::NrEnbCmacSapUser() [constructor]
    cls.add_constructor([])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapUser::NrEnbCmacSapUser(ns3::NrEnbCmacSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbCmacSapUser const &', 'arg0')])
    ## nr-enb-cmac-sap.h (module 'nr'): uint16_t ns3::NrEnbCmacSapUser::AllocateTemporaryCellRnti() [member function]
    cls.add_method('AllocateTemporaryCellRnti', 
                   'uint16_t', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cmac-sap.h (module 'nr'): void ns3::NrEnbCmacSapUser::NotifyLcConfigResult(uint16_t rnti, uint8_t lcid, bool success) [member function]
    cls.add_method('NotifyLcConfigResult', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'lcid'), param('bool', 'success')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cmac-sap.h (module 'nr'): void ns3::NrEnbCmacSapUser::RrcConfigurationUpdateInd(ns3::NrEnbCmacSapUser::UeConfig params) [member function]
    cls.add_method('RrcConfigurationUpdateInd', 
                   'void', 
                   [param('ns3::NrEnbCmacSapUser::UeConfig', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrEnbCmacSapUserUeConfig_methods(root_module, cls):
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapUser::UeConfig::UeConfig() [constructor]
    cls.add_constructor([])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapUser::UeConfig::UeConfig(ns3::NrEnbCmacSapUser::UeConfig const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbCmacSapUser::UeConfig const &', 'arg0')])
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapUser::UeConfig::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## nr-enb-cmac-sap.h (module 'nr'): ns3::NrEnbCmacSapUser::UeConfig::m_transmissionMode [variable]
    cls.add_instance_attribute('m_transmissionMode', 'uint8_t', is_const=False)
    return

def register_Ns3NrEnbCphySapProvider_methods(root_module, cls):
    ## nr-enb-cphy-sap.h (module 'nr'): ns3::NrEnbCphySapProvider::NrEnbCphySapProvider() [constructor]
    cls.add_constructor([])
    ## nr-enb-cphy-sap.h (module 'nr'): ns3::NrEnbCphySapProvider::NrEnbCphySapProvider(ns3::NrEnbCphySapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbCphySapProvider const &', 'arg0')])
    ## nr-enb-cphy-sap.h (module 'nr'): void ns3::NrEnbCphySapProvider::AddUe(uint16_t rnti) [member function]
    cls.add_method('AddUe', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cphy-sap.h (module 'nr'): int8_t ns3::NrEnbCphySapProvider::GetReferenceSignalPower() [member function]
    cls.add_method('GetReferenceSignalPower', 
                   'int8_t', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cphy-sap.h (module 'nr'): void ns3::NrEnbCphySapProvider::RemoveUe(uint16_t rnti) [member function]
    cls.add_method('RemoveUe', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cphy-sap.h (module 'nr'): void ns3::NrEnbCphySapProvider::SetBandwidth(uint8_t ulBandwidth, uint8_t dlBandwidth) [member function]
    cls.add_method('SetBandwidth', 
                   'void', 
                   [param('uint8_t', 'ulBandwidth'), param('uint8_t', 'dlBandwidth')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cphy-sap.h (module 'nr'): void ns3::NrEnbCphySapProvider::SetCellId(uint16_t cellId) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cphy-sap.h (module 'nr'): void ns3::NrEnbCphySapProvider::SetEarfcn(uint16_t ulEarfcn, uint16_t dlEarfcn) [member function]
    cls.add_method('SetEarfcn', 
                   'void', 
                   [param('uint16_t', 'ulEarfcn'), param('uint16_t', 'dlEarfcn')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cphy-sap.h (module 'nr'): void ns3::NrEnbCphySapProvider::SetMasterInformationBlock(ns3::NrRrcSap::MasterInformationBlock mib) [member function]
    cls.add_method('SetMasterInformationBlock', 
                   'void', 
                   [param('ns3::NrRrcSap::MasterInformationBlock', 'mib')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cphy-sap.h (module 'nr'): void ns3::NrEnbCphySapProvider::SetPa(uint16_t rnti, double pa) [member function]
    cls.add_method('SetPa', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('double', 'pa')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cphy-sap.h (module 'nr'): void ns3::NrEnbCphySapProvider::SetSrsConfigurationIndex(uint16_t rnti, uint16_t srsCi) [member function]
    cls.add_method('SetSrsConfigurationIndex', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint16_t', 'srsCi')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cphy-sap.h (module 'nr'): void ns3::NrEnbCphySapProvider::SetSystemInformationBlockType1(ns3::NrRrcSap::SystemInformationBlockType1 sib1) [member function]
    cls.add_method('SetSystemInformationBlockType1', 
                   'void', 
                   [param('ns3::NrRrcSap::SystemInformationBlockType1', 'sib1')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-cphy-sap.h (module 'nr'): void ns3::NrEnbCphySapProvider::SetTransmissionMode(uint16_t rnti, uint8_t txMode) [member function]
    cls.add_method('SetTransmissionMode', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'txMode')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrEnbCphySapUser_methods(root_module, cls):
    ## nr-enb-cphy-sap.h (module 'nr'): ns3::NrEnbCphySapUser::NrEnbCphySapUser() [constructor]
    cls.add_constructor([])
    ## nr-enb-cphy-sap.h (module 'nr'): ns3::NrEnbCphySapUser::NrEnbCphySapUser(ns3::NrEnbCphySapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbCphySapUser const &', 'arg0')])
    return

def register_Ns3NrEnbPhySapProvider_methods(root_module, cls):
    ## nr-enb-phy-sap.h (module 'nr'): ns3::NrEnbPhySapProvider::NrEnbPhySapProvider() [constructor]
    cls.add_constructor([])
    ## nr-enb-phy-sap.h (module 'nr'): ns3::NrEnbPhySapProvider::NrEnbPhySapProvider(ns3::NrEnbPhySapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbPhySapProvider const &', 'arg0')])
    ## nr-enb-phy-sap.h (module 'nr'): uint8_t ns3::NrEnbPhySapProvider::GetMacChTtiDelay() [member function]
    cls.add_method('GetMacChTtiDelay', 
                   'uint8_t', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-phy-sap.h (module 'nr'): void ns3::NrEnbPhySapProvider::SendNrControlMessage(ns3::Ptr<ns3::NrControlMessage> msg) [member function]
    cls.add_method('SendNrControlMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrControlMessage >', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-phy-sap.h (module 'nr'): void ns3::NrEnbPhySapProvider::SendMacPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('SendMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrEnbPhySapUser_methods(root_module, cls):
    ## nr-enb-phy-sap.h (module 'nr'): ns3::NrEnbPhySapUser::NrEnbPhySapUser() [constructor]
    cls.add_constructor([])
    ## nr-enb-phy-sap.h (module 'nr'): ns3::NrEnbPhySapUser::NrEnbPhySapUser(ns3::NrEnbPhySapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbPhySapUser const &', 'arg0')])
    ## nr-enb-phy-sap.h (module 'nr'): void ns3::NrEnbPhySapUser::DlInfoListElementHarqFeeback(ns3::DlInfoListElement_s params) [member function]
    cls.add_method('DlInfoListElementHarqFeeback', 
                   'void', 
                   [param('ns3::DlInfoListElement_s', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-phy-sap.h (module 'nr'): void ns3::NrEnbPhySapUser::ReceiveNrControlMessage(ns3::Ptr<ns3::NrControlMessage> msg) [member function]
    cls.add_method('ReceiveNrControlMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrControlMessage >', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-phy-sap.h (module 'nr'): void ns3::NrEnbPhySapUser::ReceivePhyPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('ReceivePhyPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-phy-sap.h (module 'nr'): void ns3::NrEnbPhySapUser::ReceiveRachPreamble(uint32_t prachId) [member function]
    cls.add_method('ReceiveRachPreamble', 
                   'void', 
                   [param('uint32_t', 'prachId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-phy-sap.h (module 'nr'): void ns3::NrEnbPhySapUser::SubframeIndication(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('SubframeIndication', 
                   'void', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-phy-sap.h (module 'nr'): void ns3::NrEnbPhySapUser::UlCqiReport(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters ulcqi) [member function]
    cls.add_method('UlCqiReport', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters', 'ulcqi')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-enb-phy-sap.h (module 'nr'): void ns3::NrEnbPhySapUser::UlInfoListElementHarqFeeback(ns3::UlInfoListElement_s params) [member function]
    cls.add_method('UlInfoListElementHarqFeeback', 
                   'void', 
                   [param('ns3::UlInfoListElement_s', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrFfConverter_methods(root_module, cls):
    ## nr-common.h (module 'nr'): ns3::NrFfConverter::NrFfConverter() [constructor]
    cls.add_constructor([])
    ## nr-common.h (module 'nr'): ns3::NrFfConverter::NrFfConverter(ns3::NrFfConverter const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFfConverter const &', 'arg0')])
    ## nr-common.h (module 'nr'): static uint16_t ns3::NrFfConverter::double2fpN11dot3(double val) [member function]
    cls.add_method('double2fpN11dot3', 
                   'uint16_t', 
                   [param('double', 'val')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static double ns3::NrFfConverter::fpN11dot3toDouble(uint16_t val) [member function]
    cls.add_method('fpN11dot3toDouble', 
                   'double', 
                   [param('uint16_t', 'val')], 
                   is_static=True)
    ## nr-common.h (module 'nr'): static double ns3::NrFfConverter::getMinFpN11dot3Value() [member function]
    cls.add_method('getMinFpN11dot3Value', 
                   'double', 
                   [], 
                   is_static=True)
    return

def register_Ns3NrFfrRrcSapProvider_methods(root_module, cls):
    ## nr-ffr-rrc-sap.h (module 'nr'): ns3::NrFfrRrcSapProvider::NrFfrRrcSapProvider() [constructor]
    cls.add_constructor([])
    ## nr-ffr-rrc-sap.h (module 'nr'): ns3::NrFfrRrcSapProvider::NrFfrRrcSapProvider(ns3::NrFfrRrcSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFfrRrcSapProvider const &', 'arg0')])
    ## nr-ffr-rrc-sap.h (module 'nr'): void ns3::NrFfrRrcSapProvider::RecvLoadInformation(ns3::NgcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('RecvLoadInformation', 
                   'void', 
                   [param('ns3::NgcX2Sap::LoadInformationParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-rrc-sap.h (module 'nr'): void ns3::NrFfrRrcSapProvider::ReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('ReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-rrc-sap.h (module 'nr'): void ns3::NrFfrRrcSapProvider::SetBandwidth(uint8_t ulBandwidth, uint8_t dlBandwidth) [member function]
    cls.add_method('SetBandwidth', 
                   'void', 
                   [param('uint8_t', 'ulBandwidth'), param('uint8_t', 'dlBandwidth')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-rrc-sap.h (module 'nr'): void ns3::NrFfrRrcSapProvider::SetCellId(uint16_t cellId) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrFfrRrcSapUser_methods(root_module, cls):
    ## nr-ffr-rrc-sap.h (module 'nr'): ns3::NrFfrRrcSapUser::NrFfrRrcSapUser() [constructor]
    cls.add_constructor([])
    ## nr-ffr-rrc-sap.h (module 'nr'): ns3::NrFfrRrcSapUser::NrFfrRrcSapUser(ns3::NrFfrRrcSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFfrRrcSapUser const &', 'arg0')])
    ## nr-ffr-rrc-sap.h (module 'nr'): uint8_t ns3::NrFfrRrcSapUser::AddUeMeasReportConfigForFfr(ns3::NrRrcSap::ReportConfigEutra reportConfig) [member function]
    cls.add_method('AddUeMeasReportConfigForFfr', 
                   'uint8_t', 
                   [param('ns3::NrRrcSap::ReportConfigEutra', 'reportConfig')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-rrc-sap.h (module 'nr'): void ns3::NrFfrRrcSapUser::SendLoadInformation(ns3::NgcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('SendLoadInformation', 
                   'void', 
                   [param('ns3::NgcX2Sap::LoadInformationParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-rrc-sap.h (module 'nr'): void ns3::NrFfrRrcSapUser::SetPdschConfigDedicated(uint16_t rnti, ns3::NrRrcSap::PdschConfigDedicated pdschConfigDedicated) [member function]
    cls.add_method('SetPdschConfigDedicated', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::PdschConfigDedicated', 'pdschConfigDedicated')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrFfrSapProvider_methods(root_module, cls):
    ## nr-ffr-sap.h (module 'nr'): ns3::NrFfrSapProvider::NrFfrSapProvider() [constructor]
    cls.add_constructor([])
    ## nr-ffr-sap.h (module 'nr'): ns3::NrFfrSapProvider::NrFfrSapProvider(ns3::NrFfrSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFfrSapProvider const &', 'arg0')])
    ## nr-ffr-sap.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFfrSapProvider::GetAvailableDlRbg() [member function]
    cls.add_method('GetAvailableDlRbg', 
                   'std::vector< bool >', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-sap.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFfrSapProvider::GetAvailableUlRbg() [member function]
    cls.add_method('GetAvailableUlRbg', 
                   'std::vector< bool >', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-sap.h (module 'nr'): uint8_t ns3::NrFfrSapProvider::GetMinContinuousUlBandwidth() [member function]
    cls.add_method('GetMinContinuousUlBandwidth', 
                   'uint8_t', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-sap.h (module 'nr'): uint8_t ns3::NrFfrSapProvider::GetTpc(uint16_t rnti) [member function]
    cls.add_method('GetTpc', 
                   'uint8_t', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-sap.h (module 'nr'): bool ns3::NrFfrSapProvider::IsDlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('IsDlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-sap.h (module 'nr'): bool ns3::NrFfrSapProvider::IsUlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('IsUlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-sap.h (module 'nr'): void ns3::NrFfrSapProvider::ReportDlCqiInfo(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & params) [member function]
    cls.add_method('ReportDlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-sap.h (module 'nr'): void ns3::NrFfrSapProvider::ReportUlCqiInfo(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & params) [member function]
    cls.add_method('ReportUlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-sap.h (module 'nr'): void ns3::NrFfrSapProvider::ReportUlCqiInfo(std::map<unsigned short, std::vector<double, std::allocator<double> >, std::less<unsigned short>, std::allocator<std::pair<unsigned short const, std::vector<double, std::allocator<double> > > > > ulCqiMap) [member function]
    cls.add_method('ReportUlCqiInfo', 
                   'void', 
                   [param('std::map< unsigned short, std::vector< double > >', 'ulCqiMap')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrFfrSapUser_methods(root_module, cls):
    ## nr-ffr-sap.h (module 'nr'): ns3::NrFfrSapUser::NrFfrSapUser() [constructor]
    cls.add_constructor([])
    ## nr-ffr-sap.h (module 'nr'): ns3::NrFfrSapUser::NrFfrSapUser(ns3::NrFfrSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFfrSapUser const &', 'arg0')])
    return

def register_Ns3NrFlowId_t_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    ## nr-common.h (module 'nr'): ns3::NrFlowId_t::NrFlowId_t(ns3::NrFlowId_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFlowId_t const &', 'arg0')])
    ## nr-common.h (module 'nr'): ns3::NrFlowId_t::NrFlowId_t() [constructor]
    cls.add_constructor([])
    ## nr-common.h (module 'nr'): ns3::NrFlowId_t::NrFlowId_t(uint16_t const a, uint8_t const b) [constructor]
    cls.add_constructor([param('uint16_t const', 'a'), param('uint8_t const', 'b')])
    ## nr-common.h (module 'nr'): ns3::NrFlowId_t::m_lcId [variable]
    cls.add_instance_attribute('m_lcId', 'uint8_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrFlowId_t::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3NrGlobalPathlossDatabase_methods(root_module, cls):
    ## nr-global-pathloss-database.h (module 'nr'): ns3::NrGlobalPathlossDatabase::NrGlobalPathlossDatabase() [constructor]
    cls.add_constructor([])
    ## nr-global-pathloss-database.h (module 'nr'): ns3::NrGlobalPathlossDatabase::NrGlobalPathlossDatabase(ns3::NrGlobalPathlossDatabase const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrGlobalPathlossDatabase const &', 'arg0')])
    ## nr-global-pathloss-database.h (module 'nr'): double ns3::NrGlobalPathlossDatabase::GetPathloss(uint16_t cellId, uint64_t imsi) [member function]
    cls.add_method('GetPathloss', 
                   'double', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi')])
    ## nr-global-pathloss-database.h (module 'nr'): void ns3::NrGlobalPathlossDatabase::Print() [member function]
    cls.add_method('Print', 
                   'void', 
                   [])
    ## nr-global-pathloss-database.h (module 'nr'): void ns3::NrGlobalPathlossDatabase::UpdatePathloss(std::string context, ns3::Ptr<ns3::SpectrumPhy> txPhy, ns3::Ptr<ns3::SpectrumPhy> rxPhy, double lossDb) [member function]
    cls.add_method('UpdatePathloss', 
                   'void', 
                   [param('std::string', 'context'), param('ns3::Ptr< ns3::SpectrumPhy >', 'txPhy'), param('ns3::Ptr< ns3::SpectrumPhy >', 'rxPhy'), param('double', 'lossDb')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrHandoverManagementSapProvider_methods(root_module, cls):
    ## nr-handover-management-sap.h (module 'nr'): ns3::NrHandoverManagementSapProvider::NrHandoverManagementSapProvider() [constructor]
    cls.add_constructor([])
    ## nr-handover-management-sap.h (module 'nr'): ns3::NrHandoverManagementSapProvider::NrHandoverManagementSapProvider(ns3::NrHandoverManagementSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrHandoverManagementSapProvider const &', 'arg0')])
    ## nr-handover-management-sap.h (module 'nr'): void ns3::NrHandoverManagementSapProvider::ReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('ReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrHandoverManagementSapUser_methods(root_module, cls):
    ## nr-handover-management-sap.h (module 'nr'): ns3::NrHandoverManagementSapUser::NrHandoverManagementSapUser() [constructor]
    cls.add_constructor([])
    ## nr-handover-management-sap.h (module 'nr'): ns3::NrHandoverManagementSapUser::NrHandoverManagementSapUser(ns3::NrHandoverManagementSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrHandoverManagementSapUser const &', 'arg0')])
    ## nr-handover-management-sap.h (module 'nr'): uint8_t ns3::NrHandoverManagementSapUser::AddUeMeasReportConfigForHandover(ns3::NrRrcSap::ReportConfigEutra reportConfig) [member function]
    cls.add_method('AddUeMeasReportConfigForHandover', 
                   'uint8_t', 
                   [param('ns3::NrRrcSap::ReportConfigEutra', 'reportConfig')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-handover-management-sap.h (module 'nr'): void ns3::NrHandoverManagementSapUser::TriggerHandover(uint16_t rnti, uint16_t targetCellId) [member function]
    cls.add_method('TriggerHandover', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint16_t', 'targetCellId')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrMacSapProvider_methods(root_module, cls):
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::NrMacSapProvider() [constructor]
    cls.add_constructor([])
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::NrMacSapProvider(ns3::NrMacSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrMacSapProvider const &', 'arg0')])
    ## nr-mac-sap.h (module 'nr'): void ns3::NrMacSapProvider::ReportBufferStatus(ns3::NrMacSapProvider::ReportBufferStatusParameters params) [member function]
    cls.add_method('ReportBufferStatus', 
                   'void', 
                   [param('ns3::NrMacSapProvider::ReportBufferStatusParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-mac-sap.h (module 'nr'): void ns3::NrMacSapProvider::TransmitPdu(ns3::NrMacSapProvider::TransmitPduParameters params) [member function]
    cls.add_method('TransmitPdu', 
                   'void', 
                   [param('ns3::NrMacSapProvider::TransmitPduParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrMacSapProviderReportBufferStatusParameters_methods(root_module, cls):
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::ReportBufferStatusParameters::ReportBufferStatusParameters() [constructor]
    cls.add_constructor([])
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::ReportBufferStatusParameters::ReportBufferStatusParameters(ns3::NrMacSapProvider::ReportBufferStatusParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrMacSapProvider::ReportBufferStatusParameters const &', 'arg0')])
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::ReportBufferStatusParameters::lcid [variable]
    cls.add_instance_attribute('lcid', 'uint8_t', is_const=False)
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::ReportBufferStatusParameters::retxQueueHolDelay [variable]
    cls.add_instance_attribute('retxQueueHolDelay', 'uint16_t', is_const=False)
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::ReportBufferStatusParameters::retxQueueSize [variable]
    cls.add_instance_attribute('retxQueueSize', 'uint32_t', is_const=False)
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::ReportBufferStatusParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::ReportBufferStatusParameters::statusPduSize [variable]
    cls.add_instance_attribute('statusPduSize', 'uint16_t', is_const=False)
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::ReportBufferStatusParameters::txQueueHolDelay [variable]
    cls.add_instance_attribute('txQueueHolDelay', 'uint16_t', is_const=False)
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::ReportBufferStatusParameters::txQueueSize [variable]
    cls.add_instance_attribute('txQueueSize', 'uint32_t', is_const=False)
    return

def register_Ns3NrMacSapProviderTransmitPduParameters_methods(root_module, cls):
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::TransmitPduParameters::TransmitPduParameters() [constructor]
    cls.add_constructor([])
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::TransmitPduParameters::TransmitPduParameters(ns3::NrMacSapProvider::TransmitPduParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrMacSapProvider::TransmitPduParameters const &', 'arg0')])
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::TransmitPduParameters::harqProcessId [variable]
    cls.add_instance_attribute('harqProcessId', 'uint8_t', is_const=False)
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::TransmitPduParameters::layer [variable]
    cls.add_instance_attribute('layer', 'uint8_t', is_const=False)
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::TransmitPduParameters::lcid [variable]
    cls.add_instance_attribute('lcid', 'uint8_t', is_const=False)
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::TransmitPduParameters::pdu [variable]
    cls.add_instance_attribute('pdu', 'ns3::Ptr< ns3::Packet >', is_const=False)
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapProvider::TransmitPduParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    return

def register_Ns3NrMacSapUser_methods(root_module, cls):
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapUser::NrMacSapUser() [constructor]
    cls.add_constructor([])
    ## nr-mac-sap.h (module 'nr'): ns3::NrMacSapUser::NrMacSapUser(ns3::NrMacSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrMacSapUser const &', 'arg0')])
    ## nr-mac-sap.h (module 'nr'): void ns3::NrMacSapUser::NotifyHarqDeliveryFailure() [member function]
    cls.add_method('NotifyHarqDeliveryFailure', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-mac-sap.h (module 'nr'): void ns3::NrMacSapUser::NotifyTxOpportunity(uint32_t bytes, uint8_t layer, uint8_t harqId) [member function]
    cls.add_method('NotifyTxOpportunity', 
                   'void', 
                   [param('uint32_t', 'bytes'), param('uint8_t', 'layer'), param('uint8_t', 'harqId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-mac-sap.h (module 'nr'): void ns3::NrMacSapUser::ReceivePdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('ReceivePdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrMiErrorModel_methods(root_module, cls):
    ## nr-mi-error-model.h (module 'nr'): ns3::NrMiErrorModel::NrMiErrorModel() [constructor]
    cls.add_constructor([])
    ## nr-mi-error-model.h (module 'nr'): ns3::NrMiErrorModel::NrMiErrorModel(ns3::NrMiErrorModel const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrMiErrorModel const &', 'arg0')])
    ## nr-mi-error-model.h (module 'nr'): static double ns3::NrMiErrorModel::GetPcfichPdcchError(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GetPcfichPdcchError', 
                   'double', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_static=True)
    ## nr-mi-error-model.h (module 'nr'): static ns3::TbStats_t ns3::NrMiErrorModel::GetTbDecodificationStats(ns3::SpectrumValue const & sinr, std::vector<int, std::allocator<int> > const & map, uint16_t size, uint8_t mcs, ns3::HarqProcessInfoList_t miHistory) [member function]
    cls.add_method('GetTbDecodificationStats', 
                   'ns3::TbStats_t', 
                   [param('ns3::SpectrumValue const &', 'sinr'), param('std::vector< int > const &', 'map'), param('uint16_t', 'size'), param('uint8_t', 'mcs'), param('ns3::HarqProcessInfoList_t', 'miHistory')], 
                   is_static=True)
    ## nr-mi-error-model.h (module 'nr'): static double ns3::NrMiErrorModel::MappingMiBler(double mib, uint8_t ecrId, uint16_t cbSize) [member function]
    cls.add_method('MappingMiBler', 
                   'double', 
                   [param('double', 'mib'), param('uint8_t', 'ecrId'), param('uint16_t', 'cbSize')], 
                   is_static=True)
    ## nr-mi-error-model.h (module 'nr'): static double ns3::NrMiErrorModel::Mib(ns3::SpectrumValue const & sinr, std::vector<int, std::allocator<int> > const & map, uint8_t mcs) [member function]
    cls.add_method('Mib', 
                   'double', 
                   [param('ns3::SpectrumValue const &', 'sinr'), param('std::vector< int > const &', 'map'), param('uint8_t', 'mcs')], 
                   is_static=True)
    return

def register_Ns3NrPdcpSapProvider_methods(root_module, cls):
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapProvider::NrPdcpSapProvider() [constructor]
    cls.add_constructor([])
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapProvider::NrPdcpSapProvider(ns3::NrPdcpSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPdcpSapProvider const &', 'arg0')])
    ## nr-pdcp-sap.h (module 'nr'): void ns3::NrPdcpSapProvider::TransmitPdcpSdu(ns3::NrPdcpSapProvider::TransmitPdcpSduParameters params) [member function]
    cls.add_method('TransmitPdcpSdu', 
                   'void', 
                   [param('ns3::NrPdcpSapProvider::TransmitPdcpSduParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrPdcpSapProviderTransmitPdcpSduParameters_methods(root_module, cls):
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapProvider::TransmitPdcpSduParameters::TransmitPdcpSduParameters() [constructor]
    cls.add_constructor([])
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapProvider::TransmitPdcpSduParameters::TransmitPdcpSduParameters(ns3::NrPdcpSapProvider::TransmitPdcpSduParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPdcpSapProvider::TransmitPdcpSduParameters const &', 'arg0')])
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapProvider::TransmitPdcpSduParameters::lcid [variable]
    cls.add_instance_attribute('lcid', 'uint8_t', is_const=False)
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapProvider::TransmitPdcpSduParameters::pdcpSdu [variable]
    cls.add_instance_attribute('pdcpSdu', 'ns3::Ptr< ns3::Packet >', is_const=False)
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapProvider::TransmitPdcpSduParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    return

def register_Ns3NrPdcpSapUser_methods(root_module, cls):
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapUser::NrPdcpSapUser() [constructor]
    cls.add_constructor([])
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapUser::NrPdcpSapUser(ns3::NrPdcpSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPdcpSapUser const &', 'arg0')])
    ## nr-pdcp-sap.h (module 'nr'): void ns3::NrPdcpSapUser::ReceivePdcpSdu(ns3::NrPdcpSapUser::ReceivePdcpSduParameters params) [member function]
    cls.add_method('ReceivePdcpSdu', 
                   'void', 
                   [param('ns3::NrPdcpSapUser::ReceivePdcpSduParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrPdcpSapUserReceivePdcpSduParameters_methods(root_module, cls):
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapUser::ReceivePdcpSduParameters::ReceivePdcpSduParameters() [constructor]
    cls.add_constructor([])
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapUser::ReceivePdcpSduParameters::ReceivePdcpSduParameters(ns3::NrPdcpSapUser::ReceivePdcpSduParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPdcpSapUser::ReceivePdcpSduParameters const &', 'arg0')])
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapUser::ReceivePdcpSduParameters::lcid [variable]
    cls.add_instance_attribute('lcid', 'uint8_t', is_const=False)
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapUser::ReceivePdcpSduParameters::pdcpSdu [variable]
    cls.add_instance_attribute('pdcpSdu', 'ns3::Ptr< ns3::Packet >', is_const=False)
    ## nr-pdcp-sap.h (module 'nr'): ns3::NrPdcpSapUser::ReceivePdcpSduParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    return

def register_Ns3NrRlcSapProvider_methods(root_module, cls):
    ## nr-rlc-sap.h (module 'nr'): ns3::NrRlcSapProvider::NrRlcSapProvider() [constructor]
    cls.add_constructor([])
    ## nr-rlc-sap.h (module 'nr'): ns3::NrRlcSapProvider::NrRlcSapProvider(ns3::NrRlcSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRlcSapProvider const &', 'arg0')])
    ## nr-rlc-sap.h (module 'nr'): void ns3::NrRlcSapProvider::TransmitPdcpPdu(ns3::NrRlcSapProvider::TransmitPdcpPduParameters params) [member function]
    cls.add_method('TransmitPdcpPdu', 
                   'void', 
                   [param('ns3::NrRlcSapProvider::TransmitPdcpPduParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrRlcSapProviderTransmitPdcpPduParameters_methods(root_module, cls):
    ## nr-rlc-sap.h (module 'nr'): ns3::NrRlcSapProvider::TransmitPdcpPduParameters::TransmitPdcpPduParameters() [constructor]
    cls.add_constructor([])
    ## nr-rlc-sap.h (module 'nr'): ns3::NrRlcSapProvider::TransmitPdcpPduParameters::TransmitPdcpPduParameters(ns3::NrRlcSapProvider::TransmitPdcpPduParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRlcSapProvider::TransmitPdcpPduParameters const &', 'arg0')])
    ## nr-rlc-sap.h (module 'nr'): ns3::NrRlcSapProvider::TransmitPdcpPduParameters::lcid [variable]
    cls.add_instance_attribute('lcid', 'uint8_t', is_const=False)
    ## nr-rlc-sap.h (module 'nr'): ns3::NrRlcSapProvider::TransmitPdcpPduParameters::pdcpPdu [variable]
    cls.add_instance_attribute('pdcpPdu', 'ns3::Ptr< ns3::Packet >', is_const=False)
    ## nr-rlc-sap.h (module 'nr'): ns3::NrRlcSapProvider::TransmitPdcpPduParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    return

def register_Ns3NrRlcSapUser_methods(root_module, cls):
    ## nr-rlc-sap.h (module 'nr'): ns3::NrRlcSapUser::NrRlcSapUser() [constructor]
    cls.add_constructor([])
    ## nr-rlc-sap.h (module 'nr'): ns3::NrRlcSapUser::NrRlcSapUser(ns3::NrRlcSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRlcSapUser const &', 'arg0')])
    ## nr-rlc-sap.h (module 'nr'): void ns3::NrRlcSapUser::ReceivePdcpPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('ReceivePdcpPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrRrcSap_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::NrRrcSap() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::NrRrcSap(ns3::NrRrcSap const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): static double ns3::NrRrcSap::ConvertPdschConfigDedicated2Double(ns3::NrRrcSap::PdschConfigDedicated pdschConfigDedicated) [member function]
    cls.add_method('ConvertPdschConfigDedicated2Double', 
                   'double', 
                   [param('ns3::NrRrcSap::PdschConfigDedicated', 'pdschConfigDedicated')], 
                   is_static=True)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MaxReportCells [variable]
    cls.add_static_attribute('MaxReportCells', 'uint8_t const', is_const=True)
    return

def register_Ns3NrRrcSapAntennaInfoDedicated_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AntennaInfoDedicated::AntennaInfoDedicated() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AntennaInfoDedicated::AntennaInfoDedicated(ns3::NrRrcSap::AntennaInfoDedicated const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::AntennaInfoDedicated const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AntennaInfoDedicated::transmissionMode [variable]
    cls.add_instance_attribute('transmissionMode', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapAsConfig_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AsConfig::AsConfig() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AsConfig::AsConfig(ns3::NrRrcSap::AsConfig const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::AsConfig const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AsConfig::sourceDlCarrierFreq [variable]
    cls.add_instance_attribute('sourceDlCarrierFreq', 'uint16_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AsConfig::sourceMasterInformationBlock [variable]
    cls.add_instance_attribute('sourceMasterInformationBlock', 'ns3::NrRrcSap::MasterInformationBlock', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AsConfig::sourceMeasConfig [variable]
    cls.add_instance_attribute('sourceMeasConfig', 'ns3::NrRrcSap::MeasConfig', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AsConfig::sourceRadioResourceConfig [variable]
    cls.add_instance_attribute('sourceRadioResourceConfig', 'ns3::NrRrcSap::RadioResourceConfigDedicated', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AsConfig::sourceSystemInformationBlockType1 [variable]
    cls.add_instance_attribute('sourceSystemInformationBlockType1', 'ns3::NrRrcSap::SystemInformationBlockType1', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AsConfig::sourceSystemInformationBlockType2 [variable]
    cls.add_instance_attribute('sourceSystemInformationBlockType2', 'ns3::NrRrcSap::SystemInformationBlockType2', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::AsConfig::sourceUeIdentity [variable]
    cls.add_instance_attribute('sourceUeIdentity', 'uint16_t', is_const=False)
    return

def register_Ns3NrRrcSapBlackCellsToAddMod_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::BlackCellsToAddMod::BlackCellsToAddMod() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::BlackCellsToAddMod::BlackCellsToAddMod(ns3::NrRrcSap::BlackCellsToAddMod const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::BlackCellsToAddMod const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::BlackCellsToAddMod::cellIndex [variable]
    cls.add_instance_attribute('cellIndex', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::BlackCellsToAddMod::physCellIdRange [variable]
    cls.add_instance_attribute('physCellIdRange', 'ns3::NrRrcSap::PhysCellIdRange', is_const=False)
    return

def register_Ns3NrRrcSapCarrierBandwidthEutra_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CarrierBandwidthEutra::CarrierBandwidthEutra() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CarrierBandwidthEutra::CarrierBandwidthEutra(ns3::NrRrcSap::CarrierBandwidthEutra const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::CarrierBandwidthEutra const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CarrierBandwidthEutra::dlBandwidth [variable]
    cls.add_instance_attribute('dlBandwidth', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CarrierBandwidthEutra::ulBandwidth [variable]
    cls.add_instance_attribute('ulBandwidth', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapCarrierFreqEutra_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CarrierFreqEutra::CarrierFreqEutra() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CarrierFreqEutra::CarrierFreqEutra(ns3::NrRrcSap::CarrierFreqEutra const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::CarrierFreqEutra const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CarrierFreqEutra::dlCarrierFreq [variable]
    cls.add_instance_attribute('dlCarrierFreq', 'uint16_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CarrierFreqEutra::ulCarrierFreq [variable]
    cls.add_instance_attribute('ulCarrierFreq', 'uint16_t', is_const=False)
    return

def register_Ns3NrRrcSapCellAccessRelatedInfo_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellAccessRelatedInfo::CellAccessRelatedInfo() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellAccessRelatedInfo::CellAccessRelatedInfo(ns3::NrRrcSap::CellAccessRelatedInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::CellAccessRelatedInfo const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellAccessRelatedInfo::cellIdentity [variable]
    cls.add_instance_attribute('cellIdentity', 'uint32_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellAccessRelatedInfo::csgIdentity [variable]
    cls.add_instance_attribute('csgIdentity', 'uint32_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellAccessRelatedInfo::csgIndication [variable]
    cls.add_instance_attribute('csgIndication', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellAccessRelatedInfo::plmnIdentityInfo [variable]
    cls.add_instance_attribute('plmnIdentityInfo', 'ns3::NrRrcSap::PlmnIdentityInfo', is_const=False)
    return

def register_Ns3NrRrcSapCellSelectionInfo_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellSelectionInfo::CellSelectionInfo() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellSelectionInfo::CellSelectionInfo(ns3::NrRrcSap::CellSelectionInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::CellSelectionInfo const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellSelectionInfo::qQualMin [variable]
    cls.add_instance_attribute('qQualMin', 'int8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellSelectionInfo::qRxLevMin [variable]
    cls.add_instance_attribute('qRxLevMin', 'int8_t', is_const=False)
    return

def register_Ns3NrRrcSapCellsToAddMod_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellsToAddMod::CellsToAddMod() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellsToAddMod::CellsToAddMod(ns3::NrRrcSap::CellsToAddMod const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::CellsToAddMod const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellsToAddMod::cellIndex [variable]
    cls.add_instance_attribute('cellIndex', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellsToAddMod::cellIndividualOffset [variable]
    cls.add_instance_attribute('cellIndividualOffset', 'int8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CellsToAddMod::physCellId [variable]
    cls.add_instance_attribute('physCellId', 'uint16_t', is_const=False)
    return

def register_Ns3NrRrcSapCgiInfo_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CgiInfo::CgiInfo() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CgiInfo::CgiInfo(ns3::NrRrcSap::CgiInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::CgiInfo const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CgiInfo::cellIdentity [variable]
    cls.add_instance_attribute('cellIdentity', 'uint32_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CgiInfo::plmnIdentity [variable]
    cls.add_instance_attribute('plmnIdentity', 'uint32_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CgiInfo::plmnIdentityList [variable]
    cls.add_instance_attribute('plmnIdentityList', 'std::list< unsigned int >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::CgiInfo::trackingAreaCode [variable]
    cls.add_instance_attribute('trackingAreaCode', 'uint16_t', is_const=False)
    return

def register_Ns3NrRrcSapDrbToAddMod_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::DrbToAddMod::DrbToAddMod() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::DrbToAddMod::DrbToAddMod(ns3::NrRrcSap::DrbToAddMod const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::DrbToAddMod const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::DrbToAddMod::drbIdentity [variable]
    cls.add_instance_attribute('drbIdentity', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::DrbToAddMod::epsBearerIdentity [variable]
    cls.add_instance_attribute('epsBearerIdentity', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::DrbToAddMod::logicalChannelConfig [variable]
    cls.add_instance_attribute('logicalChannelConfig', 'ns3::NrRrcSap::LogicalChannelConfig', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::DrbToAddMod::logicalChannelIdentity [variable]
    cls.add_instance_attribute('logicalChannelIdentity', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::DrbToAddMod::rlcConfig [variable]
    cls.add_instance_attribute('rlcConfig', 'ns3::NrRrcSap::RlcConfig', is_const=False)
    return

def register_Ns3NrRrcSapFreqInfo_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::FreqInfo::FreqInfo() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::FreqInfo::FreqInfo(ns3::NrRrcSap::FreqInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::FreqInfo const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::FreqInfo::ulBandwidth [variable]
    cls.add_instance_attribute('ulBandwidth', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::FreqInfo::ulCarrierFreq [variable]
    cls.add_instance_attribute('ulCarrierFreq', 'uint16_t', is_const=False)
    return

def register_Ns3NrRrcSapHandoverPreparationInfo_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::HandoverPreparationInfo::HandoverPreparationInfo() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::HandoverPreparationInfo::HandoverPreparationInfo(ns3::NrRrcSap::HandoverPreparationInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::HandoverPreparationInfo const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::HandoverPreparationInfo::asConfig [variable]
    cls.add_instance_attribute('asConfig', 'ns3::NrRrcSap::AsConfig', is_const=False)
    return

def register_Ns3NrRrcSapLogicalChannelConfig_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::LogicalChannelConfig::LogicalChannelConfig() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::LogicalChannelConfig::LogicalChannelConfig(ns3::NrRrcSap::LogicalChannelConfig const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::LogicalChannelConfig const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::LogicalChannelConfig::bucketSizeDurationMs [variable]
    cls.add_instance_attribute('bucketSizeDurationMs', 'uint16_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::LogicalChannelConfig::logicalChannelGroup [variable]
    cls.add_instance_attribute('logicalChannelGroup', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::LogicalChannelConfig::prioritizedBitRateKbps [variable]
    cls.add_instance_attribute('prioritizedBitRateKbps', 'uint16_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::LogicalChannelConfig::priority [variable]
    cls.add_instance_attribute('priority', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapMasterInformationBlock_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MasterInformationBlock::MasterInformationBlock() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MasterInformationBlock::MasterInformationBlock(ns3::NrRrcSap::MasterInformationBlock const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::MasterInformationBlock const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MasterInformationBlock::dlBandwidth [variable]
    cls.add_instance_attribute('dlBandwidth', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MasterInformationBlock::systemFrameNumber [variable]
    cls.add_instance_attribute('systemFrameNumber', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapMeasConfig_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::MeasConfig() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::MeasConfig(ns3::NrRrcSap::MeasConfig const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::MeasConfig const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::haveMeasGapConfig [variable]
    cls.add_instance_attribute('haveMeasGapConfig', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::haveQuantityConfig [variable]
    cls.add_instance_attribute('haveQuantityConfig', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::haveSmeasure [variable]
    cls.add_instance_attribute('haveSmeasure', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::haveSpeedStatePars [variable]
    cls.add_instance_attribute('haveSpeedStatePars', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::measGapConfig [variable]
    cls.add_instance_attribute('measGapConfig', 'ns3::NrRrcSap::MeasGapConfig', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::measIdToAddModList [variable]
    cls.add_instance_attribute('measIdToAddModList', 'std::list< ns3::NrRrcSap::MeasIdToAddMod >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::measIdToRemoveList [variable]
    cls.add_instance_attribute('measIdToRemoveList', 'std::list< unsigned char >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::measObjectToAddModList [variable]
    cls.add_instance_attribute('measObjectToAddModList', 'std::list< ns3::NrRrcSap::MeasObjectToAddMod >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::measObjectToRemoveList [variable]
    cls.add_instance_attribute('measObjectToRemoveList', 'std::list< unsigned char >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::quantityConfig [variable]
    cls.add_instance_attribute('quantityConfig', 'ns3::NrRrcSap::QuantityConfig', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::reportConfigToAddModList [variable]
    cls.add_instance_attribute('reportConfigToAddModList', 'std::list< ns3::NrRrcSap::ReportConfigToAddMod >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::reportConfigToRemoveList [variable]
    cls.add_instance_attribute('reportConfigToRemoveList', 'std::list< unsigned char >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::sMeasure [variable]
    cls.add_instance_attribute('sMeasure', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasConfig::speedStatePars [variable]
    cls.add_instance_attribute('speedStatePars', 'ns3::NrRrcSap::SpeedStatePars', is_const=False)
    return

def register_Ns3NrRrcSapMeasGapConfig_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasGapConfig::MeasGapConfig() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasGapConfig::MeasGapConfig(ns3::NrRrcSap::MeasGapConfig const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::MeasGapConfig const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasGapConfig::gapOffsetValue [variable]
    cls.add_instance_attribute('gapOffsetValue', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapMeasIdToAddMod_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasIdToAddMod::MeasIdToAddMod() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasIdToAddMod::MeasIdToAddMod(ns3::NrRrcSap::MeasIdToAddMod const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::MeasIdToAddMod const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasIdToAddMod::measId [variable]
    cls.add_instance_attribute('measId', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasIdToAddMod::measObjectId [variable]
    cls.add_instance_attribute('measObjectId', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasIdToAddMod::reportConfigId [variable]
    cls.add_instance_attribute('reportConfigId', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapMeasObjectEutra_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra::MeasObjectEutra() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra::MeasObjectEutra(ns3::NrRrcSap::MeasObjectEutra const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::MeasObjectEutra const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra::allowedMeasBandwidth [variable]
    cls.add_instance_attribute('allowedMeasBandwidth', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra::blackCellsToAddModList [variable]
    cls.add_instance_attribute('blackCellsToAddModList', 'std::list< ns3::NrRrcSap::BlackCellsToAddMod >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra::blackCellsToRemoveList [variable]
    cls.add_instance_attribute('blackCellsToRemoveList', 'std::list< unsigned char >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra::carrierFreq [variable]
    cls.add_instance_attribute('carrierFreq', 'uint16_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra::cellForWhichToReportCGI [variable]
    cls.add_instance_attribute('cellForWhichToReportCGI', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra::cellsToAddModList [variable]
    cls.add_instance_attribute('cellsToAddModList', 'std::list< ns3::NrRrcSap::CellsToAddMod >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra::cellsToRemoveList [variable]
    cls.add_instance_attribute('cellsToRemoveList', 'std::list< unsigned char >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra::haveCellForWhichToReportCGI [variable]
    cls.add_instance_attribute('haveCellForWhichToReportCGI', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra::neighCellConfig [variable]
    cls.add_instance_attribute('neighCellConfig', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra::offsetFreq [variable]
    cls.add_instance_attribute('offsetFreq', 'int8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectEutra::presenceAntennaPort1 [variable]
    cls.add_instance_attribute('presenceAntennaPort1', 'bool', is_const=False)
    return

def register_Ns3NrRrcSapMeasObjectToAddMod_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectToAddMod::MeasObjectToAddMod() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectToAddMod::MeasObjectToAddMod(ns3::NrRrcSap::MeasObjectToAddMod const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::MeasObjectToAddMod const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectToAddMod::measObjectEutra [variable]
    cls.add_instance_attribute('measObjectEutra', 'ns3::NrRrcSap::MeasObjectEutra', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasObjectToAddMod::measObjectId [variable]
    cls.add_instance_attribute('measObjectId', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapMeasResultEutra_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResultEutra::MeasResultEutra() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResultEutra::MeasResultEutra(ns3::NrRrcSap::MeasResultEutra const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::MeasResultEutra const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResultEutra::cgiInfo [variable]
    cls.add_instance_attribute('cgiInfo', 'ns3::NrRrcSap::CgiInfo', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResultEutra::haveCgiInfo [variable]
    cls.add_instance_attribute('haveCgiInfo', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResultEutra::haveRsrpResult [variable]
    cls.add_instance_attribute('haveRsrpResult', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResultEutra::haveRsrqResult [variable]
    cls.add_instance_attribute('haveRsrqResult', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResultEutra::physCellId [variable]
    cls.add_instance_attribute('physCellId', 'uint16_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResultEutra::rsrpResult [variable]
    cls.add_instance_attribute('rsrpResult', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResultEutra::rsrqResult [variable]
    cls.add_instance_attribute('rsrqResult', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapMeasResults_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResults::MeasResults() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResults::MeasResults(ns3::NrRrcSap::MeasResults const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::MeasResults const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResults::haveMeasResultNeighCells [variable]
    cls.add_instance_attribute('haveMeasResultNeighCells', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResults::measId [variable]
    cls.add_instance_attribute('measId', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResults::measResultListEutra [variable]
    cls.add_instance_attribute('measResultListEutra', 'std::list< ns3::NrRrcSap::MeasResultEutra >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResults::rsrpResult [variable]
    cls.add_instance_attribute('rsrpResult', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasResults::rsrqResult [variable]
    cls.add_instance_attribute('rsrqResult', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapMeasurementReport_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasurementReport::MeasurementReport() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasurementReport::MeasurementReport(ns3::NrRrcSap::MeasurementReport const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::MeasurementReport const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MeasurementReport::measResults [variable]
    cls.add_instance_attribute('measResults', 'ns3::NrRrcSap::MeasResults', is_const=False)
    return

def register_Ns3NrRrcSapMobilityControlInfo_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityControlInfo::MobilityControlInfo() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityControlInfo::MobilityControlInfo(ns3::NrRrcSap::MobilityControlInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::MobilityControlInfo const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityControlInfo::carrierBandwidth [variable]
    cls.add_instance_attribute('carrierBandwidth', 'ns3::NrRrcSap::CarrierBandwidthEutra', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityControlInfo::carrierFreq [variable]
    cls.add_instance_attribute('carrierFreq', 'ns3::NrRrcSap::CarrierFreqEutra', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityControlInfo::haveCarrierBandwidth [variable]
    cls.add_instance_attribute('haveCarrierBandwidth', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityControlInfo::haveCarrierFreq [variable]
    cls.add_instance_attribute('haveCarrierFreq', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityControlInfo::haveRachConfigDedicated [variable]
    cls.add_instance_attribute('haveRachConfigDedicated', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityControlInfo::newUeIdentity [variable]
    cls.add_instance_attribute('newUeIdentity', 'uint16_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityControlInfo::rachConfigDedicated [variable]
    cls.add_instance_attribute('rachConfigDedicated', 'ns3::NrRrcSap::RachConfigDedicated', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityControlInfo::radioResourceConfigCommon [variable]
    cls.add_instance_attribute('radioResourceConfigCommon', 'ns3::NrRrcSap::RadioResourceConfigCommon', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityControlInfo::targetPhysCellId [variable]
    cls.add_instance_attribute('targetPhysCellId', 'uint16_t', is_const=False)
    return

def register_Ns3NrRrcSapMobilityStateParameters_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityStateParameters::MobilityStateParameters() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityStateParameters::MobilityStateParameters(ns3::NrRrcSap::MobilityStateParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::MobilityStateParameters const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityStateParameters::nCellChangeHigh [variable]
    cls.add_instance_attribute('nCellChangeHigh', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityStateParameters::nCellChangeMedium [variable]
    cls.add_instance_attribute('nCellChangeMedium', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityStateParameters::tEvaluation [variable]
    cls.add_instance_attribute('tEvaluation', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::MobilityStateParameters::tHystNormal [variable]
    cls.add_instance_attribute('tHystNormal', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapPdschConfigCommon_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PdschConfigCommon::PdschConfigCommon() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PdschConfigCommon::PdschConfigCommon(ns3::NrRrcSap::PdschConfigCommon const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::PdschConfigCommon const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PdschConfigCommon::pb [variable]
    cls.add_instance_attribute('pb', 'int8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PdschConfigCommon::referenceSignalPower [variable]
    cls.add_instance_attribute('referenceSignalPower', 'int8_t', is_const=False)
    return

def register_Ns3NrRrcSapPdschConfigDedicated_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PdschConfigDedicated::PdschConfigDedicated() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PdschConfigDedicated::PdschConfigDedicated(ns3::NrRrcSap::PdschConfigDedicated const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::PdschConfigDedicated const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PdschConfigDedicated::pa [variable]
    cls.add_instance_attribute('pa', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapPhysCellIdRange_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysCellIdRange::PhysCellIdRange() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysCellIdRange::PhysCellIdRange(ns3::NrRrcSap::PhysCellIdRange const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::PhysCellIdRange const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysCellIdRange::haveRange [variable]
    cls.add_instance_attribute('haveRange', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysCellIdRange::range [variable]
    cls.add_instance_attribute('range', 'uint16_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysCellIdRange::start [variable]
    cls.add_instance_attribute('start', 'uint16_t', is_const=False)
    return

def register_Ns3NrRrcSapPhysicalConfigDedicated_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysicalConfigDedicated::PhysicalConfigDedicated() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysicalConfigDedicated::PhysicalConfigDedicated(ns3::NrRrcSap::PhysicalConfigDedicated const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::PhysicalConfigDedicated const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysicalConfigDedicated::antennaInfo [variable]
    cls.add_instance_attribute('antennaInfo', 'ns3::NrRrcSap::AntennaInfoDedicated', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysicalConfigDedicated::haveAntennaInfoDedicated [variable]
    cls.add_instance_attribute('haveAntennaInfoDedicated', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysicalConfigDedicated::havePdschConfigDedicated [variable]
    cls.add_instance_attribute('havePdschConfigDedicated', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysicalConfigDedicated::haveSoundingRsUlConfigDedicated [variable]
    cls.add_instance_attribute('haveSoundingRsUlConfigDedicated', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysicalConfigDedicated::pdschConfigDedicated [variable]
    cls.add_instance_attribute('pdschConfigDedicated', 'ns3::NrRrcSap::PdschConfigDedicated', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PhysicalConfigDedicated::soundingRsUlConfigDedicated [variable]
    cls.add_instance_attribute('soundingRsUlConfigDedicated', 'ns3::NrRrcSap::SoundingRsUlConfigDedicated', is_const=False)
    return

def register_Ns3NrRrcSapPlmnIdentityInfo_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PlmnIdentityInfo::PlmnIdentityInfo() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PlmnIdentityInfo::PlmnIdentityInfo(ns3::NrRrcSap::PlmnIdentityInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::PlmnIdentityInfo const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PlmnIdentityInfo::plmnIdentity [variable]
    cls.add_instance_attribute('plmnIdentity', 'uint32_t', is_const=False)
    return

def register_Ns3NrRrcSapPreambleInfo_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PreambleInfo::PreambleInfo() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PreambleInfo::PreambleInfo(ns3::NrRrcSap::PreambleInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::PreambleInfo const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::PreambleInfo::numberOfRaPreambles [variable]
    cls.add_instance_attribute('numberOfRaPreambles', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapQuantityConfig_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::QuantityConfig::QuantityConfig() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::QuantityConfig::QuantityConfig(ns3::NrRrcSap::QuantityConfig const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::QuantityConfig const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::QuantityConfig::filterCoefficientRSRP [variable]
    cls.add_instance_attribute('filterCoefficientRSRP', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::QuantityConfig::filterCoefficientRSRQ [variable]
    cls.add_instance_attribute('filterCoefficientRSRQ', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapRaSupervisionInfo_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RaSupervisionInfo::RaSupervisionInfo() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RaSupervisionInfo::RaSupervisionInfo(ns3::NrRrcSap::RaSupervisionInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RaSupervisionInfo const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RaSupervisionInfo::preambleTransMax [variable]
    cls.add_instance_attribute('preambleTransMax', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RaSupervisionInfo::raResponseWindowSize [variable]
    cls.add_instance_attribute('raResponseWindowSize', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapRachConfigCommon_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RachConfigCommon::RachConfigCommon() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RachConfigCommon::RachConfigCommon(ns3::NrRrcSap::RachConfigCommon const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RachConfigCommon const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RachConfigCommon::preambleInfo [variable]
    cls.add_instance_attribute('preambleInfo', 'ns3::NrRrcSap::PreambleInfo', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RachConfigCommon::raSupervisionInfo [variable]
    cls.add_instance_attribute('raSupervisionInfo', 'ns3::NrRrcSap::RaSupervisionInfo', is_const=False)
    return

def register_Ns3NrRrcSapRachConfigDedicated_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RachConfigDedicated::RachConfigDedicated() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RachConfigDedicated::RachConfigDedicated(ns3::NrRrcSap::RachConfigDedicated const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RachConfigDedicated const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RachConfigDedicated::raPrachMaskIndex [variable]
    cls.add_instance_attribute('raPrachMaskIndex', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RachConfigDedicated::raPreambleIndex [variable]
    cls.add_instance_attribute('raPreambleIndex', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapRadioResourceConfigCommon_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigCommon::RadioResourceConfigCommon() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigCommon::RadioResourceConfigCommon(ns3::NrRrcSap::RadioResourceConfigCommon const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RadioResourceConfigCommon const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigCommon::rachConfigCommon [variable]
    cls.add_instance_attribute('rachConfigCommon', 'ns3::NrRrcSap::RachConfigCommon', is_const=False)
    return

def register_Ns3NrRrcSapRadioResourceConfigCommonSib_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigCommonSib::RadioResourceConfigCommonSib() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigCommonSib::RadioResourceConfigCommonSib(ns3::NrRrcSap::RadioResourceConfigCommonSib const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RadioResourceConfigCommonSib const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigCommonSib::pdschConfigCommon [variable]
    cls.add_instance_attribute('pdschConfigCommon', 'ns3::NrRrcSap::PdschConfigCommon', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigCommonSib::rachConfigCommon [variable]
    cls.add_instance_attribute('rachConfigCommon', 'ns3::NrRrcSap::RachConfigCommon', is_const=False)
    return

def register_Ns3NrRrcSapRadioResourceConfigDedicated_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigDedicated::RadioResourceConfigDedicated() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigDedicated::RadioResourceConfigDedicated(ns3::NrRrcSap::RadioResourceConfigDedicated const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RadioResourceConfigDedicated const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigDedicated::drbToAddModList [variable]
    cls.add_instance_attribute('drbToAddModList', 'std::list< ns3::NrRrcSap::DrbToAddMod >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigDedicated::drbToReleaseList [variable]
    cls.add_instance_attribute('drbToReleaseList', 'std::list< unsigned char >', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigDedicated::havePhysicalConfigDedicated [variable]
    cls.add_instance_attribute('havePhysicalConfigDedicated', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigDedicated::physicalConfigDedicated [variable]
    cls.add_instance_attribute('physicalConfigDedicated', 'ns3::NrRrcSap::PhysicalConfigDedicated', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigDedicated::srbToAddModList [variable]
    cls.add_instance_attribute('srbToAddModList', 'std::list< ns3::NrRrcSap::SrbToAddMod >', is_const=False)
    return

def register_Ns3NrRrcSapReestabUeIdentity_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReestabUeIdentity::ReestabUeIdentity() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReestabUeIdentity::ReestabUeIdentity(ns3::NrRrcSap::ReestabUeIdentity const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::ReestabUeIdentity const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReestabUeIdentity::cRnti [variable]
    cls.add_instance_attribute('cRnti', 'uint16_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReestabUeIdentity::physCellId [variable]
    cls.add_instance_attribute('physCellId', 'uint16_t', is_const=False)
    return

def register_Ns3NrRrcSapReportConfigEutra_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra::ReportConfigEutra(ns3::NrRrcSap::ReportConfigEutra const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::ReportConfigEutra const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra::ReportConfigEutra() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra::a3Offset [variable]
    cls.add_instance_attribute('a3Offset', 'int8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra::hysteresis [variable]
    cls.add_instance_attribute('hysteresis', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra::maxReportCells [variable]
    cls.add_instance_attribute('maxReportCells', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra::reportAmount [variable]
    cls.add_instance_attribute('reportAmount', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra::reportOnLeave [variable]
    cls.add_instance_attribute('reportOnLeave', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra::threshold1 [variable]
    cls.add_instance_attribute('threshold1', 'ns3::NrRrcSap::ThresholdEutra', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra::threshold2 [variable]
    cls.add_instance_attribute('threshold2', 'ns3::NrRrcSap::ThresholdEutra', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigEutra::timeToTrigger [variable]
    cls.add_instance_attribute('timeToTrigger', 'uint16_t', is_const=False)
    return

def register_Ns3NrRrcSapReportConfigToAddMod_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigToAddMod::ReportConfigToAddMod() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigToAddMod::ReportConfigToAddMod(ns3::NrRrcSap::ReportConfigToAddMod const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::ReportConfigToAddMod const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigToAddMod::reportConfigEutra [variable]
    cls.add_instance_attribute('reportConfigEutra', 'ns3::NrRrcSap::ReportConfigEutra', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ReportConfigToAddMod::reportConfigId [variable]
    cls.add_instance_attribute('reportConfigId', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapRlcConfig_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RlcConfig::RlcConfig() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RlcConfig::RlcConfig(ns3::NrRrcSap::RlcConfig const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RlcConfig const &', 'arg0')])
    return

def register_Ns3NrRrcSapRrcConnectionReconfiguration_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfiguration::RrcConnectionReconfiguration() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfiguration::RrcConnectionReconfiguration(ns3::NrRrcSap::RrcConnectionReconfiguration const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RrcConnectionReconfiguration const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfiguration::haveMeasConfig [variable]
    cls.add_instance_attribute('haveMeasConfig', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfiguration::haveMobilityControlInfo [variable]
    cls.add_instance_attribute('haveMobilityControlInfo', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfiguration::haveRadioResourceConfigDedicated [variable]
    cls.add_instance_attribute('haveRadioResourceConfigDedicated', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfiguration::measConfig [variable]
    cls.add_instance_attribute('measConfig', 'ns3::NrRrcSap::MeasConfig', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfiguration::mobilityControlInfo [variable]
    cls.add_instance_attribute('mobilityControlInfo', 'ns3::NrRrcSap::MobilityControlInfo', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfiguration::radioResourceConfigDedicated [variable]
    cls.add_instance_attribute('radioResourceConfigDedicated', 'ns3::NrRrcSap::RadioResourceConfigDedicated', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfiguration::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapRrcConnectionReconfigurationCompleted_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfigurationCompleted::RrcConnectionReconfigurationCompleted() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfigurationCompleted::RrcConnectionReconfigurationCompleted(ns3::NrRrcSap::RrcConnectionReconfigurationCompleted const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RrcConnectionReconfigurationCompleted const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfigurationCompleted::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapRrcConnectionReestablishment_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishment::RrcConnectionReestablishment() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishment::RrcConnectionReestablishment(ns3::NrRrcSap::RrcConnectionReestablishment const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RrcConnectionReestablishment const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishment::radioResourceConfigDedicated [variable]
    cls.add_instance_attribute('radioResourceConfigDedicated', 'ns3::NrRrcSap::RadioResourceConfigDedicated', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishment::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapRrcConnectionReestablishmentComplete_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentComplete::RrcConnectionReestablishmentComplete() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentComplete::RrcConnectionReestablishmentComplete(ns3::NrRrcSap::RrcConnectionReestablishmentComplete const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RrcConnectionReestablishmentComplete const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentComplete::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapRrcConnectionReestablishmentReject_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentReject::RrcConnectionReestablishmentReject() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentReject::RrcConnectionReestablishmentReject(ns3::NrRrcSap::RrcConnectionReestablishmentReject const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RrcConnectionReestablishmentReject const &', 'arg0')])
    return

def register_Ns3NrRrcSapRrcConnectionReestablishmentRequest_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentRequest::RrcConnectionReestablishmentRequest() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentRequest::RrcConnectionReestablishmentRequest(ns3::NrRrcSap::RrcConnectionReestablishmentRequest const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RrcConnectionReestablishmentRequest const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentRequest::reestablishmentCause [variable]
    cls.add_instance_attribute('reestablishmentCause', 'ns3::NrRrcSap::ReestablishmentCause', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentRequest::ueIdentity [variable]
    cls.add_instance_attribute('ueIdentity', 'ns3::NrRrcSap::ReestabUeIdentity', is_const=False)
    return

def register_Ns3NrRrcSapRrcConnectionReject_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReject::RrcConnectionReject() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReject::RrcConnectionReject(ns3::NrRrcSap::RrcConnectionReject const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RrcConnectionReject const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReject::waitTime [variable]
    cls.add_instance_attribute('waitTime', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapRrcConnectionRelease_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionRelease::RrcConnectionRelease() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionRelease::RrcConnectionRelease(ns3::NrRrcSap::RrcConnectionRelease const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RrcConnectionRelease const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionRelease::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapRrcConnectionRequest_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionRequest::RrcConnectionRequest() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionRequest::RrcConnectionRequest(ns3::NrRrcSap::RrcConnectionRequest const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RrcConnectionRequest const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionRequest::ueIdentity [variable]
    cls.add_instance_attribute('ueIdentity', 'uint64_t', is_const=False)
    return

def register_Ns3NrRrcSapRrcConnectionSetup_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionSetup::RrcConnectionSetup() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionSetup::RrcConnectionSetup(ns3::NrRrcSap::RrcConnectionSetup const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RrcConnectionSetup const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionSetup::radioResourceConfigDedicated [variable]
    cls.add_instance_attribute('radioResourceConfigDedicated', 'ns3::NrRrcSap::RadioResourceConfigDedicated', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionSetup::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapRrcConnectionSetupCompleted_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionSetupCompleted::RrcConnectionSetupCompleted() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionSetupCompleted::RrcConnectionSetupCompleted(ns3::NrRrcSap::RrcConnectionSetupCompleted const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::RrcConnectionSetupCompleted const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionSetupCompleted::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapSoundingRsUlConfigCommon_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SoundingRsUlConfigCommon::SoundingRsUlConfigCommon() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SoundingRsUlConfigCommon::SoundingRsUlConfigCommon(ns3::NrRrcSap::SoundingRsUlConfigCommon const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::SoundingRsUlConfigCommon const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SoundingRsUlConfigCommon::srsBandwidthConfig [variable]
    cls.add_instance_attribute('srsBandwidthConfig', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SoundingRsUlConfigCommon::srsSubframeConfig [variable]
    cls.add_instance_attribute('srsSubframeConfig', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapSoundingRsUlConfigDedicated_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SoundingRsUlConfigDedicated::SoundingRsUlConfigDedicated() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SoundingRsUlConfigDedicated::SoundingRsUlConfigDedicated(ns3::NrRrcSap::SoundingRsUlConfigDedicated const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::SoundingRsUlConfigDedicated const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SoundingRsUlConfigDedicated::srsBandwidth [variable]
    cls.add_instance_attribute('srsBandwidth', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SoundingRsUlConfigDedicated::srsConfigIndex [variable]
    cls.add_instance_attribute('srsConfigIndex', 'uint16_t', is_const=False)
    return

def register_Ns3NrRrcSapSpeedStatePars_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SpeedStatePars::SpeedStatePars() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SpeedStatePars::SpeedStatePars(ns3::NrRrcSap::SpeedStatePars const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::SpeedStatePars const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SpeedStatePars::mobilityStateParameters [variable]
    cls.add_instance_attribute('mobilityStateParameters', 'ns3::NrRrcSap::MobilityStateParameters', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SpeedStatePars::timeToTriggerSf [variable]
    cls.add_instance_attribute('timeToTriggerSf', 'ns3::NrRrcSap::SpeedStateScaleFactors', is_const=False)
    return

def register_Ns3NrRrcSapSpeedStateScaleFactors_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SpeedStateScaleFactors::SpeedStateScaleFactors() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SpeedStateScaleFactors::SpeedStateScaleFactors(ns3::NrRrcSap::SpeedStateScaleFactors const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::SpeedStateScaleFactors const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SpeedStateScaleFactors::sfHigh [variable]
    cls.add_instance_attribute('sfHigh', 'uint8_t', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SpeedStateScaleFactors::sfMedium [variable]
    cls.add_instance_attribute('sfMedium', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapSrbToAddMod_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SrbToAddMod::SrbToAddMod() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SrbToAddMod::SrbToAddMod(ns3::NrRrcSap::SrbToAddMod const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::SrbToAddMod const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SrbToAddMod::logicalChannelConfig [variable]
    cls.add_instance_attribute('logicalChannelConfig', 'ns3::NrRrcSap::LogicalChannelConfig', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SrbToAddMod::srbIdentity [variable]
    cls.add_instance_attribute('srbIdentity', 'uint8_t', is_const=False)
    return

def register_Ns3NrRrcSapSystemInformation_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformation::SystemInformation() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformation::SystemInformation(ns3::NrRrcSap::SystemInformation const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::SystemInformation const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformation::haveSib2 [variable]
    cls.add_instance_attribute('haveSib2', 'bool', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformation::sib2 [variable]
    cls.add_instance_attribute('sib2', 'ns3::NrRrcSap::SystemInformationBlockType2', is_const=False)
    return

def register_Ns3NrRrcSapSystemInformationBlockType1_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformationBlockType1::SystemInformationBlockType1() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformationBlockType1::SystemInformationBlockType1(ns3::NrRrcSap::SystemInformationBlockType1 const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::SystemInformationBlockType1 const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformationBlockType1::cellAccessRelatedInfo [variable]
    cls.add_instance_attribute('cellAccessRelatedInfo', 'ns3::NrRrcSap::CellAccessRelatedInfo', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformationBlockType1::cellSelectionInfo [variable]
    cls.add_instance_attribute('cellSelectionInfo', 'ns3::NrRrcSap::CellSelectionInfo', is_const=False)
    return

def register_Ns3NrRrcSapSystemInformationBlockType2_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformationBlockType2::SystemInformationBlockType2() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformationBlockType2::SystemInformationBlockType2(ns3::NrRrcSap::SystemInformationBlockType2 const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::SystemInformationBlockType2 const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformationBlockType2::freqInfo [variable]
    cls.add_instance_attribute('freqInfo', 'ns3::NrRrcSap::FreqInfo', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::SystemInformationBlockType2::radioResourceConfigCommon [variable]
    cls.add_instance_attribute('radioResourceConfigCommon', 'ns3::NrRrcSap::RadioResourceConfigCommonSib', is_const=False)
    return

def register_Ns3NrRrcSapThresholdEutra_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ThresholdEutra::ThresholdEutra() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ThresholdEutra::ThresholdEutra(ns3::NrRrcSap::ThresholdEutra const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrcSap::ThresholdEutra const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::ThresholdEutra::range [variable]
    cls.add_instance_attribute('range', 'uint8_t', is_const=False)
    return

def register_Ns3NrSpectrumValueCatcher_methods(root_module, cls):
    ## nr-chunk-processor.h (module 'nr'): ns3::NrSpectrumValueCatcher::NrSpectrumValueCatcher() [constructor]
    cls.add_constructor([])
    ## nr-chunk-processor.h (module 'nr'): ns3::NrSpectrumValueCatcher::NrSpectrumValueCatcher(ns3::NrSpectrumValueCatcher const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrSpectrumValueCatcher const &', 'arg0')])
    ## nr-chunk-processor.h (module 'nr'): ns3::Ptr<ns3::SpectrumValue> ns3::NrSpectrumValueCatcher::GetValue() [member function]
    cls.add_method('GetValue', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [])
    ## nr-chunk-processor.h (module 'nr'): void ns3::NrSpectrumValueCatcher::ReportValue(ns3::SpectrumValue const & value) [member function]
    cls.add_method('ReportValue', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'value')])
    return

def register_Ns3NrSpectrumValueHelper_methods(root_module, cls):
    ## nr-spectrum-value-helper.h (module 'nr'): ns3::NrSpectrumValueHelper::NrSpectrumValueHelper() [constructor]
    cls.add_constructor([])
    ## nr-spectrum-value-helper.h (module 'nr'): ns3::NrSpectrumValueHelper::NrSpectrumValueHelper(ns3::NrSpectrumValueHelper const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrSpectrumValueHelper const &', 'arg0')])
    ## nr-spectrum-value-helper.h (module 'nr'): static ns3::Ptr<ns3::SpectrumValue> ns3::NrSpectrumValueHelper::CreateNoisePowerSpectralDensity(uint16_t earfcn, uint8_t bandwidth, double noiseFigure) [member function]
    cls.add_method('CreateNoisePowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [param('uint16_t', 'earfcn'), param('uint8_t', 'bandwidth'), param('double', 'noiseFigure')], 
                   is_static=True)
    ## nr-spectrum-value-helper.h (module 'nr'): static ns3::Ptr<ns3::SpectrumValue> ns3::NrSpectrumValueHelper::CreateNoisePowerSpectralDensity(double noiseFigure, ns3::Ptr<ns3::SpectrumModel> spectrumModel) [member function]
    cls.add_method('CreateNoisePowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [param('double', 'noiseFigure'), param('ns3::Ptr< ns3::SpectrumModel >', 'spectrumModel')], 
                   is_static=True)
    ## nr-spectrum-value-helper.h (module 'nr'): static ns3::Ptr<ns3::SpectrumValue> ns3::NrSpectrumValueHelper::CreateTxPowerSpectralDensity(uint16_t earfcn, uint8_t bandwidth, double powerTx, std::vector<int, std::allocator<int> > activeRbs) [member function]
    cls.add_method('CreateTxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [param('uint16_t', 'earfcn'), param('uint8_t', 'bandwidth'), param('double', 'powerTx'), param('std::vector< int >', 'activeRbs')], 
                   is_static=True)
    ## nr-spectrum-value-helper.h (module 'nr'): static ns3::Ptr<ns3::SpectrumValue> ns3::NrSpectrumValueHelper::CreateTxPowerSpectralDensity(uint16_t earfcn, uint8_t bandwidth, double powerTx, std::map<int, double, std::less<int>, std::allocator<std::pair<int const, double> > > powerTxMap, std::vector<int, std::allocator<int> > activeRbs) [member function]
    cls.add_method('CreateTxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [param('uint16_t', 'earfcn'), param('uint8_t', 'bandwidth'), param('double', 'powerTx'), param('std::map< int, double >', 'powerTxMap'), param('std::vector< int >', 'activeRbs')], 
                   is_static=True)
    ## nr-spectrum-value-helper.h (module 'nr'): static double ns3::NrSpectrumValueHelper::GetCarrierFrequency(uint16_t earfcn) [member function]
    cls.add_method('GetCarrierFrequency', 
                   'double', 
                   [param('uint16_t', 'earfcn')], 
                   is_static=True)
    ## nr-spectrum-value-helper.h (module 'nr'): static double ns3::NrSpectrumValueHelper::GetChannelBandwidth(uint8_t txBandwidthConf) [member function]
    cls.add_method('GetChannelBandwidth', 
                   'double', 
                   [param('uint8_t', 'txBandwidthConf')], 
                   is_static=True)
    ## nr-spectrum-value-helper.h (module 'nr'): static double ns3::NrSpectrumValueHelper::GetDownlinkCarrierFrequency(uint16_t earfcn) [member function]
    cls.add_method('GetDownlinkCarrierFrequency', 
                   'double', 
                   [param('uint16_t', 'earfcn')], 
                   is_static=True)
    ## nr-spectrum-value-helper.h (module 'nr'): static ns3::Ptr<ns3::SpectrumModel> ns3::NrSpectrumValueHelper::GetSpectrumModel(uint16_t earfcn, uint8_t bandwidth) [member function]
    cls.add_method('GetSpectrumModel', 
                   'ns3::Ptr< ns3::SpectrumModel >', 
                   [param('uint16_t', 'earfcn'), param('uint8_t', 'bandwidth')], 
                   is_static=True)
    ## nr-spectrum-value-helper.h (module 'nr'): static double ns3::NrSpectrumValueHelper::GetUplinkCarrierFrequency(uint16_t earfcn) [member function]
    cls.add_method('GetUplinkCarrierFrequency', 
                   'double', 
                   [param('uint16_t', 'earfcn')], 
                   is_static=True)
    return

def register_Ns3NrUeCmacSapProvider_methods(root_module, cls):
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::NrUeCmacSapProvider() [constructor]
    cls.add_constructor([])
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::NrUeCmacSapProvider(ns3::NrUeCmacSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeCmacSapProvider const &', 'arg0')])
    ## nr-ue-cmac-sap.h (module 'nr'): void ns3::NrUeCmacSapProvider::AddLc(uint8_t lcId, ns3::NrUeCmacSapProvider::LogicalChannelConfig lcConfig, ns3::NrMacSapUser * msu) [member function]
    cls.add_method('AddLc', 
                   'void', 
                   [param('uint8_t', 'lcId'), param('ns3::NrUeCmacSapProvider::LogicalChannelConfig', 'lcConfig'), param('ns3::NrMacSapUser *', 'msu')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cmac-sap.h (module 'nr'): void ns3::NrUeCmacSapProvider::ConfigureRach(ns3::NrUeCmacSapProvider::RachConfig rc) [member function]
    cls.add_method('ConfigureRach', 
                   'void', 
                   [param('ns3::NrUeCmacSapProvider::RachConfig', 'rc')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cmac-sap.h (module 'nr'): void ns3::NrUeCmacSapProvider::RemoveLc(uint8_t lcId) [member function]
    cls.add_method('RemoveLc', 
                   'void', 
                   [param('uint8_t', 'lcId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cmac-sap.h (module 'nr'): void ns3::NrUeCmacSapProvider::Reset() [member function]
    cls.add_method('Reset', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cmac-sap.h (module 'nr'): void ns3::NrUeCmacSapProvider::StartContentionBasedRandomAccessProcedure() [member function]
    cls.add_method('StartContentionBasedRandomAccessProcedure', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cmac-sap.h (module 'nr'): void ns3::NrUeCmacSapProvider::StartNonContentionBasedRandomAccessProcedure(uint16_t rnti, uint8_t rapId, uint8_t prachMask) [member function]
    cls.add_method('StartNonContentionBasedRandomAccessProcedure', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'rapId'), param('uint8_t', 'prachMask')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrUeCmacSapProviderLogicalChannelConfig_methods(root_module, cls):
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::LogicalChannelConfig::LogicalChannelConfig() [constructor]
    cls.add_constructor([])
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::LogicalChannelConfig::LogicalChannelConfig(ns3::NrUeCmacSapProvider::LogicalChannelConfig const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeCmacSapProvider::LogicalChannelConfig const &', 'arg0')])
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::LogicalChannelConfig::bucketSizeDurationMs [variable]
    cls.add_instance_attribute('bucketSizeDurationMs', 'uint16_t', is_const=False)
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::LogicalChannelConfig::logicalChannelGroup [variable]
    cls.add_instance_attribute('logicalChannelGroup', 'uint8_t', is_const=False)
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::LogicalChannelConfig::prioritizedBitRateKbps [variable]
    cls.add_instance_attribute('prioritizedBitRateKbps', 'uint16_t', is_const=False)
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::LogicalChannelConfig::priority [variable]
    cls.add_instance_attribute('priority', 'uint8_t', is_const=False)
    return

def register_Ns3NrUeCmacSapProviderRachConfig_methods(root_module, cls):
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::RachConfig::RachConfig() [constructor]
    cls.add_constructor([])
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::RachConfig::RachConfig(ns3::NrUeCmacSapProvider::RachConfig const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeCmacSapProvider::RachConfig const &', 'arg0')])
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::RachConfig::numberOfRaPreambles [variable]
    cls.add_instance_attribute('numberOfRaPreambles', 'uint8_t', is_const=False)
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::RachConfig::preambleTransMax [variable]
    cls.add_instance_attribute('preambleTransMax', 'uint8_t', is_const=False)
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapProvider::RachConfig::raResponseWindowSize [variable]
    cls.add_instance_attribute('raResponseWindowSize', 'uint8_t', is_const=False)
    return

def register_Ns3NrUeCmacSapUser_methods(root_module, cls):
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapUser::NrUeCmacSapUser() [constructor]
    cls.add_constructor([])
    ## nr-ue-cmac-sap.h (module 'nr'): ns3::NrUeCmacSapUser::NrUeCmacSapUser(ns3::NrUeCmacSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeCmacSapUser const &', 'arg0')])
    ## nr-ue-cmac-sap.h (module 'nr'): void ns3::NrUeCmacSapUser::NotifyRandomAccessFailed() [member function]
    cls.add_method('NotifyRandomAccessFailed', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cmac-sap.h (module 'nr'): void ns3::NrUeCmacSapUser::NotifyRandomAccessSuccessful() [member function]
    cls.add_method('NotifyRandomAccessSuccessful', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ##yjshin
    cls.add_method('SendServiceRequest', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cmac-sap.h (module 'nr'): void ns3::NrUeCmacSapUser::SetTemporaryCellRnti(uint16_t rnti) [member function]
    cls.add_method('SetTemporaryCellRnti', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrUeConfig_t_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    ## nr-common.h (module 'nr'): ns3::NrUeConfig_t::NrUeConfig_t(ns3::NrUeConfig_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeConfig_t const &', 'arg0')])
    ## nr-common.h (module 'nr'): ns3::NrUeConfig_t::NrUeConfig_t() [constructor]
    cls.add_constructor([])
    ## nr-common.h (module 'nr'): ns3::NrUeConfig_t::m_reconfigureFlag [variable]
    cls.add_instance_attribute('m_reconfigureFlag', 'bool', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrUeConfig_t::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrUeConfig_t::m_srsConfigurationIndex [variable]
    cls.add_instance_attribute('m_srsConfigurationIndex', 'uint16_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrUeConfig_t::m_transmissionMode [variable]
    cls.add_instance_attribute('m_transmissionMode', 'uint8_t', is_const=False)
    return

def register_Ns3NrUeCphySapProvider_methods(root_module, cls):
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapProvider::NrUeCphySapProvider() [constructor]
    cls.add_constructor([])
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapProvider::NrUeCphySapProvider(ns3::NrUeCphySapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeCphySapProvider const &', 'arg0')])
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapProvider::ConfigureReferenceSignalPower(int8_t referenceSignalPower) [member function]
    cls.add_method('ConfigureReferenceSignalPower', 
                   'void', 
                   [param('int8_t', 'referenceSignalPower')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapProvider::ConfigureUplink(uint16_t ulEarfcn, uint8_t ulBandwidth) [member function]
    cls.add_method('ConfigureUplink', 
                   'void', 
                   [param('uint16_t', 'ulEarfcn'), param('uint8_t', 'ulBandwidth')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapProvider::Reset() [member function]
    cls.add_method('Reset', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapProvider::SetDlBandwidth(uint8_t dlBandwidth) [member function]
    cls.add_method('SetDlBandwidth', 
                   'void', 
                   [param('uint8_t', 'dlBandwidth')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapProvider::SetPa(double pa) [member function]
    cls.add_method('SetPa', 
                   'void', 
                   [param('double', 'pa')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapProvider::SetRnti(uint16_t rnti) [member function]
    cls.add_method('SetRnti', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapProvider::SetSrsConfigurationIndex(uint16_t srcCi) [member function]
    cls.add_method('SetSrsConfigurationIndex', 
                   'void', 
                   [param('uint16_t', 'srcCi')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapProvider::SetTransmissionMode(uint8_t txMode) [member function]
    cls.add_method('SetTransmissionMode', 
                   'void', 
                   [param('uint8_t', 'txMode')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapProvider::StartCellSearch(uint16_t dlEarfcn) [member function]
    cls.add_method('StartCellSearch', 
                   'void', 
                   [param('uint16_t', 'dlEarfcn')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapProvider::SynchronizeWithEnb(uint16_t cellId) [member function]
    cls.add_method('SynchronizeWithEnb', 
                   'void', 
                   [param('uint16_t', 'cellId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapProvider::SynchronizeWithEnb(uint16_t cellId, uint16_t dlEarfcn) [member function]
    cls.add_method('SynchronizeWithEnb', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint16_t', 'dlEarfcn')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrUeCphySapUser_methods(root_module, cls):
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapUser::NrUeCphySapUser() [constructor]
    cls.add_constructor([])
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapUser::NrUeCphySapUser(ns3::NrUeCphySapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeCphySapUser const &', 'arg0')])
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapUser::RecvMasterInformationBlock(uint16_t cellId, ns3::NrRrcSap::MasterInformationBlock mib) [member function]
    cls.add_method('RecvMasterInformationBlock', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('ns3::NrRrcSap::MasterInformationBlock', 'mib')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapUser::RecvSystemInformationBlockType1(uint16_t cellId, ns3::NrRrcSap::SystemInformationBlockType1 sib1) [member function]
    cls.add_method('RecvSystemInformationBlockType1', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('ns3::NrRrcSap::SystemInformationBlockType1', 'sib1')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-cphy-sap.h (module 'nr'): void ns3::NrUeCphySapUser::ReportUeMeasurements(ns3::NrUeCphySapUser::UeMeasurementsParameters params) [member function]
    cls.add_method('ReportUeMeasurements', 
                   'void', 
                   [param('ns3::NrUeCphySapUser::UeMeasurementsParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrUeCphySapUserUeMeasurementsElement_methods(root_module, cls):
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapUser::UeMeasurementsElement::UeMeasurementsElement() [constructor]
    cls.add_constructor([])
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapUser::UeMeasurementsElement::UeMeasurementsElement(ns3::NrUeCphySapUser::UeMeasurementsElement const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeCphySapUser::UeMeasurementsElement const &', 'arg0')])
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapUser::UeMeasurementsElement::m_cellId [variable]
    cls.add_instance_attribute('m_cellId', 'uint16_t', is_const=False)
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapUser::UeMeasurementsElement::m_rsrp [variable]
    cls.add_instance_attribute('m_rsrp', 'double', is_const=False)
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapUser::UeMeasurementsElement::m_rsrq [variable]
    cls.add_instance_attribute('m_rsrq', 'double', is_const=False)
    return

def register_Ns3NrUeCphySapUserUeMeasurementsParameters_methods(root_module, cls):
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapUser::UeMeasurementsParameters::UeMeasurementsParameters() [constructor]
    cls.add_constructor([])
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapUser::UeMeasurementsParameters::UeMeasurementsParameters(ns3::NrUeCphySapUser::UeMeasurementsParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeCphySapUser::UeMeasurementsParameters const &', 'arg0')])
    ## nr-ue-cphy-sap.h (module 'nr'): ns3::NrUeCphySapUser::UeMeasurementsParameters::m_ueMeasurementsList [variable]
    cls.add_instance_attribute('m_ueMeasurementsList', 'std::vector< ns3::NrUeCphySapUser::UeMeasurementsElement >', is_const=False)
    return

def register_Ns3NrUePhySapProvider_methods(root_module, cls):
    ## nr-ue-phy-sap.h (module 'nr'): ns3::NrUePhySapProvider::NrUePhySapProvider() [constructor]
    cls.add_constructor([])
    ## nr-ue-phy-sap.h (module 'nr'): ns3::NrUePhySapProvider::NrUePhySapProvider(ns3::NrUePhySapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUePhySapProvider const &', 'arg0')])
    ## nr-ue-phy-sap.h (module 'nr'): void ns3::NrUePhySapProvider::SendNrControlMessage(ns3::Ptr<ns3::NrControlMessage> msg) [member function]
    cls.add_method('SendNrControlMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrControlMessage >', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-phy-sap.h (module 'nr'): void ns3::NrUePhySapProvider::SendMacPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('SendMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-phy-sap.h (module 'nr'): void ns3::NrUePhySapProvider::SendRachPreamble(uint32_t prachId, uint32_t raRnti) [member function]
    cls.add_method('SendRachPreamble', 
                   'void', 
                   [param('uint32_t', 'prachId'), param('uint32_t', 'raRnti')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrUePhySapUser_methods(root_module, cls):
    ## nr-ue-phy-sap.h (module 'nr'): ns3::NrUePhySapUser::NrUePhySapUser() [constructor]
    cls.add_constructor([])
    ## nr-ue-phy-sap.h (module 'nr'): ns3::NrUePhySapUser::NrUePhySapUser(ns3::NrUePhySapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUePhySapUser const &', 'arg0')])
    ## nr-ue-phy-sap.h (module 'nr'): void ns3::NrUePhySapUser::ReceiveNrControlMessage(ns3::Ptr<ns3::NrControlMessage> msg) [member function]
    cls.add_method('ReceiveNrControlMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrControlMessage >', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-phy-sap.h (module 'nr'): void ns3::NrUePhySapUser::ReceivePhyPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('ReceivePhyPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ue-phy-sap.h (module 'nr'): void ns3::NrUePhySapUser::SubframeIndication(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('SubframeIndication', 
                   'void', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrUeRrcSapProvider_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapProvider::NrUeRrcSapProvider() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapProvider::NrUeRrcSapProvider(ns3::NrUeRrcSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeRrcSapProvider const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapProvider::CompleteSetup(ns3::NrUeRrcSapProvider::CompleteSetupParameters params) [member function]
    cls.add_method('CompleteSetup', 
                   'void', 
                   [param('ns3::NrUeRrcSapProvider::CompleteSetupParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapProvider::RecvRrcConnectionReconfiguration(ns3::NrRrcSap::RrcConnectionReconfiguration msg) [member function]
    cls.add_method('RecvRrcConnectionReconfiguration', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReconfiguration', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapProvider::RecvRrcConnectionReestablishment(ns3::NrRrcSap::RrcConnectionReestablishment msg) [member function]
    cls.add_method('RecvRrcConnectionReestablishment', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReestablishment', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapProvider::RecvRrcConnectionReestablishmentReject(ns3::NrRrcSap::RrcConnectionReestablishmentReject msg) [member function]
    cls.add_method('RecvRrcConnectionReestablishmentReject', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReestablishmentReject', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapProvider::RecvRrcConnectionReject(ns3::NrRrcSap::RrcConnectionReject msg) [member function]
    cls.add_method('RecvRrcConnectionReject', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReject', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapProvider::RecvRrcConnectionRelease(ns3::NrRrcSap::RrcConnectionRelease msg) [member function]
    cls.add_method('RecvRrcConnectionRelease', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionRelease', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapProvider::RecvRrcConnectionSetup(ns3::NrRrcSap::RrcConnectionSetup msg) [member function]
    cls.add_method('RecvRrcConnectionSetup', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionSetup', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapProvider::RecvSystemInformation(ns3::NrRrcSap::SystemInformation msg) [member function]
    cls.add_method('RecvSystemInformation', 
                   'void', 
                   [param('ns3::NrRrcSap::SystemInformation', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrUeRrcSapProviderCompleteSetupParameters_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapProvider::CompleteSetupParameters::CompleteSetupParameters() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapProvider::CompleteSetupParameters::CompleteSetupParameters(ns3::NrUeRrcSapProvider::CompleteSetupParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeRrcSapProvider::CompleteSetupParameters const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapProvider::CompleteSetupParameters::srb0SapUser [variable]
    cls.add_instance_attribute('srb0SapUser', 'ns3::NrRlcSapUser *', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapProvider::CompleteSetupParameters::srb1SapUser [variable]
    cls.add_instance_attribute('srb1SapUser', 'ns3::NrPdcpSapUser *', is_const=False)
    return

def register_Ns3NrUeRrcSapUser_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapUser::NrUeRrcSapUser() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapUser::NrUeRrcSapUser(ns3::NrUeRrcSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeRrcSapUser const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapUser::SendMeasurementReport(ns3::NrRrcSap::MeasurementReport msg) [member function]
    cls.add_method('SendMeasurementReport', 
                   'void', 
                   [param('ns3::NrRrcSap::MeasurementReport', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapUser::SendRrcConnectionReconfigurationCompleted(ns3::NrRrcSap::RrcConnectionReconfigurationCompleted msg) [member function]
    cls.add_method('SendRrcConnectionReconfigurationCompleted', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReconfigurationCompleted', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapUser::SendRrcConnectionReestablishmentComplete(ns3::NrRrcSap::RrcConnectionReestablishmentComplete msg) [member function]
    cls.add_method('SendRrcConnectionReestablishmentComplete', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReestablishmentComplete', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapUser::SendRrcConnectionReestablishmentRequest(ns3::NrRrcSap::RrcConnectionReestablishmentRequest msg) [member function]
    cls.add_method('SendRrcConnectionReestablishmentRequest', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReestablishmentRequest', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapUser::SendRrcConnectionRequest(ns3::NrRrcSap::RrcConnectionRequest msg) [member function]
    cls.add_method('SendRrcConnectionRequest', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionRequest', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapUser::SendRrcConnectionSetupCompleted(ns3::NrRrcSap::RrcConnectionSetupCompleted msg) [member function]
    cls.add_method('SendRrcConnectionSetupCompleted', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionSetupCompleted', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrUeRrcSapUser::Setup(ns3::NrUeRrcSapUser::SetupParameters params) [member function]
    cls.add_method('Setup', 
                   'void', 
                   [param('ns3::NrUeRrcSapUser::SetupParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrUeRrcSapUserSetupParameters_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapUser::SetupParameters::SetupParameters() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapUser::SetupParameters::SetupParameters(ns3::NrUeRrcSapUser::SetupParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeRrcSapUser::SetupParameters const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapUser::SetupParameters::srb0SapProvider [variable]
    cls.add_instance_attribute('srb0SapProvider', 'ns3::NrRlcSapProvider *', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrUeRrcSapUser::SetupParameters::srb1SapProvider [variable]
    cls.add_instance_attribute('srb1SapProvider', 'ns3::NrPdcpSapProvider *', is_const=False)
    return

def register_Ns3Mac48Address_methods(root_module, cls):
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(ns3::Mac48Address const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Mac48Address const &', 'arg0')])
    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address() [constructor]
    cls.add_constructor([])
    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(char const * str) [constructor]
    cls.add_constructor([param('char const *', 'str')])
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::Allocate() [member function]
    cls.add_method('Allocate', 
                   'ns3::Mac48Address', 
                   [], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Mac48Address', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyFrom(uint8_t const * buffer) [member function]
    cls.add_method('CopyFrom', 
                   'void', 
                   [param('uint8_t const *', 'buffer')])
    ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyTo(uint8_t * buffer) const [member function]
    cls.add_method('CopyTo', 
                   'void', 
                   [param('uint8_t *', 'buffer')], 
                   is_const=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetBroadcast() [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Mac48Address', 
                   [], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv4Address address) [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Mac48Address', 
                   [param('ns3::Ipv4Address', 'address')], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv6Address address) [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Mac48Address', 
                   [param('ns3::Ipv6Address', 'address')], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast6Prefix() [member function]
    cls.add_method('GetMulticast6Prefix', 
                   'ns3::Mac48Address', 
                   [], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticastPrefix() [member function]
    cls.add_method('GetMulticastPrefix', 
                   'ns3::Mac48Address', 
                   [], 
                   is_static=True)
    ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsGroup() const [member function]
    cls.add_method('IsGroup', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mac48-address.h (module 'network'): static bool ns3::Mac48Address::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    return

def register_Ns3MacCeListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::MacCeListElement_s::MacCeListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::MacCeListElement_s::MacCeListElement_s(ns3::MacCeListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::MacCeListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::MacCeListElement_s::m_macCeType [variable]
    cls.add_instance_attribute('m_macCeType', 'ns3::MacCeListElement_s::MacCeType_e', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::MacCeListElement_s::m_macCeValue [variable]
    cls.add_instance_attribute('m_macCeValue', 'ns3::MacCeValue_u', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::MacCeListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3MacCeValue_u_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::MacCeValue_u::MacCeValue_u() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::MacCeValue_u::MacCeValue_u(ns3::MacCeValue_u const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::MacCeValue_u const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::MacCeValue_u::m_bufferStatus [variable]
    cls.add_instance_attribute('m_bufferStatus', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::MacCeValue_u::m_crnti [variable]
    cls.add_instance_attribute('m_crnti', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::MacCeValue_u::m_phr [variable]
    cls.add_instance_attribute('m_phr', 'uint8_t', is_const=False)
    return

def register_Ns3Names_methods(root_module, cls):
    ## names.h (module 'core'): ns3::Names::Names() [constructor]
    cls.add_constructor([])
    ## names.h (module 'core'): ns3::Names::Names(ns3::Names const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Names const &', 'arg0')])
    ## names.h (module 'core'): static void ns3::Names::Add(std::string name, ns3::Ptr<ns3::Object> object) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::Ptr< ns3::Object >', 'object')], 
                   is_static=True)
    ## names.h (module 'core'): static void ns3::Names::Add(std::string path, std::string name, ns3::Ptr<ns3::Object> object) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'path'), param('std::string', 'name'), param('ns3::Ptr< ns3::Object >', 'object')], 
                   is_static=True)
    ## names.h (module 'core'): static void ns3::Names::Add(ns3::Ptr<ns3::Object> context, std::string name, ns3::Ptr<ns3::Object> object) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::Object >', 'context'), param('std::string', 'name'), param('ns3::Ptr< ns3::Object >', 'object')], 
                   is_static=True)
    ## names.h (module 'core'): static void ns3::Names::Clear() [member function]
    cls.add_method('Clear', 
                   'void', 
                   [], 
                   is_static=True)
    ## names.h (module 'core'): static std::string ns3::Names::FindName(ns3::Ptr<ns3::Object> object) [member function]
    cls.add_method('FindName', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::Object >', 'object')], 
                   is_static=True)
    ## names.h (module 'core'): static std::string ns3::Names::FindPath(ns3::Ptr<ns3::Object> object) [member function]
    cls.add_method('FindPath', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::Object >', 'object')], 
                   is_static=True)
    ## names.h (module 'core'): static void ns3::Names::Rename(std::string oldpath, std::string newname) [member function]
    cls.add_method('Rename', 
                   'void', 
                   [param('std::string', 'oldpath'), param('std::string', 'newname')], 
                   is_static=True)
    ## names.h (module 'core'): static void ns3::Names::Rename(std::string path, std::string oldname, std::string newname) [member function]
    cls.add_method('Rename', 
                   'void', 
                   [param('std::string', 'path'), param('std::string', 'oldname'), param('std::string', 'newname')], 
                   is_static=True)
    ## names.h (module 'core'): static void ns3::Names::Rename(ns3::Ptr<ns3::Object> context, std::string oldname, std::string newname) [member function]
    cls.add_method('Rename', 
                   'void', 
                   [param('ns3::Ptr< ns3::Object >', 'context'), param('std::string', 'oldname'), param('std::string', 'newname')], 
                   is_static=True)
    return

def register_Ns3NetDeviceContainer_methods(root_module, cls):
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(ns3::NetDeviceContainer const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NetDeviceContainer const &', 'arg0')])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer() [constructor]
    cls.add_constructor([])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(ns3::Ptr<ns3::NetDevice> dev) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::NetDevice >', 'dev')])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(std::string devName) [constructor]
    cls.add_constructor([param('std::string', 'devName')])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(ns3::NetDeviceContainer const & a, ns3::NetDeviceContainer const & b) [constructor]
    cls.add_constructor([param('ns3::NetDeviceContainer const &', 'a'), param('ns3::NetDeviceContainer const &', 'b')])
    ## net-device-container.h (module 'network'): void ns3::NetDeviceContainer::Add(ns3::NetDeviceContainer other) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'other')])
    ## net-device-container.h (module 'network'): void ns3::NetDeviceContainer::Add(ns3::Ptr<ns3::NetDevice> device) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'device')])
    ## net-device-container.h (module 'network'): void ns3::NetDeviceContainer::Add(std::string deviceName) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'deviceName')])
    ## net-device-container.h (module 'network'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::NetDevice>*,std::vector<ns3::Ptr<ns3::NetDevice>, std::allocator<ns3::Ptr<ns3::NetDevice> > > > ns3::NetDeviceContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::NetDevice > const, std::vector< ns3::Ptr< ns3::NetDevice > > >', 
                   [], 
                   is_const=True)
    ## net-device-container.h (module 'network'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::NetDevice>*,std::vector<ns3::Ptr<ns3::NetDevice>, std::allocator<ns3::Ptr<ns3::NetDevice> > > > ns3::NetDeviceContainer::End() const [member function]
    cls.add_method('End', 
                   '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::NetDevice > const, std::vector< ns3::Ptr< ns3::NetDevice > > >', 
                   [], 
                   is_const=True)
    ## net-device-container.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::NetDeviceContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## net-device-container.h (module 'network'): uint32_t ns3::NetDeviceContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3NodeContainer_methods(root_module, cls):
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'arg0')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer() [constructor]
    cls.add_constructor([])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::Ptr<ns3::Node> node) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::Node >', 'node')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(std::string nodeName) [constructor]
    cls.add_constructor([param('std::string', 'nodeName')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c, ns3::NodeContainer const & d) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c'), param('ns3::NodeContainer const &', 'd')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c, ns3::NodeContainer const & d, ns3::NodeContainer const & e) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c'), param('ns3::NodeContainer const &', 'd'), param('ns3::NodeContainer const &', 'e')])
    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(ns3::NodeContainer other) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::NodeContainer', 'other')])
    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(std::string nodeName) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'nodeName')])
    ## node-container.h (module 'network'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Node>*,std::vector<ns3::Ptr<ns3::Node>, std::allocator<ns3::Ptr<ns3::Node> > > > ns3::NodeContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node > const, std::vector< ns3::Ptr< ns3::Node > > >', 
                   [], 
                   is_const=True)
    ## node-container.h (module 'network'): void ns3::NodeContainer::Create(uint32_t n) [member function]
    cls.add_method('Create', 
                   'void', 
                   [param('uint32_t', 'n')])
    ## node-container.h (module 'network'): void ns3::NodeContainer::Create(uint32_t n, uint32_t systemId) [member function]
    cls.add_method('Create', 
                   'void', 
                   [param('uint32_t', 'n'), param('uint32_t', 'systemId')])
    ## node-container.h (module 'network'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Node>*,std::vector<ns3::Ptr<ns3::Node>, std::allocator<ns3::Ptr<ns3::Node> > > > ns3::NodeContainer::End() const [member function]
    cls.add_method('End', 
                   '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node > const, std::vector< ns3::Ptr< ns3::Node > > >', 
                   [], 
                   is_const=True)
    ## node-container.h (module 'network'): ns3::Ptr<ns3::Node> ns3::NodeContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::Node >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## node-container.h (module 'network'): static ns3::NodeContainer ns3::NodeContainer::GetGlobal() [member function]
    cls.add_method('GetGlobal', 
                   'ns3::NodeContainer', 
                   [], 
                   is_static=True)
    ## node-container.h (module 'network'): uint32_t ns3::NodeContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3ObjectBase_methods(root_module, cls):
    ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase() [constructor]
    cls.add_constructor([])
    ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase(ns3::ObjectBase const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::ObjectBase const &', 'arg0')])
    ## object-base.h (module 'core'): void ns3::ObjectBase::GetAttribute(std::string name, ns3::AttributeValue & value) const [member function]
    cls.add_method('GetAttribute', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue &', 'value')], 
                   is_const=True)
    ## object-base.h (module 'core'): bool ns3::ObjectBase::GetAttributeFailSafe(std::string name, ns3::AttributeValue & value) const [member function]
    cls.add_method('GetAttributeFailSafe', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::AttributeValue &', 'value')], 
                   is_const=True)
    ## object-base.h (module 'core'): ns3::TypeId ns3::ObjectBase::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## object-base.h (module 'core'): static ns3::TypeId ns3::ObjectBase::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## object-base.h (module 'core'): void ns3::ObjectBase::SetAttribute(std::string name, ns3::AttributeValue const & value) [member function]
    cls.add_method('SetAttribute', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::SetAttributeFailSafe(std::string name, ns3::AttributeValue const & value) [member function]
    cls.add_method('SetAttributeFailSafe', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceConnect(std::string name, std::string context, ns3::CallbackBase const & cb) [member function]
    cls.add_method('TraceConnect', 
                   'bool', 
                   [param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceConnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('TraceConnectWithoutContext', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceDisconnect(std::string name, std::string context, ns3::CallbackBase const & cb) [member function]
    cls.add_method('TraceDisconnect', 
                   'bool', 
                   [param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceDisconnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('TraceDisconnectWithoutContext', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## object-base.h (module 'core'): void ns3::ObjectBase::ConstructSelf(ns3::AttributeConstructionList const & attributes) [member function]
    cls.add_method('ConstructSelf', 
                   'void', 
                   [param('ns3::AttributeConstructionList const &', 'attributes')], 
                   visibility='protected')
    ## object-base.h (module 'core'): void ns3::ObjectBase::NotifyConstructionCompleted() [member function]
    cls.add_method('NotifyConstructionCompleted', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3ObjectDeleter_methods(root_module, cls):
    ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter() [constructor]
    cls.add_constructor([])
    ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter(ns3::ObjectDeleter const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::ObjectDeleter const &', 'arg0')])
    ## object.h (module 'core'): static void ns3::ObjectDeleter::Delete(ns3::Object * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::Object *', 'object')], 
                   is_static=True)
    return

def register_Ns3ObjectFactory_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(ns3::ObjectFactory const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::ObjectFactory const &', 'arg0')])
    ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory() [constructor]
    cls.add_constructor([])
    ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(std::string typeId) [constructor]
    cls.add_constructor([param('std::string', 'typeId')])
    ## object-factory.h (module 'core'): ns3::Ptr<ns3::Object> ns3::ObjectFactory::Create() const [member function]
    cls.add_method('Create', 
                   'ns3::Ptr< ns3::Object >', 
                   [], 
                   is_const=True)
    ## object-factory.h (module 'core'): ns3::TypeId ns3::ObjectFactory::GetTypeId() const [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    ## object-factory.h (module 'core'): void ns3::ObjectFactory::Set(std::string name, ns3::AttributeValue const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(ns3::TypeId tid) [member function]
    cls.add_method('SetTypeId', 
                   'void', 
                   [param('ns3::TypeId', 'tid')])
    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(char const * tid) [member function]
    cls.add_method('SetTypeId', 
                   'void', 
                   [param('char const *', 'tid')])
    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(std::string tid) [member function]
    cls.add_method('SetTypeId', 
                   'void', 
                   [param('std::string', 'tid')])
    return

def register_Ns3PacketMetadata_methods(root_module, cls):
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(uint64_t uid, uint32_t size) [constructor]
    cls.add_constructor([param('uint64_t', 'uid'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(ns3::PacketMetadata const & o) [copy constructor]
    cls.add_constructor([param('ns3::PacketMetadata const &', 'o')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddAtEnd(ns3::PacketMetadata const & o) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('ns3::PacketMetadata const &', 'o')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddHeader(ns3::Header const & header, uint32_t size) [member function]
    cls.add_method('AddHeader', 
                   'void', 
                   [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddPaddingAtEnd(uint32_t end) [member function]
    cls.add_method('AddPaddingAtEnd', 
                   'void', 
                   [param('uint32_t', 'end')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
    cls.add_method('AddTrailer', 
                   'void', 
                   [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::PacketMetadata::BeginItem(ns3::Buffer buffer) const [member function]
    cls.add_method('BeginItem', 
                   'ns3::PacketMetadata::ItemIterator', 
                   [param('ns3::Buffer', 'buffer')], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata ns3::PacketMetadata::CreateFragment(uint32_t start, uint32_t end) const [member function]
    cls.add_method('CreateFragment', 
                   'ns3::PacketMetadata', 
                   [param('uint32_t', 'start'), param('uint32_t', 'end')], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::Enable() [member function]
    cls.add_method('Enable', 
                   'void', 
                   [], 
                   is_static=True)
    ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::EnableChecking() [member function]
    cls.add_method('EnableChecking', 
                   'void', 
                   [], 
                   is_static=True)
    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): uint64_t ns3::PacketMetadata::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtEnd(uint32_t end) [member function]
    cls.add_method('RemoveAtEnd', 
                   'void', 
                   [param('uint32_t', 'end')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtStart(uint32_t start) [member function]
    cls.add_method('RemoveAtStart', 
                   'void', 
                   [param('uint32_t', 'start')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveHeader(ns3::Header const & header, uint32_t size) [member function]
    cls.add_method('RemoveHeader', 
                   'void', 
                   [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
    cls.add_method('RemoveTrailer', 
                   'void', 
                   [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    return

def register_Ns3PacketMetadataItem_methods(root_module, cls):
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item() [constructor]
    cls.add_constructor([])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item(ns3::PacketMetadata::Item const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::PacketMetadata::Item const &', 'arg0')])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::current [variable]
    cls.add_instance_attribute('current', 'ns3::Buffer::Iterator', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentSize [variable]
    cls.add_instance_attribute('currentSize', 'uint32_t', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromEnd [variable]
    cls.add_instance_attribute('currentTrimedFromEnd', 'uint32_t', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromStart [variable]
    cls.add_instance_attribute('currentTrimedFromStart', 'uint32_t', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::isFragment [variable]
    cls.add_instance_attribute('isFragment', 'bool', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::tid [variable]
    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
    return

def register_Ns3PacketMetadataItemIterator_methods(root_module, cls):
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata::ItemIterator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::PacketMetadata::ItemIterator const &', 'arg0')])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata const * metadata, ns3::Buffer buffer) [constructor]
    cls.add_constructor([param('ns3::PacketMetadata const *', 'metadata'), param('ns3::Buffer', 'buffer')])
    ## packet-metadata.h (module 'network'): bool ns3::PacketMetadata::ItemIterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item ns3::PacketMetadata::ItemIterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::PacketMetadata::Item', 
                   [])
    return

def register_Ns3PacketTagIterator_methods(root_module, cls):
    ## packet.h (module 'network'): ns3::PacketTagIterator::PacketTagIterator(ns3::PacketTagIterator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::PacketTagIterator const &', 'arg0')])
    ## packet.h (module 'network'): bool ns3::PacketTagIterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::PacketTagIterator::Item ns3::PacketTagIterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::PacketTagIterator::Item', 
                   [])
    return

def register_Ns3PacketTagIteratorItem_methods(root_module, cls):
    ## packet.h (module 'network'): ns3::PacketTagIterator::Item::Item(ns3::PacketTagIterator::Item const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::PacketTagIterator::Item const &', 'arg0')])
    ## packet.h (module 'network'): void ns3::PacketTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
    cls.add_method('GetTag', 
                   'void', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::TypeId ns3::PacketTagIterator::Item::GetTypeId() const [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    return

def register_Ns3PacketTagList_methods(root_module, cls):
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList() [constructor]
    cls.add_constructor([])
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList(ns3::PacketTagList const & o) [copy constructor]
    cls.add_constructor([param('ns3::PacketTagList const &', 'o')])
    ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::Add(ns3::Tag const & tag) const [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Tag const &', 'tag')], 
                   is_const=True)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData const * ns3::PacketTagList::Head() const [member function]
    cls.add_method('Head', 
                   'ns3::PacketTagList::TagData const *', 
                   [], 
                   is_const=True)
    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Peek(ns3::Tag & tag) const [member function]
    cls.add_method('Peek', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Remove(ns3::Tag & tag) [member function]
    cls.add_method('Remove', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')])
    ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::RemoveAll() [member function]
    cls.add_method('RemoveAll', 
                   'void', 
                   [])
    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Replace(ns3::Tag & tag) [member function]
    cls.add_method('Replace', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')])
    return

def register_Ns3PacketTagListTagData_methods(root_module, cls):
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData() [constructor]
    cls.add_constructor([])
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData(ns3::PacketTagList::TagData const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::PacketTagList::TagData const &', 'arg0')])
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::count [variable]
    cls.add_instance_attribute('count', 'uint32_t', is_const=False)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::data [variable]
    cls.add_instance_attribute('data', 'uint8_t [ 21 ]', is_const=False)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::next [variable]
    cls.add_instance_attribute('next', 'ns3::PacketTagList::TagData *', is_const=False)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::tid [variable]
    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
    return

def register_Ns3PagingInfoListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::PagingInfoListElement_s::PagingInfoListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::PagingInfoListElement_s::PagingInfoListElement_s(ns3::PagingInfoListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::PagingInfoListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::PagingInfoListElement_s::m_pagingIndex [variable]
    cls.add_instance_attribute('m_pagingIndex', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::PagingInfoListElement_s::m_pagingMessageSize [variable]
    cls.add_instance_attribute('m_pagingMessageSize', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::PagingInfoListElement_s::m_pagingSubframe [variable]
    cls.add_instance_attribute('m_pagingSubframe', 'uint8_t', is_const=False)
    return

def register_Ns3ParameterLogger_methods(root_module, cls):
    ## log.h (module 'core'): ns3::ParameterLogger::ParameterLogger(ns3::ParameterLogger const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::ParameterLogger const &', 'arg0')])
    ## log.h (module 'core'): ns3::ParameterLogger::ParameterLogger(std::ostream & os) [constructor]
    cls.add_constructor([param('std::ostream &', 'os')])
    return

def register_Ns3PhichListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::PhichListElement_s::PhichListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::PhichListElement_s::PhichListElement_s(ns3::PhichListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::PhichListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::PhichListElement_s::m_phich [variable]
    cls.add_instance_attribute('m_phich', 'ns3::PhichListElement_s::Phich_e', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::PhichListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3NrPhyReceptionStatParameters_methods(root_module, cls):
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters::NrPhyReceptionStatParameters() [constructor]
    cls.add_constructor([])
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters::NrPhyReceptionStatParameters(ns3::NrPhyReceptionStatParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPhyReceptionStatParameters const &', 'arg0')])
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters::m_cellId [variable]
    cls.add_instance_attribute('m_cellId', 'uint16_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters::m_correctness [variable]
    cls.add_instance_attribute('m_correctness', 'uint8_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters::m_imsi [variable]
    cls.add_instance_attribute('m_imsi', 'uint64_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters::m_layer [variable]
    cls.add_instance_attribute('m_layer', 'uint8_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters::m_mcs [variable]
    cls.add_instance_attribute('m_mcs', 'uint8_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters::m_ndi [variable]
    cls.add_instance_attribute('m_ndi', 'uint8_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters::m_rv [variable]
    cls.add_instance_attribute('m_rv', 'uint8_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters::m_size [variable]
    cls.add_instance_attribute('m_size', 'uint16_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters::m_timestamp [variable]
    cls.add_instance_attribute('m_timestamp', 'int64_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyReceptionStatParameters::m_txMode [variable]
    cls.add_instance_attribute('m_txMode', 'uint8_t', is_const=False)
    return

def register_Ns3NrPhyTransmissionStatParameters_methods(root_module, cls):
    ## nr-common.h (module 'nr'): ns3::NrPhyTransmissionStatParameters::NrPhyTransmissionStatParameters() [constructor]
    cls.add_constructor([])
    ## nr-common.h (module 'nr'): ns3::NrPhyTransmissionStatParameters::NrPhyTransmissionStatParameters(ns3::NrPhyTransmissionStatParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPhyTransmissionStatParameters const &', 'arg0')])
    ## nr-common.h (module 'nr'): ns3::NrPhyTransmissionStatParameters::m_cellId [variable]
    cls.add_instance_attribute('m_cellId', 'uint16_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyTransmissionStatParameters::m_imsi [variable]
    cls.add_instance_attribute('m_imsi', 'uint64_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyTransmissionStatParameters::m_layer [variable]
    cls.add_instance_attribute('m_layer', 'uint8_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyTransmissionStatParameters::m_mcs [variable]
    cls.add_instance_attribute('m_mcs', 'uint8_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyTransmissionStatParameters::m_ndi [variable]
    cls.add_instance_attribute('m_ndi', 'uint8_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyTransmissionStatParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyTransmissionStatParameters::m_rv [variable]
    cls.add_instance_attribute('m_rv', 'uint8_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyTransmissionStatParameters::m_size [variable]
    cls.add_instance_attribute('m_size', 'uint16_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyTransmissionStatParameters::m_timestamp [variable]
    cls.add_instance_attribute('m_timestamp', 'int64_t', is_const=False)
    ## nr-common.h (module 'nr'): ns3::NrPhyTransmissionStatParameters::m_txMode [variable]
    cls.add_instance_attribute('m_txMode', 'uint8_t', is_const=False)
    return

def register_Ns3RachListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::RachListElement_s::RachListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::RachListElement_s::RachListElement_s(ns3::RachListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RachListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::RachListElement_s::m_estimatedSize [variable]
    cls.add_instance_attribute('m_estimatedSize', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::RachListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3NrRadioBearerStatsConnector_methods(root_module, cls):
    ## nr-radio-bearer-stats-connector.h (module 'nr'): ns3::NrRadioBearerStatsConnector::NrRadioBearerStatsConnector(ns3::NrRadioBearerStatsConnector const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRadioBearerStatsConnector const &', 'arg0')])
    ## nr-radio-bearer-stats-connector.h (module 'nr'): ns3::NrRadioBearerStatsConnector::NrRadioBearerStatsConnector() [constructor]
    cls.add_constructor([])
    ## nr-radio-bearer-stats-connector.h (module 'nr'): void ns3::NrRadioBearerStatsConnector::EnablePdcpStats(ns3::Ptr<ns3::NrRadioBearerStatsCalculator> pdcpStats) [member function]
    cls.add_method('EnablePdcpStats', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrRadioBearerStatsCalculator >', 'pdcpStats')])
    ## nr-radio-bearer-stats-connector.h (module 'nr'): void ns3::NrRadioBearerStatsConnector::EnableRlcStats(ns3::Ptr<ns3::NrRadioBearerStatsCalculator> rlcStats) [member function]
    cls.add_method('EnableRlcStats', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrRadioBearerStatsCalculator >', 'rlcStats')])
    ## nr-radio-bearer-stats-connector.h (module 'nr'): void ns3::NrRadioBearerStatsConnector::EnsureConnected() [member function]
    cls.add_method('EnsureConnected', 
                   'void', 
                   [])
    ## nr-radio-bearer-stats-connector.h (module 'nr'): static void ns3::NrRadioBearerStatsConnector::NotifyConnectionReconfigurationEnb(ns3::NrRadioBearerStatsConnector * c, std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti) [member function]
    cls.add_method('NotifyConnectionReconfigurationEnb', 
                   'void', 
                   [param('ns3::NrRadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti')], 
                   is_static=True)
    ## nr-radio-bearer-stats-connector.h (module 'nr'): static void ns3::NrRadioBearerStatsConnector::NotifyConnectionReconfigurationUe(ns3::NrRadioBearerStatsConnector * c, std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti) [member function]
    cls.add_method('NotifyConnectionReconfigurationUe', 
                   'void', 
                   [param('ns3::NrRadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti')], 
                   is_static=True)
    ## nr-radio-bearer-stats-connector.h (module 'nr'): static void ns3::NrRadioBearerStatsConnector::NotifyConnectionSetupUe(ns3::NrRadioBearerStatsConnector * c, std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti) [member function]
    cls.add_method('NotifyConnectionSetupUe', 
                   'void', 
                   [param('ns3::NrRadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti')], 
                   is_static=True)
    ## nr-radio-bearer-stats-connector.h (module 'nr'): static void ns3::NrRadioBearerStatsConnector::NotifyHandoverEndOkEnb(ns3::NrRadioBearerStatsConnector * c, std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti) [member function]
    cls.add_method('NotifyHandoverEndOkEnb', 
                   'void', 
                   [param('ns3::NrRadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti')], 
                   is_static=True)
    ## nr-radio-bearer-stats-connector.h (module 'nr'): static void ns3::NrRadioBearerStatsConnector::NotifyHandoverEndOkUe(ns3::NrRadioBearerStatsConnector * c, std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti) [member function]
    cls.add_method('NotifyHandoverEndOkUe', 
                   'void', 
                   [param('ns3::NrRadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti')], 
                   is_static=True)
    ## nr-radio-bearer-stats-connector.h (module 'nr'): static void ns3::NrRadioBearerStatsConnector::NotifyHandoverStartEnb(ns3::NrRadioBearerStatsConnector * c, std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti, uint16_t targetCellId) [member function]
    cls.add_method('NotifyHandoverStartEnb', 
                   'void', 
                   [param('ns3::NrRadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti'), param('uint16_t', 'targetCellId')], 
                   is_static=True)
    ## nr-radio-bearer-stats-connector.h (module 'nr'): static void ns3::NrRadioBearerStatsConnector::NotifyHandoverStartUe(ns3::NrRadioBearerStatsConnector * c, std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti, uint16_t targetCellId) [member function]
    cls.add_method('NotifyHandoverStartUe', 
                   'void', 
                   [param('ns3::NrRadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti'), param('uint16_t', 'targetCellId')], 
                   is_static=True)
    ## nr-radio-bearer-stats-connector.h (module 'nr'): static void ns3::NrRadioBearerStatsConnector::NotifyNewUeContextEnb(ns3::NrRadioBearerStatsConnector * c, std::string context, uint16_t cellid, uint16_t rnti) [member function]
    cls.add_method('NotifyNewUeContextEnb', 
                   'void', 
                   [param('ns3::NrRadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti')], 
                   is_static=True)
    ## nr-radio-bearer-stats-connector.h (module 'nr'): static void ns3::NrRadioBearerStatsConnector::NotifyRandomAccessSuccessfulUe(ns3::NrRadioBearerStatsConnector * c, std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti) [member function]
    cls.add_method('NotifyRandomAccessSuccessfulUe', 
                   'void', 
                   [param('ns3::NrRadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti')], 
                   is_static=True)
    return

def register_Ns3RealProtocolRlcSapUser_methods(root_module, cls):
    ## nr-rrc-protocol-real.h (module 'nr'): ns3::RealProtocolRlcSapUser::RealProtocolRlcSapUser(ns3::RealProtocolRlcSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RealProtocolRlcSapUser const &', 'arg0')])
    ## nr-rrc-protocol-real.h (module 'nr'): ns3::RealProtocolRlcSapUser::RealProtocolRlcSapUser(ns3::NrEnbRrcProtocolReal * pdcp, uint16_t rnti) [constructor]
    cls.add_constructor([param('ns3::NrEnbRrcProtocolReal *', 'pdcp'), param('uint16_t', 'rnti')])
    ## nr-rrc-protocol-real.h (module 'nr'): void ns3::RealProtocolRlcSapUser::ReceivePdcpPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('ReceivePdcpPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_virtual=True)
    return

def register_Ns3RlcPduListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::RlcPduListElement_s::RlcPduListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::RlcPduListElement_s::RlcPduListElement_s(ns3::RlcPduListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RlcPduListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::RlcPduListElement_s::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::RlcPduListElement_s::m_size [variable]
    cls.add_instance_attribute('m_size', 'uint16_t', is_const=False)
    return

def register_Ns3SbMeasResult_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::SbMeasResult_s::SbMeasResult_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::SbMeasResult_s::SbMeasResult_s(ns3::SbMeasResult_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SbMeasResult_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::SbMeasResult_s::m_bwPart [variable]
    cls.add_instance_attribute('m_bwPart', 'ns3::BwPart_s', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::SbMeasResult_s::m_higherLayerSelected [variable]
    cls.add_instance_attribute('m_higherLayerSelected', 'std::vector< ns3::HigherLayerSelected_s >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::SbMeasResult_s::m_ueSelected [variable]
    cls.add_instance_attribute('m_ueSelected', 'ns3::UeSelected_s', is_const=False)
    return

def register_Ns3SequenceNumber10_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber10'], root_module['ns3::SequenceNumber10'], param('uint16_t', u'right'))
    cls.add_binary_numeric_operator('-', root_module['ns3::SequenceNumber10'], root_module['ns3::SequenceNumber10'], param('uint16_t', u'right'))
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('<=')
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('>')
    cls.add_binary_comparison_operator('>=')
    ## nr-rlc-sequence-number.h (module 'nr'): ns3::SequenceNumber10::SequenceNumber10() [constructor]
    cls.add_constructor([])
    ## nr-rlc-sequence-number.h (module 'nr'): ns3::SequenceNumber10::SequenceNumber10(uint16_t value) [constructor]
    cls.add_constructor([param('uint16_t', 'value')])
    ## nr-rlc-sequence-number.h (module 'nr'): ns3::SequenceNumber10::SequenceNumber10(ns3::SequenceNumber10 const & value) [copy constructor]
    cls.add_constructor([param('ns3::SequenceNumber10 const &', 'value')])
    ## nr-rlc-sequence-number.h (module 'nr'): uint16_t ns3::SequenceNumber10::GetValue() const [member function]
    cls.add_method('GetValue', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-rlc-sequence-number.h (module 'nr'): void ns3::SequenceNumber10::SetModulusBase(ns3::SequenceNumber10 modulusBase) [member function]
    cls.add_method('SetModulusBase', 
                   'void', 
                   [param('ns3::SequenceNumber10', 'modulusBase')])
    ## nr-rlc-sequence-number.h (module 'nr'): void ns3::SequenceNumber10::SetModulusBase(uint16_t modulusBase) [member function]
    cls.add_method('SetModulusBase', 
                   'void', 
                   [param('uint16_t', 'modulusBase')])
    return

def register_Ns3SiConfiguration_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::SiConfiguration_s::SiConfiguration_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::SiConfiguration_s::SiConfiguration_s(ns3::SiConfiguration_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SiConfiguration_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::SiConfiguration_s::m_sfn [variable]
    cls.add_instance_attribute('m_sfn', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::SiConfiguration_s::m_siMessageList [variable]
    cls.add_instance_attribute('m_siMessageList', 'std::vector< ns3::SiMessageListElement_s >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::SiConfiguration_s::m_siWindowLength [variable]
    cls.add_instance_attribute('m_siWindowLength', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::SiConfiguration_s::m_sib1Length [variable]
    cls.add_instance_attribute('m_sib1Length', 'uint16_t', is_const=False)
    return

def register_Ns3SiMessageListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::SiMessageListElement_s::SiMessageListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::SiMessageListElement_s::SiMessageListElement_s(ns3::SiMessageListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SiMessageListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::SiMessageListElement_s::m_length [variable]
    cls.add_instance_attribute('m_length', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::SiMessageListElement_s::m_periodicity [variable]
    cls.add_instance_attribute('m_periodicity', 'uint16_t', is_const=False)
    return

def register_Ns3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount(ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3Simulator_methods(root_module, cls):
    ## simulator.h (module 'core'): ns3::Simulator::Simulator(ns3::Simulator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Simulator const &', 'arg0')])
    ## simulator.h (module 'core'): static void ns3::Simulator::Cancel(ns3::EventId const & id) [member function]
    cls.add_method('Cancel', 
                   'void', 
                   [param('ns3::EventId const &', 'id')], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::Destroy() [member function]
    cls.add_method('Destroy', 
                   'void', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static uint32_t ns3::Simulator::GetContext() [member function]
    cls.add_method('GetContext', 
                   'uint32_t', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::GetDelayLeft(ns3::EventId const & id) [member function]
    cls.add_method('GetDelayLeft', 
                   'ns3::Time', 
                   [param('ns3::EventId const &', 'id')], 
                   is_static=True)
    ## simulator.h (module 'core'): static ns3::Ptr<ns3::SimulatorImpl> ns3::Simulator::GetImplementation() [member function]
    cls.add_method('GetImplementation', 
                   'ns3::Ptr< ns3::SimulatorImpl >', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::GetMaximumSimulationTime() [member function]
    cls.add_method('GetMaximumSimulationTime', 
                   'ns3::Time', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static uint32_t ns3::Simulator::GetSystemId() [member function]
    cls.add_method('GetSystemId', 
                   'uint32_t', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static bool ns3::Simulator::IsExpired(ns3::EventId const & id) [member function]
    cls.add_method('IsExpired', 
                   'bool', 
                   [param('ns3::EventId const &', 'id')], 
                   is_static=True)
    ## simulator.h (module 'core'): static bool ns3::Simulator::IsFinished() [member function]
    cls.add_method('IsFinished', 
                   'bool', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::Now() [member function]
    cls.add_method('Now', 
                   'ns3::Time', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::Remove(ns3::EventId const & id) [member function]
    cls.add_method('Remove', 
                   'void', 
                   [param('ns3::EventId const &', 'id')], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::SetImplementation(ns3::Ptr<ns3::SimulatorImpl> impl) [member function]
    cls.add_method('SetImplementation', 
                   'void', 
                   [param('ns3::Ptr< ns3::SimulatorImpl >', 'impl')], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::SetScheduler(ns3::ObjectFactory schedulerFactory) [member function]
    cls.add_method('SetScheduler', 
                   'void', 
                   [param('ns3::ObjectFactory', 'schedulerFactory')], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::Stop(ns3::Time const & delay) [member function]
    cls.add_method('Stop', 
                   'void', 
                   [param('ns3::Time const &', 'delay')], 
                   is_static=True)
    return

def register_Ns3SpsConfig_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::SpsConfig_s::SpsConfig_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::SpsConfig_s::SpsConfig_s(ns3::SpsConfig_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SpsConfig_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::SpsConfig_s::m_implicitReleaseAfter [variable]
    cls.add_instance_attribute('m_implicitReleaseAfter', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::SpsConfig_s::m_n1PucchAnPersistentList [variable]
    cls.add_instance_attribute('m_n1PucchAnPersistentList', 'std::vector< unsigned short >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::SpsConfig_s::m_n1PucchAnPersistentListSize [variable]
    cls.add_instance_attribute('m_n1PucchAnPersistentListSize', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::SpsConfig_s::m_numberOfConfSpsProcesses [variable]
    cls.add_instance_attribute('m_numberOfConfSpsProcesses', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::SpsConfig_s::m_semiPersistSchedIntervalDl [variable]
    cls.add_instance_attribute('m_semiPersistSchedIntervalDl', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::SpsConfig_s::m_semiPersistSchedIntervalUl [variable]
    cls.add_instance_attribute('m_semiPersistSchedIntervalUl', 'uint16_t', is_const=False)
    return

def register_Ns3SrConfig_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::SrConfig_s::SrConfig_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::SrConfig_s::SrConfig_s(ns3::SrConfig_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SrConfig_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::SrConfig_s::m_action [variable]
    cls.add_instance_attribute('m_action', 'ns3::SetupRelease_e', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::SrConfig_s::m_dsrTransMax [variable]
    cls.add_instance_attribute('m_dsrTransMax', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::SrConfig_s::m_schedInterval [variable]
    cls.add_instance_attribute('m_schedInterval', 'uint8_t', is_const=False)
    return

def register_Ns3SrListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::SrListElement_s::SrListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::SrListElement_s::SrListElement_s(ns3::SrListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SrListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::SrListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3StatisticalSummary_methods(root_module, cls):
    ## data-calculator.h (module 'stats'): ns3::StatisticalSummary::StatisticalSummary() [constructor]
    cls.add_constructor([])
    ## data-calculator.h (module 'stats'): ns3::StatisticalSummary::StatisticalSummary(ns3::StatisticalSummary const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::StatisticalSummary const &', 'arg0')])
    ## data-calculator.h (module 'stats'): long int ns3::StatisticalSummary::getCount() const [member function]
    cls.add_method('getCount', 
                   'long int', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getMax() const [member function]
    cls.add_method('getMax', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getMean() const [member function]
    cls.add_method('getMean', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getMin() const [member function]
    cls.add_method('getMin', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getSqrSum() const [member function]
    cls.add_method('getSqrSum', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getStddev() const [member function]
    cls.add_method('getStddev', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getSum() const [member function]
    cls.add_method('getSum', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getVariance() const [member function]
    cls.add_method('getVariance', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    return

def register_Ns3Tag_methods(root_module, cls):
    ## tag.h (module 'network'): ns3::Tag::Tag() [constructor]
    cls.add_constructor([])
    ## tag.h (module 'network'): ns3::Tag::Tag(ns3::Tag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Tag const &', 'arg0')])
    ## tag.h (module 'network'): void ns3::Tag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_pure_virtual=True, is_virtual=True)
    ## tag.h (module 'network'): uint32_t ns3::Tag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## tag.h (module 'network'): static ns3::TypeId ns3::Tag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## tag.h (module 'network'): void ns3::Tag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## tag.h (module 'network'): void ns3::Tag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    return

def register_Ns3TagBuffer_methods(root_module, cls):
    ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(ns3::TagBuffer const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::TagBuffer const &', 'arg0')])
    ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(uint8_t * start, uint8_t * end) [constructor]
    cls.add_constructor([param('uint8_t *', 'start'), param('uint8_t *', 'end')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::CopyFrom(ns3::TagBuffer o) [member function]
    cls.add_method('CopyFrom', 
                   'void', 
                   [param('ns3::TagBuffer', 'o')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::Read(uint8_t * buffer, uint32_t size) [member function]
    cls.add_method('Read', 
                   'void', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
    ## tag-buffer.h (module 'network'): double ns3::TagBuffer::ReadDouble() [member function]
    cls.add_method('ReadDouble', 
                   'double', 
                   [])
    ## tag-buffer.h (module 'network'): uint16_t ns3::TagBuffer::ReadU16() [member function]
    cls.add_method('ReadU16', 
                   'uint16_t', 
                   [])
    ## tag-buffer.h (module 'network'): uint32_t ns3::TagBuffer::ReadU32() [member function]
    cls.add_method('ReadU32', 
                   'uint32_t', 
                   [])
    ## tag-buffer.h (module 'network'): uint64_t ns3::TagBuffer::ReadU64() [member function]
    cls.add_method('ReadU64', 
                   'uint64_t', 
                   [])
    ## tag-buffer.h (module 'network'): uint8_t ns3::TagBuffer::ReadU8() [member function]
    cls.add_method('ReadU8', 
                   'uint8_t', 
                   [])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::TrimAtEnd(uint32_t trim) [member function]
    cls.add_method('TrimAtEnd', 
                   'void', 
                   [param('uint32_t', 'trim')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::Write(uint8_t const * buffer, uint32_t size) [member function]
    cls.add_method('Write', 
                   'void', 
                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteDouble(double v) [member function]
    cls.add_method('WriteDouble', 
                   'void', 
                   [param('double', 'v')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU16(uint16_t data) [member function]
    cls.add_method('WriteU16', 
                   'void', 
                   [param('uint16_t', 'data')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU32(uint32_t data) [member function]
    cls.add_method('WriteU32', 
                   'void', 
                   [param('uint32_t', 'data')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU64(uint64_t v) [member function]
    cls.add_method('WriteU64', 
                   'void', 
                   [param('uint64_t', 'v')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU8(uint8_t v) [member function]
    cls.add_method('WriteU8', 
                   'void', 
                   [param('uint8_t', 'v')])
    return

def register_Ns3TbId_t_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    ## nr-spectrum-phy.h (module 'nr'): ns3::TbId_t::TbId_t(ns3::TbId_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::TbId_t const &', 'arg0')])
    ## nr-spectrum-phy.h (module 'nr'): ns3::TbId_t::TbId_t() [constructor]
    cls.add_constructor([])
    ## nr-spectrum-phy.h (module 'nr'): ns3::TbId_t::TbId_t(uint16_t const a, uint8_t const b) [constructor]
    cls.add_constructor([param('uint16_t const', 'a'), param('uint8_t const', 'b')])
    ## nr-spectrum-phy.h (module 'nr'): ns3::TbId_t::m_layer [variable]
    cls.add_instance_attribute('m_layer', 'uint8_t', is_const=False)
    ## nr-spectrum-phy.h (module 'nr'): ns3::TbId_t::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3TbStats_t_methods(root_module, cls):
    ## nr-mi-error-model.h (module 'nr'): ns3::TbStats_t::TbStats_t() [constructor]
    cls.add_constructor([])
    ## nr-mi-error-model.h (module 'nr'): ns3::TbStats_t::TbStats_t(ns3::TbStats_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::TbStats_t const &', 'arg0')])
    ## nr-mi-error-model.h (module 'nr'): ns3::TbStats_t::mi [variable]
    cls.add_instance_attribute('mi', 'double', is_const=False)
    ## nr-mi-error-model.h (module 'nr'): ns3::TbStats_t::tbler [variable]
    cls.add_instance_attribute('tbler', 'double', is_const=False)
    return

def register_Ns3TimeWithUnit_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::TimeWithUnit const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::TimeWithUnit const &', 'arg0')])
    ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::Time const time, ns3::Time::Unit const unit) [constructor]
    cls.add_constructor([param('ns3::Time const', 'time'), param('ns3::Time::Unit const', 'unit')])
    return

def register_Ns3NrTransmissionModesLayers_methods(root_module, cls):
    ## nr-common.h (module 'nr'): ns3::NrTransmissionModesLayers::NrTransmissionModesLayers() [constructor]
    cls.add_constructor([])
    ## nr-common.h (module 'nr'): ns3::NrTransmissionModesLayers::NrTransmissionModesLayers(ns3::NrTransmissionModesLayers const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrTransmissionModesLayers const &', 'arg0')])
    ## nr-common.h (module 'nr'): static uint8_t ns3::NrTransmissionModesLayers::TxMode2LayerNum(uint8_t txMode) [member function]
    cls.add_method('TxMode2LayerNum', 
                   'uint8_t', 
                   [param('uint8_t', 'txMode')], 
                   is_static=True)
    return

def register_Ns3TypeId_methods(root_module, cls):
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    ## type-id.h (module 'core'): ns3::TypeId::TypeId(char const * name) [constructor]
    cls.add_constructor([param('char const *', 'name')])
    ## type-id.h (module 'core'): ns3::TypeId::TypeId() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [copy constructor]
    cls.add_constructor([param('ns3::TypeId const &', 'o')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, ns3::AttributeValue const & initialValue, ns3::Ptr<ns3::AttributeAccessor const> accessor, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('AddAttribute', 
                   'ns3::TypeId', 
                   [param('std::string', 'name'), param('std::string', 'help'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, uint32_t flags, ns3::AttributeValue const & initialValue, ns3::Ptr<ns3::AttributeAccessor const> accessor, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('AddAttribute', 
                   'ns3::TypeId', 
                   [param('std::string', 'name'), param('std::string', 'help'), param('uint32_t', 'flags'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<ns3::TraceSourceAccessor const> accessor) [member function]
    cls.add_method('AddTraceSource', 
                   'ns3::TypeId', 
                   [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor')], 
                   deprecated=True)
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<ns3::TraceSourceAccessor const> accessor, std::string callback) [member function]
    cls.add_method('AddTraceSource', 
                   'ns3::TypeId', 
                   [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor'), param('std::string', 'callback')])
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation ns3::TypeId::GetAttribute(uint32_t i) const [member function]
    cls.add_method('GetAttribute', 
                   'ns3::TypeId::AttributeInformation', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## type-id.h (module 'core'): std::string ns3::TypeId::GetAttributeFullName(uint32_t i) const [member function]
    cls.add_method('GetAttributeFullName', 
                   'std::string', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetAttributeN() const [member function]
    cls.add_method('GetAttributeN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::Callback<ns3::ObjectBase*,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ns3::TypeId::GetConstructor() const [member function]
    cls.add_method('GetConstructor', 
                   'ns3::Callback< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): std::string ns3::TypeId::GetGroupName() const [member function]
    cls.add_method('GetGroupName', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetHash() const [member function]
    cls.add_method('GetHash', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): std::string ns3::TypeId::GetName() const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::GetParent() const [member function]
    cls.add_method('GetParent', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint32_t i) [member function]
    cls.add_method('GetRegistered', 
                   'ns3::TypeId', 
                   [param('uint32_t', 'i')], 
                   is_static=True)
    ## type-id.h (module 'core'): static uint32_t ns3::TypeId::GetRegisteredN() [member function]
    cls.add_method('GetRegisteredN', 
                   'uint32_t', 
                   [], 
                   is_static=True)
    ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'std::size_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation ns3::TypeId::GetTraceSource(uint32_t i) const [member function]
    cls.add_method('GetTraceSource', 
                   'ns3::TypeId::TraceSourceInformation', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetTraceSourceN() const [member function]
    cls.add_method('GetTraceSourceN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): uint16_t ns3::TypeId::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::HasConstructor() const [member function]
    cls.add_method('HasConstructor', 
                   'bool', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::HasParent() const [member function]
    cls.add_method('HasParent', 
                   'bool', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::HideFromDocumentation() [member function]
    cls.add_method('HideFromDocumentation', 
                   'ns3::TypeId', 
                   [])
    ## type-id.h (module 'core'): bool ns3::TypeId::IsChildOf(ns3::TypeId other) const [member function]
    cls.add_method('IsChildOf', 
                   'bool', 
                   [param('ns3::TypeId', 'other')], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::LookupAttributeByName(std::string name, ns3::TypeId::AttributeInformation * info) const [member function]
    cls.add_method('LookupAttributeByName', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::TypeId::AttributeInformation *', 'info', transfer_ownership=False)], 
                   is_const=True)
    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByHash(uint32_t hash) [member function]
    cls.add_method('LookupByHash', 
                   'ns3::TypeId', 
                   [param('uint32_t', 'hash')], 
                   is_static=True)
    ## type-id.h (module 'core'): static bool ns3::TypeId::LookupByHashFailSafe(uint32_t hash, ns3::TypeId * tid) [member function]
    cls.add_method('LookupByHashFailSafe', 
                   'bool', 
                   [param('uint32_t', 'hash'), param('ns3::TypeId *', 'tid')], 
                   is_static=True)
    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByName(std::string name) [member function]
    cls.add_method('LookupByName', 
                   'ns3::TypeId', 
                   [param('std::string', 'name')], 
                   is_static=True)
    ## type-id.h (module 'core'): ns3::Ptr<ns3::TraceSourceAccessor const> ns3::TypeId::LookupTraceSourceByName(std::string name) const [member function]
    cls.add_method('LookupTraceSourceByName', 
                   'ns3::Ptr< ns3::TraceSourceAccessor const >', 
                   [param('std::string', 'name')], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::MustHideFromDocumentation() const [member function]
    cls.add_method('MustHideFromDocumentation', 
                   'bool', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::SetAttributeInitialValue(uint32_t i, ns3::Ptr<ns3::AttributeValue const> initialValue) [member function]
    cls.add_method('SetAttributeInitialValue', 
                   'bool', 
                   [param('uint32_t', 'i'), param('ns3::Ptr< ns3::AttributeValue const >', 'initialValue')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetGroupName(std::string groupName) [member function]
    cls.add_method('SetGroupName', 
                   'ns3::TypeId', 
                   [param('std::string', 'groupName')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetParent(ns3::TypeId tid) [member function]
    cls.add_method('SetParent', 
                   'ns3::TypeId', 
                   [param('ns3::TypeId', 'tid')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetParent() [member function]
    cls.add_method('SetParent', 
                   'ns3::TypeId', 
                   [], 
                   template_parameters=['ns3::Object'])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetSize(std::size_t size) [member function]
    cls.add_method('SetSize', 
                   'ns3::TypeId', 
                   [param('std::size_t', 'size')])
    ## type-id.h (module 'core'): void ns3::TypeId::SetUid(uint16_t tid) [member function]
    cls.add_method('SetUid', 
                   'void', 
                   [param('uint16_t', 'tid')])
    return

def register_Ns3TypeIdAttributeInformation_methods(root_module, cls):
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation(ns3::TypeId::AttributeInformation const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::TypeId::AttributeInformation const &', 'arg0')])
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::accessor [variable]
    cls.add_instance_attribute('accessor', 'ns3::Ptr< ns3::AttributeAccessor const >', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::checker [variable]
    cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::flags [variable]
    cls.add_instance_attribute('flags', 'uint32_t', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::help [variable]
    cls.add_instance_attribute('help', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::initialValue [variable]
    cls.add_instance_attribute('initialValue', 'ns3::Ptr< ns3::AttributeValue const >', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::originalInitialValue [variable]
    cls.add_instance_attribute('originalInitialValue', 'ns3::Ptr< ns3::AttributeValue const >', is_const=False)
    return

def register_Ns3TypeIdTraceSourceInformation_methods(root_module, cls):
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation(ns3::TypeId::TraceSourceInformation const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::TypeId::TraceSourceInformation const &', 'arg0')])
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::accessor [variable]
    cls.add_instance_attribute('accessor', 'ns3::Ptr< ns3::TraceSourceAccessor const >', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::callback [variable]
    cls.add_instance_attribute('callback', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::help [variable]
    cls.add_instance_attribute('help', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    return

def register_Ns3UeCapabilities_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::UeCapabilities_s::UeCapabilities_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::UeCapabilities_s::UeCapabilities_s(ns3::UeCapabilities_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::UeCapabilities_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::UeCapabilities_s::m_halfDuplex [variable]
    cls.add_instance_attribute('m_halfDuplex', 'bool', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UeCapabilities_s::m_intraSfHopping [variable]
    cls.add_instance_attribute('m_intraSfHopping', 'bool', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UeCapabilities_s::m_resAllocType1 [variable]
    cls.add_instance_attribute('m_resAllocType1', 'bool', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UeCapabilities_s::m_type2Sb1 [variable]
    cls.add_instance_attribute('m_type2Sb1', 'bool', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UeCapabilities_s::m_ueCategory [variable]
    cls.add_instance_attribute('m_ueCategory', 'uint8_t', is_const=False)
    return

def register_Ns3UeSelected_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::UeSelected_s::UeSelected_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::UeSelected_s::UeSelected_s(ns3::UeSelected_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::UeSelected_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::UeSelected_s::m_sbCqi [variable]
    cls.add_instance_attribute('m_sbCqi', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UeSelected_s::m_sbList [variable]
    cls.add_instance_attribute('m_sbList', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UeSelected_s::m_sbPmi [variable]
    cls.add_instance_attribute('m_sbPmi', 'uint8_t', is_const=False)
    return

def register_Ns3UlCqi_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::UlCqi_s::UlCqi_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::UlCqi_s::UlCqi_s(ns3::UlCqi_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::UlCqi_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::UlCqi_s::m_sinr [variable]
    cls.add_instance_attribute('m_sinr', 'std::vector< unsigned short >', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlCqi_s::m_type [variable]
    cls.add_instance_attribute('m_type', 'ns3::UlCqi_s::Type_e', is_const=False)
    return

def register_Ns3UlDciListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::UlDciListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::UlDciListElement_s(ns3::UlDciListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::UlDciListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_aggrLevel [variable]
    cls.add_instance_attribute('m_aggrLevel', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_cceIndex [variable]
    cls.add_instance_attribute('m_cceIndex', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_cqiRequest [variable]
    cls.add_instance_attribute('m_cqiRequest', 'bool', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_dai [variable]
    cls.add_instance_attribute('m_dai', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_freqHopping [variable]
    cls.add_instance_attribute('m_freqHopping', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_hopping [variable]
    cls.add_instance_attribute('m_hopping', 'bool', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_mcs [variable]
    cls.add_instance_attribute('m_mcs', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_n2Dmrs [variable]
    cls.add_instance_attribute('m_n2Dmrs', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_ndi [variable]
    cls.add_instance_attribute('m_ndi', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_pdcchPowerOffset [variable]
    cls.add_instance_attribute('m_pdcchPowerOffset', 'int8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_rbLen [variable]
    cls.add_instance_attribute('m_rbLen', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_rbStart [variable]
    cls.add_instance_attribute('m_rbStart', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_tbSize [variable]
    cls.add_instance_attribute('m_tbSize', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_tpc [variable]
    cls.add_instance_attribute('m_tpc', 'int8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_ueTxAntennaSelection [variable]
    cls.add_instance_attribute('m_ueTxAntennaSelection', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlDciListElement_s::m_ulIndex [variable]
    cls.add_instance_attribute('m_ulIndex', 'uint8_t', is_const=False)
    return

def register_Ns3UlGrant_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::UlGrant_s::UlGrant_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::UlGrant_s::UlGrant_s(ns3::UlGrant_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::UlGrant_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::UlGrant_s::m_cqiRequest [variable]
    cls.add_instance_attribute('m_cqiRequest', 'bool', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlGrant_s::m_hopping [variable]
    cls.add_instance_attribute('m_hopping', 'bool', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlGrant_s::m_mcs [variable]
    cls.add_instance_attribute('m_mcs', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlGrant_s::m_rbLen [variable]
    cls.add_instance_attribute('m_rbLen', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlGrant_s::m_rbStart [variable]
    cls.add_instance_attribute('m_rbStart', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlGrant_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlGrant_s::m_tbSize [variable]
    cls.add_instance_attribute('m_tbSize', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlGrant_s::m_tpc [variable]
    cls.add_instance_attribute('m_tpc', 'int8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlGrant_s::m_ulDelay [variable]
    cls.add_instance_attribute('m_ulDelay', 'bool', is_const=False)
    return

def register_Ns3UlInfoListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::UlInfoListElement_s::UlInfoListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::UlInfoListElement_s::UlInfoListElement_s(ns3::UlInfoListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::UlInfoListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::UlInfoListElement_s::m_receptionStatus [variable]
    cls.add_instance_attribute('m_receptionStatus', 'ns3::UlInfoListElement_s::ReceptionStatus_e', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlInfoListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlInfoListElement_s::m_tpc [variable]
    cls.add_instance_attribute('m_tpc', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::UlInfoListElement_s::m_ulReception [variable]
    cls.add_instance_attribute('m_ulReception', 'std::vector< unsigned short >', is_const=False)
    return

def register_Ns3UplinkNrGlobalPathlossDatabase_methods(root_module, cls):
    ## nr-global-pathloss-database.h (module 'nr'): ns3::UplinkNrGlobalPathlossDatabase::UplinkNrGlobalPathlossDatabase() [constructor]
    cls.add_constructor([])
    ## nr-global-pathloss-database.h (module 'nr'): ns3::UplinkNrGlobalPathlossDatabase::UplinkNrGlobalPathlossDatabase(ns3::UplinkNrGlobalPathlossDatabase const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::UplinkNrGlobalPathlossDatabase const &', 'arg0')])
    ## nr-global-pathloss-database.h (module 'nr'): void ns3::UplinkNrGlobalPathlossDatabase::UpdatePathloss(std::string context, ns3::Ptr<ns3::SpectrumPhy> txPhy, ns3::Ptr<ns3::SpectrumPhy> rxPhy, double lossDb) [member function]
    cls.add_method('UpdatePathloss', 
                   'void', 
                   [param('std::string', 'context'), param('ns3::Ptr< ns3::SpectrumPhy >', 'txPhy'), param('ns3::Ptr< ns3::SpectrumPhy >', 'rxPhy'), param('double', 'lossDb')], 
                   is_virtual=True)
    return

def register_Ns3Vector2D_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## vector.h (module 'core'): ns3::Vector2D::Vector2D(ns3::Vector2D const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Vector2D const &', 'arg0')])
    ## vector.h (module 'core'): ns3::Vector2D::Vector2D(double _x, double _y) [constructor]
    cls.add_constructor([param('double', '_x'), param('double', '_y')])
    ## vector.h (module 'core'): ns3::Vector2D::Vector2D() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector2D::x [variable]
    cls.add_instance_attribute('x', 'double', is_const=False)
    ## vector.h (module 'core'): ns3::Vector2D::y [variable]
    cls.add_instance_attribute('y', 'double', is_const=False)
    return

def register_Ns3Vector3D_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## vector.h (module 'core'): ns3::Vector3D::Vector3D(ns3::Vector3D const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Vector3D const &', 'arg0')])
    ## vector.h (module 'core'): ns3::Vector3D::Vector3D(double _x, double _y, double _z) [constructor]
    cls.add_constructor([param('double', '_x'), param('double', '_y'), param('double', '_z')])
    ## vector.h (module 'core'): ns3::Vector3D::Vector3D() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector3D::x [variable]
    cls.add_instance_attribute('x', 'double', is_const=False)
    ## vector.h (module 'core'): ns3::Vector3D::y [variable]
    cls.add_instance_attribute('y', 'double', is_const=False)
    ## vector.h (module 'core'): ns3::Vector3D::z [variable]
    cls.add_instance_attribute('z', 'double', is_const=False)
    return

def register_Ns3VendorSpecificListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::VendorSpecificListElement_s::VendorSpecificListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::VendorSpecificListElement_s::VendorSpecificListElement_s(ns3::VendorSpecificListElement_s const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::VendorSpecificListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'nr'): ns3::VendorSpecificListElement_s::m_length [variable]
    cls.add_instance_attribute('m_length', 'uint32_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::VendorSpecificListElement_s::m_type [variable]
    cls.add_instance_attribute('m_type', 'uint32_t', is_const=False)
    ## ff-mac-common.h (module 'nr'): ns3::VendorSpecificListElement_s::m_value [variable]
    cls.add_instance_attribute('m_value', 'ns3::Ptr< ns3::VendorSpecificValue >', is_const=False)
    return

def register_Ns3Empty_methods(root_module, cls):
    ## empty.h (module 'core'): ns3::empty::empty() [constructor]
    cls.add_constructor([])
    ## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::empty const &', 'arg0')])
    return

def register_Ns3FdbetsFlowPerf_t_methods(root_module, cls):
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): ns3::fdbetsFlowPerf_t::fdbetsFlowPerf_t() [constructor]
    cls.add_constructor([])
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): ns3::fdbetsFlowPerf_t::fdbetsFlowPerf_t(ns3::fdbetsFlowPerf_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::fdbetsFlowPerf_t const &', 'arg0')])
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): ns3::fdbetsFlowPerf_t::flowStart [variable]
    cls.add_instance_attribute('flowStart', 'ns3::Time', is_const=False)
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): ns3::fdbetsFlowPerf_t::lastAveragedThroughput [variable]
    cls.add_instance_attribute('lastAveragedThroughput', 'double', is_const=False)
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): ns3::fdbetsFlowPerf_t::lastTtiBytesTrasmitted [variable]
    cls.add_instance_attribute('lastTtiBytesTrasmitted', 'unsigned int', is_const=False)
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): ns3::fdbetsFlowPerf_t::totalBytesTransmitted [variable]
    cls.add_instance_attribute('totalBytesTransmitted', 'long unsigned int', is_const=False)
    return

def register_Ns3FdtbfqsFlowPerf_t_methods(root_module, cls):
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::fdtbfqsFlowPerf_t::fdtbfqsFlowPerf_t() [constructor]
    cls.add_constructor([])
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::fdtbfqsFlowPerf_t::fdtbfqsFlowPerf_t(ns3::fdtbfqsFlowPerf_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::fdtbfqsFlowPerf_t const &', 'arg0')])
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::fdtbfqsFlowPerf_t::burstCredit [variable]
    cls.add_instance_attribute('burstCredit', 'uint32_t', is_const=False)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::fdtbfqsFlowPerf_t::counter [variable]
    cls.add_instance_attribute('counter', 'int', is_const=False)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::fdtbfqsFlowPerf_t::creditableThreshold [variable]
    cls.add_instance_attribute('creditableThreshold', 'uint32_t', is_const=False)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::fdtbfqsFlowPerf_t::debtLimit [variable]
    cls.add_instance_attribute('debtLimit', 'int', is_const=False)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::fdtbfqsFlowPerf_t::flowStart [variable]
    cls.add_instance_attribute('flowStart', 'ns3::Time', is_const=False)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::fdtbfqsFlowPerf_t::maxTokenPoolSize [variable]
    cls.add_instance_attribute('maxTokenPoolSize', 'uint32_t', is_const=False)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::fdtbfqsFlowPerf_t::packetArrivalRate [variable]
    cls.add_instance_attribute('packetArrivalRate', 'uint64_t', is_const=False)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::fdtbfqsFlowPerf_t::tokenGenerationRate [variable]
    cls.add_instance_attribute('tokenGenerationRate', 'uint64_t', is_const=False)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::fdtbfqsFlowPerf_t::tokenPoolSize [variable]
    cls.add_instance_attribute('tokenPoolSize', 'uint32_t', is_const=False)
    return

def register_Ns3Int64x64_t_methods(root_module, cls):
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<=')
    cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', u'right'))
    cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
    cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
    cls.add_unary_numeric_operator('-')
    cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('>')
    cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', u'right'))
    cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', u'right'))
    cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', u'right'))
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('>=')
    ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t() [constructor]
    cls.add_constructor([])
    ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(double v) [constructor]
    cls.add_constructor([param('double', 'v')])
    ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long double v) [constructor]
    cls.add_constructor([param('long double', 'v')])
    ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(int v) [constructor]
    cls.add_constructor([param('int', 'v')])
    ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long int v) [constructor]
    cls.add_constructor([param('long int', 'v')])
    ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long long int v) [constructor]
    cls.add_constructor([param('long long int', 'v')])
    ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(unsigned int v) [constructor]
    cls.add_constructor([param('unsigned int', 'v')])
    ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int v) [constructor]
    cls.add_constructor([param('long unsigned int', 'v')])
    ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long long unsigned int v) [constructor]
    cls.add_constructor([param('long long unsigned int', 'v')])
    ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(int64_t hi, uint64_t lo) [constructor]
    cls.add_constructor([param('int64_t', 'hi'), param('uint64_t', 'lo')])
    ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(ns3::int64x64_t const & o) [copy constructor]
    cls.add_constructor([param('ns3::int64x64_t const &', 'o')])
    ## int64x64-double.h (module 'core'): double ns3::int64x64_t::GetDouble() const [member function]
    cls.add_method('GetDouble', 
                   'double', 
                   [], 
                   is_const=True)
    ## int64x64-double.h (module 'core'): int64_t ns3::int64x64_t::GetHigh() const [member function]
    cls.add_method('GetHigh', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## int64x64-double.h (module 'core'): uint64_t ns3::int64x64_t::GetLow() const [member function]
    cls.add_method('GetLow', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## int64x64-double.h (module 'core'): static ns3::int64x64_t ns3::int64x64_t::Invert(uint64_t v) [member function]
    cls.add_method('Invert', 
                   'ns3::int64x64_t', 
                   [param('uint64_t', 'v')], 
                   is_static=True)
    ## int64x64-double.h (module 'core'): void ns3::int64x64_t::MulByInvert(ns3::int64x64_t const & o) [member function]
    cls.add_method('MulByInvert', 
                   'void', 
                   [param('ns3::int64x64_t const &', 'o')])
    ## int64x64-double.h (module 'core'): ns3::int64x64_t::implementation [variable]
    cls.add_static_attribute('implementation', 'ns3::int64x64_t::impl_type const', is_const=True)
    return

def register_Ns3PfsFlowPerf_t_methods(root_module, cls):
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): ns3::pfsFlowPerf_t::pfsFlowPerf_t() [constructor]
    cls.add_constructor([])
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): ns3::pfsFlowPerf_t::pfsFlowPerf_t(ns3::pfsFlowPerf_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::pfsFlowPerf_t const &', 'arg0')])
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): ns3::pfsFlowPerf_t::flowStart [variable]
    cls.add_instance_attribute('flowStart', 'ns3::Time', is_const=False)
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): ns3::pfsFlowPerf_t::lastAveragedThroughput [variable]
    cls.add_instance_attribute('lastAveragedThroughput', 'double', is_const=False)
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): ns3::pfsFlowPerf_t::lastTtiBytesTrasmitted [variable]
    cls.add_instance_attribute('lastTtiBytesTrasmitted', 'unsigned int', is_const=False)
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): ns3::pfsFlowPerf_t::totalBytesTransmitted [variable]
    cls.add_instance_attribute('totalBytesTransmitted', 'long unsigned int', is_const=False)
    return

def register_Ns3PssFlowPerf_t_methods(root_module, cls):
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::pssFlowPerf_t::pssFlowPerf_t() [constructor]
    cls.add_constructor([])
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::pssFlowPerf_t::pssFlowPerf_t(ns3::pssFlowPerf_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::pssFlowPerf_t const &', 'arg0')])
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::pssFlowPerf_t::flowStart [variable]
    cls.add_instance_attribute('flowStart', 'ns3::Time', is_const=False)
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::pssFlowPerf_t::lastAveragedThroughput [variable]
    cls.add_instance_attribute('lastAveragedThroughput', 'double', is_const=False)
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::pssFlowPerf_t::lastTtiBytesTransmitted [variable]
    cls.add_instance_attribute('lastTtiBytesTransmitted', 'unsigned int', is_const=False)
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::pssFlowPerf_t::secondLastAveragedThroughput [variable]
    cls.add_instance_attribute('secondLastAveragedThroughput', 'double', is_const=False)
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::pssFlowPerf_t::targetThroughput [variable]
    cls.add_instance_attribute('targetThroughput', 'double', is_const=False)
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::pssFlowPerf_t::totalBytesTransmitted [variable]
    cls.add_instance_attribute('totalBytesTransmitted', 'long unsigned int', is_const=False)
    return

def register_Ns3TbInfo_t_methods(root_module, cls):
    ## nr-spectrum-phy.h (module 'nr'): ns3::tbInfo_t::tbInfo_t() [constructor]
    cls.add_constructor([])
    ## nr-spectrum-phy.h (module 'nr'): ns3::tbInfo_t::tbInfo_t(ns3::tbInfo_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::tbInfo_t const &', 'arg0')])
    ## nr-spectrum-phy.h (module 'nr'): ns3::tbInfo_t::corrupt [variable]
    cls.add_instance_attribute('corrupt', 'bool', is_const=False)
    ## nr-spectrum-phy.h (module 'nr'): ns3::tbInfo_t::downlink [variable]
    cls.add_instance_attribute('downlink', 'bool', is_const=False)
    ## nr-spectrum-phy.h (module 'nr'): ns3::tbInfo_t::harqFeedbackSent [variable]
    cls.add_instance_attribute('harqFeedbackSent', 'bool', is_const=False)
    ## nr-spectrum-phy.h (module 'nr'): ns3::tbInfo_t::harqProcessId [variable]
    cls.add_instance_attribute('harqProcessId', 'uint8_t', is_const=False)
    ## nr-spectrum-phy.h (module 'nr'): ns3::tbInfo_t::mcs [variable]
    cls.add_instance_attribute('mcs', 'uint8_t', is_const=False)
    ## nr-spectrum-phy.h (module 'nr'): ns3::tbInfo_t::mi [variable]
    cls.add_instance_attribute('mi', 'double', is_const=False)
    ## nr-spectrum-phy.h (module 'nr'): ns3::tbInfo_t::ndi [variable]
    cls.add_instance_attribute('ndi', 'uint8_t', is_const=False)
    ## nr-spectrum-phy.h (module 'nr'): ns3::tbInfo_t::rbBitmap [variable]
    cls.add_instance_attribute('rbBitmap', 'std::vector< int >', is_const=False)
    ## nr-spectrum-phy.h (module 'nr'): ns3::tbInfo_t::rv [variable]
    cls.add_instance_attribute('rv', 'uint8_t', is_const=False)
    ## nr-spectrum-phy.h (module 'nr'): ns3::tbInfo_t::size [variable]
    cls.add_instance_attribute('size', 'uint16_t', is_const=False)
    return

def register_Ns3TdbetsFlowPerf_t_methods(root_module, cls):
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): ns3::tdbetsFlowPerf_t::tdbetsFlowPerf_t() [constructor]
    cls.add_constructor([])
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): ns3::tdbetsFlowPerf_t::tdbetsFlowPerf_t(ns3::tdbetsFlowPerf_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::tdbetsFlowPerf_t const &', 'arg0')])
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): ns3::tdbetsFlowPerf_t::flowStart [variable]
    cls.add_instance_attribute('flowStart', 'ns3::Time', is_const=False)
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): ns3::tdbetsFlowPerf_t::lastAveragedThroughput [variable]
    cls.add_instance_attribute('lastAveragedThroughput', 'double', is_const=False)
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): ns3::tdbetsFlowPerf_t::lastTtiBytesTrasmitted [variable]
    cls.add_instance_attribute('lastTtiBytesTrasmitted', 'unsigned int', is_const=False)
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): ns3::tdbetsFlowPerf_t::totalBytesTransmitted [variable]
    cls.add_instance_attribute('totalBytesTransmitted', 'long unsigned int', is_const=False)
    return

def register_Ns3TdtbfqsFlowPerf_t_methods(root_module, cls):
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::tdtbfqsFlowPerf_t::tdtbfqsFlowPerf_t() [constructor]
    cls.add_constructor([])
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::tdtbfqsFlowPerf_t::tdtbfqsFlowPerf_t(ns3::tdtbfqsFlowPerf_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::tdtbfqsFlowPerf_t const &', 'arg0')])
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::tdtbfqsFlowPerf_t::burstCredit [variable]
    cls.add_instance_attribute('burstCredit', 'uint32_t', is_const=False)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::tdtbfqsFlowPerf_t::counter [variable]
    cls.add_instance_attribute('counter', 'int', is_const=False)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::tdtbfqsFlowPerf_t::creditableThreshold [variable]
    cls.add_instance_attribute('creditableThreshold', 'uint32_t', is_const=False)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::tdtbfqsFlowPerf_t::debtLimit [variable]
    cls.add_instance_attribute('debtLimit', 'int', is_const=False)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::tdtbfqsFlowPerf_t::flowStart [variable]
    cls.add_instance_attribute('flowStart', 'ns3::Time', is_const=False)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::tdtbfqsFlowPerf_t::maxTokenPoolSize [variable]
    cls.add_instance_attribute('maxTokenPoolSize', 'uint32_t', is_const=False)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::tdtbfqsFlowPerf_t::packetArrivalRate [variable]
    cls.add_instance_attribute('packetArrivalRate', 'uint64_t', is_const=False)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::tdtbfqsFlowPerf_t::tokenGenerationRate [variable]
    cls.add_instance_attribute('tokenGenerationRate', 'uint64_t', is_const=False)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::tdtbfqsFlowPerf_t::tokenPoolSize [variable]
    cls.add_instance_attribute('tokenPoolSize', 'uint32_t', is_const=False)
    return

def register_Ns3Chunk_methods(root_module, cls):
    ## chunk.h (module 'network'): ns3::Chunk::Chunk() [constructor]
    cls.add_constructor([])
    ## chunk.h (module 'network'): ns3::Chunk::Chunk(ns3::Chunk const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Chunk const &', 'arg0')])
    ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_pure_virtual=True, is_virtual=True)
    ## chunk.h (module 'network'): static ns3::TypeId ns3::Chunk::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## chunk.h (module 'network'): void ns3::Chunk::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    return

def register_Ns3DownlinkNrGlobalPathlossDatabase_methods(root_module, cls):
    ## nr-global-pathloss-database.h (module 'nr'): ns3::DownlinkNrGlobalPathlossDatabase::DownlinkNrGlobalPathlossDatabase() [constructor]
    cls.add_constructor([])
    ## nr-global-pathloss-database.h (module 'nr'): ns3::DownlinkNrGlobalPathlossDatabase::DownlinkNrGlobalPathlossDatabase(ns3::DownlinkNrGlobalPathlossDatabase const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DownlinkNrGlobalPathlossDatabase const &', 'arg0')])
    ## nr-global-pathloss-database.h (module 'nr'): void ns3::DownlinkNrGlobalPathlossDatabase::UpdatePathloss(std::string context, ns3::Ptr<ns3::SpectrumPhy> txPhy, ns3::Ptr<ns3::SpectrumPhy> rxPhy, double lossDb) [member function]
    cls.add_method('UpdatePathloss', 
                   'void', 
                   [param('std::string', 'context'), param('ns3::Ptr< ns3::SpectrumPhy >', 'txPhy'), param('ns3::Ptr< ns3::SpectrumPhy >', 'rxPhy'), param('double', 'lossDb')], 
                   is_virtual=True)
    return

def register_Ns3EpsBearerTag_methods(root_module, cls):
    ## eps-bearer-tag.h (module 'nr'): ns3::EpsBearerTag::EpsBearerTag(ns3::EpsBearerTag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::EpsBearerTag const &', 'arg0')])
    ## eps-bearer-tag.h (module 'nr'): ns3::EpsBearerTag::EpsBearerTag() [constructor]
    cls.add_constructor([])
    ## eps-bearer-tag.h (module 'nr'): ns3::EpsBearerTag::EpsBearerTag(uint16_t rnti, uint8_t bid) [constructor]
    cls.add_constructor([param('uint16_t', 'rnti'), param('uint8_t', 'bid')])
    ## eps-bearer-tag.h (module 'nr'): void ns3::EpsBearerTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## eps-bearer-tag.h (module 'nr'): uint8_t ns3::EpsBearerTag::GetBid() const [member function]
    cls.add_method('GetBid', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## eps-bearer-tag.h (module 'nr'): ns3::TypeId ns3::EpsBearerTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## eps-bearer-tag.h (module 'nr'): uint16_t ns3::EpsBearerTag::GetRnti() const [member function]
    cls.add_method('GetRnti', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## eps-bearer-tag.h (module 'nr'): uint32_t ns3::EpsBearerTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## eps-bearer-tag.h (module 'nr'): static ns3::TypeId ns3::EpsBearerTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## eps-bearer-tag.h (module 'nr'): void ns3::EpsBearerTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## eps-bearer-tag.h (module 'nr'): void ns3::EpsBearerTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## eps-bearer-tag.h (module 'nr'): void ns3::EpsBearerTag::SetBid(uint8_t bid) [member function]
    cls.add_method('SetBid', 
                   'void', 
                   [param('uint8_t', 'bid')])
    ## eps-bearer-tag.h (module 'nr'): void ns3::EpsBearerTag::SetRnti(uint16_t rnti) [member function]
    cls.add_method('SetRnti', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    return

def register_Ns3QosFlowTag_methods(root_module, cls):
    ## eps-bearer-tag.h (module 'nr'): ns3::EpsBearerTag::EpsBearerTag(ns3::EpsBearerTag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::QosFlowTag const &', 'arg0')])
    ## eps-bearer-tag.h (module 'nr'): ns3::EpsBearerTag::EpsBearerTag() [constructor]
    cls.add_constructor([])
    ## eps-bearer-tag.h (module 'nr'): ns3::EpsBearerTag::EpsBearerTag(uint16_t rnti, uint8_t bid) [constructor]
    cls.add_constructor([param('uint16_t', 'rnti'), param('uint8_t', 'bid')])
    ## eps-bearer-tag.h (module 'nr'): void ns3::EpsBearerTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## eps-bearer-tag.h (module 'nr'): uint8_t ns3::EpsBearerTag::GetBid() const [member function]
    cls.add_method('GetBid', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## eps-bearer-tag.h (module 'nr'): ns3::TypeId ns3::EpsBearerTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## eps-bearer-tag.h (module 'nr'): uint16_t ns3::EpsBearerTag::GetRnti() const [member function]
    cls.add_method('GetRnti', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## eps-bearer-tag.h (module 'nr'): uint32_t ns3::EpsBearerTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## eps-bearer-tag.h (module 'nr'): static ns3::TypeId ns3::EpsBearerTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## eps-bearer-tag.h (module 'nr'): void ns3::EpsBearerTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## eps-bearer-tag.h (module 'nr'): void ns3::EpsBearerTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## eps-bearer-tag.h (module 'nr'): void ns3::EpsBearerTag::SetBid(uint8_t bid) [member function]
    cls.add_method('SetBid', 
                   'void', 
                   [param('uint8_t', 'bid')])
    ## eps-bearer-tag.h (module 'nr'): void ns3::EpsBearerTag::SetRnti(uint16_t rnti) [member function]
    cls.add_method('SetRnti', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    return


def register_Ns3Header_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## header.h (module 'network'): ns3::Header::Header() [constructor]
    cls.add_constructor([])
    ## header.h (module 'network'): ns3::Header::Header(ns3::Header const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Header const &', 'arg0')])
    ## header.h (module 'network'): uint32_t ns3::Header::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_pure_virtual=True, is_virtual=True)
    ## header.h (module 'network'): uint32_t ns3::Header::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## header.h (module 'network'): static ns3::TypeId ns3::Header::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## header.h (module 'network'): void ns3::Header::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## header.h (module 'network'): void ns3::Header::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    return

def register_Ns3Ipv4Header_methods(root_module, cls):
    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::Ipv4Header(ns3::Ipv4Header const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv4Header const &', 'arg0')])
    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::Ipv4Header() [constructor]
    cls.add_constructor([])
    ## ipv4-header.h (module 'internet'): uint32_t ns3::Ipv4Header::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## ipv4-header.h (module 'internet'): std::string ns3::Ipv4Header::DscpTypeToString(ns3::Ipv4Header::DscpType dscp) const [member function]
    cls.add_method('DscpTypeToString', 
                   'std::string', 
                   [param('ns3::Ipv4Header::DscpType', 'dscp')], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): std::string ns3::Ipv4Header::EcnTypeToString(ns3::Ipv4Header::EcnType ecn) const [member function]
    cls.add_method('EcnTypeToString', 
                   'std::string', 
                   [param('ns3::Ipv4Header::EcnType', 'ecn')], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::EnableChecksum() [member function]
    cls.add_method('EnableChecksum', 
                   'void', 
                   [])
    ## ipv4-header.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Header::GetDestination() const [member function]
    cls.add_method('GetDestination', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::DscpType ns3::Ipv4Header::GetDscp() const [member function]
    cls.add_method('GetDscp', 
                   'ns3::Ipv4Header::DscpType', 
                   [], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::EcnType ns3::Ipv4Header::GetEcn() const [member function]
    cls.add_method('GetEcn', 
                   'ns3::Ipv4Header::EcnType', 
                   [], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): uint16_t ns3::Ipv4Header::GetFragmentOffset() const [member function]
    cls.add_method('GetFragmentOffset', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): uint16_t ns3::Ipv4Header::GetIdentification() const [member function]
    cls.add_method('GetIdentification', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): ns3::TypeId ns3::Ipv4Header::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv4-header.h (module 'internet'): uint16_t ns3::Ipv4Header::GetPayloadSize() const [member function]
    cls.add_method('GetPayloadSize', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): uint8_t ns3::Ipv4Header::GetProtocol() const [member function]
    cls.add_method('GetProtocol', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): uint32_t ns3::Ipv4Header::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv4-header.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Header::GetSource() const [member function]
    cls.add_method('GetSource', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): uint8_t ns3::Ipv4Header::GetTos() const [member function]
    cls.add_method('GetTos', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): uint8_t ns3::Ipv4Header::GetTtl() const [member function]
    cls.add_method('GetTtl', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): static ns3::TypeId ns3::Ipv4Header::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ipv4-header.h (module 'internet'): bool ns3::Ipv4Header::IsChecksumOk() const [member function]
    cls.add_method('IsChecksumOk', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): bool ns3::Ipv4Header::IsDontFragment() const [member function]
    cls.add_method('IsDontFragment', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): bool ns3::Ipv4Header::IsLastFragment() const [member function]
    cls.add_method('IsLastFragment', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetDestination(ns3::Ipv4Address destination) [member function]
    cls.add_method('SetDestination', 
                   'void', 
                   [param('ns3::Ipv4Address', 'destination')])
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetDontFragment() [member function]
    cls.add_method('SetDontFragment', 
                   'void', 
                   [])
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetDscp(ns3::Ipv4Header::DscpType dscp) [member function]
    cls.add_method('SetDscp', 
                   'void', 
                   [param('ns3::Ipv4Header::DscpType', 'dscp')])
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetEcn(ns3::Ipv4Header::EcnType ecn) [member function]
    cls.add_method('SetEcn', 
                   'void', 
                   [param('ns3::Ipv4Header::EcnType', 'ecn')])
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetFragmentOffset(uint16_t offsetBytes) [member function]
    cls.add_method('SetFragmentOffset', 
                   'void', 
                   [param('uint16_t', 'offsetBytes')])
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetIdentification(uint16_t identification) [member function]
    cls.add_method('SetIdentification', 
                   'void', 
                   [param('uint16_t', 'identification')])
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetLastFragment() [member function]
    cls.add_method('SetLastFragment', 
                   'void', 
                   [])
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetMayFragment() [member function]
    cls.add_method('SetMayFragment', 
                   'void', 
                   [])
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetMoreFragments() [member function]
    cls.add_method('SetMoreFragments', 
                   'void', 
                   [])
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetPayloadSize(uint16_t size) [member function]
    cls.add_method('SetPayloadSize', 
                   'void', 
                   [param('uint16_t', 'size')])
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetProtocol(uint8_t num) [member function]
    cls.add_method('SetProtocol', 
                   'void', 
                   [param('uint8_t', 'num')])
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetSource(ns3::Ipv4Address source) [member function]
    cls.add_method('SetSource', 
                   'void', 
                   [param('ns3::Ipv4Address', 'source')])
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetTos(uint8_t tos) [member function]
    cls.add_method('SetTos', 
                   'void', 
                   [param('uint8_t', 'tos')])
    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetTtl(uint8_t ttl) [member function]
    cls.add_method('SetTtl', 
                   'void', 
                   [param('uint8_t', 'ttl')])
    return

def register_Ns3NrEnbRrcSapProvider_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapProvider::NrEnbRrcSapProvider() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapProvider::NrEnbRrcSapProvider(ns3::NrEnbRrcSapProvider const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbRrcSapProvider const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapProvider::CompleteSetupUe(uint16_t rnti, ns3::NrEnbRrcSapProvider::CompleteSetupUeParameters params) [member function]
    cls.add_method('CompleteSetupUe', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrEnbRrcSapProvider::CompleteSetupUeParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapProvider::RecvMeasurementReport(uint16_t rnti, ns3::NrRrcSap::MeasurementReport msg) [member function]
    cls.add_method('RecvMeasurementReport', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasurementReport', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapProvider::RecvRrcConnectionReconfigurationCompleted(uint16_t rnti, ns3::NrRrcSap::RrcConnectionReconfigurationCompleted msg) [member function]
    cls.add_method('RecvRrcConnectionReconfigurationCompleted', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::RrcConnectionReconfigurationCompleted', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapProvider::RecvRrcConnectionReestablishmentComplete(uint16_t rnti, ns3::NrRrcSap::RrcConnectionReestablishmentComplete msg) [member function]
    cls.add_method('RecvRrcConnectionReestablishmentComplete', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::RrcConnectionReestablishmentComplete', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapProvider::RecvRrcConnectionReestablishmentRequest(uint16_t rnti, ns3::NrRrcSap::RrcConnectionReestablishmentRequest msg) [member function]
    cls.add_method('RecvRrcConnectionReestablishmentRequest', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::RrcConnectionReestablishmentRequest', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapProvider::RecvRrcConnectionRequest(uint16_t rnti, ns3::NrRrcSap::RrcConnectionRequest msg) [member function]
    cls.add_method('RecvRrcConnectionRequest', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::RrcConnectionRequest', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapProvider::RecvRrcConnectionSetupCompleted(uint16_t rnti, ns3::NrRrcSap::RrcConnectionSetupCompleted msg) [member function]
    cls.add_method('RecvRrcConnectionSetupCompleted', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::RrcConnectionSetupCompleted', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrEnbRrcSapProviderCompleteSetupUeParameters_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapProvider::CompleteSetupUeParameters::CompleteSetupUeParameters() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapProvider::CompleteSetupUeParameters::CompleteSetupUeParameters(ns3::NrEnbRrcSapProvider::CompleteSetupUeParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbRrcSapProvider::CompleteSetupUeParameters const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapProvider::CompleteSetupUeParameters::srb0SapUser [variable]
    cls.add_instance_attribute('srb0SapUser', 'ns3::NrRlcSapUser *', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapProvider::CompleteSetupUeParameters::srb1SapUser [variable]
    cls.add_instance_attribute('srb1SapUser', 'ns3::NrPdcpSapUser *', is_const=False)
    return

def register_Ns3NrEnbRrcSapUser_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapUser::NrEnbRrcSapUser() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapUser::NrEnbRrcSapUser(ns3::NrEnbRrcSapUser const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbRrcSapUser const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfiguration ns3::NrEnbRrcSapUser::DecodeHandoverCommand(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DecodeHandoverCommand', 
                   'ns3::NrRrcSap::RrcConnectionReconfiguration', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrRrcSap::HandoverPreparationInfo ns3::NrEnbRrcSapUser::DecodeHandoverPreparationInformation(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DecodeHandoverPreparationInformation', 
                   'ns3::NrRrcSap::HandoverPreparationInfo', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): ns3::Ptr<ns3::Packet> ns3::NrEnbRrcSapUser::EncodeHandoverCommand(ns3::NrRrcSap::RrcConnectionReconfiguration msg) [member function]
    cls.add_method('EncodeHandoverCommand', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('ns3::NrRrcSap::RrcConnectionReconfiguration', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): ns3::Ptr<ns3::Packet> ns3::NrEnbRrcSapUser::EncodeHandoverPreparationInformation(ns3::NrRrcSap::HandoverPreparationInfo msg) [member function]
    cls.add_method('EncodeHandoverPreparationInformation', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('ns3::NrRrcSap::HandoverPreparationInfo', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapUser::RemoveUe(uint16_t rnti) [member function]
    cls.add_method('RemoveUe', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapUser::SendRrcConnectionReconfiguration(uint16_t rnti, ns3::NrRrcSap::RrcConnectionReconfiguration msg) [member function]
    cls.add_method('SendRrcConnectionReconfiguration', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::RrcConnectionReconfiguration', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapUser::SendRrcConnectionReestablishment(uint16_t rnti, ns3::NrRrcSap::RrcConnectionReestablishment msg) [member function]
    cls.add_method('SendRrcConnectionReestablishment', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::RrcConnectionReestablishment', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapUser::SendRrcConnectionReestablishmentReject(uint16_t rnti, ns3::NrRrcSap::RrcConnectionReestablishmentReject msg) [member function]
    cls.add_method('SendRrcConnectionReestablishmentReject', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::RrcConnectionReestablishmentReject', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapUser::SendRrcConnectionReject(uint16_t rnti, ns3::NrRrcSap::RrcConnectionReject msg) [member function]
    cls.add_method('SendRrcConnectionReject', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::RrcConnectionReject', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapUser::SendRrcConnectionRelease(uint16_t rnti, ns3::NrRrcSap::RrcConnectionRelease msg) [member function]
    cls.add_method('SendRrcConnectionRelease', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::RrcConnectionRelease', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapUser::SendRrcConnectionSetup(uint16_t rnti, ns3::NrRrcSap::RrcConnectionSetup msg) [member function]
    cls.add_method('SendRrcConnectionSetup', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::RrcConnectionSetup', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapUser::SendSystemInformation(ns3::NrRrcSap::SystemInformation msg) [member function]
    cls.add_method('SendSystemInformation', 
                   'void', 
                   [param('ns3::NrRrcSap::SystemInformation', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-rrc-sap.h (module 'nr'): void ns3::NrEnbRrcSapUser::SetupUe(uint16_t rnti, ns3::NrEnbRrcSapUser::SetupUeParameters params) [member function]
    cls.add_method('SetupUe', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrEnbRrcSapUser::SetupUeParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NrEnbRrcSapUserSetupUeParameters_methods(root_module, cls):
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapUser::SetupUeParameters::SetupUeParameters() [constructor]
    cls.add_constructor([])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapUser::SetupUeParameters::SetupUeParameters(ns3::NrEnbRrcSapUser::SetupUeParameters const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbRrcSapUser::SetupUeParameters const &', 'arg0')])
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapUser::SetupUeParameters::srb0SapProvider [variable]
    cls.add_instance_attribute('srb0SapProvider', 'ns3::NrRlcSapProvider *', is_const=False)
    ## nr-rrc-sap.h (module 'nr'): ns3::NrEnbRrcSapUser::SetupUeParameters::srb1SapProvider [variable]
    cls.add_instance_attribute('srb1SapProvider', 'ns3::NrPdcpSapProvider *', is_const=False)
    return

def register_Ns3NrPdcpHeader_methods(root_module, cls):
    ## nr-pdcp-header.h (module 'nr'): ns3::NrPdcpHeader::NrPdcpHeader(ns3::NrPdcpHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPdcpHeader const &', 'arg0')])
    ## nr-pdcp-header.h (module 'nr'): ns3::NrPdcpHeader::NrPdcpHeader() [constructor]
    cls.add_constructor([])
    ## nr-pdcp-header.h (module 'nr'): uint32_t ns3::NrPdcpHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## nr-pdcp-header.h (module 'nr'): uint8_t ns3::NrPdcpHeader::GetDcBit() const [member function]
    cls.add_method('GetDcBit', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-pdcp-header.h (module 'nr'): ns3::TypeId ns3::NrPdcpHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-pdcp-header.h (module 'nr'): uint16_t ns3::NrPdcpHeader::GetSequenceNumber() const [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-pdcp-header.h (module 'nr'): uint32_t ns3::NrPdcpHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-pdcp-header.h (module 'nr'): static ns3::TypeId ns3::NrPdcpHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-pdcp-header.h (module 'nr'): void ns3::NrPdcpHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-pdcp-header.h (module 'nr'): void ns3::NrPdcpHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## nr-pdcp-header.h (module 'nr'): void ns3::NrPdcpHeader::SetDcBit(uint8_t dcBit) [member function]
    cls.add_method('SetDcBit', 
                   'void', 
                   [param('uint8_t', 'dcBit')])
    ## nr-pdcp-header.h (module 'nr'): void ns3::NrPdcpHeader::SetSequenceNumber(uint16_t sequenceNumber) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint16_t', 'sequenceNumber')])
    return

def register_Ns3NrPhyTag_methods(root_module, cls):
    ## nr-phy-tag.h (module 'nr'): ns3::NrPhyTag::NrPhyTag(ns3::NrPhyTag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPhyTag const &', 'arg0')])
    ## nr-phy-tag.h (module 'nr'): ns3::NrPhyTag::NrPhyTag() [constructor]
    cls.add_constructor([])
    ## nr-phy-tag.h (module 'nr'): ns3::NrPhyTag::NrPhyTag(uint16_t cellId) [constructor]
    cls.add_constructor([param('uint16_t', 'cellId')])
    ## nr-phy-tag.h (module 'nr'): void ns3::NrPhyTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## nr-phy-tag.h (module 'nr'): uint16_t ns3::NrPhyTag::GetCellId() const [member function]
    cls.add_method('GetCellId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-phy-tag.h (module 'nr'): ns3::TypeId ns3::NrPhyTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-phy-tag.h (module 'nr'): uint32_t ns3::NrPhyTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-phy-tag.h (module 'nr'): static ns3::TypeId ns3::NrPhyTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-phy-tag.h (module 'nr'): void ns3::NrPhyTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-phy-tag.h (module 'nr'): void ns3::NrPhyTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3NrRadioBearerTag_methods(root_module, cls):
    ## nr-radio-bearer-tag.h (module 'nr'): ns3::NrRadioBearerTag::NrRadioBearerTag(ns3::NrRadioBearerTag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRadioBearerTag const &', 'arg0')])
    ## nr-radio-bearer-tag.h (module 'nr'): ns3::NrRadioBearerTag::NrRadioBearerTag() [constructor]
    cls.add_constructor([])
    ## nr-radio-bearer-tag.h (module 'nr'): ns3::NrRadioBearerTag::NrRadioBearerTag(uint16_t rnti, uint8_t lcId) [constructor]
    cls.add_constructor([param('uint16_t', 'rnti'), param('uint8_t', 'lcId')])
    ## nr-radio-bearer-tag.h (module 'nr'): ns3::NrRadioBearerTag::NrRadioBearerTag(uint16_t rnti, uint8_t lcId, uint8_t layer) [constructor]
    cls.add_constructor([param('uint16_t', 'rnti'), param('uint8_t', 'lcId'), param('uint8_t', 'layer')])
    ## nr-radio-bearer-tag.h (module 'nr'): void ns3::NrRadioBearerTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## nr-radio-bearer-tag.h (module 'nr'): ns3::TypeId ns3::NrRadioBearerTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-radio-bearer-tag.h (module 'nr'): uint8_t ns3::NrRadioBearerTag::GetLayer() const [member function]
    cls.add_method('GetLayer', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-radio-bearer-tag.h (module 'nr'): uint8_t ns3::NrRadioBearerTag::GetLcid() const [member function]
    cls.add_method('GetLcid', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-radio-bearer-tag.h (module 'nr'): uint16_t ns3::NrRadioBearerTag::GetRnti() const [member function]
    cls.add_method('GetRnti', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-radio-bearer-tag.h (module 'nr'): uint32_t ns3::NrRadioBearerTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-radio-bearer-tag.h (module 'nr'): static ns3::TypeId ns3::NrRadioBearerTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-radio-bearer-tag.h (module 'nr'): void ns3::NrRadioBearerTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-radio-bearer-tag.h (module 'nr'): void ns3::NrRadioBearerTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## nr-radio-bearer-tag.h (module 'nr'): void ns3::NrRadioBearerTag::SetLayer(uint8_t layer) [member function]
    cls.add_method('SetLayer', 
                   'void', 
                   [param('uint8_t', 'layer')])
    ## nr-radio-bearer-tag.h (module 'nr'): void ns3::NrRadioBearerTag::SetLcid(uint8_t lcid) [member function]
    cls.add_method('SetLcid', 
                   'void', 
                   [param('uint8_t', 'lcid')])
    ## nr-radio-bearer-tag.h (module 'nr'): void ns3::NrRadioBearerTag::SetRnti(uint16_t rnti) [member function]
    cls.add_method('SetRnti', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    return

def register_Ns3NrRlcAmHeader_methods(root_module, cls):
    ## nr-rlc-am-header.h (module 'nr'): ns3::NrRlcAmHeader::NrRlcAmHeader(ns3::NrRlcAmHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRlcAmHeader const &', 'arg0')])
    ## nr-rlc-am-header.h (module 'nr'): ns3::NrRlcAmHeader::NrRlcAmHeader() [constructor]
    cls.add_constructor([])
    ## nr-rlc-am-header.h (module 'nr'): uint32_t ns3::NrRlcAmHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## nr-rlc-am-header.h (module 'nr'): ns3::SequenceNumber10 ns3::NrRlcAmHeader::GetAckSn() const [member function]
    cls.add_method('GetAckSn', 
                   'ns3::SequenceNumber10', 
                   [], 
                   is_const=True)
    ## nr-rlc-am-header.h (module 'nr'): uint8_t ns3::NrRlcAmHeader::GetFramingInfo() const [member function]
    cls.add_method('GetFramingInfo', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-rlc-am-header.h (module 'nr'): ns3::TypeId ns3::NrRlcAmHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-am-header.h (module 'nr'): uint16_t ns3::NrRlcAmHeader::GetLastOffset() const [member function]
    cls.add_method('GetLastOffset', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-rlc-am-header.h (module 'nr'): uint8_t ns3::NrRlcAmHeader::GetLastSegmentFlag() const [member function]
    cls.add_method('GetLastSegmentFlag', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-rlc-am-header.h (module 'nr'): uint8_t ns3::NrRlcAmHeader::GetPollingBit() const [member function]
    cls.add_method('GetPollingBit', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-rlc-am-header.h (module 'nr'): uint8_t ns3::NrRlcAmHeader::GetResegmentationFlag() const [member function]
    cls.add_method('GetResegmentationFlag', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-rlc-am-header.h (module 'nr'): uint16_t ns3::NrRlcAmHeader::GetSegmentOffset() const [member function]
    cls.add_method('GetSegmentOffset', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-rlc-am-header.h (module 'nr'): ns3::SequenceNumber10 ns3::NrRlcAmHeader::GetSequenceNumber() const [member function]
    cls.add_method('GetSequenceNumber', 
                   'ns3::SequenceNumber10', 
                   [], 
                   is_const=True)
    ## nr-rlc-am-header.h (module 'nr'): uint32_t ns3::NrRlcAmHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-am-header.h (module 'nr'): static ns3::TypeId ns3::NrRlcAmHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-rlc-am-header.h (module 'nr'): bool ns3::NrRlcAmHeader::IsControlPdu() const [member function]
    cls.add_method('IsControlPdu', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nr-rlc-am-header.h (module 'nr'): bool ns3::NrRlcAmHeader::IsDataPdu() const [member function]
    cls.add_method('IsDataPdu', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nr-rlc-am-header.h (module 'nr'): bool ns3::NrRlcAmHeader::IsNackPresent(ns3::SequenceNumber10 nack) [member function]
    cls.add_method('IsNackPresent', 
                   'bool', 
                   [param('ns3::SequenceNumber10', 'nack')])
    ## nr-rlc-am-header.h (module 'nr'): bool ns3::NrRlcAmHeader::OneMoreNackWouldFitIn(uint16_t bytes) [member function]
    cls.add_method('OneMoreNackWouldFitIn', 
                   'bool', 
                   [param('uint16_t', 'bytes')])
    ## nr-rlc-am-header.h (module 'nr'): uint8_t ns3::NrRlcAmHeader::PopExtensionBit() [member function]
    cls.add_method('PopExtensionBit', 
                   'uint8_t', 
                   [])
    ## nr-rlc-am-header.h (module 'nr'): uint16_t ns3::NrRlcAmHeader::PopLengthIndicator() [member function]
    cls.add_method('PopLengthIndicator', 
                   'uint16_t', 
                   [])
    ## nr-rlc-am-header.h (module 'nr'): int ns3::NrRlcAmHeader::PopNack() [member function]
    cls.add_method('PopNack', 
                   'int', 
                   [])
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::PushExtensionBit(uint8_t extensionBit) [member function]
    cls.add_method('PushExtensionBit', 
                   'void', 
                   [param('uint8_t', 'extensionBit')])
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::PushLengthIndicator(uint16_t lengthIndicator) [member function]
    cls.add_method('PushLengthIndicator', 
                   'void', 
                   [param('uint16_t', 'lengthIndicator')])
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::PushNack(int nack) [member function]
    cls.add_method('PushNack', 
                   'void', 
                   [param('int', 'nack')])
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::SetAckSn(ns3::SequenceNumber10 ackSn) [member function]
    cls.add_method('SetAckSn', 
                   'void', 
                   [param('ns3::SequenceNumber10', 'ackSn')])
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::SetControlPdu(uint8_t controlPduType) [member function]
    cls.add_method('SetControlPdu', 
                   'void', 
                   [param('uint8_t', 'controlPduType')])
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::SetDataPdu() [member function]
    cls.add_method('SetDataPdu', 
                   'void', 
                   [])
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::SetFramingInfo(uint8_t framingInfo) [member function]
    cls.add_method('SetFramingInfo', 
                   'void', 
                   [param('uint8_t', 'framingInfo')])
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::SetLastSegmentFlag(uint8_t lsf) [member function]
    cls.add_method('SetLastSegmentFlag', 
                   'void', 
                   [param('uint8_t', 'lsf')])
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::SetPollingBit(uint8_t pollingBit) [member function]
    cls.add_method('SetPollingBit', 
                   'void', 
                   [param('uint8_t', 'pollingBit')])
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::SetResegmentationFlag(uint8_t resegFlag) [member function]
    cls.add_method('SetResegmentationFlag', 
                   'void', 
                   [param('uint8_t', 'resegFlag')])
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::SetSegmentOffset(uint16_t segmentOffset) [member function]
    cls.add_method('SetSegmentOffset', 
                   'void', 
                   [param('uint16_t', 'segmentOffset')])
    ## nr-rlc-am-header.h (module 'nr'): void ns3::NrRlcAmHeader::SetSequenceNumber(ns3::SequenceNumber10 sequenceNumber) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('ns3::SequenceNumber10', 'sequenceNumber')])
    return

def register_Ns3NrRlcHeader_methods(root_module, cls):
    ## nr-rlc-header.h (module 'nr'): ns3::NrRlcHeader::NrRlcHeader(ns3::NrRlcHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRlcHeader const &', 'arg0')])
    ## nr-rlc-header.h (module 'nr'): ns3::NrRlcHeader::NrRlcHeader() [constructor]
    cls.add_constructor([])
    ## nr-rlc-header.h (module 'nr'): uint32_t ns3::NrRlcHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## nr-rlc-header.h (module 'nr'): uint8_t ns3::NrRlcHeader::GetFramingInfo() const [member function]
    cls.add_method('GetFramingInfo', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-rlc-header.h (module 'nr'): ns3::TypeId ns3::NrRlcHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-header.h (module 'nr'): ns3::SequenceNumber10 ns3::NrRlcHeader::GetSequenceNumber() const [member function]
    cls.add_method('GetSequenceNumber', 
                   'ns3::SequenceNumber10', 
                   [], 
                   is_const=True)
    ## nr-rlc-header.h (module 'nr'): uint32_t ns3::NrRlcHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-header.h (module 'nr'): static ns3::TypeId ns3::NrRlcHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-rlc-header.h (module 'nr'): uint8_t ns3::NrRlcHeader::PopExtensionBit() [member function]
    cls.add_method('PopExtensionBit', 
                   'uint8_t', 
                   [])
    ## nr-rlc-header.h (module 'nr'): uint16_t ns3::NrRlcHeader::PopLengthIndicator() [member function]
    cls.add_method('PopLengthIndicator', 
                   'uint16_t', 
                   [])
    ## nr-rlc-header.h (module 'nr'): void ns3::NrRlcHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-header.h (module 'nr'): void ns3::NrRlcHeader::PushExtensionBit(uint8_t extensionBit) [member function]
    cls.add_method('PushExtensionBit', 
                   'void', 
                   [param('uint8_t', 'extensionBit')])
    ## nr-rlc-header.h (module 'nr'): void ns3::NrRlcHeader::PushLengthIndicator(uint16_t lengthIndicator) [member function]
    cls.add_method('PushLengthIndicator', 
                   'void', 
                   [param('uint16_t', 'lengthIndicator')])
    ## nr-rlc-header.h (module 'nr'): void ns3::NrRlcHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-header.h (module 'nr'): void ns3::NrRlcHeader::SetFramingInfo(uint8_t framingInfo) [member function]
    cls.add_method('SetFramingInfo', 
                   'void', 
                   [param('uint8_t', 'framingInfo')])
    ## nr-rlc-header.h (module 'nr'): void ns3::NrRlcHeader::SetSequenceNumber(ns3::SequenceNumber10 sequenceNumber) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('ns3::SequenceNumber10', 'sequenceNumber')])
    return

def register_Ns3NrRlcSduStatusTag_methods(root_module, cls):
    ## nr-rlc-sdu-status-tag.h (module 'nr'): ns3::NrRlcSduStatusTag::NrRlcSduStatusTag(ns3::NrRlcSduStatusTag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRlcSduStatusTag const &', 'arg0')])
    ## nr-rlc-sdu-status-tag.h (module 'nr'): ns3::NrRlcSduStatusTag::NrRlcSduStatusTag() [constructor]
    cls.add_constructor([])
    ## nr-rlc-sdu-status-tag.h (module 'nr'): void ns3::NrRlcSduStatusTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## nr-rlc-sdu-status-tag.h (module 'nr'): ns3::TypeId ns3::NrRlcSduStatusTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-sdu-status-tag.h (module 'nr'): uint32_t ns3::NrRlcSduStatusTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-sdu-status-tag.h (module 'nr'): uint8_t ns3::NrRlcSduStatusTag::GetStatus() const [member function]
    cls.add_method('GetStatus', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-rlc-sdu-status-tag.h (module 'nr'): static ns3::TypeId ns3::NrRlcSduStatusTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-rlc-sdu-status-tag.h (module 'nr'): void ns3::NrRlcSduStatusTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-sdu-status-tag.h (module 'nr'): void ns3::NrRlcSduStatusTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-sdu-status-tag.h (module 'nr'): void ns3::NrRlcSduStatusTag::SetStatus(uint8_t status) [member function]
    cls.add_method('SetStatus', 
                   'void', 
                   [param('uint8_t', 'status')])
    return

def register_Ns3Object_methods(root_module, cls):
    ## object.h (module 'core'): ns3::Object::Object() [constructor]
    cls.add_constructor([])
    ## object.h (module 'core'): void ns3::Object::AggregateObject(ns3::Ptr<ns3::Object> other) [member function]
    cls.add_method('AggregateObject', 
                   'void', 
                   [param('ns3::Ptr< ns3::Object >', 'other')])
    ## object.h (module 'core'): void ns3::Object::Dispose() [member function]
    cls.add_method('Dispose', 
                   'void', 
                   [])
    ## object.h (module 'core'): ns3::Object::AggregateIterator ns3::Object::GetAggregateIterator() const [member function]
    cls.add_method('GetAggregateIterator', 
                   'ns3::Object::AggregateIterator', 
                   [], 
                   is_const=True)
    ## object.h (module 'core'): ns3::TypeId ns3::Object::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## object.h (module 'core'): static ns3::TypeId ns3::Object::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## object.h (module 'core'): void ns3::Object::Initialize() [member function]
    cls.add_method('Initialize', 
                   'void', 
                   [])
    ## object.h (module 'core'): ns3::Object::Object(ns3::Object const & o) [copy constructor]
    cls.add_constructor([param('ns3::Object const &', 'o')], 
                        visibility='protected')
    ## object.h (module 'core'): void ns3::Object::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## object.h (module 'core'): void ns3::Object::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## object.h (module 'core'): void ns3::Object::NotifyNewAggregate() [member function]
    cls.add_method('NotifyNewAggregate', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3ObjectAggregateIterator_methods(root_module, cls):
    ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator(ns3::Object::AggregateIterator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Object::AggregateIterator const &', 'arg0')])
    ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator() [constructor]
    cls.add_constructor([])
    ## object.h (module 'core'): bool ns3::Object::AggregateIterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## object.h (module 'core'): ns3::Ptr<ns3::Object const> ns3::Object::AggregateIterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::Ptr< ns3::Object const >', 
                   [])
    return

def register_Ns3PacketBurst_methods(root_module, cls):
    ## packet-burst.h (module 'network'): ns3::PacketBurst::PacketBurst(ns3::PacketBurst const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::PacketBurst const &', 'arg0')])
    ## packet-burst.h (module 'network'): ns3::PacketBurst::PacketBurst() [constructor]
    cls.add_constructor([])
    ## packet-burst.h (module 'network'): void ns3::PacketBurst::AddPacket(ns3::Ptr<ns3::Packet> packet) [member function]
    cls.add_method('AddPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet')])
    ## packet-burst.h (module 'network'): std::_List_const_iterator<ns3::Ptr<ns3::Packet> > ns3::PacketBurst::Begin() const [member function]
    cls.add_method('Begin', 
                   'std::_List_const_iterator< ns3::Ptr< ns3::Packet > >', 
                   [], 
                   is_const=True)
    ## packet-burst.h (module 'network'): ns3::Ptr<ns3::PacketBurst> ns3::PacketBurst::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::PacketBurst >', 
                   [], 
                   is_const=True)
    ## packet-burst.h (module 'network'): std::_List_const_iterator<ns3::Ptr<ns3::Packet> > ns3::PacketBurst::End() const [member function]
    cls.add_method('End', 
                   'std::_List_const_iterator< ns3::Ptr< ns3::Packet > >', 
                   [], 
                   is_const=True)
    ## packet-burst.h (module 'network'): uint32_t ns3::PacketBurst::GetNPackets() const [member function]
    cls.add_method('GetNPackets', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet-burst.h (module 'network'): std::list<ns3::Ptr<ns3::Packet>, std::allocator<ns3::Ptr<ns3::Packet> > > ns3::PacketBurst::GetPackets() const [member function]
    cls.add_method('GetPackets', 
                   'std::list< ns3::Ptr< ns3::Packet > >', 
                   [], 
                   is_const=True)
    ## packet-burst.h (module 'network'): uint32_t ns3::PacketBurst::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet-burst.h (module 'network'): static ns3::TypeId ns3::PacketBurst::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## packet-burst.h (module 'network'): void ns3::PacketBurst::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='private', is_virtual=True)
    return

def register_Ns3PdcpTag_methods(root_module, cls):
    ## nr-pdcp-tag.h (module 'nr'): ns3::PdcpTag::PdcpTag(ns3::PdcpTag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::PdcpTag const &', 'arg0')])
    ## nr-pdcp-tag.h (module 'nr'): ns3::PdcpTag::PdcpTag() [constructor]
    cls.add_constructor([])
    ## nr-pdcp-tag.h (module 'nr'): ns3::PdcpTag::PdcpTag(ns3::Time senderTimestamp) [constructor]
    cls.add_constructor([param('ns3::Time', 'senderTimestamp')])
    ## nr-pdcp-tag.h (module 'nr'): void ns3::PdcpTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## nr-pdcp-tag.h (module 'nr'): ns3::TypeId ns3::PdcpTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-pdcp-tag.h (module 'nr'): ns3::Time ns3::PdcpTag::GetSenderTimestamp() const [member function]
    cls.add_method('GetSenderTimestamp', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## nr-pdcp-tag.h (module 'nr'): uint32_t ns3::PdcpTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-pdcp-tag.h (module 'nr'): static ns3::TypeId ns3::PdcpTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-pdcp-tag.h (module 'nr'): void ns3::PdcpTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-pdcp-tag.h (module 'nr'): void ns3::PdcpTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## nr-pdcp-tag.h (module 'nr'): void ns3::PdcpTag::SetSenderTimestamp(ns3::Time senderTimestamp) [member function]
    cls.add_method('SetSenderTimestamp', 
                   'void', 
                   [param('ns3::Time', 'senderTimestamp')])
    return

def register_Ns3NrRadioEnvironmentMapHelper_methods(root_module, cls):
    ## nr-radio-environment-map-helper.h (module 'nr'): ns3::NrRadioEnvironmentMapHelper::NrRadioEnvironmentMapHelper() [constructor]
    cls.add_constructor([])
    ## nr-radio-environment-map-helper.h (module 'nr'): void ns3::NrRadioEnvironmentMapHelper::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-radio-environment-map-helper.h (module 'nr'): uint8_t ns3::NrRadioEnvironmentMapHelper::GetBandwidth() const [member function]
    cls.add_method('GetBandwidth', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-radio-environment-map-helper.h (module 'nr'): static ns3::TypeId ns3::NrRadioEnvironmentMapHelper::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-radio-environment-map-helper.h (module 'nr'): void ns3::NrRadioEnvironmentMapHelper::Install() [member function]
    cls.add_method('Install', 
                   'void', 
                   [])
    ## nr-radio-environment-map-helper.h (module 'nr'): void ns3::NrRadioEnvironmentMapHelper::SetBandwidth(uint8_t bw) [member function]
    cls.add_method('SetBandwidth', 
                   'void', 
                   [param('uint8_t', 'bw')])
    return

def register_Ns3RandomVariableStream_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::RandomVariableStream::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::RandomVariableStream::RandomVariableStream() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): void ns3::RandomVariableStream::SetStream(int64_t stream) [member function]
    cls.add_method('SetStream', 
                   'void', 
                   [param('int64_t', 'stream')])
    ## random-variable-stream.h (module 'core'): int64_t ns3::RandomVariableStream::GetStream() const [member function]
    cls.add_method('GetStream', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): void ns3::RandomVariableStream::SetAntithetic(bool isAntithetic) [member function]
    cls.add_method('SetAntithetic', 
                   'void', 
                   [param('bool', 'isAntithetic')])
    ## random-variable-stream.h (module 'core'): bool ns3::RandomVariableStream::IsAntithetic() const [member function]
    cls.add_method('IsAntithetic', 
                   'bool', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::RandomVariableStream::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::RandomVariableStream::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## random-variable-stream.h (module 'core'): ns3::RngStream * ns3::RandomVariableStream::Peek() const [member function]
    cls.add_method('Peek', 
                   'ns3::RngStream *', 
                   [], 
                   is_const=True, visibility='protected')
    return

def register_Ns3RlcTag_methods(root_module, cls):
    ## nr-rlc-tag.h (module 'nr'): ns3::RlcTag::RlcTag(ns3::RlcTag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RlcTag const &', 'arg0')])
    ## nr-rlc-tag.h (module 'nr'): ns3::RlcTag::RlcTag() [constructor]
    cls.add_constructor([])
    ## nr-rlc-tag.h (module 'nr'): ns3::RlcTag::RlcTag(ns3::Time senderTimestamp) [constructor]
    cls.add_constructor([param('ns3::Time', 'senderTimestamp')])
    ## nr-rlc-tag.h (module 'nr'): void ns3::RlcTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## nr-rlc-tag.h (module 'nr'): ns3::TypeId ns3::RlcTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-tag.h (module 'nr'): ns3::Time ns3::RlcTag::GetSenderTimestamp() const [member function]
    cls.add_method('GetSenderTimestamp', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## nr-rlc-tag.h (module 'nr'): uint32_t ns3::RlcTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-tag.h (module 'nr'): static ns3::TypeId ns3::RlcTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-rlc-tag.h (module 'nr'): void ns3::RlcTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-tag.h (module 'nr'): void ns3::RlcTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## nr-rlc-tag.h (module 'nr'): void ns3::RlcTag::SetSenderTimestamp(ns3::Time senderTimestamp) [member function]
    cls.add_method('SetSenderTimestamp', 
                   'void', 
                   [param('ns3::Time', 'senderTimestamp')])
    return

def register_Ns3SequentialRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::SequentialRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::SequentialRandomVariable::SequentialRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::SequentialRandomVariable::GetMin() const [member function]
    cls.add_method('GetMin', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::SequentialRandomVariable::GetMax() const [member function]
    cls.add_method('GetMax', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): ns3::Ptr<ns3::RandomVariableStream> ns3::SequentialRandomVariable::GetIncrement() const [member function]
    cls.add_method('GetIncrement', 
                   'ns3::Ptr< ns3::RandomVariableStream >', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::SequentialRandomVariable::GetConsecutive() const [member function]
    cls.add_method('GetConsecutive', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::SequentialRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::SequentialRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter< ns3::AttributeAccessor > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter< ns3::AttributeChecker > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter< ns3::AttributeValue > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::SimpleRefCount(ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter< ns3::CallbackImplBase > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3NgcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3NgcTft__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NgcTft, ns3::empty, ns3::DefaultDeleter<ns3::NgcTft> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NgcTft, ns3::empty, ns3::DefaultDeleter<ns3::NgcTft> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NgcTft, ns3::empty, ns3::DefaultDeleter<ns3::NgcTft> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::NgcTft, ns3::empty, ns3::DefaultDeleter< ns3::NgcTft > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NgcTft, ns3::empty, ns3::DefaultDeleter<ns3::NgcTft> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3NgcTftClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3NgcTftClassifier__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NgcTftClassifier, ns3::empty, ns3::DefaultDeleter<ns3::NgcTftClassifier> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NgcTftClassifier, ns3::empty, ns3::DefaultDeleter<ns3::NgcTftClassifier> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NgcTftClassifier, ns3::empty, ns3::DefaultDeleter<ns3::NgcTftClassifier> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::NgcTftClassifier, ns3::empty, ns3::DefaultDeleter< ns3::NgcTftClassifier > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NgcTftClassifier, ns3::empty, ns3::DefaultDeleter<ns3::NgcTftClassifier> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >::SimpleRefCount(ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter< ns3::EventImpl > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter< ns3::Hash::Implementation > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter< ns3::Ipv4MulticastRoute > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter< ns3::Ipv4Route > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3NrChunkProcessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3NrChunkProcessor__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrChunkProcessor, ns3::empty, ns3::DefaultDeleter<ns3::NrChunkProcessor> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrChunkProcessor, ns3::empty, ns3::DefaultDeleter<ns3::NrChunkProcessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NrChunkProcessor, ns3::empty, ns3::DefaultDeleter<ns3::NrChunkProcessor> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::NrChunkProcessor, ns3::empty, ns3::DefaultDeleter< ns3::NrChunkProcessor > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NrChunkProcessor, ns3::empty, ns3::DefaultDeleter<ns3::NrChunkProcessor> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3NrControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3NrControlMessage__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::NrControlMessage> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::NrControlMessage> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NrControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::NrControlMessage> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::NrControlMessage, ns3::empty, ns3::DefaultDeleter< ns3::NrControlMessage > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NrControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::NrControlMessage> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3NrHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3NrHarqPhy__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::NrHarqPhy> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::NrHarqPhy> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NrHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::NrHarqPhy> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::NrHarqPhy, ns3::empty, ns3::DefaultDeleter< ns3::NrHarqPhy > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NrHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::NrHarqPhy> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter< ns3::NixVector > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter< ns3::Packet > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> >::SimpleRefCount(ns3::SimpleRefCount<ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter< ns3::SpectrumModel > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> >::SimpleRefCount(ns3::SimpleRefCount<ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter< ns3::SpectrumSignalParameters > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter< ns3::SpectrumValue > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter< ns3::TraceSourceAccessor > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter< ns3::VendorSpecificValue > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3NrX2CellInfo_Ns3Empty_Ns3DefaultDeleter__lt__ns3NrX2CellInfo__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrX2CellInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2CellInfo> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrX2CellInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2CellInfo> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NrX2CellInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2CellInfo> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::NrX2CellInfo, ns3::empty, ns3::DefaultDeleter< ns3::NrX2CellInfo > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NrX2CellInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2CellInfo> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3SimpleRefCount__Ns3NrX2IfaceInfo_Ns3Empty_Ns3DefaultDeleter__lt__ns3NrX2IfaceInfo__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrX2IfaceInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2IfaceInfo> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NrX2IfaceInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2IfaceInfo> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NrX2IfaceInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2IfaceInfo> > const & o) [copy constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::NrX2IfaceInfo, ns3::empty, ns3::DefaultDeleter< ns3::NrX2IfaceInfo > > const &', 'o')])
    ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NrX2IfaceInfo, ns3::empty, ns3::DefaultDeleter<ns3::NrX2IfaceInfo> >::Cleanup() [member function]
    cls.add_method('Cleanup', 
                   'void', 
                   [], 
                   is_static=True)
    return

def register_Ns3Socket_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::Socket::Socket(ns3::Socket const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Socket const &', 'arg0')])
    ## socket.h (module 'network'): ns3::Socket::Socket() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): int ns3::Socket::Bind(ns3::Address const & address) [member function]
    cls.add_method('Bind', 
                   'int', 
                   [param('ns3::Address const &', 'address')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Bind() [member function]
    cls.add_method('Bind', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Bind6() [member function]
    cls.add_method('Bind6', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::BindToNetDevice(ns3::Ptr<ns3::NetDevice> netdevice) [member function]
    cls.add_method('BindToNetDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'netdevice')], 
                   is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Close() [member function]
    cls.add_method('Close', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Connect(ns3::Address const & address) [member function]
    cls.add_method('Connect', 
                   'int', 
                   [param('ns3::Address const &', 'address')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::Ptr<ns3::Socket> ns3::Socket::CreateSocket(ns3::Ptr<ns3::Node> node, ns3::TypeId tid) [member function]
    cls.add_method('CreateSocket', 
                   'ns3::Ptr< ns3::Socket >', 
                   [param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::TypeId', 'tid')], 
                   is_static=True)
    ## socket.h (module 'network'): bool ns3::Socket::GetAllowBroadcast() const [member function]
    cls.add_method('GetAllowBroadcast', 
                   'bool', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Socket::GetBoundNetDevice() [member function]
    cls.add_method('GetBoundNetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [])
    ## socket.h (module 'network'): ns3::Socket::SocketErrno ns3::Socket::GetErrno() const [member function]
    cls.add_method('GetErrno', 
                   'ns3::Socket::SocketErrno', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpTos() const [member function]
    cls.add_method('GetIpTos', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpTtl() const [member function]
    cls.add_method('GetIpTtl', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpv6HopLimit() const [member function]
    cls.add_method('GetIpv6HopLimit', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpv6Tclass() const [member function]
    cls.add_method('GetIpv6Tclass', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::Node> ns3::Socket::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::Socket::GetRxAvailable() const [member function]
    cls.add_method('GetRxAvailable', 
                   'uint32_t', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::GetSockName(ns3::Address & address) const [member function]
    cls.add_method('GetSockName', 
                   'int', 
                   [param('ns3::Address &', 'address')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Socket::SocketType ns3::Socket::GetSocketType() const [member function]
    cls.add_method('GetSocketType', 
                   'ns3::Socket::SocketType', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::Socket::GetTxAvailable() const [member function]
    cls.add_method('GetTxAvailable', 
                   'uint32_t', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::Socket::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsIpRecvTos() const [member function]
    cls.add_method('IsIpRecvTos', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsIpRecvTtl() const [member function]
    cls.add_method('IsIpRecvTtl', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsIpv6RecvHopLimit() const [member function]
    cls.add_method('IsIpv6RecvHopLimit', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsIpv6RecvTclass() const [member function]
    cls.add_method('IsIpv6RecvTclass', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsRecvPktInfo() const [member function]
    cls.add_method('IsRecvPktInfo', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): int ns3::Socket::Listen() [member function]
    cls.add_method('Listen', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::Recv(uint32_t maxSize, uint32_t flags) [member function]
    cls.add_method('Recv', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('uint32_t', 'maxSize'), param('uint32_t', 'flags')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::Recv() [member function]
    cls.add_method('Recv', 
                   'ns3::Ptr< ns3::Packet >', 
                   [])
    ## socket.h (module 'network'): int ns3::Socket::Recv(uint8_t * buf, uint32_t size, uint32_t flags) [member function]
    cls.add_method('Recv', 
                   'int', 
                   [param('uint8_t *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags')])
    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::RecvFrom(uint32_t maxSize, uint32_t flags, ns3::Address & fromAddress) [member function]
    cls.add_method('RecvFrom', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('uint32_t', 'maxSize'), param('uint32_t', 'flags'), param('ns3::Address &', 'fromAddress')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::RecvFrom(ns3::Address & fromAddress) [member function]
    cls.add_method('RecvFrom', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('ns3::Address &', 'fromAddress')])
    ## socket.h (module 'network'): int ns3::Socket::RecvFrom(uint8_t * buf, uint32_t size, uint32_t flags, ns3::Address & fromAddress) [member function]
    cls.add_method('RecvFrom', 
                   'int', 
                   [param('uint8_t *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags'), param('ns3::Address &', 'fromAddress')])
    ## socket.h (module 'network'): int ns3::Socket::Send(ns3::Ptr<ns3::Packet> p, uint32_t flags) [member function]
    cls.add_method('Send', 
                   'int', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint32_t', 'flags')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Send(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('Send', 
                   'int', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## socket.h (module 'network'): int ns3::Socket::Send(uint8_t const * buf, uint32_t size, uint32_t flags) [member function]
    cls.add_method('Send', 
                   'int', 
                   [param('uint8_t const *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags')])
    ## socket.h (module 'network'): int ns3::Socket::SendTo(ns3::Ptr<ns3::Packet> p, uint32_t flags, ns3::Address const & toAddress) [member function]
    cls.add_method('SendTo', 
                   'int', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint32_t', 'flags'), param('ns3::Address const &', 'toAddress')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::SendTo(uint8_t const * buf, uint32_t size, uint32_t flags, ns3::Address const & address) [member function]
    cls.add_method('SendTo', 
                   'int', 
                   [param('uint8_t const *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags'), param('ns3::Address const &', 'address')])
    ## socket.h (module 'network'): void ns3::Socket::SetAcceptCallback(ns3::Callback<bool, ns3::Ptr<ns3::Socket>, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionRequest, ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> newConnectionCreated) [member function]
    cls.add_method('SetAcceptCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionRequest'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'newConnectionCreated')])
    ## socket.h (module 'network'): bool ns3::Socket::SetAllowBroadcast(bool allowBroadcast) [member function]
    cls.add_method('SetAllowBroadcast', 
                   'bool', 
                   [param('bool', 'allowBroadcast')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::SetCloseCallbacks(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> normalClose, ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> errorClose) [member function]
    cls.add_method('SetCloseCallbacks', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'normalClose'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'errorClose')])
    ## socket.h (module 'network'): void ns3::Socket::SetConnectCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionSucceeded, ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionFailed) [member function]
    cls.add_method('SetConnectCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionSucceeded'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionFailed')])
    ## socket.h (module 'network'): void ns3::Socket::SetDataSentCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> dataSent) [member function]
    cls.add_method('SetDataSentCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'dataSent')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpRecvTos(bool ipv4RecvTos) [member function]
    cls.add_method('SetIpRecvTos', 
                   'void', 
                   [param('bool', 'ipv4RecvTos')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpRecvTtl(bool ipv4RecvTtl) [member function]
    cls.add_method('SetIpRecvTtl', 
                   'void', 
                   [param('bool', 'ipv4RecvTtl')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpTos(uint8_t ipTos) [member function]
    cls.add_method('SetIpTos', 
                   'void', 
                   [param('uint8_t', 'ipTos')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpTtl(uint8_t ipTtl) [member function]
    cls.add_method('SetIpTtl', 
                   'void', 
                   [param('uint8_t', 'ipTtl')], 
                   is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::SetIpv6HopLimit(uint8_t ipHopLimit) [member function]
    cls.add_method('SetIpv6HopLimit', 
                   'void', 
                   [param('uint8_t', 'ipHopLimit')], 
                   is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::SetIpv6RecvHopLimit(bool ipv6RecvHopLimit) [member function]
    cls.add_method('SetIpv6RecvHopLimit', 
                   'void', 
                   [param('bool', 'ipv6RecvHopLimit')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpv6RecvTclass(bool ipv6RecvTclass) [member function]
    cls.add_method('SetIpv6RecvTclass', 
                   'void', 
                   [param('bool', 'ipv6RecvTclass')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpv6Tclass(int ipTclass) [member function]
    cls.add_method('SetIpv6Tclass', 
                   'void', 
                   [param('int', 'ipTclass')])
    ## socket.h (module 'network'): void ns3::Socket::SetRecvCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> arg0) [member function]
    cls.add_method('SetRecvCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'arg0')])
    ## socket.h (module 'network'): void ns3::Socket::SetRecvPktInfo(bool flag) [member function]
    cls.add_method('SetRecvPktInfo', 
                   'void', 
                   [param('bool', 'flag')])
    ## socket.h (module 'network'): void ns3::Socket::SetSendCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCb) [member function]
    cls.add_method('SetSendCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCb')])
    ## socket.h (module 'network'): int ns3::Socket::ShutdownRecv() [member function]
    cls.add_method('ShutdownRecv', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::ShutdownSend() [member function]
    cls.add_method('ShutdownSend', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpTos() const [member function]
    cls.add_method('IsManualIpTos', 
                   'bool', 
                   [], 
                   is_const=True, visibility='protected')
    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpTtl() const [member function]
    cls.add_method('IsManualIpTtl', 
                   'bool', 
                   [], 
                   is_const=True, visibility='protected')
    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpv6HopLimit() const [member function]
    cls.add_method('IsManualIpv6HopLimit', 
                   'bool', 
                   [], 
                   is_const=True, visibility='protected')
    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpv6Tclass() const [member function]
    cls.add_method('IsManualIpv6Tclass', 
                   'bool', 
                   [], 
                   is_const=True, visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyConnectionFailed() [member function]
    cls.add_method('NotifyConnectionFailed', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): bool ns3::Socket::NotifyConnectionRequest(ns3::Address const & from) [member function]
    cls.add_method('NotifyConnectionRequest', 
                   'bool', 
                   [param('ns3::Address const &', 'from')], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyConnectionSucceeded() [member function]
    cls.add_method('NotifyConnectionSucceeded', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyDataRecv() [member function]
    cls.add_method('NotifyDataRecv', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyDataSent(uint32_t size) [member function]
    cls.add_method('NotifyDataSent', 
                   'void', 
                   [param('uint32_t', 'size')], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyErrorClose() [member function]
    cls.add_method('NotifyErrorClose', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyNewConnectionCreated(ns3::Ptr<ns3::Socket> socket, ns3::Address const & from) [member function]
    cls.add_method('NotifyNewConnectionCreated', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'socket'), param('ns3::Address const &', 'from')], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyNormalClose() [member function]
    cls.add_method('NotifyNormalClose', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifySend(uint32_t spaceAvailable) [member function]
    cls.add_method('NotifySend', 
                   'void', 
                   [param('uint32_t', 'spaceAvailable')], 
                   visibility='protected')
    return

def register_Ns3SocketAddressTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketAddressTag::SocketAddressTag(ns3::SocketAddressTag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SocketAddressTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketAddressTag::SocketAddressTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketAddressTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): ns3::Address ns3::SocketAddressTag::GetAddress() const [member function]
    cls.add_method('GetAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketAddressTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketAddressTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketAddressTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketAddressTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketAddressTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketAddressTag::SetAddress(ns3::Address addr) [member function]
    cls.add_method('SetAddress', 
                   'void', 
                   [param('ns3::Address', 'addr')])
    return

def register_Ns3SocketIpTosTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag(ns3::SocketIpTosTag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SocketIpTosTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpTosTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketIpTosTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketIpTosTag::GetTos() const [member function]
    cls.add_method('GetTos', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpTosTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpTosTag::SetTos(uint8_t tos) [member function]
    cls.add_method('SetTos', 
                   'void', 
                   [param('uint8_t', 'tos')])
    return

def register_Ns3SocketIpTtlTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag(ns3::SocketIpTtlTag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SocketIpTtlTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpTtlTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketIpTtlTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketIpTtlTag::GetTtl() const [member function]
    cls.add_method('GetTtl', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpTtlTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::SetTtl(uint8_t ttl) [member function]
    cls.add_method('SetTtl', 
                   'void', 
                   [param('uint8_t', 'ttl')])
    return

def register_Ns3SocketIpv6HopLimitTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag(ns3::SocketIpv6HopLimitTag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SocketIpv6HopLimitTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketIpv6HopLimitTag::GetHopLimit() const [member function]
    cls.add_method('GetHopLimit', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpv6HopLimitTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketIpv6HopLimitTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpv6HopLimitTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::SetHopLimit(uint8_t hopLimit) [member function]
    cls.add_method('SetHopLimit', 
                   'void', 
                   [param('uint8_t', 'hopLimit')])
    return

def register_Ns3SocketIpv6TclassTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag(ns3::SocketIpv6TclassTag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SocketIpv6TclassTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpv6TclassTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketIpv6TclassTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketIpv6TclassTag::GetTclass() const [member function]
    cls.add_method('GetTclass', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpv6TclassTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::SetTclass(uint8_t tclass) [member function]
    cls.add_method('SetTclass', 
                   'void', 
                   [param('uint8_t', 'tclass')])
    return

def register_Ns3SocketSetDontFragmentTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag(ns3::SocketSetDontFragmentTag const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SocketSetDontFragmentTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Disable() [member function]
    cls.add_method('Disable', 
                   'void', 
                   [])
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Enable() [member function]
    cls.add_method('Enable', 
                   'void', 
                   [])
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketSetDontFragmentTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketSetDontFragmentTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketSetDontFragmentTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): bool ns3::SocketSetDontFragmentTag::IsEnabled() const [member function]
    cls.add_method('IsEnabled', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3SpectrumInterference_methods(root_module, cls):
    ## spectrum-interference.h (module 'spectrum'): ns3::SpectrumInterference::SpectrumInterference(ns3::SpectrumInterference const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SpectrumInterference const &', 'arg0')])
    ## spectrum-interference.h (module 'spectrum'): ns3::SpectrumInterference::SpectrumInterference() [constructor]
    cls.add_constructor([])
    ## spectrum-interference.h (module 'spectrum'): void ns3::SpectrumInterference::AbortRx() [member function]
    cls.add_method('AbortRx', 
                   'void', 
                   [])
    ## spectrum-interference.h (module 'spectrum'): void ns3::SpectrumInterference::AddSignal(ns3::Ptr<ns3::SpectrumValue const> spd, ns3::Time const duration) [member function]
    cls.add_method('AddSignal', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'spd'), param('ns3::Time const', 'duration')])
    ## spectrum-interference.h (module 'spectrum'): bool ns3::SpectrumInterference::EndRx() [member function]
    cls.add_method('EndRx', 
                   'bool', 
                   [])
    ## spectrum-interference.h (module 'spectrum'): static ns3::TypeId ns3::SpectrumInterference::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## spectrum-interference.h (module 'spectrum'): void ns3::SpectrumInterference::SetErrorModel(ns3::Ptr<ns3::SpectrumErrorModel> e) [member function]
    cls.add_method('SetErrorModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumErrorModel >', 'e')])
    ## spectrum-interference.h (module 'spectrum'): void ns3::SpectrumInterference::SetNoisePowerSpectralDensity(ns3::Ptr<ns3::SpectrumValue const> noisePsd) [member function]
    cls.add_method('SetNoisePowerSpectralDensity', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'noisePsd')])
    ## spectrum-interference.h (module 'spectrum'): void ns3::SpectrumInterference::StartRx(ns3::Ptr<const ns3::Packet> p, ns3::Ptr<ns3::SpectrumValue const> rxPsd) [member function]
    cls.add_method('StartRx', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet const >', 'p'), param('ns3::Ptr< ns3::SpectrumValue const >', 'rxPsd')])
    ## spectrum-interference.h (module 'spectrum'): void ns3::SpectrumInterference::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3SpectrumModel_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    ## spectrum-model.h (module 'spectrum'): ns3::SpectrumModel::SpectrumModel(ns3::SpectrumModel const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SpectrumModel const &', 'arg0')])
    ## spectrum-model.h (module 'spectrum'): ns3::SpectrumModel::SpectrumModel(std::vector<double, std::allocator<double> > centerFreqs) [constructor]
    cls.add_constructor([param('std::vector< double >', 'centerFreqs')])
    ## spectrum-model.h (module 'spectrum'): ns3::SpectrumModel::SpectrumModel(ns3::Bands bands) [constructor]
    cls.add_constructor([param('ns3::Bands', 'bands')])
    ## spectrum-model.h (module 'spectrum'): __gnu_cxx::__normal_iterator<const ns3::BandInfo*,std::vector<ns3::BandInfo, std::allocator<ns3::BandInfo> > > ns3::SpectrumModel::Begin() const [member function]
    cls.add_method('Begin', 
                   '__gnu_cxx::__normal_iterator< ns3::BandInfo const *, std::vector< ns3::BandInfo > >', 
                   [], 
                   is_const=True)
    ## spectrum-model.h (module 'spectrum'): __gnu_cxx::__normal_iterator<const ns3::BandInfo*,std::vector<ns3::BandInfo, std::allocator<ns3::BandInfo> > > ns3::SpectrumModel::End() const [member function]
    cls.add_method('End', 
                   '__gnu_cxx::__normal_iterator< ns3::BandInfo const *, std::vector< ns3::BandInfo > >', 
                   [], 
                   is_const=True)
    ## spectrum-model.h (module 'spectrum'): size_t ns3::SpectrumModel::GetNumBands() const [member function]
    cls.add_method('GetNumBands', 
                   'size_t', 
                   [], 
                   is_const=True)
    ## spectrum-model.h (module 'spectrum'): ns3::SpectrumModelUid_t ns3::SpectrumModel::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'ns3::SpectrumModelUid_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3SpectrumPhy_methods(root_module, cls):
    ## spectrum-phy.h (module 'spectrum'): ns3::SpectrumPhy::SpectrumPhy() [constructor]
    cls.add_constructor([])
    ## spectrum-phy.h (module 'spectrum'): static ns3::TypeId ns3::SpectrumPhy::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## spectrum-phy.h (module 'spectrum'): void ns3::SpectrumPhy::SetDevice(ns3::Ptr<ns3::NetDevice> d) [member function]
    cls.add_method('SetDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'd')], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): ns3::Ptr<ns3::NetDevice> ns3::SpectrumPhy::GetDevice() const [member function]
    cls.add_method('GetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): void ns3::SpectrumPhy::SetMobility(ns3::Ptr<ns3::MobilityModel> m) [member function]
    cls.add_method('SetMobility', 
                   'void', 
                   [param('ns3::Ptr< ns3::MobilityModel >', 'm')], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): ns3::Ptr<ns3::MobilityModel> ns3::SpectrumPhy::GetMobility() [member function]
    cls.add_method('GetMobility', 
                   'ns3::Ptr< ns3::MobilityModel >', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): void ns3::SpectrumPhy::SetChannel(ns3::Ptr<ns3::SpectrumChannel> c) [member function]
    cls.add_method('SetChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumChannel >', 'c')], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): ns3::Ptr<ns3::SpectrumModel const> ns3::SpectrumPhy::GetRxSpectrumModel() const [member function]
    cls.add_method('GetRxSpectrumModel', 
                   'ns3::Ptr< ns3::SpectrumModel const >', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): ns3::Ptr<ns3::AntennaModel> ns3::SpectrumPhy::GetRxAntenna() [member function]
    cls.add_method('GetRxAntenna', 
                   'ns3::Ptr< ns3::AntennaModel >', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): void ns3::SpectrumPhy::StartRx(ns3::Ptr<ns3::SpectrumSignalParameters> params) [member function]
    cls.add_method('StartRx', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumSignalParameters >', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3SpectrumPropagationLossModel_methods(root_module, cls):
    ## spectrum-propagation-loss-model.h (module 'spectrum'): ns3::SpectrumPropagationLossModel::SpectrumPropagationLossModel(ns3::SpectrumPropagationLossModel const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SpectrumPropagationLossModel const &', 'arg0')])
    ## spectrum-propagation-loss-model.h (module 'spectrum'): ns3::SpectrumPropagationLossModel::SpectrumPropagationLossModel() [constructor]
    cls.add_constructor([])
    ## spectrum-propagation-loss-model.h (module 'spectrum'): ns3::Ptr<ns3::SpectrumValue> ns3::SpectrumPropagationLossModel::CalcRxPowerSpectralDensity(ns3::Ptr<ns3::SpectrumValue const> txPsd, ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
    cls.add_method('CalcRxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'txPsd'), param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
                   is_const=True)
    ## spectrum-propagation-loss-model.h (module 'spectrum'): static ns3::TypeId ns3::SpectrumPropagationLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## spectrum-propagation-loss-model.h (module 'spectrum'): void ns3::SpectrumPropagationLossModel::SetNext(ns3::Ptr<ns3::SpectrumPropagationLossModel> next) [member function]
    cls.add_method('SetNext', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumPropagationLossModel >', 'next')])
    ## spectrum-propagation-loss-model.h (module 'spectrum'): void ns3::SpectrumPropagationLossModel::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## spectrum-propagation-loss-model.h (module 'spectrum'): ns3::Ptr<ns3::SpectrumValue> ns3::SpectrumPropagationLossModel::DoCalcRxPowerSpectralDensity(ns3::Ptr<ns3::SpectrumValue const> txPsd, ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
    cls.add_method('DoCalcRxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'txPsd'), param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
                   is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
    return

def register_Ns3SpectrumSignalParameters_methods(root_module, cls):
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters::SpectrumSignalParameters() [constructor]
    cls.add_constructor([])
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters::SpectrumSignalParameters(ns3::SpectrumSignalParameters const & p) [copy constructor]
    cls.add_constructor([param('ns3::SpectrumSignalParameters const &', 'p')])
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::Ptr<ns3::SpectrumSignalParameters> ns3::SpectrumSignalParameters::Copy() [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::SpectrumSignalParameters >', 
                   [], 
                   is_virtual=True)
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters::duration [variable]
    cls.add_instance_attribute('duration', 'ns3::Time', is_const=False)
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters::psd [variable]
    cls.add_instance_attribute('psd', 'ns3::Ptr< ns3::SpectrumValue >', is_const=False)
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters::txAntenna [variable]
    cls.add_instance_attribute('txAntenna', 'ns3::Ptr< ns3::AntennaModel >', is_const=False)
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters::txPhy [variable]
    cls.add_instance_attribute('txPhy', 'ns3::Ptr< ns3::SpectrumPhy >', is_const=False)
    return

def register_Ns3SpectrumValue_methods(root_module, cls):
    cls.add_binary_numeric_operator('*', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('double', u'right'))
    cls.add_binary_numeric_operator('*', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('ns3::SpectrumValue const &', u'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('double', u'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('ns3::SpectrumValue const &', u'right'))
    cls.add_unary_numeric_operator('-')
    cls.add_binary_numeric_operator('-', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('double', u'right'))
    cls.add_binary_numeric_operator('-', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('ns3::SpectrumValue const &', u'right'))
    cls.add_binary_numeric_operator('/', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('double', u'right'))
    cls.add_binary_numeric_operator('/', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('ns3::SpectrumValue const &', u'right'))
    cls.add_output_stream_operator()
    cls.add_inplace_numeric_operator('*=', param('ns3::SpectrumValue const &', u'right'))
    cls.add_inplace_numeric_operator('*=', param('double', u'right'))
    cls.add_inplace_numeric_operator('+=', param('ns3::SpectrumValue const &', u'right'))
    cls.add_inplace_numeric_operator('+=', param('double', u'right'))
    cls.add_inplace_numeric_operator('-=', param('ns3::SpectrumValue const &', u'right'))
    cls.add_inplace_numeric_operator('-=', param('double', u'right'))
    cls.add_inplace_numeric_operator('/=', param('ns3::SpectrumValue const &', u'right'))
    cls.add_inplace_numeric_operator('/=', param('double', u'right'))
    ## spectrum-value.h (module 'spectrum'): ns3::SpectrumValue::SpectrumValue(ns3::SpectrumValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SpectrumValue const &', 'arg0')])
    ## spectrum-value.h (module 'spectrum'): ns3::SpectrumValue::SpectrumValue(ns3::Ptr<ns3::SpectrumModel const> sm) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::SpectrumModel const >', 'sm')])
    ## spectrum-value.h (module 'spectrum'): ns3::SpectrumValue::SpectrumValue() [constructor]
    cls.add_constructor([])
    ## spectrum-value.h (module 'spectrum'): __gnu_cxx::__normal_iterator<const ns3::BandInfo*,std::vector<ns3::BandInfo, std::allocator<ns3::BandInfo> > > ns3::SpectrumValue::ConstBandsBegin() const [member function]
    cls.add_method('ConstBandsBegin', 
                   '__gnu_cxx::__normal_iterator< ns3::BandInfo const *, std::vector< ns3::BandInfo > >', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): __gnu_cxx::__normal_iterator<const ns3::BandInfo*,std::vector<ns3::BandInfo, std::allocator<ns3::BandInfo> > > ns3::SpectrumValue::ConstBandsEnd() const [member function]
    cls.add_method('ConstBandsEnd', 
                   '__gnu_cxx::__normal_iterator< ns3::BandInfo const *, std::vector< ns3::BandInfo > >', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): __gnu_cxx::__normal_iterator<const double*,std::vector<double, std::allocator<double> > > ns3::SpectrumValue::ConstValuesBegin() const [member function]
    cls.add_method('ConstValuesBegin', 
                   '__gnu_cxx::__normal_iterator< double const *, std::vector< double > >', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): __gnu_cxx::__normal_iterator<const double*,std::vector<double, std::allocator<double> > > ns3::SpectrumValue::ConstValuesEnd() const [member function]
    cls.add_method('ConstValuesEnd', 
                   '__gnu_cxx::__normal_iterator< double const *, std::vector< double > >', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): ns3::Ptr<ns3::SpectrumValue> ns3::SpectrumValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): ns3::Ptr<ns3::SpectrumModel const> ns3::SpectrumValue::GetSpectrumModel() const [member function]
    cls.add_method('GetSpectrumModel', 
                   'ns3::Ptr< ns3::SpectrumModel const >', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): ns3::SpectrumModelUid_t ns3::SpectrumValue::GetSpectrumModelUid() const [member function]
    cls.add_method('GetSpectrumModelUid', 
                   'ns3::SpectrumModelUid_t', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): __gnu_cxx::__normal_iterator<double*,std::vector<double, std::allocator<double> > > ns3::SpectrumValue::ValuesBegin() [member function]
    cls.add_method('ValuesBegin', 
                   '__gnu_cxx::__normal_iterator< double *, std::vector< double > >', 
                   [])
    ## spectrum-value.h (module 'spectrum'): __gnu_cxx::__normal_iterator<double*,std::vector<double, std::allocator<double> > > ns3::SpectrumValue::ValuesEnd() [member function]
    cls.add_method('ValuesEnd', 
                   '__gnu_cxx::__normal_iterator< double *, std::vector< double > >', 
                   [])
    return

def register_Ns3Time_methods(root_module, cls):
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<=')
    cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', u'right'))
    cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
    cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
    cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('>')
    cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', u'right'))
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('>=')
    ## nstime.h (module 'core'): ns3::Time::Time() [constructor]
    cls.add_constructor([])
    ## nstime.h (module 'core'): ns3::Time::Time(ns3::Time const & o) [copy constructor]
    cls.add_constructor([param('ns3::Time const &', 'o')])
    ## nstime.h (module 'core'): ns3::Time::Time(double v) [constructor]
    cls.add_constructor([param('double', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(int v) [constructor]
    cls.add_constructor([param('int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(long int v) [constructor]
    cls.add_constructor([param('long int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(long long int v) [constructor]
    cls.add_constructor([param('long long int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(unsigned int v) [constructor]
    cls.add_constructor([param('unsigned int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(long unsigned int v) [constructor]
    cls.add_constructor([param('long unsigned int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(long long unsigned int v) [constructor]
    cls.add_constructor([param('long long unsigned int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(ns3::int64x64_t const & v) [constructor]
    cls.add_constructor([param('ns3::int64x64_t const &', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(std::string const & s) [constructor]
    cls.add_constructor([param('std::string const &', 's')])
    ## nstime.h (module 'core'): ns3::TimeWithUnit ns3::Time::As(ns3::Time::Unit const unit) const [member function]
    cls.add_method('As', 
                   'ns3::TimeWithUnit', 
                   [param('ns3::Time::Unit const', 'unit')], 
                   is_const=True)
    ## nstime.h (module 'core'): int ns3::Time::Compare(ns3::Time const & o) const [member function]
    cls.add_method('Compare', 
                   'int', 
                   [param('ns3::Time const &', 'o')], 
                   is_const=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::From(ns3::int64x64_t const & value) [member function]
    cls.add_method('From', 
                   'ns3::Time', 
                   [param('ns3::int64x64_t const &', 'value')], 
                   is_static=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::From(ns3::int64x64_t const & value, ns3::Time::Unit unit) [member function]
    cls.add_method('From', 
                   'ns3::Time', 
                   [param('ns3::int64x64_t const &', 'value'), param('ns3::Time::Unit', 'unit')], 
                   is_static=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::FromDouble(double value, ns3::Time::Unit unit) [member function]
    cls.add_method('FromDouble', 
                   'ns3::Time', 
                   [param('double', 'value'), param('ns3::Time::Unit', 'unit')], 
                   is_static=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::FromInteger(uint64_t value, ns3::Time::Unit unit) [member function]
    cls.add_method('FromInteger', 
                   'ns3::Time', 
                   [param('uint64_t', 'value'), param('ns3::Time::Unit', 'unit')], 
                   is_static=True)
    ## nstime.h (module 'core'): double ns3::Time::GetDays() const [member function]
    cls.add_method('GetDays', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::GetDouble() const [member function]
    cls.add_method('GetDouble', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetFemtoSeconds() const [member function]
    cls.add_method('GetFemtoSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::GetHours() const [member function]
    cls.add_method('GetHours', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetInteger() const [member function]
    cls.add_method('GetInteger', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetMicroSeconds() const [member function]
    cls.add_method('GetMicroSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetMilliSeconds() const [member function]
    cls.add_method('GetMilliSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::GetMinutes() const [member function]
    cls.add_method('GetMinutes', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetNanoSeconds() const [member function]
    cls.add_method('GetNanoSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetPicoSeconds() const [member function]
    cls.add_method('GetPicoSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): static ns3::Time::Unit ns3::Time::GetResolution() [member function]
    cls.add_method('GetResolution', 
                   'ns3::Time::Unit', 
                   [], 
                   is_static=True)
    ## nstime.h (module 'core'): double ns3::Time::GetSeconds() const [member function]
    cls.add_method('GetSeconds', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetTimeStep() const [member function]
    cls.add_method('GetTimeStep', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::GetYears() const [member function]
    cls.add_method('GetYears', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsNegative() const [member function]
    cls.add_method('IsNegative', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsPositive() const [member function]
    cls.add_method('IsPositive', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsStrictlyNegative() const [member function]
    cls.add_method('IsStrictlyNegative', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsStrictlyPositive() const [member function]
    cls.add_method('IsStrictlyPositive', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsZero() const [member function]
    cls.add_method('IsZero', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::Max() [member function]
    cls.add_method('Max', 
                   'ns3::Time', 
                   [], 
                   is_static=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::Min() [member function]
    cls.add_method('Min', 
                   'ns3::Time', 
                   [], 
                   is_static=True)
    ## nstime.h (module 'core'): static void ns3::Time::SetResolution(ns3::Time::Unit resolution) [member function]
    cls.add_method('SetResolution', 
                   'void', 
                   [param('ns3::Time::Unit', 'resolution')], 
                   is_static=True)
    ## nstime.h (module 'core'): static bool ns3::Time::StaticInit() [member function]
    cls.add_method('StaticInit', 
                   'bool', 
                   [], 
                   is_static=True)
    ## nstime.h (module 'core'): ns3::int64x64_t ns3::Time::To(ns3::Time::Unit unit) const [member function]
    cls.add_method('To', 
                   'ns3::int64x64_t', 
                   [param('ns3::Time::Unit', 'unit')], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::ToDouble(ns3::Time::Unit unit) const [member function]
    cls.add_method('ToDouble', 
                   'double', 
                   [param('ns3::Time::Unit', 'unit')], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::ToInteger(ns3::Time::Unit unit) const [member function]
    cls.add_method('ToInteger', 
                   'int64_t', 
                   [param('ns3::Time::Unit', 'unit')], 
                   is_const=True)
    return

def register_Ns3NrTraceFadingLossModel_methods(root_module, cls):
    ## nr-trace-fading-loss-model.h (module 'nr'): ns3::NrTraceFadingLossModel::NrTraceFadingLossModel(ns3::NrTraceFadingLossModel const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrTraceFadingLossModel const &', 'arg0')])
    ## nr-trace-fading-loss-model.h (module 'nr'): ns3::NrTraceFadingLossModel::NrTraceFadingLossModel() [constructor]
    cls.add_constructor([])
    ## nr-trace-fading-loss-model.h (module 'nr'): int64_t ns3::NrTraceFadingLossModel::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')])
    ## nr-trace-fading-loss-model.h (module 'nr'): void ns3::NrTraceFadingLossModel::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-trace-fading-loss-model.h (module 'nr'): static ns3::TypeId ns3::NrTraceFadingLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-trace-fading-loss-model.h (module 'nr'): ns3::Ptr<ns3::SpectrumValue> ns3::NrTraceFadingLossModel::DoCalcRxPowerSpectralDensity(ns3::Ptr<ns3::SpectrumValue const> txPsd, ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
    cls.add_method('DoCalcRxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'txPsd'), param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
                   is_const=True, visibility='private', is_virtual=True)
    return

def register_Ns3TraceSourceAccessor_methods(root_module, cls):
    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor(ns3::TraceSourceAccessor const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::TraceSourceAccessor const &', 'arg0')])
    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor() [constructor]
    cls.add_constructor([])
    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::Connect(ns3::ObjectBase * obj, std::string context, ns3::CallbackBase const & cb) const [member function]
    cls.add_method('Connect', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::ConnectWithoutContext(ns3::ObjectBase * obj, ns3::CallbackBase const & cb) const [member function]
    cls.add_method('ConnectWithoutContext', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('ns3::CallbackBase const &', 'cb')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::Disconnect(ns3::ObjectBase * obj, std::string context, ns3::CallbackBase const & cb) const [member function]
    cls.add_method('Disconnect', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::DisconnectWithoutContext(ns3::ObjectBase * obj, ns3::CallbackBase const & cb) const [member function]
    cls.add_method('DisconnectWithoutContext', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('ns3::CallbackBase const &', 'cb')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    return

def register_Ns3Trailer_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## trailer.h (module 'network'): ns3::Trailer::Trailer() [constructor]
    cls.add_constructor([])
    ## trailer.h (module 'network'): ns3::Trailer::Trailer(ns3::Trailer const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Trailer const &', 'arg0')])
    ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator end) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'end')], 
                   is_pure_virtual=True, is_virtual=True)
    ## trailer.h (module 'network'): uint32_t ns3::Trailer::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## trailer.h (module 'network'): static ns3::TypeId ns3::Trailer::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## trailer.h (module 'network'): void ns3::Trailer::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## trailer.h (module 'network'): void ns3::Trailer::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    return

def register_Ns3TriangularRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::TriangularRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::TriangularRandomVariable::TriangularRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetMean() const [member function]
    cls.add_method('GetMean', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetMin() const [member function]
    cls.add_method('GetMin', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetMax() const [member function]
    cls.add_method('GetMax', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetValue(double mean, double min, double max) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'mean'), param('double', 'min'), param('double', 'max')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::TriangularRandomVariable::GetInteger(uint32_t mean, uint32_t min, uint32_t max) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'mean'), param('uint32_t', 'min'), param('uint32_t', 'max')])
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::TriangularRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3UeManager_methods(root_module, cls):
    ## nr-enb-rrc.h (module 'nr'): ns3::UeManager::UeManager(ns3::UeManager const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::UeManager const &', 'arg0')])
    ## nr-enb-rrc.h (module 'nr'): ns3::UeManager::UeManager() [constructor]
    cls.add_constructor([])
    ## nr-enb-rrc.h (module 'nr'): ns3::UeManager::UeManager(ns3::Ptr<ns3::NrEnbRrc> rrc, uint16_t rnti, ns3::UeManager::State s) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::NrEnbRrc >', 'rrc'), param('uint16_t', 'rnti'), param('ns3::UeManager::State', 's')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::CmacUeConfigUpdateInd(ns3::NrEnbCmacSapUser::UeConfig cmacParams) [member function]
    cls.add_method('CmacUeConfigUpdateInd', 
                   'void', 
                   [param('ns3::NrEnbCmacSapUser::UeConfig', 'cmacParams')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::CompleteSetupUe(ns3::NrEnbRrcSapProvider::CompleteSetupUeParameters params) [member function]
    cls.add_method('CompleteSetupUe', 
                   'void', 
                   [param('ns3::NrEnbRrcSapProvider::CompleteSetupUeParameters', 'params')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::DoReceivePdcpSdu(ns3::NrPdcpSapUser::ReceivePdcpSduParameters params) [member function]
    cls.add_method('DoReceivePdcpSdu', 
                   'void', 
                   [param('ns3::NrPdcpSapUser::ReceivePdcpSduParameters', 'params')])
    ## nr-enb-rrc.h (module 'nr'): std::vector<ns3::NgcX2Sap::ErabToBeSetupItem, std::allocator<ns3::NgcX2Sap::ErabToBeSetupItem> > ns3::UeManager::GetErabList() [member function]
    cls.add_method('GetErabList', 
                   'std::vector< ns3::NgcX2Sap::ErabToBeSetupItem >', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): uint64_t ns3::UeManager::GetImsi() const [member function]
    cls.add_method('GetImsi', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## nr-enb-rrc.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigDedicated ns3::UeManager::GetRadioResourceConfigForHandoverPreparationInfo() [member function]
    cls.add_method('GetRadioResourceConfigForHandoverPreparationInfo', 
                   'ns3::NrRrcSap::RadioResourceConfigDedicated', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): uint16_t ns3::UeManager::GetRnti() const [member function]
    cls.add_method('GetRnti', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-enb-rrc.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfiguration ns3::UeManager::GetRrcConnectionReconfigurationForHandover() [member function]
    cls.add_method('GetRrcConnectionReconfigurationForHandover', 
                   'ns3::NrRrcSap::RrcConnectionReconfiguration', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): uint16_t ns3::UeManager::GetSrsConfigurationIndex() const [member function]
    cls.add_method('GetSrsConfigurationIndex', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-enb-rrc.h (module 'nr'): ns3::UeManager::State ns3::UeManager::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::UeManager::State', 
                   [], 
                   is_const=True)
    ## nr-enb-rrc.h (module 'nr'): static ns3::TypeId ns3::UeManager::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::PrepareHandover(uint16_t cellId) [member function]
    cls.add_method('PrepareHandover', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::RecordDataRadioBearersToBeStarted() [member function]
    cls.add_method('RecordDataRadioBearersToBeStarted', 
                   'void', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::RecvHandoverPreparationFailure(uint16_t cellId) [member function]
    cls.add_method('RecvHandoverPreparationFailure', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::RecvHandoverRequestAck(ns3::NgcX2Sap::HandoverRequestAckParams params) [member function]
    cls.add_method('RecvHandoverRequestAck', 
                   'void', 
                   [param('ns3::NgcX2Sap::HandoverRequestAckParams', 'params')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::RecvMeasurementReport(ns3::NrRrcSap::MeasurementReport msg) [member function]
    cls.add_method('RecvMeasurementReport', 
                   'void', 
                   [param('ns3::NrRrcSap::MeasurementReport', 'msg')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::RecvRrcConnectionReconfigurationCompleted(ns3::NrRrcSap::RrcConnectionReconfigurationCompleted msg) [member function]
    cls.add_method('RecvRrcConnectionReconfigurationCompleted', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReconfigurationCompleted', 'msg')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::RecvRrcConnectionReestablishmentComplete(ns3::NrRrcSap::RrcConnectionReestablishmentComplete msg) [member function]
    cls.add_method('RecvRrcConnectionReestablishmentComplete', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReestablishmentComplete', 'msg')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::RecvRrcConnectionReestablishmentRequest(ns3::NrRrcSap::RrcConnectionReestablishmentRequest msg) [member function]
    cls.add_method('RecvRrcConnectionReestablishmentRequest', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReestablishmentRequest', 'msg')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::RecvRrcConnectionRequest(ns3::NrRrcSap::RrcConnectionRequest msg) [member function]
    cls.add_method('RecvRrcConnectionRequest', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionRequest', 'msg')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::RecvRrcConnectionSetupCompleted(ns3::NrRrcSap::RrcConnectionSetupCompleted msg) [member function]
    cls.add_method('RecvRrcConnectionSetupCompleted', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionSetupCompleted', 'msg')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::RecvSnStatusTransfer(ns3::NgcX2Sap::SnStatusTransferParams params) [member function]
    cls.add_method('RecvSnStatusTransfer', 
                   'void', 
                   [param('ns3::NgcX2Sap::SnStatusTransferParams', 'params')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::RecvUeContextRelease(ns3::NgcX2Sap::UeContextReleaseParams params) [member function]
    cls.add_method('RecvUeContextRelease', 
                   'void', 
                   [param('ns3::NgcX2Sap::UeContextReleaseParams', 'params')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::ReleaseDataRadioBearer(uint8_t drbid) [member function]
    cls.add_method('ReleaseDataRadioBearer', 
                   'void', 
                   [param('uint8_t', 'drbid')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::ScheduleRrcConnectionReconfiguration() [member function]
    cls.add_method('ScheduleRrcConnectionReconfiguration', 
                   'void', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::SendData(uint8_t bid, ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('SendData', 
                   'void', 
                   [param('uint8_t', 'bid'), param('ns3::Ptr< ns3::Packet >', 'p')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::SendUeContextRelease() [member function]
    cls.add_method('SendUeContextRelease', 
                   'void', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::SetImsi(uint64_t imsi) [member function]
    cls.add_method('SetImsi', 
                   'void', 
                   [param('uint64_t', 'imsi')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::SetPdschConfigDedicated(ns3::NrRrcSap::PdschConfigDedicated pdschConfigDedicated) [member function]
    cls.add_method('SetPdschConfigDedicated', 
                   'void', 
                   [param('ns3::NrRrcSap::PdschConfigDedicated', 'pdschConfigDedicated')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::SetSource(uint16_t sourceCellId, uint16_t sourceX2apId) [member function]
    cls.add_method('SetSource', 
                   'void', 
                   [param('uint16_t', 'sourceCellId'), param('uint16_t', 'sourceX2apId')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::SetSrsConfigurationIndex(uint16_t srsConfIndex) [member function]
    cls.add_method('SetSrsConfigurationIndex', 
                   'void', 
                   [param('uint16_t', 'srsConfIndex')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::SetupDataRadioBearer(ns3::EpsBearer bearer, uint8_t bearerId, uint32_t gtpTeid, ns3::Ipv4Address transportLayerAddress) [member function]
    cls.add_method('SetupDataRadioBearer', 
                   'void', 
                   [param('ns3::EpsBearer', 'bearer'), param('uint8_t', 'bearerId'), param('uint32_t', 'gtpTeid'), param('ns3::Ipv4Address', 'transportLayerAddress')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::StartDataRadioBearers() [member function]
    cls.add_method('StartDataRadioBearers', 
                   'void', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-enb-rrc.h (module 'nr'): void ns3::UeManager::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3UniformRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::UniformRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::UniformRandomVariable::UniformRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::UniformRandomVariable::GetMin() const [member function]
    cls.add_method('GetMin', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::UniformRandomVariable::GetMax() const [member function]
    cls.add_method('GetMax', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::UniformRandomVariable::GetValue(double min, double max) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'min'), param('double', 'max')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::UniformRandomVariable::GetInteger(uint32_t min, uint32_t max) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'min'), param('uint32_t', 'max')])
    ## random-variable-stream.h (module 'core'): double ns3::UniformRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::UniformRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3VendorSpecificValue_methods(root_module, cls):
    ## ff-mac-common.h (module 'nr'): ns3::VendorSpecificValue::VendorSpecificValue() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'nr'): ns3::VendorSpecificValue::VendorSpecificValue(ns3::VendorSpecificValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::VendorSpecificValue const &', 'arg0')])
    return

def register_Ns3WeibullRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::WeibullRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::WeibullRandomVariable::WeibullRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetScale() const [member function]
    cls.add_method('GetScale', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetShape() const [member function]
    cls.add_method('GetShape', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetBound() const [member function]
    cls.add_method('GetBound', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetValue(double scale, double shape, double bound) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'scale'), param('double', 'shape'), param('double', 'bound')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::WeibullRandomVariable::GetInteger(uint32_t scale, uint32_t shape, uint32_t bound) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'scale'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::WeibullRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3NrX2CellInfo_methods(root_module, cls):
    ## ngc-x2.h (module 'nr'): ns3::NrX2CellInfo::NrX2CellInfo(ns3::NrX2CellInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrX2CellInfo const &', 'arg0')])
    ## ngc-x2.h (module 'nr'): ns3::NrX2CellInfo::NrX2CellInfo(uint16_t localCellId, uint16_t remoteCellId) [constructor]
    cls.add_constructor([param('uint16_t', 'localCellId'), param('uint16_t', 'remoteCellId')])
    ## ngc-x2.h (module 'nr'): ns3::NrX2CellInfo::m_localCellId [variable]
    cls.add_instance_attribute('m_localCellId', 'uint16_t', is_const=False)
    ## ngc-x2.h (module 'nr'): ns3::NrX2CellInfo::m_remoteCellId [variable]
    cls.add_instance_attribute('m_remoteCellId', 'uint16_t', is_const=False)
    return

def register_Ns3NrX2IfaceInfo_methods(root_module, cls):
    ## ngc-x2.h (module 'nr'): ns3::NrX2IfaceInfo::NrX2IfaceInfo(ns3::NrX2IfaceInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrX2IfaceInfo const &', 'arg0')])
    ## ngc-x2.h (module 'nr'): ns3::NrX2IfaceInfo::NrX2IfaceInfo(ns3::Ipv4Address remoteIpAddr, ns3::Ptr<ns3::Socket> localCtrlPlaneSocket, ns3::Ptr<ns3::Socket> localUserPlaneSocket) [constructor]
    cls.add_constructor([param('ns3::Ipv4Address', 'remoteIpAddr'), param('ns3::Ptr< ns3::Socket >', 'localCtrlPlaneSocket'), param('ns3::Ptr< ns3::Socket >', 'localUserPlaneSocket')])
    ## ngc-x2.h (module 'nr'): ns3::NrX2IfaceInfo::m_localCtrlPlaneSocket [variable]
    cls.add_instance_attribute('m_localCtrlPlaneSocket', 'ns3::Ptr< ns3::Socket >', is_const=False)
    ## ngc-x2.h (module 'nr'): ns3::NrX2IfaceInfo::m_localUserPlaneSocket [variable]
    cls.add_instance_attribute('m_localUserPlaneSocket', 'ns3::Ptr< ns3::Socket >', is_const=False)
    ## ngc-x2.h (module 'nr'): ns3::NrX2IfaceInfo::m_remoteIpAddr [variable]
    cls.add_instance_attribute('m_remoteIpAddr', 'ns3::Ipv4Address', is_const=False)
    return

def register_Ns3ZetaRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ZetaRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ZetaRandomVariable::ZetaRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::ZetaRandomVariable::GetAlpha() const [member function]
    cls.add_method('GetAlpha', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ZetaRandomVariable::GetValue(double alpha) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'alpha')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZetaRandomVariable::GetInteger(uint32_t alpha) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'alpha')])
    ## random-variable-stream.h (module 'core'): double ns3::ZetaRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZetaRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3ZipfRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ZipfRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ZipfRandomVariable::ZipfRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZipfRandomVariable::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ZipfRandomVariable::GetAlpha() const [member function]
    cls.add_method('GetAlpha', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ZipfRandomVariable::GetValue(uint32_t n, double alpha) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('uint32_t', 'n'), param('double', 'alpha')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZipfRandomVariable::GetInteger(uint32_t n, uint32_t alpha) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'n'), param('uint32_t', 'alpha')])
    ## random-variable-stream.h (module 'core'): double ns3::ZipfRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZipfRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3Application_methods(root_module, cls):
    ## application.h (module 'network'): ns3::Application::Application(ns3::Application const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Application const &', 'arg0')])
    ## application.h (module 'network'): ns3::Application::Application() [constructor]
    cls.add_constructor([])
    ## application.h (module 'network'): ns3::Ptr<ns3::Node> ns3::Application::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True)
    ## application.h (module 'network'): static ns3::TypeId ns3::Application::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## application.h (module 'network'): void ns3::Application::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## application.h (module 'network'): void ns3::Application::SetStartTime(ns3::Time start) [member function]
    cls.add_method('SetStartTime', 
                   'void', 
                   [param('ns3::Time', 'start')])
    ## application.h (module 'network'): void ns3::Application::SetStopTime(ns3::Time stop) [member function]
    cls.add_method('SetStopTime', 
                   'void', 
                   [param('ns3::Time', 'stop')])
    ## application.h (module 'network'): void ns3::Application::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## application.h (module 'network'): void ns3::Application::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## application.h (module 'network'): void ns3::Application::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   visibility='private', is_virtual=True)
    ## application.h (module 'network'): void ns3::Application::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   visibility='private', is_virtual=True)
    return

def register_Ns3NrAsn1Header_methods(root_module, cls):
    ## nr-asn1-header.h (module 'nr'): ns3::NrAsn1Header::NrAsn1Header(ns3::NrAsn1Header const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrAsn1Header const &', 'arg0')])
    ## nr-asn1-header.h (module 'nr'): ns3::NrAsn1Header::NrAsn1Header() [constructor]
    cls.add_constructor([])
    ## nr-asn1-header.h (module 'nr'): uint32_t ns3::NrAsn1Header::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-asn1-header.h (module 'nr'): ns3::TypeId ns3::NrAsn1Header::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-asn1-header.h (module 'nr'): uint32_t ns3::NrAsn1Header::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-asn1-header.h (module 'nr'): static ns3::TypeId ns3::NrAsn1Header::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::Serialize(ns3::Buffer::Iterator bIterator) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_const=True, is_virtual=True)
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeBitset(std::bitset<8ul> * data, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeBitset', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 8ul > *', 'data'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeBitstring(std::bitset<1ul> * bitstring, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeBitstring', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 1ul > *', 'bitstring'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeBitstring(std::bitset<2ul> * bitstring, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeBitstring', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 2ul > *', 'bitstring'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeBitstring(std::bitset<8ul> * bitstring, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeBitstring', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 8ul > *', 'bitstring'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeBitstring(std::bitset<10ul> * bitstring, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeBitstring', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 10ul > *', 'bitstring'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeBitstring(std::bitset<16ul> * bitstring, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeBitstring', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 16ul > *', 'bitstring'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeBitstring(std::bitset<27ul> * bitstring, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeBitstring', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 27ul > *', 'bitstring'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeBitstring(std::bitset<28ul> * bitstring, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeBitstring', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 28ul > *', 'bitstring'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeBitstring(std::bitset<32ul> * bitstring, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeBitstring', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 32ul > *', 'bitstring'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeBoolean(bool * value, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeBoolean', 
                   'ns3::Buffer::Iterator', 
                   [param('bool *', 'value'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeChoice(int numOptions, bool isExtensionMarkerPresent, int * selectedOption, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeChoice', 
                   'ns3::Buffer::Iterator', 
                   [param('int', 'numOptions'), param('bool', 'isExtensionMarkerPresent'), param('int *', 'selectedOption'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeEnum(int numElems, int * selectedElem, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeEnum', 
                   'ns3::Buffer::Iterator', 
                   [param('int', 'numElems'), param('int *', 'selectedElem'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeInteger(int * n, int nmin, int nmax, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeInteger', 
                   'ns3::Buffer::Iterator', 
                   [param('int *', 'n'), param('int', 'nmin'), param('int', 'nmax'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeNull(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeNull', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeSequence(std::bitset<0ul> * optionalOrDefaultMask, bool isExtensionMarkerPresent, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSequence', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 0ul > *', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeSequence(std::bitset<1ul> * optionalOrDefaultMask, bool isExtensionMarkerPresent, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSequence', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 1ul > *', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeSequence(std::bitset<2ul> * optionalOrDefaultMask, bool isExtensionMarkerPresent, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSequence', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 2ul > *', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeSequence(std::bitset<3ul> * optionalOrDefaultMask, bool isExtensionMarkerPresent, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSequence', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 3ul > *', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeSequence(std::bitset<4ul> * optionalOrDefaultMask, bool isExtensionMarkerPresent, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSequence', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 4ul > *', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeSequence(std::bitset<5ul> * optionalOrDefaultMask, bool isExtensionMarkerPresent, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSequence', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 5ul > *', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeSequence(std::bitset<6ul> * optionalOrDefaultMask, bool isExtensionMarkerPresent, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSequence', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 6ul > *', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeSequence(std::bitset<9ul> * optionalOrDefaultMask, bool isExtensionMarkerPresent, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSequence', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 9ul > *', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeSequence(std::bitset<10ul> * optionalOrDefaultMask, bool isExtensionMarkerPresent, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSequence', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 10ul > *', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeSequence(std::bitset<11ul> * optionalOrDefaultMask, bool isExtensionMarkerPresent, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSequence', 
                   'ns3::Buffer::Iterator', 
                   [param('std::bitset< 11ul > *', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): ns3::Buffer::Iterator ns3::NrAsn1Header::DeserializeSequenceOf(int * numElems, int nMax, int nMin, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSequenceOf', 
                   'ns3::Buffer::Iterator', 
                   [param('int *', 'numElems'), param('int', 'nMax'), param('int', 'nMin'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::FinalizeSerialization() const [member function]
    cls.add_method('FinalizeSerialization', 
                   'void', 
                   [], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeBitstring(std::bitset<1ul> bitstring) const [member function]
    cls.add_method('SerializeBitstring', 
                   'void', 
                   [param('std::bitset< 1ul >', 'bitstring')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeBitstring(std::bitset<2ul> bitstring) const [member function]
    cls.add_method('SerializeBitstring', 
                   'void', 
                   [param('std::bitset< 2ul >', 'bitstring')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeBitstring(std::bitset<8ul> bitstring) const [member function]
    cls.add_method('SerializeBitstring', 
                   'void', 
                   [param('std::bitset< 8ul >', 'bitstring')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeBitstring(std::bitset<10ul> bitstring) const [member function]
    cls.add_method('SerializeBitstring', 
                   'void', 
                   [param('std::bitset< 10ul >', 'bitstring')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeBitstring(std::bitset<16ul> bitstring) const [member function]
    cls.add_method('SerializeBitstring', 
                   'void', 
                   [param('std::bitset< 16ul >', 'bitstring')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeBitstring(std::bitset<27ul> bitstring) const [member function]
    cls.add_method('SerializeBitstring', 
                   'void', 
                   [param('std::bitset< 27ul >', 'bitstring')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeBitstring(std::bitset<28ul> bitstring) const [member function]
    cls.add_method('SerializeBitstring', 
                   'void', 
                   [param('std::bitset< 28ul >', 'bitstring')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeBitstring(std::bitset<32ul> bitstring) const [member function]
    cls.add_method('SerializeBitstring', 
                   'void', 
                   [param('std::bitset< 32ul >', 'bitstring')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeBoolean(bool value) const [member function]
    cls.add_method('SerializeBoolean', 
                   'void', 
                   [param('bool', 'value')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeChoice(int numOptions, int selectedOption, bool isExtensionMarkerPresent) const [member function]
    cls.add_method('SerializeChoice', 
                   'void', 
                   [param('int', 'numOptions'), param('int', 'selectedOption'), param('bool', 'isExtensionMarkerPresent')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeEnum(int numElems, int selectedElem) const [member function]
    cls.add_method('SerializeEnum', 
                   'void', 
                   [param('int', 'numElems'), param('int', 'selectedElem')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeInteger(int n, int nmin, int nmax) const [member function]
    cls.add_method('SerializeInteger', 
                   'void', 
                   [param('int', 'n'), param('int', 'nmin'), param('int', 'nmax')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeNull() const [member function]
    cls.add_method('SerializeNull', 
                   'void', 
                   [], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeSequence(std::bitset<0ul> optionalOrDefaultMask, bool isExtensionMarkerPresent) const [member function]
    cls.add_method('SerializeSequence', 
                   'void', 
                   [param('std::bitset< 0ul >', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeSequence(std::bitset<1ul> optionalOrDefaultMask, bool isExtensionMarkerPresent) const [member function]
    cls.add_method('SerializeSequence', 
                   'void', 
                   [param('std::bitset< 1ul >', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeSequence(std::bitset<2ul> optionalOrDefaultMask, bool isExtensionMarkerPresent) const [member function]
    cls.add_method('SerializeSequence', 
                   'void', 
                   [param('std::bitset< 2ul >', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeSequence(std::bitset<3ul> optionalOrDefaultMask, bool isExtensionMarkerPresent) const [member function]
    cls.add_method('SerializeSequence', 
                   'void', 
                   [param('std::bitset< 3ul >', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeSequence(std::bitset<4ul> optionalOrDefaultMask, bool isExtensionMarkerPresent) const [member function]
    cls.add_method('SerializeSequence', 
                   'void', 
                   [param('std::bitset< 4ul >', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeSequence(std::bitset<5ul> optionalOrDefaultMask, bool isExtensionMarkerPresent) const [member function]
    cls.add_method('SerializeSequence', 
                   'void', 
                   [param('std::bitset< 5ul >', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeSequence(std::bitset<6ul> optionalOrDefaultMask, bool isExtensionMarkerPresent) const [member function]
    cls.add_method('SerializeSequence', 
                   'void', 
                   [param('std::bitset< 6ul >', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeSequence(std::bitset<9ul> optionalOrDefaultMask, bool isExtensionMarkerPresent) const [member function]
    cls.add_method('SerializeSequence', 
                   'void', 
                   [param('std::bitset< 9ul >', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeSequence(std::bitset<10ul> optionalOrDefaultMask, bool isExtensionMarkerPresent) const [member function]
    cls.add_method('SerializeSequence', 
                   'void', 
                   [param('std::bitset< 10ul >', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeSequence(std::bitset<11ul> optionalOrDefaultMask, bool isExtensionMarkerPresent) const [member function]
    cls.add_method('SerializeSequence', 
                   'void', 
                   [param('std::bitset< 11ul >', 'optionalOrDefaultMask'), param('bool', 'isExtensionMarkerPresent')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::SerializeSequenceOf(int numElems, int nMax, int nMin) const [member function]
    cls.add_method('SerializeSequenceOf', 
                   'void', 
                   [param('int', 'numElems'), param('int', 'nMax'), param('int', 'nMin')], 
                   is_const=True, visibility='protected')
    ## nr-asn1-header.h (module 'nr'): void ns3::NrAsn1Header::WriteOctet(uint8_t octet) const [member function]
    cls.add_method('WriteOctet', 
                   'void', 
                   [param('uint8_t', 'octet')], 
                   is_const=True, visibility='protected')
    return

def register_Ns3AttributeAccessor_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor(ns3::AttributeAccessor const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::AttributeAccessor const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Get(ns3::ObjectBase const * object, ns3::AttributeValue & attribute) const [member function]
    cls.add_method('Get', 
                   'bool', 
                   [param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue &', 'attribute')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::HasGetter() const [member function]
    cls.add_method('HasGetter', 
                   'bool', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::HasSetter() const [member function]
    cls.add_method('HasSetter', 
                   'bool', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Set(ns3::ObjectBase * object, ns3::AttributeValue const & value) const [member function]
    cls.add_method('Set', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'object', transfer_ownership=False), param('ns3::AttributeValue const &', 'value')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    return

def register_Ns3AttributeChecker_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker(ns3::AttributeChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::AttributeChecker const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): bool ns3::AttributeChecker::Check(ns3::AttributeValue const & value) const [member function]
    cls.add_method('Check', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'value')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeChecker::Copy(ns3::AttributeValue const & source, ns3::AttributeValue & destination) const [member function]
    cls.add_method('Copy', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'source'), param('ns3::AttributeValue &', 'destination')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeChecker::Create() const [member function]
    cls.add_method('Create', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeChecker::CreateValidValue(ns3::AttributeValue const & value) const [member function]
    cls.add_method('CreateValidValue', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [param('ns3::AttributeValue const &', 'value')], 
                   is_const=True)
    ## attribute.h (module 'core'): std::string ns3::AttributeChecker::GetUnderlyingTypeInformation() const [member function]
    cls.add_method('GetUnderlyingTypeInformation', 
                   'std::string', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): std::string ns3::AttributeChecker::GetValueTypeName() const [member function]
    cls.add_method('GetValueTypeName', 
                   'std::string', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeChecker::HasUnderlyingTypeInformation() const [member function]
    cls.add_method('HasUnderlyingTypeInformation', 
                   'bool', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    return

def register_Ns3AttributeValue_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue(ns3::AttributeValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::AttributeValue const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): std::string ns3::AttributeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    return

def register_Ns3BooleanChecker_methods(root_module, cls):
    ## boolean.h (module 'core'): ns3::BooleanChecker::BooleanChecker() [constructor]
    cls.add_constructor([])
    ## boolean.h (module 'core'): ns3::BooleanChecker::BooleanChecker(ns3::BooleanChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::BooleanChecker const &', 'arg0')])
    return

def register_Ns3BooleanValue_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## boolean.h (module 'core'): ns3::BooleanValue::BooleanValue(ns3::BooleanValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::BooleanValue const &', 'arg0')])
    ## boolean.h (module 'core'): ns3::BooleanValue::BooleanValue() [constructor]
    cls.add_constructor([])
    ## boolean.h (module 'core'): ns3::BooleanValue::BooleanValue(bool value) [constructor]
    cls.add_constructor([param('bool', 'value')])
    ## boolean.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::BooleanValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## boolean.h (module 'core'): bool ns3::BooleanValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## boolean.h (module 'core'): bool ns3::BooleanValue::Get() const [member function]
    cls.add_method('Get', 
                   'bool', 
                   [], 
                   is_const=True)
    ## boolean.h (module 'core'): std::string ns3::BooleanValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## boolean.h (module 'core'): void ns3::BooleanValue::Set(bool value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('bool', 'value')])
    return

def register_Ns3CallbackChecker_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker(ns3::CallbackChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::CallbackChecker const &', 'arg0')])
    return

def register_Ns3CallbackImplBase_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase(ns3::CallbackImplBase const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::CallbackImplBase const &', 'arg0')])
    ## callback.h (module 'core'): std::string ns3::CallbackImplBase::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## callback.h (module 'core'): bool ns3::CallbackImplBase::IsEqual(ns3::Ptr<ns3::CallbackImplBase const> other) const [member function]
    cls.add_method('IsEqual', 
                   'bool', 
                   [param('ns3::Ptr< ns3::CallbackImplBase const >', 'other')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::Demangle(std::string const & mangled) [member function]
    cls.add_method('Demangle', 
                   'std::string', 
                   [param('std::string const &', 'mangled')], 
                   is_static=True, visibility='protected')
    return

def register_Ns3CallbackValue_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::CallbackValue const &', 'arg0')])
    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackBase const & base) [constructor]
    cls.add_constructor([param('ns3::CallbackBase const &', 'base')])
    ## callback.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::CallbackValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): bool ns3::CallbackValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## callback.h (module 'core'): std::string ns3::CallbackValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackValue::Set(ns3::CallbackBase base) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::CallbackBase', 'base')])
    return

def register_Ns3Channel_methods(root_module, cls):
    ## channel.h (module 'network'): ns3::Channel::Channel(ns3::Channel const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Channel const &', 'arg0')])
    ## channel.h (module 'network'): ns3::Channel::Channel() [constructor]
    cls.add_constructor([])
    ## channel.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Channel::GetDevice(uint32_t i) const [member function]
    cls.add_method('GetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [param('uint32_t', 'i')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## channel.h (module 'network'): uint32_t ns3::Channel::GetId() const [member function]
    cls.add_method('GetId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## channel.h (module 'network'): uint32_t ns3::Channel::GetNDevices() const [member function]
    cls.add_method('GetNDevices', 
                   'uint32_t', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## channel.h (module 'network'): static ns3::TypeId ns3::Channel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    return

def register_Ns3ConstantRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ConstantRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ConstantRandomVariable::ConstantRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::ConstantRandomVariable::GetConstant() const [member function]
    cls.add_method('GetConstant', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ConstantRandomVariable::GetValue(double constant) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'constant')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ConstantRandomVariable::GetInteger(uint32_t constant) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'constant')])
    ## random-variable-stream.h (module 'core'): double ns3::ConstantRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ConstantRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3DataCalculator_methods(root_module, cls):
    ## data-calculator.h (module 'stats'): ns3::DataCalculator::DataCalculator(ns3::DataCalculator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DataCalculator const &', 'arg0')])
    ## data-calculator.h (module 'stats'): ns3::DataCalculator::DataCalculator() [constructor]
    cls.add_constructor([])
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::Disable() [member function]
    cls.add_method('Disable', 
                   'void', 
                   [])
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::Enable() [member function]
    cls.add_method('Enable', 
                   'void', 
                   [])
    ## data-calculator.h (module 'stats'): std::string ns3::DataCalculator::GetContext() const [member function]
    cls.add_method('GetContext', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## data-calculator.h (module 'stats'): bool ns3::DataCalculator::GetEnabled() const [member function]
    cls.add_method('GetEnabled', 
                   'bool', 
                   [], 
                   is_const=True)
    ## data-calculator.h (module 'stats'): std::string ns3::DataCalculator::GetKey() const [member function]
    cls.add_method('GetKey', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## data-calculator.h (module 'stats'): static ns3::TypeId ns3::DataCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::Output(ns3::DataOutputCallback & callback) const [member function]
    cls.add_method('Output', 
                   'void', 
                   [param('ns3::DataOutputCallback &', 'callback')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::SetContext(std::string const context) [member function]
    cls.add_method('SetContext', 
                   'void', 
                   [param('std::string const', 'context')])
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::SetKey(std::string const key) [member function]
    cls.add_method('SetKey', 
                   'void', 
                   [param('std::string const', 'key')])
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::Start(ns3::Time const & startTime) [member function]
    cls.add_method('Start', 
                   'void', 
                   [param('ns3::Time const &', 'startTime')], 
                   is_virtual=True)
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::Stop(ns3::Time const & stopTime) [member function]
    cls.add_method('Stop', 
                   'void', 
                   [param('ns3::Time const &', 'stopTime')], 
                   is_virtual=True)
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3DataOutputInterface_methods(root_module, cls):
    ## data-output-interface.h (module 'stats'): ns3::DataOutputInterface::DataOutputInterface(ns3::DataOutputInterface const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DataOutputInterface const &', 'arg0')])
    ## data-output-interface.h (module 'stats'): ns3::DataOutputInterface::DataOutputInterface() [constructor]
    cls.add_constructor([])
    ## data-output-interface.h (module 'stats'): std::string ns3::DataOutputInterface::GetFilePrefix() const [member function]
    cls.add_method('GetFilePrefix', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## data-output-interface.h (module 'stats'): static ns3::TypeId ns3::DataOutputInterface::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputInterface::Output(ns3::DataCollector & dc) [member function]
    cls.add_method('Output', 
                   'void', 
                   [param('ns3::DataCollector &', 'dc')], 
                   is_pure_virtual=True, is_virtual=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputInterface::SetFilePrefix(std::string const prefix) [member function]
    cls.add_method('SetFilePrefix', 
                   'void', 
                   [param('std::string const', 'prefix')])
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputInterface::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3DataRateChecker_methods(root_module, cls):
    ## data-rate.h (module 'network'): ns3::DataRateChecker::DataRateChecker() [constructor]
    cls.add_constructor([])
    ## data-rate.h (module 'network'): ns3::DataRateChecker::DataRateChecker(ns3::DataRateChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DataRateChecker const &', 'arg0')])
    return

def register_Ns3DataRateValue_methods(root_module, cls):
    ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue() [constructor]
    cls.add_constructor([])
    ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue(ns3::DataRateValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DataRateValue const &', 'arg0')])
    ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue(ns3::DataRate const & value) [constructor]
    cls.add_constructor([param('ns3::DataRate const &', 'value')])
    ## data-rate.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::DataRateValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## data-rate.h (module 'network'): bool ns3::DataRateValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## data-rate.h (module 'network'): ns3::DataRate ns3::DataRateValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::DataRate', 
                   [], 
                   is_const=True)
    ## data-rate.h (module 'network'): std::string ns3::DataRateValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## data-rate.h (module 'network'): void ns3::DataRateValue::Set(ns3::DataRate const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::DataRate const &', 'value')])
    return

def register_Ns3DeterministicRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::DeterministicRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::DeterministicRandomVariable::DeterministicRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): void ns3::DeterministicRandomVariable::SetValueArray(double * values, uint64_t length) [member function]
    cls.add_method('SetValueArray', 
                   'void', 
                   [param('double *', 'values'), param('uint64_t', 'length')])
    ## random-variable-stream.h (module 'core'): double ns3::DeterministicRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::DeterministicRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3DoubleValue_methods(root_module, cls):
    ## double.h (module 'core'): ns3::DoubleValue::DoubleValue() [constructor]
    cls.add_constructor([])
    ## double.h (module 'core'): ns3::DoubleValue::DoubleValue(ns3::DoubleValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DoubleValue const &', 'arg0')])
    ## double.h (module 'core'): ns3::DoubleValue::DoubleValue(double const & value) [constructor]
    cls.add_constructor([param('double const &', 'value')])
    ## double.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::DoubleValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## double.h (module 'core'): bool ns3::DoubleValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## double.h (module 'core'): double ns3::DoubleValue::Get() const [member function]
    cls.add_method('Get', 
                   'double', 
                   [], 
                   is_const=True)
    ## double.h (module 'core'): std::string ns3::DoubleValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## double.h (module 'core'): void ns3::DoubleValue::Set(double const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('double const &', 'value')])
    return

def register_Ns3EmpiricalRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): ns3::EmpiricalRandomVariable::EmpiricalRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): void ns3::EmpiricalRandomVariable::CDF(double v, double c) [member function]
    cls.add_method('CDF', 
                   'void', 
                   [param('double', 'v'), param('double', 'c')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::EmpiricalRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::EmpiricalRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): double ns3::EmpiricalRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): double ns3::EmpiricalRandomVariable::Interpolate(double c1, double c2, double v1, double v2, double r) [member function]
    cls.add_method('Interpolate', 
                   'double', 
                   [param('double', 'c1'), param('double', 'c2'), param('double', 'v1'), param('double', 'v2'), param('double', 'r')], 
                   visibility='private', is_virtual=True)
    ## random-variable-stream.h (module 'core'): void ns3::EmpiricalRandomVariable::Validate() [member function]
    cls.add_method('Validate', 
                   'void', 
                   [], 
                   visibility='private', is_virtual=True)
    return

def register_Ns3EmptyAttributeValue_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue(ns3::EmptyAttributeValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::EmptyAttributeValue const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EmptyAttributeValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, visibility='private', is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   visibility='private', is_virtual=True)
    ## attribute.h (module 'core'): std::string ns3::EmptyAttributeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, visibility='private', is_virtual=True)
    return

def register_Ns3EnumChecker_methods(root_module, cls):
    ## enum.h (module 'core'): ns3::EnumChecker::EnumChecker(ns3::EnumChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::EnumChecker const &', 'arg0')])
    ## enum.h (module 'core'): ns3::EnumChecker::EnumChecker() [constructor]
    cls.add_constructor([])
    ## enum.h (module 'core'): void ns3::EnumChecker::Add(int value, std::string name) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('int', 'value'), param('std::string', 'name')])
    ## enum.h (module 'core'): void ns3::EnumChecker::AddDefault(int value, std::string name) [member function]
    cls.add_method('AddDefault', 
                   'void', 
                   [param('int', 'value'), param('std::string', 'name')])
    ## enum.h (module 'core'): bool ns3::EnumChecker::Check(ns3::AttributeValue const & value) const [member function]
    cls.add_method('Check', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'value')], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): bool ns3::EnumChecker::Copy(ns3::AttributeValue const & src, ns3::AttributeValue & dst) const [member function]
    cls.add_method('Copy', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'src'), param('ns3::AttributeValue &', 'dst')], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EnumChecker::Create() const [member function]
    cls.add_method('Create', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): std::string ns3::EnumChecker::GetUnderlyingTypeInformation() const [member function]
    cls.add_method('GetUnderlyingTypeInformation', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): std::string ns3::EnumChecker::GetValueTypeName() const [member function]
    cls.add_method('GetValueTypeName', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): bool ns3::EnumChecker::HasUnderlyingTypeInformation() const [member function]
    cls.add_method('HasUnderlyingTypeInformation', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3EnumValue_methods(root_module, cls):
    ## enum.h (module 'core'): ns3::EnumValue::EnumValue(ns3::EnumValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::EnumValue const &', 'arg0')])
    ## enum.h (module 'core'): ns3::EnumValue::EnumValue() [constructor]
    cls.add_constructor([])
    ## enum.h (module 'core'): ns3::EnumValue::EnumValue(int value) [constructor]
    cls.add_constructor([param('int', 'value')])
    ## enum.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EnumValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): bool ns3::EnumValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## enum.h (module 'core'): int ns3::EnumValue::Get() const [member function]
    cls.add_method('Get', 
                   'int', 
                   [], 
                   is_const=True)
    ## enum.h (module 'core'): std::string ns3::EnumValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): void ns3::EnumValue::Set(int value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('int', 'value')])
    return

def register_Ns3NgcEnbApplication_methods(root_module, cls):
    ## ngc-enb-application.h (module 'nr'): ns3::NgcEnbApplication::NgcEnbApplication(ns3::NgcEnbApplication const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcEnbApplication const &', 'arg0')])
    ## ngc-enb-application.h (module 'nr'): ns3::NgcEnbApplication::NgcEnbApplication(ns3::Ptr<ns3::Socket> nrSocket, ns3::Ptr<ns3::Socket> n2uSocket, ns3::Ipv4Address enbN2uAddress, ns3::Ipv4Address smfN2uAddress, uint16_t cellId) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::Socket >', 'nrSocket'), param('ns3::Ptr< ns3::Socket >', 'n2uSocket'), param('ns3::Ipv4Address', 'enbN2uAddress'), param('ns3::Ipv4Address', 'smfN2uAddress'), param('uint16_t', 'cellId')])
    ## ngc-enb-application.h (module 'nr'): ns3::NgcEnbN2SapProvider * ns3::NgcEnbApplication::GetN2SapProvider() [member function]
    cls.add_method('GetN2SapProvider', 
                   'ns3::NgcEnbN2SapProvider *', 
                   [])
    ## ngc-enb-application.h (module 'nr'): ns3::NgcN2apSapEnb * ns3::NgcEnbApplication::GetN2apSapEnb() [member function]
    cls.add_method('GetN2apSapEnb', 
                   'ns3::NgcN2apSapEnb *', 
                   [])
    ## ngc-enb-application.h (module 'nr'): static ns3::TypeId ns3::NgcEnbApplication::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-enb-application.h (module 'nr'): void ns3::NgcEnbApplication::RecvFromNrSocket(ns3::Ptr<ns3::Socket> socket) [member function]
    cls.add_method('RecvFromNrSocket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'socket')])
    ## ngc-enb-application.h (module 'nr'): void ns3::NgcEnbApplication::RecvFromN2uSocket(ns3::Ptr<ns3::Socket> socket) [member function]
    cls.add_method('RecvFromN2uSocket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'socket')])
    ## ngc-enb-application.h (module 'nr'): void ns3::NgcEnbApplication::SetN2SapUser(ns3::NgcEnbN2SapUser * s) [member function]
    cls.add_method('SetN2SapUser', 
                   'void', 
                   [param('ns3::NgcEnbN2SapUser *', 's')])
    ## ngc-enb-application.h (module 'nr'): void ns3::NgcEnbApplication::SetN2apSapAmf(ns3::NgcN2apSapAmf * s) [member function]
    cls.add_method('SetN2apSapAmf', 
                   'void', 
                   [param('ns3::NgcN2apSapAmf *', 's')])
    ## ngc-enb-application.h (module 'nr'): void ns3::NgcEnbApplication::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NgcEnbApplicationEpsFlowId_t_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    ## ngc-enb-application.h (module 'nr'): ns3::NgcEnbApplication::EpsFlowId_t::EpsFlowId_t(ns3::NgcEnbApplication::EpsFlowId_t const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcEnbApplication::EpsFlowId_t const &', 'arg0')])
    ## ngc-enb-application.h (module 'nr'): ns3::NgcEnbApplication::EpsFlowId_t::EpsFlowId_t() [constructor]
    cls.add_constructor([])
    ## ngc-enb-application.h (module 'nr'): ns3::NgcEnbApplication::EpsFlowId_t::EpsFlowId_t(uint16_t const a, uint8_t const b) [constructor]
    cls.add_constructor([param('uint16_t const', 'a'), param('uint8_t const', 'b')])
    ## ngc-enb-application.h (module 'nr'): ns3::NgcEnbApplication::EpsFlowId_t::m_bid [variable]
    cls.add_instance_attribute('m_bid', 'uint8_t', is_const=False)
    ## ngc-enb-application.h (module 'nr'): ns3::NgcEnbApplication::EpsFlowId_t::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3NgcHelper_methods(root_module, cls):
    ## ngc-helper.h (module 'nr'): ns3::NgcHelper::NgcHelper(ns3::NgcHelper const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcHelper const &', 'arg0')])
    ## ngc-helper.h (module 'nr'): ns3::NgcHelper::NgcHelper() [constructor]
    cls.add_constructor([])
    ## ngc-helper.h (module 'nr'): uint8_t ns3::NgcHelper::ActivateEpsBearer(ns3::Ptr<ns3::NetDevice> ueNrDevice, uint64_t imsi, ns3::Ptr<ns3::NgcTft> tft, ns3::EpsBearer bearer) [member function]
    cls.add_method('ActivateEpsBearer', 
                   'uint8_t', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueNrDevice'), param('uint64_t', 'imsi'), param('ns3::Ptr< ns3::NgcTft >', 'tft'), param('ns3::EpsBearer', 'bearer')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-helper.h (module 'nr'): void ns3::NgcHelper::AddEnb(ns3::Ptr<ns3::Node> enbNode, ns3::Ptr<ns3::NetDevice> nrEnbNetDevice, uint16_t cellId) [member function]
    cls.add_method('AddEnb', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'enbNode'), param('ns3::Ptr< ns3::NetDevice >', 'nrEnbNetDevice'), param('uint16_t', 'cellId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-helper.h (module 'nr'): void ns3::NgcHelper::AddUe(ns3::Ptr<ns3::NetDevice> ueNrDevice, uint64_t imsi) [member function]
    cls.add_method('AddUe', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueNrDevice'), param('uint64_t', 'imsi')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-helper.h (module 'nr'): void ns3::NgcHelper::AddX2Interface(ns3::Ptr<ns3::Node> enbNode1, ns3::Ptr<ns3::Node> enbNode2) [member function]
    cls.add_method('AddX2Interface', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'enbNode1'), param('ns3::Ptr< ns3::Node >', 'enbNode2')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-helper.h (module 'nr'): ns3::Ipv4InterfaceContainer ns3::NgcHelper::AssignUeIpv4Address(ns3::NetDeviceContainer ueDevices) [member function]
    cls.add_method('AssignUeIpv4Address', 
                   'ns3::Ipv4InterfaceContainer', 
                   [param('ns3::NetDeviceContainer', 'ueDevices')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-helper.h (module 'nr'): void ns3::NgcHelper::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## ngc-helper.h (module 'nr'): ns3::Ptr<ns3::Node> ns3::NgcHelper::GetUpfNode() [member function]
    cls.add_method('GetUpfNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## ngc-helper.h (module 'nr'): static ns3::TypeId ns3::NgcHelper::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-helper.h (module 'nr'): ns3::Ipv4Address ns3::NgcHelper::GetUeDefaultGatewayAddress() [member function]
    cls.add_method('GetUeDefaultGatewayAddress', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NgcAmf_methods(root_module, cls):
    ## ngc-amf.h (module 'nr'): ns3::NgcAmf::NgcAmf(ns3::NgcAmf const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcAmf const &', 'arg0')])
    ## ngc-amf.h (module 'nr'): ns3::NgcAmf::NgcAmf() [constructor]
    cls.add_constructor([])
    ## ngc-amf.h (module 'nr'): uint8_t ns3::NgcAmf::AddBearer(uint64_t imsi, ns3::Ptr<ns3::NgcTft> tft, ns3::EpsBearer bearer) [member function]
    cls.add_method('AddBearer', 
                   'uint8_t', 
                   [param('uint64_t', 'imsi'), param('ns3::Ptr< ns3::NgcTft >', 'tft'), param('ns3::EpsBearer', 'bearer')])
    ## ngc-amf.h (module 'nr'): void ns3::NgcAmf::AddEnb(uint16_t ecgi, ns3::Ipv4Address enbN2UAddr, ns3::NgcN2apSapEnb * enbN2apSap) [member function]
    cls.add_method('AddEnb', 
                   'void', 
                   [param('uint16_t', 'ecgi'), param('ns3::Ipv4Address', 'enbN2UAddr'), param('ns3::NgcN2apSapEnb *', 'enbN2apSap')])
    ## ngc-amf.h (module 'nr'): void ns3::NgcAmf::AddUe(uint64_t imsi) [member function]
    cls.add_method('AddUe', 
                   'void', 
                   [param('uint64_t', 'imsi')])
    ## ngc-amf.h (module 'nr'): ns3::NgcN11SapAmf * ns3::NgcAmf::GetN11SapAmf() [member function]
    cls.add_method('GetN11SapAmf', 
                   'ns3::NgcN11SapAmf *', 
                   [])
    ## ngc-amf.h (module 'nr'): ns3::NgcN2apSapAmf * ns3::NgcAmf::GetN2apSapAmf() [member function]
    cls.add_method('GetN2apSapAmf', 
                   'ns3::NgcN2apSapAmf *', 
                   [])
    ## ngc-amf.h (module 'nr'): static ns3::TypeId ns3::NgcAmf::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-amf.h (module 'nr'): void ns3::NgcAmf::SetN11SapSmf(ns3::NgcN11SapSmf * s) [member function]
    cls.add_method('SetN11SapSmf', 
                   'void', 
                   [param('ns3::NgcN11SapSmf *', 's')])
    ## ngc-amf.h (module 'nr'): void ns3::NgcAmf::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NgcSmfUpfApplication_methods(root_module, cls):
    ## ngc-smf-upf-application.h (module 'nr'): ns3::NgcSmfUpfApplication::NgcSmfUpfApplication(ns3::NgcSmfUpfApplication const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcSmfUpfApplication const &', 'arg0')])
    ## ngc-smf-upf-application.h (module 'nr'): ns3::NgcSmfUpfApplication::NgcSmfUpfApplication(ns3::Ptr<ns3::VirtualNetDevice> const tunDevice, ns3::Ptr<ns3::Socket> const n2uSocket) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::VirtualNetDevice > const', 'tunDevice'), param('ns3::Ptr< ns3::Socket > const', 'n2uSocket')])
    ## ngc-smf-upf-application.h (module 'nr'): void ns3::NgcSmfUpfApplication::AddEnb(uint16_t cellId, ns3::Ipv4Address enbAddr, ns3::Ipv4Address smfAddr) [member function]
    cls.add_method('AddEnb', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('ns3::Ipv4Address', 'enbAddr'), param('ns3::Ipv4Address', 'smfAddr')])
    ## ngc-smf-upf-application.h (module 'nr'): void ns3::NgcSmfUpfApplication::AddUe(uint64_t imsi) [member function]
    cls.add_method('AddUe', 
                   'void', 
                   [param('uint64_t', 'imsi')])
    ## ngc-smf-upf-application.h (module 'nr'): void ns3::NgcSmfUpfApplication::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## ngc-smf-upf-application.h (module 'nr'): ns3::NgcN11SapSmf * ns3::NgcSmfUpfApplication::GetN11SapSmf() [member function]
    cls.add_method('GetN11SapSmf', 
                   'ns3::NgcN11SapSmf *', 
                   [])
    ## ngc-smf-upf-application.h (module 'nr'): static ns3::TypeId ns3::NgcSmfUpfApplication::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-smf-upf-application.h (module 'nr'): void ns3::NgcSmfUpfApplication::RecvFromN2uSocket(ns3::Ptr<ns3::Socket> socket) [member function]
    cls.add_method('RecvFromN2uSocket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'socket')])
    ## ngc-smf-upf-application.h (module 'nr'): bool ns3::NgcSmfUpfApplication::RecvFromTunDevice(ns3::Ptr<ns3::Packet> packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('RecvFromTunDevice', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'source'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')])
    ## ngc-smf-upf-application.h (module 'nr'): void ns3::NgcSmfUpfApplication::SendToN2uSocket(ns3::Ptr<ns3::Packet> packet, ns3::Ipv4Address enbN2uAddress, uint32_t teid) [member function]
    cls.add_method('SendToN2uSocket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv4Address', 'enbN2uAddress'), param('uint32_t', 'teid')])
    ## ngc-smf-upf-application.h (module 'nr'): void ns3::NgcSmfUpfApplication::SendToTunDevice(ns3::Ptr<ns3::Packet> packet, uint32_t teid) [member function]
    cls.add_method('SendToTunDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint32_t', 'teid')])
    ## ngc-smf-upf-application.h (module 'nr'): void ns3::NgcSmfUpfApplication::SetN11SapAmf(ns3::NgcN11SapAmf * s) [member function]
    cls.add_method('SetN11SapAmf', 
                   'void', 
                   [param('ns3::NgcN11SapAmf *', 's')])
    ## ngc-smf-upf-application.h (module 'nr'): void ns3::NgcSmfUpfApplication::SetUeAddress(uint64_t imsi, ns3::Ipv4Address ueAddr) [member function]
    cls.add_method('SetUeAddress', 
                   'void', 
                   [param('uint64_t', 'imsi'), param('ns3::Ipv4Address', 'ueAddr')])
    return

def register_Ns3NgcTft_methods(root_module, cls):
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::NgcTft(ns3::NgcTft const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcTft const &', 'arg0')])
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::NgcTft() [constructor]
    cls.add_constructor([])
    ## ngc-tft.h (module 'nr'): uint8_t ns3::NgcTft::Add(ns3::NgcTft::PacketFilter f) [member function]
    cls.add_method('Add', 
                   'uint8_t', 
                   [param('ns3::NgcTft::PacketFilter', 'f')])
    ## ngc-tft.h (module 'nr'): static ns3::Ptr<ns3::NgcTft> ns3::NgcTft::Default() [member function]
    cls.add_method('Default', 
                   'ns3::Ptr< ns3::NgcTft >', 
                   [], 
                   is_static=True)
    ## ngc-tft.h (module 'nr'): bool ns3::NgcTft::Matches(ns3::NgcTft::Direction direction, ns3::Ipv4Address remoteAddress, ns3::Ipv4Address localAddress, uint16_t remotePort, uint16_t localPort, uint8_t typeOfService) [member function]
    cls.add_method('Matches', 
                   'bool', 
                   [param('ns3::NgcTft::Direction', 'direction'), param('ns3::Ipv4Address', 'remoteAddress'), param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'remotePort'), param('uint16_t', 'localPort'), param('uint8_t', 'typeOfService')])
    return

def register_Ns3NgcTftPacketFilter_methods(root_module, cls):
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::PacketFilter(ns3::NgcTft::PacketFilter const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcTft::PacketFilter const &', 'arg0')])
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::PacketFilter() [constructor]
    cls.add_constructor([])
    ## ngc-tft.h (module 'nr'): bool ns3::NgcTft::PacketFilter::Matches(ns3::NgcTft::Direction d, ns3::Ipv4Address ra, ns3::Ipv4Address la, uint16_t rp, uint16_t lp, uint8_t tos) [member function]
    cls.add_method('Matches', 
                   'bool', 
                   [param('ns3::NgcTft::Direction', 'd'), param('ns3::Ipv4Address', 'ra'), param('ns3::Ipv4Address', 'la'), param('uint16_t', 'rp'), param('uint16_t', 'lp'), param('uint8_t', 'tos')])
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::direction [variable]
    cls.add_instance_attribute('direction', 'ns3::NgcTft::Direction', is_const=False)
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::localAddress [variable]
    cls.add_instance_attribute('localAddress', 'ns3::Ipv4Address', is_const=False)
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::localMask [variable]
    cls.add_instance_attribute('localMask', 'ns3::Ipv4Mask', is_const=False)
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::localPortEnd [variable]
    cls.add_instance_attribute('localPortEnd', 'uint16_t', is_const=False)
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::localPortStart [variable]
    cls.add_instance_attribute('localPortStart', 'uint16_t', is_const=False)
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::precedence [variable]
    cls.add_instance_attribute('precedence', 'uint8_t', is_const=False)
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::remoteAddress [variable]
    cls.add_instance_attribute('remoteAddress', 'ns3::Ipv4Address', is_const=False)
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::remoteMask [variable]
    cls.add_instance_attribute('remoteMask', 'ns3::Ipv4Mask', is_const=False)
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::remotePortEnd [variable]
    cls.add_instance_attribute('remotePortEnd', 'uint16_t', is_const=False)
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::remotePortStart [variable]
    cls.add_instance_attribute('remotePortStart', 'uint16_t', is_const=False)
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::typeOfService [variable]
    cls.add_instance_attribute('typeOfService', 'uint8_t', is_const=False)
    ## ngc-tft.h (module 'nr'): ns3::NgcTft::PacketFilter::typeOfServiceMask [variable]
    cls.add_instance_attribute('typeOfServiceMask', 'uint8_t', is_const=False)
    return

def register_Ns3NgcTftClassifier_methods(root_module, cls):
    ## ngc-tft-classifier.h (module 'nr'): ns3::NgcTftClassifier::NgcTftClassifier(ns3::NgcTftClassifier const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcTftClassifier const &', 'arg0')])
    ## ngc-tft-classifier.h (module 'nr'): ns3::NgcTftClassifier::NgcTftClassifier() [constructor]
    cls.add_constructor([])
    ## ngc-tft-classifier.h (module 'nr'): void ns3::NgcTftClassifier::Add(ns3::Ptr<ns3::NgcTft> tft, uint32_t id) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::NgcTft >', 'tft'), param('uint32_t', 'id')])
    ## ngc-tft-classifier.h (module 'nr'): uint32_t ns3::NgcTftClassifier::Classify(ns3::Ptr<ns3::Packet> p, ns3::NgcTft::Direction direction) [member function]
    cls.add_method('Classify', 
                   'uint32_t', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::NgcTft::Direction', 'direction')])
    ## ngc-tft-classifier.h (module 'nr'): void ns3::NgcTftClassifier::Delete(uint32_t id) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('uint32_t', 'id')])
    return

def register_Ns3NgcUeNas_methods(root_module, cls):
    ## ngc-ue-nas.h (module 'nr'): ns3::NgcUeNas::NgcUeNas(ns3::NgcUeNas const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcUeNas const &', 'arg0')])
    ## ngc-ue-nas.h (module 'nr'): ns3::NgcUeNas::NgcUeNas() [constructor]
    cls.add_constructor([])
    ## ngc-ue-nas.h (module 'nr'): void ns3::NgcUeNas::ActivateEpsBearer(ns3::EpsBearer bearer, ns3::Ptr<ns3::NgcTft> tft) [member function]
    cls.add_method('ActivateEpsBearer', 
                   'void', 
                   [param('ns3::EpsBearer', 'bearer'), param('ns3::Ptr< ns3::NgcTft >', 'tft')])
    ## ngc-ue-nas.h (module 'nr'): void ns3::NgcUeNas::Connect() [member function]
    cls.add_method('Connect', 
                   'void', 
                   [])
    ## ngc-ue-nas.h (module 'nr'): void ns3::NgcUeNas::Connect(uint16_t cellId, uint16_t dlEarfcn) [member function]
    cls.add_method('Connect', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint16_t', 'dlEarfcn')])
    ## ngc-ue-nas.h (module 'nr'): void ns3::NgcUeNas::Disconnect() [member function]
    cls.add_method('Disconnect', 
                   'void', 
                   [])
    ## ngc-ue-nas.h (module 'nr'): void ns3::NgcUeNas::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## ngc-ue-nas.h (module 'nr'): ns3::NrAsSapUser * ns3::NgcUeNas::GetAsSapUser() [member function]
    cls.add_method('GetAsSapUser', 
                   'ns3::NrAsSapUser *', 
                   [])
    ## ngc-ue-nas.h (module 'nr'): uint32_t ns3::NgcUeNas::GetCsgId() const [member function]
    cls.add_method('GetCsgId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-ue-nas.h (module 'nr'): ns3::NgcUeNas::State ns3::NgcUeNas::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::NgcUeNas::State', 
                   [], 
                   is_const=True)
    ## ngc-ue-nas.h (module 'nr'): static ns3::TypeId ns3::NgcUeNas::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-ue-nas.h (module 'nr'): bool ns3::NgcUeNas::Send(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('Send', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## ngc-ue-nas.h (module 'nr'): void ns3::NgcUeNas::SetAsSapProvider(ns3::NrAsSapProvider * s) [member function]
    cls.add_method('SetAsSapProvider', 
                   'void', 
                   [param('ns3::NrAsSapProvider *', 's')])
    ## ngc-ue-nas.h (module 'nr'): void ns3::NgcUeNas::SetCsgId(uint32_t csgId) [member function]
    cls.add_method('SetCsgId', 
                   'void', 
                   [param('uint32_t', 'csgId')])
    ## ngc-ue-nas.h (module 'nr'): void ns3::NgcUeNas::SetDevice(ns3::Ptr<ns3::NetDevice> dev) [member function]
    cls.add_method('SetDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'dev')])
    ## ngc-ue-nas.h (module 'nr'): void ns3::NgcUeNas::SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
    cls.add_method('SetForwardUpCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')])
    ## ngc-ue-nas.h (module 'nr'): void ns3::NgcUeNas::SetImsi(uint64_t imsi) [member function]
    cls.add_method('SetImsi', 
                   'void', 
                   [param('uint64_t', 'imsi')])
    ## ngc-ue-nas.h (module 'nr'): void ns3::NgcUeNas::StartCellSelection(uint16_t dlEarfcn) [member function]
    cls.add_method('StartCellSelection', 
                   'void', 
                   [param('uint16_t', 'dlEarfcn')])
    return

def register_Ns3NgcX2_methods(root_module, cls):
    ## ngc-x2.h (module 'nr'): ns3::NgcX2::NgcX2(ns3::NgcX2 const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2 const &', 'arg0')])
    ## ngc-x2.h (module 'nr'): ns3::NgcX2::NgcX2() [constructor]
    cls.add_constructor([])
    ## ngc-x2.h (module 'nr'): void ns3::NgcX2::AddX2Interface(uint16_t enb1CellId, ns3::Ipv4Address enb1X2Address, uint16_t enb2CellId, ns3::Ipv4Address enb2X2Address) [member function]
    cls.add_method('AddX2Interface', 
                   'void', 
                   [param('uint16_t', 'enb1CellId'), param('ns3::Ipv4Address', 'enb1X2Address'), param('uint16_t', 'enb2CellId'), param('ns3::Ipv4Address', 'enb2X2Address')])
    ## ngc-x2.h (module 'nr'): void ns3::NgcX2::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## ngc-x2.h (module 'nr'): ns3::NgcX2SapProvider * ns3::NgcX2::GetNgcX2SapProvider() [member function]
    cls.add_method('GetNgcX2SapProvider', 
                   'ns3::NgcX2SapProvider *', 
                   [])
    ## ngc-x2.h (module 'nr'): static ns3::TypeId ns3::NgcX2::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-x2.h (module 'nr'): void ns3::NgcX2::RecvFromX2cSocket(ns3::Ptr<ns3::Socket> socket) [member function]
    cls.add_method('RecvFromX2cSocket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'socket')])
    ## ngc-x2.h (module 'nr'): void ns3::NgcX2::RecvFromX2uSocket(ns3::Ptr<ns3::Socket> socket) [member function]
    cls.add_method('RecvFromX2uSocket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'socket')])
    ## ngc-x2.h (module 'nr'): void ns3::NgcX2::SetNgcX2SapUser(ns3::NgcX2SapUser * s) [member function]
    cls.add_method('SetNgcX2SapUser', 
                   'void', 
                   [param('ns3::NgcX2SapUser *', 's')])
    ## ngc-x2.h (module 'nr'): void ns3::NgcX2::DoSendHandoverPreparationFailure(ns3::NgcX2Sap::HandoverPreparationFailureParams params) [member function]
    cls.add_method('DoSendHandoverPreparationFailure', 
                   'void', 
                   [param('ns3::NgcX2Sap::HandoverPreparationFailureParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## ngc-x2.h (module 'nr'): void ns3::NgcX2::DoSendHandoverRequest(ns3::NgcX2Sap::HandoverRequestParams params) [member function]
    cls.add_method('DoSendHandoverRequest', 
                   'void', 
                   [param('ns3::NgcX2Sap::HandoverRequestParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## ngc-x2.h (module 'nr'): void ns3::NgcX2::DoSendHandoverRequestAck(ns3::NgcX2Sap::HandoverRequestAckParams params) [member function]
    cls.add_method('DoSendHandoverRequestAck', 
                   'void', 
                   [param('ns3::NgcX2Sap::HandoverRequestAckParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## ngc-x2.h (module 'nr'): void ns3::NgcX2::DoSendLoadInformation(ns3::NgcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('DoSendLoadInformation', 
                   'void', 
                   [param('ns3::NgcX2Sap::LoadInformationParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## ngc-x2.h (module 'nr'): void ns3::NgcX2::DoSendResourceStatusUpdate(ns3::NgcX2Sap::ResourceStatusUpdateParams params) [member function]
    cls.add_method('DoSendResourceStatusUpdate', 
                   'void', 
                   [param('ns3::NgcX2Sap::ResourceStatusUpdateParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## ngc-x2.h (module 'nr'): void ns3::NgcX2::DoSendSnStatusTransfer(ns3::NgcX2Sap::SnStatusTransferParams params) [member function]
    cls.add_method('DoSendSnStatusTransfer', 
                   'void', 
                   [param('ns3::NgcX2Sap::SnStatusTransferParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## ngc-x2.h (module 'nr'): void ns3::NgcX2::DoSendUeContextRelease(ns3::NgcX2Sap::UeContextReleaseParams params) [member function]
    cls.add_method('DoSendUeContextRelease', 
                   'void', 
                   [param('ns3::NgcX2Sap::UeContextReleaseParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## ngc-x2.h (module 'nr'): void ns3::NgcX2::DoSendUeData(ns3::NgcX2Sap::UeDataParams params) [member function]
    cls.add_method('DoSendUeData', 
                   'void', 
                   [param('ns3::NgcX2Sap::UeDataParams', 'params')], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NgcX2HandoverPreparationFailureHeader_methods(root_module, cls):
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2HandoverPreparationFailureHeader::NgcX2HandoverPreparationFailureHeader(ns3::NgcX2HandoverPreparationFailureHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2HandoverPreparationFailureHeader const &', 'arg0')])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2HandoverPreparationFailureHeader::NgcX2HandoverPreparationFailureHeader() [constructor]
    cls.add_constructor([])
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2HandoverPreparationFailureHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2HandoverPreparationFailureHeader::GetCause() const [member function]
    cls.add_method('GetCause', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2HandoverPreparationFailureHeader::GetCriticalityDiagnostics() const [member function]
    cls.add_method('GetCriticalityDiagnostics', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): ns3::TypeId ns3::NgcX2HandoverPreparationFailureHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2HandoverPreparationFailureHeader::GetLengthOfIes() const [member function]
    cls.add_method('GetLengthOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2HandoverPreparationFailureHeader::GetNumberOfIes() const [member function]
    cls.add_method('GetNumberOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2HandoverPreparationFailureHeader::GetOldEnbUeX2apId() const [member function]
    cls.add_method('GetOldEnbUeX2apId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2HandoverPreparationFailureHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): static ns3::TypeId ns3::NgcX2HandoverPreparationFailureHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverPreparationFailureHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverPreparationFailureHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverPreparationFailureHeader::SetCause(uint16_t cause) [member function]
    cls.add_method('SetCause', 
                   'void', 
                   [param('uint16_t', 'cause')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverPreparationFailureHeader::SetCriticalityDiagnostics(uint16_t criticalityDiagnostics) [member function]
    cls.add_method('SetCriticalityDiagnostics', 
                   'void', 
                   [param('uint16_t', 'criticalityDiagnostics')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverPreparationFailureHeader::SetOldEnbUeX2apId(uint16_t x2apId) [member function]
    cls.add_method('SetOldEnbUeX2apId', 
                   'void', 
                   [param('uint16_t', 'x2apId')])
    return

def register_Ns3NgcX2HandoverRequestAckHeader_methods(root_module, cls):
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2HandoverRequestAckHeader::NgcX2HandoverRequestAckHeader(ns3::NgcX2HandoverRequestAckHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2HandoverRequestAckHeader const &', 'arg0')])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2HandoverRequestAckHeader::NgcX2HandoverRequestAckHeader() [constructor]
    cls.add_constructor([])
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2HandoverRequestAckHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): std::vector<ns3::NgcX2Sap::ErabAdmittedItem, std::allocator<ns3::NgcX2Sap::ErabAdmittedItem> > ns3::NgcX2HandoverRequestAckHeader::GetAdmittedBearers() const [member function]
    cls.add_method('GetAdmittedBearers', 
                   'std::vector< ns3::NgcX2Sap::ErabAdmittedItem >', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): ns3::TypeId ns3::NgcX2HandoverRequestAckHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2HandoverRequestAckHeader::GetLengthOfIes() const [member function]
    cls.add_method('GetLengthOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2HandoverRequestAckHeader::GetNewEnbUeX2apId() const [member function]
    cls.add_method('GetNewEnbUeX2apId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): std::vector<ns3::NgcX2Sap::ErabNotAdmittedItem, std::allocator<ns3::NgcX2Sap::ErabNotAdmittedItem> > ns3::NgcX2HandoverRequestAckHeader::GetNotAdmittedBearers() const [member function]
    cls.add_method('GetNotAdmittedBearers', 
                   'std::vector< ns3::NgcX2Sap::ErabNotAdmittedItem >', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2HandoverRequestAckHeader::GetNumberOfIes() const [member function]
    cls.add_method('GetNumberOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2HandoverRequestAckHeader::GetOldEnbUeX2apId() const [member function]
    cls.add_method('GetOldEnbUeX2apId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2HandoverRequestAckHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): static ns3::TypeId ns3::NgcX2HandoverRequestAckHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestAckHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestAckHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestAckHeader::SetAdmittedBearers(std::vector<ns3::NgcX2Sap::ErabAdmittedItem, std::allocator<ns3::NgcX2Sap::ErabAdmittedItem> > bearers) [member function]
    cls.add_method('SetAdmittedBearers', 
                   'void', 
                   [param('std::vector< ns3::NgcX2Sap::ErabAdmittedItem >', 'bearers')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestAckHeader::SetNewEnbUeX2apId(uint16_t x2apId) [member function]
    cls.add_method('SetNewEnbUeX2apId', 
                   'void', 
                   [param('uint16_t', 'x2apId')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestAckHeader::SetNotAdmittedBearers(std::vector<ns3::NgcX2Sap::ErabNotAdmittedItem, std::allocator<ns3::NgcX2Sap::ErabNotAdmittedItem> > bearers) [member function]
    cls.add_method('SetNotAdmittedBearers', 
                   'void', 
                   [param('std::vector< ns3::NgcX2Sap::ErabNotAdmittedItem >', 'bearers')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestAckHeader::SetOldEnbUeX2apId(uint16_t x2apId) [member function]
    cls.add_method('SetOldEnbUeX2apId', 
                   'void', 
                   [param('uint16_t', 'x2apId')])
    return

def register_Ns3NgcX2HandoverRequestHeader_methods(root_module, cls):
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2HandoverRequestHeader::NgcX2HandoverRequestHeader(ns3::NgcX2HandoverRequestHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2HandoverRequestHeader const &', 'arg0')])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2HandoverRequestHeader::NgcX2HandoverRequestHeader() [constructor]
    cls.add_constructor([])
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2HandoverRequestHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): std::vector<ns3::NgcX2Sap::ErabToBeSetupItem, std::allocator<ns3::NgcX2Sap::ErabToBeSetupItem> > ns3::NgcX2HandoverRequestHeader::GetBearers() const [member function]
    cls.add_method('GetBearers', 
                   'std::vector< ns3::NgcX2Sap::ErabToBeSetupItem >', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2HandoverRequestHeader::GetCause() const [member function]
    cls.add_method('GetCause', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): ns3::TypeId ns3::NgcX2HandoverRequestHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2HandoverRequestHeader::GetLengthOfIes() const [member function]
    cls.add_method('GetLengthOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2HandoverRequestHeader::GetAmfUeN2apId() const [member function]
    cls.add_method('GetAmfUeN2apId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2HandoverRequestHeader::GetNumberOfIes() const [member function]
    cls.add_method('GetNumberOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2HandoverRequestHeader::GetOldEnbUeX2apId() const [member function]
    cls.add_method('GetOldEnbUeX2apId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2HandoverRequestHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2HandoverRequestHeader::GetTargetCellId() const [member function]
    cls.add_method('GetTargetCellId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): static ns3::TypeId ns3::NgcX2HandoverRequestHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-x2-header.h (module 'nr'): uint64_t ns3::NgcX2HandoverRequestHeader::GetUeAggregateMaxBitRateDownlink() const [member function]
    cls.add_method('GetUeAggregateMaxBitRateDownlink', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint64_t ns3::NgcX2HandoverRequestHeader::GetUeAggregateMaxBitRateUplink() const [member function]
    cls.add_method('GetUeAggregateMaxBitRateUplink', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestHeader::SetBearers(std::vector<ns3::NgcX2Sap::ErabToBeSetupItem, std::allocator<ns3::NgcX2Sap::ErabToBeSetupItem> > bearers) [member function]
    cls.add_method('SetBearers', 
                   'void', 
                   [param('std::vector< ns3::NgcX2Sap::ErabToBeSetupItem >', 'bearers')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestHeader::SetCause(uint16_t cause) [member function]
    cls.add_method('SetCause', 
                   'void', 
                   [param('uint16_t', 'cause')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestHeader::SetAmfUeN2apId(uint32_t amfUeN2apId) [member function]
    cls.add_method('SetAmfUeN2apId', 
                   'void', 
                   [param('uint32_t', 'amfUeN2apId')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestHeader::SetOldEnbUeX2apId(uint16_t x2apId) [member function]
    cls.add_method('SetOldEnbUeX2apId', 
                   'void', 
                   [param('uint16_t', 'x2apId')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestHeader::SetTargetCellId(uint16_t targetCellId) [member function]
    cls.add_method('SetTargetCellId', 
                   'void', 
                   [param('uint16_t', 'targetCellId')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestHeader::SetUeAggregateMaxBitRateDownlink(uint64_t bitRate) [member function]
    cls.add_method('SetUeAggregateMaxBitRateDownlink', 
                   'void', 
                   [param('uint64_t', 'bitRate')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2HandoverRequestHeader::SetUeAggregateMaxBitRateUplink(uint64_t bitRate) [member function]
    cls.add_method('SetUeAggregateMaxBitRateUplink', 
                   'void', 
                   [param('uint64_t', 'bitRate')])
    return

def register_Ns3NgcX2Header_methods(root_module, cls):
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2Header::NgcX2Header(ns3::NgcX2Header const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2Header const &', 'arg0')])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2Header::NgcX2Header() [constructor]
    cls.add_constructor([])
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2Header::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): ns3::TypeId ns3::NgcX2Header::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): uint8_t ns3::NgcX2Header::GetMessageType() const [member function]
    cls.add_method('GetMessageType', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint8_t ns3::NgcX2Header::GetProcedureCode() const [member function]
    cls.add_method('GetProcedureCode', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2Header::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): static ns3::TypeId ns3::NgcX2Header::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2Header::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2Header::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2Header::SetLengthOfIes(uint32_t lengthOfIes) [member function]
    cls.add_method('SetLengthOfIes', 
                   'void', 
                   [param('uint32_t', 'lengthOfIes')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2Header::SetMessageType(uint8_t messageType) [member function]
    cls.add_method('SetMessageType', 
                   'void', 
                   [param('uint8_t', 'messageType')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2Header::SetNumberOfIes(uint32_t numberOfIes) [member function]
    cls.add_method('SetNumberOfIes', 
                   'void', 
                   [param('uint32_t', 'numberOfIes')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2Header::SetProcedureCode(uint8_t procedureCode) [member function]
    cls.add_method('SetProcedureCode', 
                   'void', 
                   [param('uint8_t', 'procedureCode')])
    return

def register_Ns3NgcX2LoadInformationHeader_methods(root_module, cls):
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2LoadInformationHeader::NgcX2LoadInformationHeader(ns3::NgcX2LoadInformationHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2LoadInformationHeader const &', 'arg0')])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2LoadInformationHeader::NgcX2LoadInformationHeader() [constructor]
    cls.add_constructor([])
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2LoadInformationHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): std::vector<ns3::NgcX2Sap::CellInformationItem, std::allocator<ns3::NgcX2Sap::CellInformationItem> > ns3::NgcX2LoadInformationHeader::GetCellInformationList() const [member function]
    cls.add_method('GetCellInformationList', 
                   'std::vector< ns3::NgcX2Sap::CellInformationItem >', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): ns3::TypeId ns3::NgcX2LoadInformationHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2LoadInformationHeader::GetLengthOfIes() const [member function]
    cls.add_method('GetLengthOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2LoadInformationHeader::GetNumberOfIes() const [member function]
    cls.add_method('GetNumberOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2LoadInformationHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): static ns3::TypeId ns3::NgcX2LoadInformationHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2LoadInformationHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2LoadInformationHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2LoadInformationHeader::SetCellInformationList(std::vector<ns3::NgcX2Sap::CellInformationItem, std::allocator<ns3::NgcX2Sap::CellInformationItem> > cellInformationList) [member function]
    cls.add_method('SetCellInformationList', 
                   'void', 
                   [param('std::vector< ns3::NgcX2Sap::CellInformationItem >', 'cellInformationList')])
    return

def register_Ns3NgcX2ResourceStatusUpdateHeader_methods(root_module, cls):
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2ResourceStatusUpdateHeader::NgcX2ResourceStatusUpdateHeader(ns3::NgcX2ResourceStatusUpdateHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2ResourceStatusUpdateHeader const &', 'arg0')])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2ResourceStatusUpdateHeader::NgcX2ResourceStatusUpdateHeader() [constructor]
    cls.add_constructor([])
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2ResourceStatusUpdateHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): std::vector<ns3::NgcX2Sap::CellMeasurementResultItem, std::allocator<ns3::NgcX2Sap::CellMeasurementResultItem> > ns3::NgcX2ResourceStatusUpdateHeader::GetCellMeasurementResultList() const [member function]
    cls.add_method('GetCellMeasurementResultList', 
                   'std::vector< ns3::NgcX2Sap::CellMeasurementResultItem >', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2ResourceStatusUpdateHeader::GetEnb1MeasurementId() const [member function]
    cls.add_method('GetEnb1MeasurementId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2ResourceStatusUpdateHeader::GetEnb2MeasurementId() const [member function]
    cls.add_method('GetEnb2MeasurementId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): ns3::TypeId ns3::NgcX2ResourceStatusUpdateHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2ResourceStatusUpdateHeader::GetLengthOfIes() const [member function]
    cls.add_method('GetLengthOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2ResourceStatusUpdateHeader::GetNumberOfIes() const [member function]
    cls.add_method('GetNumberOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2ResourceStatusUpdateHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): static ns3::TypeId ns3::NgcX2ResourceStatusUpdateHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2ResourceStatusUpdateHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2ResourceStatusUpdateHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2ResourceStatusUpdateHeader::SetCellMeasurementResultList(std::vector<ns3::NgcX2Sap::CellMeasurementResultItem, std::allocator<ns3::NgcX2Sap::CellMeasurementResultItem> > cellMeasurementResultList) [member function]
    cls.add_method('SetCellMeasurementResultList', 
                   'void', 
                   [param('std::vector< ns3::NgcX2Sap::CellMeasurementResultItem >', 'cellMeasurementResultList')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2ResourceStatusUpdateHeader::SetEnb1MeasurementId(uint16_t enb1MeasurementId) [member function]
    cls.add_method('SetEnb1MeasurementId', 
                   'void', 
                   [param('uint16_t', 'enb1MeasurementId')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2ResourceStatusUpdateHeader::SetEnb2MeasurementId(uint16_t enb2MeasurementId) [member function]
    cls.add_method('SetEnb2MeasurementId', 
                   'void', 
                   [param('uint16_t', 'enb2MeasurementId')])
    return

def register_Ns3NgcX2SnStatusTransferHeader_methods(root_module, cls):
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2SnStatusTransferHeader::NgcX2SnStatusTransferHeader(ns3::NgcX2SnStatusTransferHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2SnStatusTransferHeader const &', 'arg0')])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2SnStatusTransferHeader::NgcX2SnStatusTransferHeader() [constructor]
    cls.add_constructor([])
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2SnStatusTransferHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): std::vector<ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem, std::allocator<ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem> > ns3::NgcX2SnStatusTransferHeader::GetErabsSubjectToStatusTransferList() const [member function]
    cls.add_method('GetErabsSubjectToStatusTransferList', 
                   'std::vector< ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem >', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): ns3::TypeId ns3::NgcX2SnStatusTransferHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2SnStatusTransferHeader::GetLengthOfIes() const [member function]
    cls.add_method('GetLengthOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2SnStatusTransferHeader::GetNewEnbUeX2apId() const [member function]
    cls.add_method('GetNewEnbUeX2apId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2SnStatusTransferHeader::GetNumberOfIes() const [member function]
    cls.add_method('GetNumberOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2SnStatusTransferHeader::GetOldEnbUeX2apId() const [member function]
    cls.add_method('GetOldEnbUeX2apId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2SnStatusTransferHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): static ns3::TypeId ns3::NgcX2SnStatusTransferHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2SnStatusTransferHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2SnStatusTransferHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2SnStatusTransferHeader::SetErabsSubjectToStatusTransferList(std::vector<ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem, std::allocator<ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem> > erabs) [member function]
    cls.add_method('SetErabsSubjectToStatusTransferList', 
                   'void', 
                   [param('std::vector< ns3::NgcX2Sap::ErabsSubjectToStatusTransferItem >', 'erabs')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2SnStatusTransferHeader::SetNewEnbUeX2apId(uint16_t x2apId) [member function]
    cls.add_method('SetNewEnbUeX2apId', 
                   'void', 
                   [param('uint16_t', 'x2apId')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2SnStatusTransferHeader::SetOldEnbUeX2apId(uint16_t x2apId) [member function]
    cls.add_method('SetOldEnbUeX2apId', 
                   'void', 
                   [param('uint16_t', 'x2apId')])
    return

def register_Ns3NgcX2UeContextReleaseHeader_methods(root_module, cls):
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2UeContextReleaseHeader::NgcX2UeContextReleaseHeader(ns3::NgcX2UeContextReleaseHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NgcX2UeContextReleaseHeader const &', 'arg0')])
    ## ngc-x2-header.h (module 'nr'): ns3::NgcX2UeContextReleaseHeader::NgcX2UeContextReleaseHeader() [constructor]
    cls.add_constructor([])
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2UeContextReleaseHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): ns3::TypeId ns3::NgcX2UeContextReleaseHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2UeContextReleaseHeader::GetLengthOfIes() const [member function]
    cls.add_method('GetLengthOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2UeContextReleaseHeader::GetNewEnbUeX2apId() const [member function]
    cls.add_method('GetNewEnbUeX2apId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2UeContextReleaseHeader::GetNumberOfIes() const [member function]
    cls.add_method('GetNumberOfIes', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint16_t ns3::NgcX2UeContextReleaseHeader::GetOldEnbUeX2apId() const [member function]
    cls.add_method('GetOldEnbUeX2apId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-x2-header.h (module 'nr'): uint32_t ns3::NgcX2UeContextReleaseHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): static ns3::TypeId ns3::NgcX2UeContextReleaseHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2UeContextReleaseHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2UeContextReleaseHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2UeContextReleaseHeader::SetNewEnbUeX2apId(uint16_t x2apId) [member function]
    cls.add_method('SetNewEnbUeX2apId', 
                   'void', 
                   [param('uint16_t', 'x2apId')])
    ## ngc-x2-header.h (module 'nr'): void ns3::NgcX2UeContextReleaseHeader::SetOldEnbUeX2apId(uint16_t x2apId) [member function]
    cls.add_method('SetOldEnbUeX2apId', 
                   'void', 
                   [param('uint16_t', 'x2apId')])
    return

def register_Ns3ErlangRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ErlangRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ErlangRandomVariable::ErlangRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ErlangRandomVariable::GetK() const [member function]
    cls.add_method('GetK', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ErlangRandomVariable::GetLambda() const [member function]
    cls.add_method('GetLambda', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ErlangRandomVariable::GetValue(uint32_t k, double lambda) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('uint32_t', 'k'), param('double', 'lambda')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ErlangRandomVariable::GetInteger(uint32_t k, uint32_t lambda) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'k'), param('uint32_t', 'lambda')])
    ## random-variable-stream.h (module 'core'): double ns3::ErlangRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ErlangRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3EventImpl_methods(root_module, cls):
    ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl(ns3::EventImpl const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::EventImpl const &', 'arg0')])
    ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl() [constructor]
    cls.add_constructor([])
    ## event-impl.h (module 'core'): void ns3::EventImpl::Cancel() [member function]
    cls.add_method('Cancel', 
                   'void', 
                   [])
    ## event-impl.h (module 'core'): void ns3::EventImpl::Invoke() [member function]
    cls.add_method('Invoke', 
                   'void', 
                   [])
    ## event-impl.h (module 'core'): bool ns3::EventImpl::IsCancelled() [member function]
    cls.add_method('IsCancelled', 
                   'bool', 
                   [])
    ## event-impl.h (module 'core'): void ns3::EventImpl::Notify() [member function]
    cls.add_method('Notify', 
                   'void', 
                   [], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    return

def register_Ns3ExponentialRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ExponentialRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ExponentialRandomVariable::ExponentialRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::ExponentialRandomVariable::GetMean() const [member function]
    cls.add_method('GetMean', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ExponentialRandomVariable::GetBound() const [member function]
    cls.add_method('GetBound', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ExponentialRandomVariable::GetValue(double mean, double bound) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'mean'), param('double', 'bound')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ExponentialRandomVariable::GetInteger(uint32_t mean, uint32_t bound) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'mean'), param('uint32_t', 'bound')])
    ## random-variable-stream.h (module 'core'): double ns3::ExponentialRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ExponentialRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3FfMacScheduler_methods(root_module, cls):
    ## nr-ff-mac-scheduler.h (module 'nr'): ns3::NrFfMacScheduler::NrFfMacScheduler(ns3::NrFfMacScheduler const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFfMacScheduler const &', 'arg0')])
    ## nr-ff-mac-scheduler.h (module 'nr'): ns3::NrFfMacScheduler::NrFfMacScheduler() [constructor]
    cls.add_constructor([])
    ## nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrFfMacScheduler::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-ff-mac-scheduler.h (module 'nr'): ns3::FfMacCschedSapProvider * ns3::NrFfMacScheduler::GetFfMacCschedSapProvider() [member function]
    cls.add_method('GetFfMacCschedSapProvider', 
                   'ns3::FfMacCschedSapProvider *', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ff-mac-scheduler.h (module 'nr'): ns3::FfMacSchedSapProvider * ns3::NrFfMacScheduler::GetFfMacSchedSapProvider() [member function]
    cls.add_method('GetFfMacSchedSapProvider', 
                   'ns3::FfMacSchedSapProvider *', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ff-mac-scheduler.h (module 'nr'): ns3::NrFfrSapUser * ns3::NrFfMacScheduler::GetNrFfrSapUser() [member function]
    cls.add_method('GetNrFfrSapUser', 
                   'ns3::NrFfrSapUser *', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ff-mac-scheduler.h (module 'nr'): static ns3::TypeId ns3::NrFfMacScheduler::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrFfMacScheduler::SetFfMacCschedSapUser(ns3::FfMacCschedSapUser * s) [member function]
    cls.add_method('SetFfMacCschedSapUser', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser *', 's')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrFfMacScheduler::SetFfMacSchedSapUser(ns3::FfMacSchedSapUser * s) [member function]
    cls.add_method('SetFfMacSchedSapUser', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser *', 's')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrFfMacScheduler::SetNrFfrSapProvider(ns3::NrFfrSapProvider * s) [member function]
    cls.add_method('SetNrFfrSapProvider', 
                   'void', 
                   [param('ns3::NrFfrSapProvider *', 's')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3GammaRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::GammaRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::GammaRandomVariable::GammaRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::GammaRandomVariable::GetAlpha() const [member function]
    cls.add_method('GetAlpha', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::GammaRandomVariable::GetBeta() const [member function]
    cls.add_method('GetBeta', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::GammaRandomVariable::GetValue(double alpha, double beta) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'alpha'), param('double', 'beta')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::GammaRandomVariable::GetInteger(uint32_t alpha, uint32_t beta) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'alpha'), param('uint32_t', 'beta')])
    ## random-variable-stream.h (module 'core'): double ns3::GammaRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::GammaRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3NrGtpuHeader_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    ## ngc-gtpu-header.h (module 'nr'): ns3::NrGtpuHeader::NrGtpuHeader(ns3::NrGtpuHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrGtpuHeader const &', 'arg0')])
    ## ngc-gtpu-header.h (module 'nr'): ns3::NrGtpuHeader::NrGtpuHeader() [constructor]
    cls.add_constructor([])
    ## ngc-gtpu-header.h (module 'nr'): uint32_t ns3::NrGtpuHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## ngc-gtpu-header.h (module 'nr'): bool ns3::NrGtpuHeader::GetExtensionHeaderFlag() const [member function]
    cls.add_method('GetExtensionHeaderFlag', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ngc-gtpu-header.h (module 'nr'): ns3::TypeId ns3::NrGtpuHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-gtpu-header.h (module 'nr'): uint16_t ns3::NrGtpuHeader::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-gtpu-header.h (module 'nr'): uint8_t ns3::NrGtpuHeader::GetMessageType() const [member function]
    cls.add_method('GetMessageType', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ngc-gtpu-header.h (module 'nr'): uint8_t ns3::NrGtpuHeader::GetNPduNumber() const [member function]
    cls.add_method('GetNPduNumber', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ngc-gtpu-header.h (module 'nr'): bool ns3::NrGtpuHeader::GetNPduNumberFlag() const [member function]
    cls.add_method('GetNPduNumberFlag', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ngc-gtpu-header.h (module 'nr'): uint8_t ns3::NrGtpuHeader::GetNextExtensionType() const [member function]
    cls.add_method('GetNextExtensionType', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ngc-gtpu-header.h (module 'nr'): bool ns3::NrGtpuHeader::GetProtocolType() const [member function]
    cls.add_method('GetProtocolType', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ngc-gtpu-header.h (module 'nr'): uint16_t ns3::NrGtpuHeader::GetSequenceNumber() const [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ngc-gtpu-header.h (module 'nr'): bool ns3::NrGtpuHeader::GetSequenceNumberFlag() const [member function]
    cls.add_method('GetSequenceNumberFlag', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ngc-gtpu-header.h (module 'nr'): uint32_t ns3::NrGtpuHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ngc-gtpu-header.h (module 'nr'): uint32_t ns3::NrGtpuHeader::GetTeid() const [member function]
    cls.add_method('GetTeid', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ngc-gtpu-header.h (module 'nr'): static ns3::TypeId ns3::NrGtpuHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ngc-gtpu-header.h (module 'nr'): uint8_t ns3::NrGtpuHeader::GetVersion() const [member function]
    cls.add_method('GetVersion', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ngc-gtpu-header.h (module 'nr'): void ns3::NrGtpuHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## ngc-gtpu-header.h (module 'nr'): void ns3::NrGtpuHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## ngc-gtpu-header.h (module 'nr'): void ns3::NrGtpuHeader::SetExtensionHeaderFlag(bool m_extensionHeaderFlag) [member function]
    cls.add_method('SetExtensionHeaderFlag', 
                   'void', 
                   [param('bool', 'm_extensionHeaderFlag')])
    ## ngc-gtpu-header.h (module 'nr'): void ns3::NrGtpuHeader::SetLength(uint16_t m_length) [member function]
    cls.add_method('SetLength', 
                   'void', 
                   [param('uint16_t', 'm_length')])
    ## ngc-gtpu-header.h (module 'nr'): void ns3::NrGtpuHeader::SetMessageType(uint8_t m_messageType) [member function]
    cls.add_method('SetMessageType', 
                   'void', 
                   [param('uint8_t', 'm_messageType')])
    ## ngc-gtpu-header.h (module 'nr'): void ns3::NrGtpuHeader::SetNPduNumber(uint8_t m_nPduNumber) [member function]
    cls.add_method('SetNPduNumber', 
                   'void', 
                   [param('uint8_t', 'm_nPduNumber')])
    ## ngc-gtpu-header.h (module 'nr'): void ns3::NrGtpuHeader::SetNPduNumberFlag(bool m_nPduNumberFlag) [member function]
    cls.add_method('SetNPduNumberFlag', 
                   'void', 
                   [param('bool', 'm_nPduNumberFlag')])
    ## ngc-gtpu-header.h (module 'nr'): void ns3::NrGtpuHeader::SetNextExtensionType(uint8_t m_nextExtensionType) [member function]
    cls.add_method('SetNextExtensionType', 
                   'void', 
                   [param('uint8_t', 'm_nextExtensionType')])
    ## ngc-gtpu-header.h (module 'nr'): void ns3::NrGtpuHeader::SetProtocolType(bool m_protocolType) [member function]
    cls.add_method('SetProtocolType', 
                   'void', 
                   [param('bool', 'm_protocolType')])
    ## ngc-gtpu-header.h (module 'nr'): void ns3::NrGtpuHeader::SetSequenceNumber(uint16_t m_sequenceNumber) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint16_t', 'm_sequenceNumber')])
    ## ngc-gtpu-header.h (module 'nr'): void ns3::NrGtpuHeader::SetSequenceNumberFlag(bool m_sequenceNumberFlag) [member function]
    cls.add_method('SetSequenceNumberFlag', 
                   'void', 
                   [param('bool', 'm_sequenceNumberFlag')])
    ## ngc-gtpu-header.h (module 'nr'): void ns3::NrGtpuHeader::SetTeid(uint32_t m_teid) [member function]
    cls.add_method('SetTeid', 
                   'void', 
                   [param('uint32_t', 'm_teid')])
    ## ngc-gtpu-header.h (module 'nr'): void ns3::NrGtpuHeader::SetVersion(uint8_t m_version) [member function]
    cls.add_method('SetVersion', 
                   'void', 
                   [param('uint8_t', 'm_version')])
    return

def register_Ns3IntegerValue_methods(root_module, cls):
    ## integer.h (module 'core'): ns3::IntegerValue::IntegerValue() [constructor]
    cls.add_constructor([])
    ## integer.h (module 'core'): ns3::IntegerValue::IntegerValue(ns3::IntegerValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::IntegerValue const &', 'arg0')])
    ## integer.h (module 'core'): ns3::IntegerValue::IntegerValue(int64_t const & value) [constructor]
    cls.add_constructor([param('int64_t const &', 'value')])
    ## integer.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::IntegerValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## integer.h (module 'core'): bool ns3::IntegerValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## integer.h (module 'core'): int64_t ns3::IntegerValue::Get() const [member function]
    cls.add_method('Get', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## integer.h (module 'core'): std::string ns3::IntegerValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## integer.h (module 'core'): void ns3::IntegerValue::Set(int64_t const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('int64_t const &', 'value')])
    return

def register_Ns3Ipv4_methods(root_module, cls):
    ## ipv4.h (module 'internet'): ns3::Ipv4::Ipv4(ns3::Ipv4 const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv4 const &', 'arg0')])
    ## ipv4.h (module 'internet'): ns3::Ipv4::Ipv4() [constructor]
    cls.add_constructor([])
    ## ipv4.h (module 'internet'): bool ns3::Ipv4::AddAddress(uint32_t interface, ns3::Ipv4InterfaceAddress address) [member function]
    cls.add_method('AddAddress', 
                   'bool', 
                   [param('uint32_t', 'interface'), param('ns3::Ipv4InterfaceAddress', 'address')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): uint32_t ns3::Ipv4::AddInterface(ns3::Ptr<ns3::NetDevice> device) [member function]
    cls.add_method('AddInterface', 
                   'uint32_t', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::Socket> ns3::Ipv4::CreateRawSocket() [member function]
    cls.add_method('CreateRawSocket', 
                   'ns3::Ptr< ns3::Socket >', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): void ns3::Ipv4::DeleteRawSocket(ns3::Ptr<ns3::Socket> socket) [member function]
    cls.add_method('DeleteRawSocket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'socket')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): ns3::Ipv4InterfaceAddress ns3::Ipv4::GetAddress(uint32_t interface, uint32_t addressIndex) const [member function]
    cls.add_method('GetAddress', 
                   'ns3::Ipv4InterfaceAddress', 
                   [param('uint32_t', 'interface'), param('uint32_t', 'addressIndex')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## ipv4.h (module 'internet'): int32_t ns3::Ipv4::GetInterfaceForAddress(ns3::Ipv4Address address) const [member function]
    cls.add_method('GetInterfaceForAddress', 
                   'int32_t', 
                   [param('ns3::Ipv4Address', 'address')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## ipv4.h (module 'internet'): int32_t ns3::Ipv4::GetInterfaceForDevice(ns3::Ptr<const ns3::NetDevice> device) const [member function]
    cls.add_method('GetInterfaceForDevice', 
                   'int32_t', 
                   [param('ns3::Ptr< ns3::NetDevice const >', 'device')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## ipv4.h (module 'internet'): int32_t ns3::Ipv4::GetInterfaceForPrefix(ns3::Ipv4Address address, ns3::Ipv4Mask mask) const [member function]
    cls.add_method('GetInterfaceForPrefix', 
                   'int32_t', 
                   [param('ns3::Ipv4Address', 'address'), param('ns3::Ipv4Mask', 'mask')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## ipv4.h (module 'internet'): uint16_t ns3::Ipv4::GetMetric(uint32_t interface) const [member function]
    cls.add_method('GetMetric', 
                   'uint16_t', 
                   [param('uint32_t', 'interface')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## ipv4.h (module 'internet'): uint16_t ns3::Ipv4::GetMtu(uint32_t interface) const [member function]
    cls.add_method('GetMtu', 
                   'uint16_t', 
                   [param('uint32_t', 'interface')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## ipv4.h (module 'internet'): uint32_t ns3::Ipv4::GetNAddresses(uint32_t interface) const [member function]
    cls.add_method('GetNAddresses', 
                   'uint32_t', 
                   [param('uint32_t', 'interface')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## ipv4.h (module 'internet'): uint32_t ns3::Ipv4::GetNInterfaces() const [member function]
    cls.add_method('GetNInterfaces', 
                   'uint32_t', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4::GetNetDevice(uint32_t interface) [member function]
    cls.add_method('GetNetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [param('uint32_t', 'interface')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv4::GetProtocol(int protocolNumber) const [member function]
    cls.add_method('GetProtocol', 
                   'ns3::Ptr< ns3::IpL4Protocol >', 
                   [param('int', 'protocolNumber')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::Ipv4RoutingProtocol> ns3::Ipv4::GetRoutingProtocol() const [member function]
    cls.add_method('GetRoutingProtocol', 
                   'ns3::Ptr< ns3::Ipv4RoutingProtocol >', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## ipv4.h (module 'internet'): static ns3::TypeId ns3::Ipv4::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ipv4.h (module 'internet'): void ns3::Ipv4::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
    cls.add_method('Insert', 
                   'void', 
                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): bool ns3::Ipv4::IsDestinationAddress(ns3::Ipv4Address address, uint32_t iif) const [member function]
    cls.add_method('IsDestinationAddress', 
                   'bool', 
                   [param('ns3::Ipv4Address', 'address'), param('uint32_t', 'iif')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## ipv4.h (module 'internet'): bool ns3::Ipv4::IsForwarding(uint32_t interface) const [member function]
    cls.add_method('IsForwarding', 
                   'bool', 
                   [param('uint32_t', 'interface')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## ipv4.h (module 'internet'): bool ns3::Ipv4::IsUp(uint32_t interface) const [member function]
    cls.add_method('IsUp', 
                   'bool', 
                   [param('uint32_t', 'interface')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## ipv4.h (module 'internet'): bool ns3::Ipv4::RemoveAddress(uint32_t interface, uint32_t addressIndex) [member function]
    cls.add_method('RemoveAddress', 
                   'bool', 
                   [param('uint32_t', 'interface'), param('uint32_t', 'addressIndex')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): bool ns3::Ipv4::RemoveAddress(uint32_t interface, ns3::Ipv4Address address) [member function]
    cls.add_method('RemoveAddress', 
                   'bool', 
                   [param('uint32_t', 'interface'), param('ns3::Ipv4Address', 'address')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4::SelectSourceAddress(ns3::Ptr<const ns3::NetDevice> device, ns3::Ipv4Address dst, ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e scope) [member function]
    cls.add_method('SelectSourceAddress', 
                   'ns3::Ipv4Address', 
                   [param('ns3::Ptr< ns3::NetDevice const >', 'device'), param('ns3::Ipv4Address', 'dst'), param('ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e', 'scope')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): void ns3::Ipv4::Send(ns3::Ptr<ns3::Packet> packet, ns3::Ipv4Address source, ns3::Ipv4Address destination, uint8_t protocol, ns3::Ptr<ns3::Ipv4Route> route) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv4Address', 'source'), param('ns3::Ipv4Address', 'destination'), param('uint8_t', 'protocol'), param('ns3::Ptr< ns3::Ipv4Route >', 'route')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): void ns3::Ipv4::SendWithHeader(ns3::Ptr<ns3::Packet> packet, ns3::Ipv4Header ipHeader, ns3::Ptr<ns3::Ipv4Route> route) [member function]
    cls.add_method('SendWithHeader', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv4Header', 'ipHeader'), param('ns3::Ptr< ns3::Ipv4Route >', 'route')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetDown(uint32_t interface) [member function]
    cls.add_method('SetDown', 
                   'void', 
                   [param('uint32_t', 'interface')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetForwarding(uint32_t interface, bool val) [member function]
    cls.add_method('SetForwarding', 
                   'void', 
                   [param('uint32_t', 'interface'), param('bool', 'val')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetMetric(uint32_t interface, uint16_t metric) [member function]
    cls.add_method('SetMetric', 
                   'void', 
                   [param('uint32_t', 'interface'), param('uint16_t', 'metric')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetRoutingProtocol(ns3::Ptr<ns3::Ipv4RoutingProtocol> routingProtocol) [member function]
    cls.add_method('SetRoutingProtocol', 
                   'void', 
                   [param('ns3::Ptr< ns3::Ipv4RoutingProtocol >', 'routingProtocol')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetUp(uint32_t interface) [member function]
    cls.add_method('SetUp', 
                   'void', 
                   [param('uint32_t', 'interface')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ipv4.h (module 'internet'): ns3::Ipv4::IF_ANY [variable]
    cls.add_static_attribute('IF_ANY', 'uint32_t const', is_const=True)
    ## ipv4.h (module 'internet'): bool ns3::Ipv4::GetIpForward() const [member function]
    cls.add_method('GetIpForward', 
                   'bool', 
                   [], 
                   is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
    ## ipv4.h (module 'internet'): bool ns3::Ipv4::GetWeakEsModel() const [member function]
    cls.add_method('GetWeakEsModel', 
                   'bool', 
                   [], 
                   is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetIpForward(bool forward) [member function]
    cls.add_method('SetIpForward', 
                   'void', 
                   [param('bool', 'forward')], 
                   is_pure_virtual=True, visibility='private', is_virtual=True)
    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetWeakEsModel(bool model) [member function]
    cls.add_method('SetWeakEsModel', 
                   'void', 
                   [param('bool', 'model')], 
                   is_pure_virtual=True, visibility='private', is_virtual=True)
    return

def register_Ns3Ipv4AddressChecker_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker(ns3::Ipv4AddressChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv4AddressChecker const &', 'arg0')])
    return

def register_Ns3Ipv4AddressValue_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4AddressValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv4AddressValue const &', 'arg0')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4Address const & value) [constructor]
    cls.add_constructor([param('ns3::Ipv4Address const &', 'value')])
    ## ipv4-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv4AddressValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4AddressValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): std::string ns3::Ipv4AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4AddressValue::Set(ns3::Ipv4Address const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Ipv4Address const &', 'value')])
    return

def register_Ns3Ipv4MaskChecker_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker(ns3::Ipv4MaskChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv4MaskChecker const &', 'arg0')])
    return

def register_Ns3Ipv4MaskValue_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4MaskValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv4MaskValue const &', 'arg0')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4Mask const & value) [constructor]
    cls.add_constructor([param('ns3::Ipv4Mask const &', 'value')])
    ## ipv4-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv4MaskValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4MaskValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask ns3::Ipv4MaskValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Ipv4Mask', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): std::string ns3::Ipv4MaskValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4MaskValue::Set(ns3::Ipv4Mask const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Ipv4Mask const &', 'value')])
    return

def register_Ns3Ipv4MulticastRoute_methods(root_module, cls):
    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::Ipv4MulticastRoute(ns3::Ipv4MulticastRoute const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv4MulticastRoute const &', 'arg0')])
    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::Ipv4MulticastRoute() [constructor]
    cls.add_constructor([])
    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4MulticastRoute::GetGroup() const [member function]
    cls.add_method('GetGroup', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4MulticastRoute::GetOrigin() const [member function]
    cls.add_method('GetOrigin', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv4-route.h (module 'internet'): std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > ns3::Ipv4MulticastRoute::GetOutputTtlMap() const [member function]
    cls.add_method('GetOutputTtlMap', 
                   'std::map< unsigned int, unsigned int >', 
                   [], 
                   is_const=True)
    ## ipv4-route.h (module 'internet'): uint32_t ns3::Ipv4MulticastRoute::GetParent() const [member function]
    cls.add_method('GetParent', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ipv4-route.h (module 'internet'): void ns3::Ipv4MulticastRoute::SetGroup(ns3::Ipv4Address const group) [member function]
    cls.add_method('SetGroup', 
                   'void', 
                   [param('ns3::Ipv4Address const', 'group')])
    ## ipv4-route.h (module 'internet'): void ns3::Ipv4MulticastRoute::SetOrigin(ns3::Ipv4Address const origin) [member function]
    cls.add_method('SetOrigin', 
                   'void', 
                   [param('ns3::Ipv4Address const', 'origin')])
    ## ipv4-route.h (module 'internet'): void ns3::Ipv4MulticastRoute::SetOutputTtl(uint32_t oif, uint32_t ttl) [member function]
    cls.add_method('SetOutputTtl', 
                   'void', 
                   [param('uint32_t', 'oif'), param('uint32_t', 'ttl')])
    ## ipv4-route.h (module 'internet'): void ns3::Ipv4MulticastRoute::SetParent(uint32_t iif) [member function]
    cls.add_method('SetParent', 
                   'void', 
                   [param('uint32_t', 'iif')])
    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::MAX_INTERFACES [variable]
    cls.add_static_attribute('MAX_INTERFACES', 'uint32_t const', is_const=True)
    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::MAX_TTL [variable]
    cls.add_static_attribute('MAX_TTL', 'uint32_t const', is_const=True)
    return

def register_Ns3Ipv4Route_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## ipv4-route.h (module 'internet'): ns3::Ipv4Route::Ipv4Route(ns3::Ipv4Route const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv4Route const &', 'arg0')])
    ## ipv4-route.h (module 'internet'): ns3::Ipv4Route::Ipv4Route() [constructor]
    cls.add_constructor([])
    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Route::GetDestination() const [member function]
    cls.add_method('GetDestination', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Route::GetGateway() const [member function]
    cls.add_method('GetGateway', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv4-route.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4Route::GetOutputDevice() const [member function]
    cls.add_method('GetOutputDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [], 
                   is_const=True)
    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Route::GetSource() const [member function]
    cls.add_method('GetSource', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv4-route.h (module 'internet'): void ns3::Ipv4Route::SetDestination(ns3::Ipv4Address dest) [member function]
    cls.add_method('SetDestination', 
                   'void', 
                   [param('ns3::Ipv4Address', 'dest')])
    ## ipv4-route.h (module 'internet'): void ns3::Ipv4Route::SetGateway(ns3::Ipv4Address gw) [member function]
    cls.add_method('SetGateway', 
                   'void', 
                   [param('ns3::Ipv4Address', 'gw')])
    ## ipv4-route.h (module 'internet'): void ns3::Ipv4Route::SetOutputDevice(ns3::Ptr<ns3::NetDevice> outputDevice) [member function]
    cls.add_method('SetOutputDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'outputDevice')])
    ## ipv4-route.h (module 'internet'): void ns3::Ipv4Route::SetSource(ns3::Ipv4Address src) [member function]
    cls.add_method('SetSource', 
                   'void', 
                   [param('ns3::Ipv4Address', 'src')])
    return

def register_Ns3Ipv6AddressChecker_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker(ns3::Ipv6AddressChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv6AddressChecker const &', 'arg0')])
    return

def register_Ns3Ipv6AddressValue_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6AddressValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv6AddressValue const &', 'arg0')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6Address const & value) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address const &', 'value')])
    ## ipv6-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv6AddressValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6AddressValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): std::string ns3::Ipv6AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6AddressValue::Set(ns3::Ipv6Address const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Ipv6Address const &', 'value')])
    return

def register_Ns3Ipv6PrefixChecker_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker(ns3::Ipv6PrefixChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv6PrefixChecker const &', 'arg0')])
    return

def register_Ns3Ipv6PrefixValue_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6PrefixValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Ipv6PrefixValue const &', 'arg0')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6Prefix const & value) [constructor]
    cls.add_constructor([param('ns3::Ipv6Prefix const &', 'value')])
    ## ipv6-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv6PrefixValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6PrefixValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix ns3::Ipv6PrefixValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Ipv6Prefix', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): std::string ns3::Ipv6PrefixValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6PrefixValue::Set(ns3::Ipv6Prefix const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Ipv6Prefix const &', 'value')])
    return

def register_Ns3LogNormalRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::LogNormalRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::LogNormalRandomVariable::LogNormalRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::LogNormalRandomVariable::GetMu() const [member function]
    cls.add_method('GetMu', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::LogNormalRandomVariable::GetSigma() const [member function]
    cls.add_method('GetSigma', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::LogNormalRandomVariable::GetValue(double mu, double sigma) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'mu'), param('double', 'sigma')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::LogNormalRandomVariable::GetInteger(uint32_t mu, uint32_t sigma) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'mu'), param('uint32_t', 'sigma')])
    ## random-variable-stream.h (module 'core'): double ns3::LogNormalRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::LogNormalRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3NrAmc_methods(root_module, cls):
    ## nr-amc.h (module 'nr'): ns3::NrAmc::NrAmc(ns3::NrAmc const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrAmc const &', 'arg0')])
    ## nr-amc.h (module 'nr'): ns3::NrAmc::NrAmc() [constructor]
    cls.add_constructor([])
    ## nr-amc.h (module 'nr'): std::vector<int, std::allocator<int> > ns3::NrAmc::CreateCqiFeedbacks(ns3::SpectrumValue const & sinr, uint8_t rbgSize=0) [member function]
    cls.add_method('CreateCqiFeedbacks', 
                   'std::vector< int >', 
                   [param('ns3::SpectrumValue const &', 'sinr'), param('uint8_t', 'rbgSize', default_value='0')])
    ## nr-amc.h (module 'nr'): int ns3::NrAmc::GetCqiFromSpectralEfficiency(double s) [member function]
    cls.add_method('GetCqiFromSpectralEfficiency', 
                   'int', 
                   [param('double', 's')])
    ## nr-amc.h (module 'nr'): int ns3::NrAmc::GetMcsFromCqi(int cqi) [member function]
    cls.add_method('GetMcsFromCqi', 
                   'int', 
                   [param('int', 'cqi')])
    ## nr-amc.h (module 'nr'): double ns3::NrAmc::GetSpectralEfficiencyFromCqi(int cqi) [member function]
    cls.add_method('GetSpectralEfficiencyFromCqi', 
                   'double', 
                   [param('int', 'cqi')])
    ## nr-amc.h (module 'nr'): int ns3::NrAmc::GetTbSizeFromMcs(int mcs, int nprb) [member function]
    cls.add_method('GetTbSizeFromMcs', 
                   'int', 
                   [param('int', 'mcs'), param('int', 'nprb')])
    ## nr-amc.h (module 'nr'): static ns3::TypeId ns3::NrAmc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    return

def register_Ns3NrAnr_methods(root_module, cls):
    ## nr-anr.h (module 'nr'): ns3::NrAnr::NrAnr(ns3::NrAnr const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrAnr const &', 'arg0')])
    ## nr-anr.h (module 'nr'): ns3::NrAnr::NrAnr(uint16_t servingCellId) [constructor]
    cls.add_constructor([param('uint16_t', 'servingCellId')])
    ## nr-anr.h (module 'nr'): void ns3::NrAnr::AddNeighbourRelation(uint16_t cellId) [member function]
    cls.add_method('AddNeighbourRelation', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## nr-anr.h (module 'nr'): ns3::NrAnrSapProvider * ns3::NrAnr::GetNrAnrSapProvider() [member function]
    cls.add_method('GetNrAnrSapProvider', 
                   'ns3::NrAnrSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-anr.h (module 'nr'): static ns3::TypeId ns3::NrAnr::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-anr.h (module 'nr'): void ns3::NrAnr::RemoveNeighbourRelation(uint16_t cellId) [member function]
    cls.add_method('RemoveNeighbourRelation', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## nr-anr.h (module 'nr'): void ns3::NrAnr::SetNrAnrSapUser(ns3::NrAnrSapUser * s) [member function]
    cls.add_method('SetNrAnrSapUser', 
                   'void', 
                   [param('ns3::NrAnrSapUser *', 's')], 
                   is_virtual=True)
    ## nr-anr.h (module 'nr'): void ns3::NrAnr::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-anr.h (module 'nr'): void ns3::NrAnr::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NrChunkProcessor_methods(root_module, cls):
    ## nr-chunk-processor.h (module 'nr'): ns3::NrChunkProcessor::NrChunkProcessor(ns3::NrChunkProcessor const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrChunkProcessor const &', 'arg0')])
    ## nr-chunk-processor.h (module 'nr'): ns3::NrChunkProcessor::NrChunkProcessor() [constructor]
    cls.add_constructor([])
    ## nr-chunk-processor.h (module 'nr'): void ns3::NrChunkProcessor::AddCallback(ns3::NrChunkProcessorCallback c) [member function]
    cls.add_method('AddCallback', 
                   'void', 
                   [param('ns3::NrChunkProcessorCallback', 'c')], 
                   is_virtual=True)
    ## nr-chunk-processor.h (module 'nr'): void ns3::NrChunkProcessor::End() [member function]
    cls.add_method('End', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-chunk-processor.h (module 'nr'): void ns3::NrChunkProcessor::EvaluateChunk(ns3::SpectrumValue const & sinr, ns3::Time duration) [member function]
    cls.add_method('EvaluateChunk', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr'), param('ns3::Time', 'duration')], 
                   is_virtual=True)
    ## nr-chunk-processor.h (module 'nr'): void ns3::NrChunkProcessor::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3NrControlMessage_methods(root_module, cls):
    ## nr-control-messages.h (module 'nr'): ns3::NrControlMessage::NrControlMessage(ns3::NrControlMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrControlMessage const &', 'arg0')])
    ## nr-control-messages.h (module 'nr'): ns3::NrControlMessage::NrControlMessage() [constructor]
    cls.add_constructor([])
    ## nr-control-messages.h (module 'nr'): ns3::NrControlMessage::MessageType ns3::NrControlMessage::GetMessageType() [member function]
    cls.add_method('GetMessageType', 
                   'ns3::NrControlMessage::MessageType', 
                   [])
    ## nr-control-messages.h (module 'nr'): void ns3::NrControlMessage::SetMessageType(ns3::NrControlMessage::MessageType type) [member function]
    cls.add_method('SetMessageType', 
                   'void', 
                   [param('ns3::NrControlMessage::MessageType', 'type')])
    return

def register_Ns3NrEnbMac_methods(root_module, cls):
    ## nr-enb-mac.h (module 'nr'): ns3::NrEnbMac::NrEnbMac(ns3::NrEnbMac const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbMac const &', 'arg0')])
    ## nr-enb-mac.h (module 'nr'): ns3::NrEnbMac::NrEnbMac() [constructor]
    cls.add_constructor([])
    ## nr-enb-mac.h (module 'nr'): void ns3::NrEnbMac::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-enb-mac.h (module 'nr'): void ns3::NrEnbMac::DoReceivePhyPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoReceivePhyPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## nr-enb-mac.h (module 'nr'): ns3::FfMacCschedSapUser * ns3::NrEnbMac::GetFfMacCschedSapUser() [member function]
    cls.add_method('GetFfMacCschedSapUser', 
                   'ns3::FfMacCschedSapUser *', 
                   [])
    ## nr-enb-mac.h (module 'nr'): ns3::FfMacSchedSapUser * ns3::NrEnbMac::GetFfMacSchedSapUser() [member function]
    cls.add_method('GetFfMacSchedSapUser', 
                   'ns3::FfMacSchedSapUser *', 
                   [])
    ## nr-enb-mac.h (module 'nr'): ns3::NrEnbCmacSapProvider * ns3::NrEnbMac::GetNrEnbCmacSapProvider() [member function]
    cls.add_method('GetNrEnbCmacSapProvider', 
                   'ns3::NrEnbCmacSapProvider *', 
                   [])
    ## nr-enb-mac.h (module 'nr'): ns3::NrEnbPhySapUser * ns3::NrEnbMac::GetNrEnbPhySapUser() [member function]
    cls.add_method('GetNrEnbPhySapUser', 
                   'ns3::NrEnbPhySapUser *', 
                   [])
    ## nr-enb-mac.h (module 'nr'): ns3::NrMacSapProvider * ns3::NrEnbMac::GetNrMacSapProvider() [member function]
    cls.add_method('GetNrMacSapProvider', 
                   'ns3::NrMacSapProvider *', 
                   [])
    ## nr-enb-mac.h (module 'nr'): static ns3::TypeId ns3::NrEnbMac::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-enb-mac.h (module 'nr'): void ns3::NrEnbMac::SetFfMacCschedSapProvider(ns3::FfMacCschedSapProvider * s) [member function]
    cls.add_method('SetFfMacCschedSapProvider', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider *', 's')])
    ## nr-enb-mac.h (module 'nr'): void ns3::NrEnbMac::SetFfMacSchedSapProvider(ns3::FfMacSchedSapProvider * s) [member function]
    cls.add_method('SetFfMacSchedSapProvider', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider *', 's')])
    ## nr-enb-mac.h (module 'nr'): void ns3::NrEnbMac::SetNrEnbCmacSapUser(ns3::NrEnbCmacSapUser * s) [member function]
    cls.add_method('SetNrEnbCmacSapUser', 
                   'void', 
                   [param('ns3::NrEnbCmacSapUser *', 's')])
    ## nr-enb-mac.h (module 'nr'): void ns3::NrEnbMac::SetNrEnbPhySapProvider(ns3::NrEnbPhySapProvider * s) [member function]
    cls.add_method('SetNrEnbPhySapProvider', 
                   'void', 
                   [param('ns3::NrEnbPhySapProvider *', 's')])
    ## nr-enb-mac.h (module 'nr'): void ns3::NrEnbMac::SetNrMacSapUser(ns3::NrMacSapUser * s) [member function]
    cls.add_method('SetNrMacSapUser', 
                   'void', 
                   [param('ns3::NrMacSapUser *', 's')])
    return

def register_Ns3NrEnbRrc_methods(root_module, cls):
    ## nr-enb-rrc.h (module 'nr'): ns3::NrEnbRrc::NrEnbRrc(ns3::NrEnbRrc const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbRrc const &', 'arg0')])
    ## nr-enb-rrc.h (module 'nr'): ns3::NrEnbRrc::NrEnbRrc() [constructor]
    cls.add_constructor([])
    ## nr-enb-rrc.h (module 'nr'): uint8_t ns3::NrEnbRrc::AddUeMeasReportConfig(ns3::NrRrcSap::ReportConfigEutra config) [member function]
    cls.add_method('AddUeMeasReportConfig', 
                   'uint8_t', 
                   [param('ns3::NrRrcSap::ReportConfigEutra', 'config')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::AddX2Neighbour(uint16_t cellId) [member function]
    cls.add_method('AddX2Neighbour', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::ConfigureCell(uint8_t ulBandwidth, uint8_t dlBandwidth, uint16_t ulEarfcn, uint16_t dlEarfcn, uint16_t cellId) [member function]
    cls.add_method('ConfigureCell', 
                   'void', 
                   [param('uint8_t', 'ulBandwidth'), param('uint8_t', 'dlBandwidth'), param('uint16_t', 'ulEarfcn'), param('uint16_t', 'dlEarfcn'), param('uint16_t', 'cellId')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::ConnectionRejectedTimeout(uint16_t rnti) [member function]
    cls.add_method('ConnectionRejectedTimeout', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::ConnectionRequestTimeout(uint16_t rnti) [member function]
    cls.add_method('ConnectionRequestTimeout', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::ConnectionSetupTimeout(uint16_t rnti) [member function]
    cls.add_method('ConnectionSetupTimeout', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::DoSendReleaseDataRadioBearer(uint64_t imsi, uint16_t rnti, uint8_t bearerId) [member function]
    cls.add_method('DoSendReleaseDataRadioBearer', 
                   'void', 
                   [param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('uint8_t', 'bearerId')])
    ## nr-enb-rrc.h (module 'nr'): ns3::NgcX2SapUser * ns3::NrEnbRrc::GetNgcX2SapUser() [member function]
    cls.add_method('GetNgcX2SapUser', 
                   'ns3::NgcX2SapUser *', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): ns3::NrAnrSapUser * ns3::NrEnbRrc::GetNrAnrSapUser() [member function]
    cls.add_method('GetNrAnrSapUser', 
                   'ns3::NrAnrSapUser *', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): ns3::NrEnbCmacSapUser * ns3::NrEnbRrc::GetNrEnbCmacSapUser() [member function]
    cls.add_method('GetNrEnbCmacSapUser', 
                   'ns3::NrEnbCmacSapUser *', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): ns3::NrEnbCphySapUser * ns3::NrEnbRrc::GetNrEnbCphySapUser() [member function]
    cls.add_method('GetNrEnbCphySapUser', 
                   'ns3::NrEnbCphySapUser *', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): ns3::NrEnbRrcSapProvider * ns3::NrEnbRrc::GetNrEnbRrcSapProvider() [member function]
    cls.add_method('GetNrEnbRrcSapProvider', 
                   'ns3::NrEnbRrcSapProvider *', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): ns3::NrFfrRrcSapUser * ns3::NrEnbRrc::GetNrFfrRrcSapUser() [member function]
    cls.add_method('GetNrFfrRrcSapUser', 
                   'ns3::NrFfrRrcSapUser *', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): ns3::NrHandoverManagementSapUser * ns3::NrEnbRrc::GetNrHandoverManagementSapUser() [member function]
    cls.add_method('GetNrHandoverManagementSapUser', 
                   'ns3::NrHandoverManagementSapUser *', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): ns3::NgcEnbN2SapUser * ns3::NrEnbRrc::GetN2SapUser() [member function]
    cls.add_method('GetN2SapUser', 
                   'ns3::NgcEnbN2SapUser *', 
                   [])
    ## nr-enb-rrc.h (module 'nr'): uint32_t ns3::NrEnbRrc::GetSrsPeriodicity() const [member function]
    cls.add_method('GetSrsPeriodicity', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## nr-enb-rrc.h (module 'nr'): static ns3::TypeId ns3::NrEnbRrc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-enb-rrc.h (module 'nr'): ns3::Ptr<ns3::UeManager> ns3::NrEnbRrc::GetUeManager(uint16_t rnti) [member function]
    cls.add_method('GetUeManager', 
                   'ns3::Ptr< ns3::UeManager >', 
                   [param('uint16_t', 'rnti')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::HandoverJoiningTimeout(uint16_t rnti) [member function]
    cls.add_method('HandoverJoiningTimeout', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::HandoverLeavingTimeout(uint16_t rnti) [member function]
    cls.add_method('HandoverLeavingTimeout', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## nr-enb-rrc.h (module 'nr'): bool ns3::NrEnbRrc::HasUeManager(uint16_t rnti) const [member function]
    cls.add_method('HasUeManager', 
                   'bool', 
                   [param('uint16_t', 'rnti')], 
                   is_const=True)
    ## nr-enb-rrc.h (module 'nr'): bool ns3::NrEnbRrc::SendData(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('SendData', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SendHandoverRequest(uint16_t rnti, uint16_t cellId) [member function]
    cls.add_method('SendHandoverRequest', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint16_t', 'cellId')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SetCellId(uint16_t m_cellId) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'm_cellId')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SetCsgId(uint32_t csgId, bool csgIndication) [member function]
    cls.add_method('SetCsgId', 
                   'void', 
                   [param('uint32_t', 'csgId'), param('bool', 'csgIndication')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SetNgcX2SapProvider(ns3::NgcX2SapProvider * s) [member function]
    cls.add_method('SetNgcX2SapProvider', 
                   'void', 
                   [param('ns3::NgcX2SapProvider *', 's')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
    cls.add_method('SetForwardUpCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SetNrAnrSapProvider(ns3::NrAnrSapProvider * s) [member function]
    cls.add_method('SetNrAnrSapProvider', 
                   'void', 
                   [param('ns3::NrAnrSapProvider *', 's')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SetNrEnbCmacSapProvider(ns3::NrEnbCmacSapProvider * s) [member function]
    cls.add_method('SetNrEnbCmacSapProvider', 
                   'void', 
                   [param('ns3::NrEnbCmacSapProvider *', 's')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SetNrEnbCphySapProvider(ns3::NrEnbCphySapProvider * s) [member function]
    cls.add_method('SetNrEnbCphySapProvider', 
                   'void', 
                   [param('ns3::NrEnbCphySapProvider *', 's')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SetNrEnbRrcSapUser(ns3::NrEnbRrcSapUser * s) [member function]
    cls.add_method('SetNrEnbRrcSapUser', 
                   'void', 
                   [param('ns3::NrEnbRrcSapUser *', 's')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SetNrFfrRrcSapProvider(ns3::NrFfrRrcSapProvider * s) [member function]
    cls.add_method('SetNrFfrRrcSapProvider', 
                   'void', 
                   [param('ns3::NrFfrRrcSapProvider *', 's')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SetNrHandoverManagementSapProvider(ns3::NrHandoverManagementSapProvider * s) [member function]
    cls.add_method('SetNrHandoverManagementSapProvider', 
                   'void', 
                   [param('ns3::NrHandoverManagementSapProvider *', 's')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SetNrMacSapProvider(ns3::NrMacSapProvider * s) [member function]
    cls.add_method('SetNrMacSapProvider', 
                   'void', 
                   [param('ns3::NrMacSapProvider *', 's')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SetN2SapProvider(ns3::NgcEnbN2SapProvider * s) [member function]
    cls.add_method('SetN2SapProvider', 
                   'void', 
                   [param('ns3::NgcEnbN2SapProvider *', 's')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::SetSrsPeriodicity(uint32_t p) [member function]
    cls.add_method('SetSrsPeriodicity', 
                   'void', 
                   [param('uint32_t', 'p')])
    ## nr-enb-rrc.h (module 'nr'): void ns3::NrEnbRrc::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NrEnbRrcProtocolIdeal_methods(root_module, cls):
    ## nr-rrc-protocol-ideal.h (module 'nr'): ns3::NrEnbRrcProtocolIdeal::NrEnbRrcProtocolIdeal(ns3::NrEnbRrcProtocolIdeal const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbRrcProtocolIdeal const &', 'arg0')])
    ## nr-rrc-protocol-ideal.h (module 'nr'): ns3::NrEnbRrcProtocolIdeal::NrEnbRrcProtocolIdeal() [constructor]
    cls.add_constructor([])
    ## nr-rrc-protocol-ideal.h (module 'nr'): void ns3::NrEnbRrcProtocolIdeal::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rrc-protocol-ideal.h (module 'nr'): ns3::NrEnbRrcSapUser * ns3::NrEnbRrcProtocolIdeal::GetNrEnbRrcSapUser() [member function]
    cls.add_method('GetNrEnbRrcSapUser', 
                   'ns3::NrEnbRrcSapUser *', 
                   [])
    ## nr-rrc-protocol-ideal.h (module 'nr'): static ns3::TypeId ns3::NrEnbRrcProtocolIdeal::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-rrc-protocol-ideal.h (module 'nr'): ns3::NrUeRrcSapProvider * ns3::NrEnbRrcProtocolIdeal::GetUeRrcSapProvider(uint16_t rnti) [member function]
    cls.add_method('GetUeRrcSapProvider', 
                   'ns3::NrUeRrcSapProvider *', 
                   [param('uint16_t', 'rnti')])
    ## nr-rrc-protocol-ideal.h (module 'nr'): void ns3::NrEnbRrcProtocolIdeal::SetCellId(uint16_t cellId) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## nr-rrc-protocol-ideal.h (module 'nr'): void ns3::NrEnbRrcProtocolIdeal::SetNrEnbRrcSapProvider(ns3::NrEnbRrcSapProvider * p) [member function]
    cls.add_method('SetNrEnbRrcSapProvider', 
                   'void', 
                   [param('ns3::NrEnbRrcSapProvider *', 'p')])
    ## nr-rrc-protocol-ideal.h (module 'nr'): void ns3::NrEnbRrcProtocolIdeal::SetUeRrcSapProvider(uint16_t rnti, ns3::NrUeRrcSapProvider * p) [member function]
    cls.add_method('SetUeRrcSapProvider', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrUeRrcSapProvider *', 'p')])
    return

def register_Ns3NrEnbRrcProtocolReal_methods(root_module, cls):
    ## nr-rrc-protocol-real.h (module 'nr'): ns3::NrEnbRrcProtocolReal::NrEnbRrcProtocolReal(ns3::NrEnbRrcProtocolReal const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbRrcProtocolReal const &', 'arg0')])
    ## nr-rrc-protocol-real.h (module 'nr'): ns3::NrEnbRrcProtocolReal::NrEnbRrcProtocolReal() [constructor]
    cls.add_constructor([])
    ## nr-rrc-protocol-real.h (module 'nr'): void ns3::NrEnbRrcProtocolReal::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rrc-protocol-real.h (module 'nr'): ns3::NrEnbRrcSapUser * ns3::NrEnbRrcProtocolReal::GetNrEnbRrcSapUser() [member function]
    cls.add_method('GetNrEnbRrcSapUser', 
                   'ns3::NrEnbRrcSapUser *', 
                   [])
    ## nr-rrc-protocol-real.h (module 'nr'): static ns3::TypeId ns3::NrEnbRrcProtocolReal::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-rrc-protocol-real.h (module 'nr'): ns3::NrUeRrcSapProvider * ns3::NrEnbRrcProtocolReal::GetUeRrcSapProvider(uint16_t rnti) [member function]
    cls.add_method('GetUeRrcSapProvider', 
                   'ns3::NrUeRrcSapProvider *', 
                   [param('uint16_t', 'rnti')])
    ## nr-rrc-protocol-real.h (module 'nr'): void ns3::NrEnbRrcProtocolReal::SetCellId(uint16_t cellId) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## nr-rrc-protocol-real.h (module 'nr'): void ns3::NrEnbRrcProtocolReal::SetNrEnbRrcSapProvider(ns3::NrEnbRrcSapProvider * p) [member function]
    cls.add_method('SetNrEnbRrcSapProvider', 
                   'void', 
                   [param('ns3::NrEnbRrcSapProvider *', 'p')])
    ## nr-rrc-protocol-real.h (module 'nr'): void ns3::NrEnbRrcProtocolReal::SetUeRrcSapProvider(uint16_t rnti, ns3::NrUeRrcSapProvider * p) [member function]
    cls.add_method('SetUeRrcSapProvider', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrUeRrcSapProvider *', 'p')])
    return

def register_Ns3NrFfrAlgorithm_methods(root_module, cls):
    ## nr-ffr-algorithm.h (module 'nr'): ns3::NrFfrAlgorithm::NrFfrAlgorithm(ns3::NrFfrAlgorithm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFfrAlgorithm const &', 'arg0')])
    ## nr-ffr-algorithm.h (module 'nr'): ns3::NrFfrAlgorithm::NrFfrAlgorithm() [constructor]
    cls.add_constructor([])
    ## nr-ffr-algorithm.h (module 'nr'): uint8_t ns3::NrFfrAlgorithm::GetDlBandwidth() const [member function]
    cls.add_method('GetDlBandwidth', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-ffr-algorithm.h (module 'nr'): uint8_t ns3::NrFfrAlgorithm::GetFrCellTypeId() const [member function]
    cls.add_method('GetFrCellTypeId', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-ffr-algorithm.h (module 'nr'): ns3::NrFfrRrcSapProvider * ns3::NrFfrAlgorithm::GetNrFfrRrcSapProvider() [member function]
    cls.add_method('GetNrFfrRrcSapProvider', 
                   'ns3::NrFfrRrcSapProvider *', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): ns3::NrFfrSapProvider * ns3::NrFfrAlgorithm::GetNrFfrSapProvider() [member function]
    cls.add_method('GetNrFfrSapProvider', 
                   'ns3::NrFfrSapProvider *', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): static ns3::TypeId ns3::NrFfrAlgorithm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-ffr-algorithm.h (module 'nr'): uint8_t ns3::NrFfrAlgorithm::GetUlBandwidth() const [member function]
    cls.add_method('GetUlBandwidth', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::SetDlBandwidth(uint8_t bw) [member function]
    cls.add_method('SetDlBandwidth', 
                   'void', 
                   [param('uint8_t', 'bw')])
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::SetFrCellTypeId(uint8_t cellTypeId) [member function]
    cls.add_method('SetFrCellTypeId', 
                   'void', 
                   [param('uint8_t', 'cellTypeId')])
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::SetNrFfrRrcSapUser(ns3::NrFfrRrcSapUser * s) [member function]
    cls.add_method('SetNrFfrRrcSapUser', 
                   'void', 
                   [param('ns3::NrFfrRrcSapUser *', 's')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::SetNrFfrSapUser(ns3::NrFfrSapUser * s) [member function]
    cls.add_method('SetNrFfrSapUser', 
                   'void', 
                   [param('ns3::NrFfrSapUser *', 's')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::SetUlBandwidth(uint8_t bw) [member function]
    cls.add_method('SetUlBandwidth', 
                   'void', 
                   [param('uint8_t', 'bw')])
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFfrAlgorithm::DoGetAvailableDlRbg() [member function]
    cls.add_method('DoGetAvailableDlRbg', 
                   'std::vector< bool >', 
                   [], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFfrAlgorithm::DoGetAvailableUlRbg() [member function]
    cls.add_method('DoGetAvailableUlRbg', 
                   'std::vector< bool >', 
                   [], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): uint8_t ns3::NrFfrAlgorithm::DoGetMinContinuousUlBandwidth() [member function]
    cls.add_method('DoGetMinContinuousUlBandwidth', 
                   'uint8_t', 
                   [], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): uint8_t ns3::NrFfrAlgorithm::DoGetTpc(uint16_t rnti) [member function]
    cls.add_method('DoGetTpc', 
                   'uint8_t', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): bool ns3::NrFfrAlgorithm::DoIsDlRbgAvailableForUe(int rbId, uint16_t rnti) [member function]
    cls.add_method('DoIsDlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'rbId'), param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): bool ns3::NrFfrAlgorithm::DoIsUlRbgAvailableForUe(int rbId, uint16_t rnti) [member function]
    cls.add_method('DoIsUlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'rbId'), param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::DoRecvLoadInformation(ns3::NgcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('DoRecvLoadInformation', 
                   'void', 
                   [param('ns3::NgcX2Sap::LoadInformationParams', 'params')], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::DoReportDlCqiInfo(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportDlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::DoReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('DoReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::DoReportUlCqiInfo(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::DoReportUlCqiInfo(std::map<unsigned short, std::vector<double, std::allocator<double> >, std::less<unsigned short>, std::allocator<std::pair<unsigned short const, std::vector<double, std::allocator<double> > > > > ulCqiMap) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('std::map< unsigned short, std::vector< double > >', 'ulCqiMap')], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::DoSetBandwidth(uint8_t ulBandwidth, uint8_t dlBandwidth) [member function]
    cls.add_method('DoSetBandwidth', 
                   'void', 
                   [param('uint8_t', 'ulBandwidth'), param('uint8_t', 'dlBandwidth')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::DoSetCellId(uint16_t cellId) [member function]
    cls.add_method('DoSetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-algorithm.h (module 'nr'): int ns3::NrFfrAlgorithm::GetRbgSize(int dlbandwidth) [member function]
    cls.add_method('GetRbgSize', 
                   'int', 
                   [param('int', 'dlbandwidth')], 
                   visibility='protected')
    ## nr-ffr-algorithm.h (module 'nr'): void ns3::NrFfrAlgorithm::Reconfigure() [member function]
    cls.add_method('Reconfigure', 
                   'void', 
                   [], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    return

def register_Ns3NrFfrDistributedAlgorithm_methods(root_module, cls):
    ## nr-ffr-distributed-algorithm.h (module 'nr'): ns3::NrFfrDistributedAlgorithm::NrFfrDistributedAlgorithm(ns3::NrFfrDistributedAlgorithm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFfrDistributedAlgorithm const &', 'arg0')])
    ## nr-ffr-distributed-algorithm.h (module 'nr'): ns3::NrFfrDistributedAlgorithm::NrFfrDistributedAlgorithm() [constructor]
    cls.add_constructor([])
    ## nr-ffr-distributed-algorithm.h (module 'nr'): ns3::NrFfrRrcSapProvider * ns3::NrFfrDistributedAlgorithm::GetNrFfrRrcSapProvider() [member function]
    cls.add_method('GetNrFfrRrcSapProvider', 
                   'ns3::NrFfrRrcSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): ns3::NrFfrSapProvider * ns3::NrFfrDistributedAlgorithm::GetNrFfrSapProvider() [member function]
    cls.add_method('GetNrFfrSapProvider', 
                   'ns3::NrFfrSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): static ns3::TypeId ns3::NrFfrDistributedAlgorithm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): void ns3::NrFfrDistributedAlgorithm::SetNrFfrRrcSapUser(ns3::NrFfrRrcSapUser * s) [member function]
    cls.add_method('SetNrFfrRrcSapUser', 
                   'void', 
                   [param('ns3::NrFfrRrcSapUser *', 's')], 
                   is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): void ns3::NrFfrDistributedAlgorithm::SetNrFfrSapUser(ns3::NrFfrSapUser * s) [member function]
    cls.add_method('SetNrFfrSapUser', 
                   'void', 
                   [param('ns3::NrFfrSapUser *', 's')], 
                   is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): void ns3::NrFfrDistributedAlgorithm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFfrDistributedAlgorithm::DoGetAvailableDlRbg() [member function]
    cls.add_method('DoGetAvailableDlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFfrDistributedAlgorithm::DoGetAvailableUlRbg() [member function]
    cls.add_method('DoGetAvailableUlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): uint8_t ns3::NrFfrDistributedAlgorithm::DoGetMinContinuousUlBandwidth() [member function]
    cls.add_method('DoGetMinContinuousUlBandwidth', 
                   'uint8_t', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): uint8_t ns3::NrFfrDistributedAlgorithm::DoGetTpc(uint16_t rnti) [member function]
    cls.add_method('DoGetTpc', 
                   'uint8_t', 
                   [param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): void ns3::NrFfrDistributedAlgorithm::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): bool ns3::NrFfrDistributedAlgorithm::DoIsDlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsDlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): bool ns3::NrFfrDistributedAlgorithm::DoIsUlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsUlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): void ns3::NrFfrDistributedAlgorithm::DoRecvLoadInformation(ns3::NgcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('DoRecvLoadInformation', 
                   'void', 
                   [param('ns3::NgcX2Sap::LoadInformationParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): void ns3::NrFfrDistributedAlgorithm::DoReportDlCqiInfo(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportDlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): void ns3::NrFfrDistributedAlgorithm::DoReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('DoReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): void ns3::NrFfrDistributedAlgorithm::DoReportUlCqiInfo(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): void ns3::NrFfrDistributedAlgorithm::DoReportUlCqiInfo(std::map<unsigned short, std::vector<double, std::allocator<double> >, std::less<unsigned short>, std::allocator<std::pair<unsigned short const, std::vector<double, std::allocator<double> > > > > ulCqiMap) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('std::map< unsigned short, std::vector< double > >', 'ulCqiMap')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-distributed-algorithm.h (module 'nr'): void ns3::NrFfrDistributedAlgorithm::Reconfigure() [member function]
    cls.add_method('Reconfigure', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NrFfrEnhancedAlgorithm_methods(root_module, cls):
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): ns3::NrFfrEnhancedAlgorithm::NrFfrEnhancedAlgorithm(ns3::NrFfrEnhancedAlgorithm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFfrEnhancedAlgorithm const &', 'arg0')])
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): ns3::NrFfrEnhancedAlgorithm::NrFfrEnhancedAlgorithm() [constructor]
    cls.add_constructor([])
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): ns3::NrFfrRrcSapProvider * ns3::NrFfrEnhancedAlgorithm::GetNrFfrRrcSapProvider() [member function]
    cls.add_method('GetNrFfrRrcSapProvider', 
                   'ns3::NrFfrRrcSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): ns3::NrFfrSapProvider * ns3::NrFfrEnhancedAlgorithm::GetNrFfrSapProvider() [member function]
    cls.add_method('GetNrFfrSapProvider', 
                   'ns3::NrFfrSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): static ns3::TypeId ns3::NrFfrEnhancedAlgorithm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): void ns3::NrFfrEnhancedAlgorithm::SetNrFfrRrcSapUser(ns3::NrFfrRrcSapUser * s) [member function]
    cls.add_method('SetNrFfrRrcSapUser', 
                   'void', 
                   [param('ns3::NrFfrRrcSapUser *', 's')], 
                   is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): void ns3::NrFfrEnhancedAlgorithm::SetNrFfrSapUser(ns3::NrFfrSapUser * s) [member function]
    cls.add_method('SetNrFfrSapUser', 
                   'void', 
                   [param('ns3::NrFfrSapUser *', 's')], 
                   is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): void ns3::NrFfrEnhancedAlgorithm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFfrEnhancedAlgorithm::DoGetAvailableDlRbg() [member function]
    cls.add_method('DoGetAvailableDlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFfrEnhancedAlgorithm::DoGetAvailableUlRbg() [member function]
    cls.add_method('DoGetAvailableUlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): uint8_t ns3::NrFfrEnhancedAlgorithm::DoGetMinContinuousUlBandwidth() [member function]
    cls.add_method('DoGetMinContinuousUlBandwidth', 
                   'uint8_t', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): uint8_t ns3::NrFfrEnhancedAlgorithm::DoGetTpc(uint16_t rnti) [member function]
    cls.add_method('DoGetTpc', 
                   'uint8_t', 
                   [param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): void ns3::NrFfrEnhancedAlgorithm::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): bool ns3::NrFfrEnhancedAlgorithm::DoIsDlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsDlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): bool ns3::NrFfrEnhancedAlgorithm::DoIsUlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsUlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): void ns3::NrFfrEnhancedAlgorithm::DoRecvLoadInformation(ns3::NgcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('DoRecvLoadInformation', 
                   'void', 
                   [param('ns3::NgcX2Sap::LoadInformationParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): void ns3::NrFfrEnhancedAlgorithm::DoReportDlCqiInfo(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportDlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): void ns3::NrFfrEnhancedAlgorithm::DoReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('DoReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): void ns3::NrFfrEnhancedAlgorithm::DoReportUlCqiInfo(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): void ns3::NrFfrEnhancedAlgorithm::DoReportUlCqiInfo(std::map<unsigned short, std::vector<double, std::allocator<double> >, std::less<unsigned short>, std::allocator<std::pair<unsigned short const, std::vector<double, std::allocator<double> > > > > ulCqiMap) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('std::map< unsigned short, std::vector< double > >', 'ulCqiMap')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-enhanced-algorithm.h (module 'nr'): void ns3::NrFfrEnhancedAlgorithm::Reconfigure() [member function]
    cls.add_method('Reconfigure', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NrFfrSoftAlgorithm_methods(root_module, cls):
    ## nr-ffr-soft-algorithm.h (module 'nr'): ns3::NrFfrSoftAlgorithm::NrFfrSoftAlgorithm(ns3::NrFfrSoftAlgorithm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFfrSoftAlgorithm const &', 'arg0')])
    ## nr-ffr-soft-algorithm.h (module 'nr'): ns3::NrFfrSoftAlgorithm::NrFfrSoftAlgorithm() [constructor]
    cls.add_constructor([])
    ## nr-ffr-soft-algorithm.h (module 'nr'): ns3::NrFfrRrcSapProvider * ns3::NrFfrSoftAlgorithm::GetNrFfrRrcSapProvider() [member function]
    cls.add_method('GetNrFfrRrcSapProvider', 
                   'ns3::NrFfrRrcSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): ns3::NrFfrSapProvider * ns3::NrFfrSoftAlgorithm::GetNrFfrSapProvider() [member function]
    cls.add_method('GetNrFfrSapProvider', 
                   'ns3::NrFfrSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): static ns3::TypeId ns3::NrFfrSoftAlgorithm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): void ns3::NrFfrSoftAlgorithm::SetNrFfrRrcSapUser(ns3::NrFfrRrcSapUser * s) [member function]
    cls.add_method('SetNrFfrRrcSapUser', 
                   'void', 
                   [param('ns3::NrFfrRrcSapUser *', 's')], 
                   is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): void ns3::NrFfrSoftAlgorithm::SetNrFfrSapUser(ns3::NrFfrSapUser * s) [member function]
    cls.add_method('SetNrFfrSapUser', 
                   'void', 
                   [param('ns3::NrFfrSapUser *', 's')], 
                   is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): void ns3::NrFfrSoftAlgorithm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFfrSoftAlgorithm::DoGetAvailableDlRbg() [member function]
    cls.add_method('DoGetAvailableDlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFfrSoftAlgorithm::DoGetAvailableUlRbg() [member function]
    cls.add_method('DoGetAvailableUlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): uint8_t ns3::NrFfrSoftAlgorithm::DoGetMinContinuousUlBandwidth() [member function]
    cls.add_method('DoGetMinContinuousUlBandwidth', 
                   'uint8_t', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): uint8_t ns3::NrFfrSoftAlgorithm::DoGetTpc(uint16_t rnti) [member function]
    cls.add_method('DoGetTpc', 
                   'uint8_t', 
                   [param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): void ns3::NrFfrSoftAlgorithm::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): bool ns3::NrFfrSoftAlgorithm::DoIsDlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsDlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): bool ns3::NrFfrSoftAlgorithm::DoIsUlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsUlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): void ns3::NrFfrSoftAlgorithm::DoRecvLoadInformation(ns3::NgcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('DoRecvLoadInformation', 
                   'void', 
                   [param('ns3::NgcX2Sap::LoadInformationParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): void ns3::NrFfrSoftAlgorithm::DoReportDlCqiInfo(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportDlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): void ns3::NrFfrSoftAlgorithm::DoReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('DoReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): void ns3::NrFfrSoftAlgorithm::DoReportUlCqiInfo(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): void ns3::NrFfrSoftAlgorithm::DoReportUlCqiInfo(std::map<unsigned short, std::vector<double, std::allocator<double> >, std::less<unsigned short>, std::allocator<std::pair<unsigned short const, std::vector<double, std::allocator<double> > > > > ulCqiMap) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('std::map< unsigned short, std::vector< double > >', 'ulCqiMap')], 
                   visibility='protected', is_virtual=True)
    ## nr-ffr-soft-algorithm.h (module 'nr'): void ns3::NrFfrSoftAlgorithm::Reconfigure() [member function]
    cls.add_method('Reconfigure', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NrFrHardAlgorithm_methods(root_module, cls):
    ## nr-fr-hard-algorithm.h (module 'nr'): ns3::NrFrHardAlgorithm::NrFrHardAlgorithm(ns3::NrFrHardAlgorithm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFrHardAlgorithm const &', 'arg0')])
    ## nr-fr-hard-algorithm.h (module 'nr'): ns3::NrFrHardAlgorithm::NrFrHardAlgorithm() [constructor]
    cls.add_constructor([])
    ## nr-fr-hard-algorithm.h (module 'nr'): ns3::NrFfrRrcSapProvider * ns3::NrFrHardAlgorithm::GetNrFfrRrcSapProvider() [member function]
    cls.add_method('GetNrFfrRrcSapProvider', 
                   'ns3::NrFfrRrcSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): ns3::NrFfrSapProvider * ns3::NrFrHardAlgorithm::GetNrFfrSapProvider() [member function]
    cls.add_method('GetNrFfrSapProvider', 
                   'ns3::NrFfrSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): static ns3::TypeId ns3::NrFrHardAlgorithm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): void ns3::NrFrHardAlgorithm::SetNrFfrRrcSapUser(ns3::NrFfrRrcSapUser * s) [member function]
    cls.add_method('SetNrFfrRrcSapUser', 
                   'void', 
                   [param('ns3::NrFfrRrcSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): void ns3::NrFrHardAlgorithm::SetNrFfrSapUser(ns3::NrFfrSapUser * s) [member function]
    cls.add_method('SetNrFfrSapUser', 
                   'void', 
                   [param('ns3::NrFfrSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): void ns3::NrFrHardAlgorithm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFrHardAlgorithm::DoGetAvailableDlRbg() [member function]
    cls.add_method('DoGetAvailableDlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFrHardAlgorithm::DoGetAvailableUlRbg() [member function]
    cls.add_method('DoGetAvailableUlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): uint8_t ns3::NrFrHardAlgorithm::DoGetMinContinuousUlBandwidth() [member function]
    cls.add_method('DoGetMinContinuousUlBandwidth', 
                   'uint8_t', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): uint8_t ns3::NrFrHardAlgorithm::DoGetTpc(uint16_t rnti) [member function]
    cls.add_method('DoGetTpc', 
                   'uint8_t', 
                   [param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): void ns3::NrFrHardAlgorithm::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): bool ns3::NrFrHardAlgorithm::DoIsDlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsDlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): bool ns3::NrFrHardAlgorithm::DoIsUlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsUlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): void ns3::NrFrHardAlgorithm::DoRecvLoadInformation(ns3::NgcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('DoRecvLoadInformation', 
                   'void', 
                   [param('ns3::NgcX2Sap::LoadInformationParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): void ns3::NrFrHardAlgorithm::DoReportDlCqiInfo(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportDlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): void ns3::NrFrHardAlgorithm::DoReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('DoReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): void ns3::NrFrHardAlgorithm::DoReportUlCqiInfo(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): void ns3::NrFrHardAlgorithm::DoReportUlCqiInfo(std::map<unsigned short, std::vector<double, std::allocator<double> >, std::less<unsigned short>, std::allocator<std::pair<unsigned short const, std::vector<double, std::allocator<double> > > > > ulCqiMap) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('std::map< unsigned short, std::vector< double > >', 'ulCqiMap')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-hard-algorithm.h (module 'nr'): void ns3::NrFrHardAlgorithm::Reconfigure() [member function]
    cls.add_method('Reconfigure', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NrFrNoOpAlgorithm_methods(root_module, cls):
    ## nr-fr-no-op-algorithm.h (module 'nr'): ns3::NrFrNoOpAlgorithm::NrFrNoOpAlgorithm(ns3::NrFrNoOpAlgorithm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFrNoOpAlgorithm const &', 'arg0')])
    ## nr-fr-no-op-algorithm.h (module 'nr'): ns3::NrFrNoOpAlgorithm::NrFrNoOpAlgorithm() [constructor]
    cls.add_constructor([])
    ## nr-fr-no-op-algorithm.h (module 'nr'): ns3::NrFfrRrcSapProvider * ns3::NrFrNoOpAlgorithm::GetNrFfrRrcSapProvider() [member function]
    cls.add_method('GetNrFfrRrcSapProvider', 
                   'ns3::NrFfrRrcSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): ns3::NrFfrSapProvider * ns3::NrFrNoOpAlgorithm::GetNrFfrSapProvider() [member function]
    cls.add_method('GetNrFfrSapProvider', 
                   'ns3::NrFfrSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): static ns3::TypeId ns3::NrFrNoOpAlgorithm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): void ns3::NrFrNoOpAlgorithm::SetNrFfrRrcSapUser(ns3::NrFfrRrcSapUser * s) [member function]
    cls.add_method('SetNrFfrRrcSapUser', 
                   'void', 
                   [param('ns3::NrFfrRrcSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): void ns3::NrFrNoOpAlgorithm::SetNrFfrSapUser(ns3::NrFfrSapUser * s) [member function]
    cls.add_method('SetNrFfrSapUser', 
                   'void', 
                   [param('ns3::NrFfrSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): void ns3::NrFrNoOpAlgorithm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFrNoOpAlgorithm::DoGetAvailableDlRbg() [member function]
    cls.add_method('DoGetAvailableDlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFrNoOpAlgorithm::DoGetAvailableUlRbg() [member function]
    cls.add_method('DoGetAvailableUlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): uint8_t ns3::NrFrNoOpAlgorithm::DoGetMinContinuousUlBandwidth() [member function]
    cls.add_method('DoGetMinContinuousUlBandwidth', 
                   'uint8_t', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): uint8_t ns3::NrFrNoOpAlgorithm::DoGetTpc(uint16_t rnti) [member function]
    cls.add_method('DoGetTpc', 
                   'uint8_t', 
                   [param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): void ns3::NrFrNoOpAlgorithm::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): bool ns3::NrFrNoOpAlgorithm::DoIsDlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsDlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): bool ns3::NrFrNoOpAlgorithm::DoIsUlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsUlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): void ns3::NrFrNoOpAlgorithm::DoRecvLoadInformation(ns3::NgcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('DoRecvLoadInformation', 
                   'void', 
                   [param('ns3::NgcX2Sap::LoadInformationParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): void ns3::NrFrNoOpAlgorithm::DoReportDlCqiInfo(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportDlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): void ns3::NrFrNoOpAlgorithm::DoReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('DoReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): void ns3::NrFrNoOpAlgorithm::DoReportUlCqiInfo(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): void ns3::NrFrNoOpAlgorithm::DoReportUlCqiInfo(std::map<unsigned short, std::vector<double, std::allocator<double> >, std::less<unsigned short>, std::allocator<std::pair<unsigned short const, std::vector<double, std::allocator<double> > > > > ulCqiMap) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('std::map< unsigned short, std::vector< double > >', 'ulCqiMap')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-no-op-algorithm.h (module 'nr'): void ns3::NrFrNoOpAlgorithm::Reconfigure() [member function]
    cls.add_method('Reconfigure', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NrFrSoftAlgorithm_methods(root_module, cls):
    ## nr-fr-soft-algorithm.h (module 'nr'): ns3::NrFrSoftAlgorithm::NrFrSoftAlgorithm(ns3::NrFrSoftAlgorithm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFrSoftAlgorithm const &', 'arg0')])
    ## nr-fr-soft-algorithm.h (module 'nr'): ns3::NrFrSoftAlgorithm::NrFrSoftAlgorithm() [constructor]
    cls.add_constructor([])
    ## nr-fr-soft-algorithm.h (module 'nr'): ns3::NrFfrRrcSapProvider * ns3::NrFrSoftAlgorithm::GetNrFfrRrcSapProvider() [member function]
    cls.add_method('GetNrFfrRrcSapProvider', 
                   'ns3::NrFfrRrcSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): ns3::NrFfrSapProvider * ns3::NrFrSoftAlgorithm::GetNrFfrSapProvider() [member function]
    cls.add_method('GetNrFfrSapProvider', 
                   'ns3::NrFfrSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): static ns3::TypeId ns3::NrFrSoftAlgorithm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): void ns3::NrFrSoftAlgorithm::SetNrFfrRrcSapUser(ns3::NrFfrRrcSapUser * s) [member function]
    cls.add_method('SetNrFfrRrcSapUser', 
                   'void', 
                   [param('ns3::NrFfrRrcSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): void ns3::NrFrSoftAlgorithm::SetNrFfrSapUser(ns3::NrFfrSapUser * s) [member function]
    cls.add_method('SetNrFfrSapUser', 
                   'void', 
                   [param('ns3::NrFfrSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): void ns3::NrFrSoftAlgorithm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFrSoftAlgorithm::DoGetAvailableDlRbg() [member function]
    cls.add_method('DoGetAvailableDlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFrSoftAlgorithm::DoGetAvailableUlRbg() [member function]
    cls.add_method('DoGetAvailableUlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): uint8_t ns3::NrFrSoftAlgorithm::DoGetMinContinuousUlBandwidth() [member function]
    cls.add_method('DoGetMinContinuousUlBandwidth', 
                   'uint8_t', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): uint8_t ns3::NrFrSoftAlgorithm::DoGetTpc(uint16_t rnti) [member function]
    cls.add_method('DoGetTpc', 
                   'uint8_t', 
                   [param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): void ns3::NrFrSoftAlgorithm::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): bool ns3::NrFrSoftAlgorithm::DoIsDlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsDlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): bool ns3::NrFrSoftAlgorithm::DoIsUlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsUlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): void ns3::NrFrSoftAlgorithm::DoRecvLoadInformation(ns3::NgcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('DoRecvLoadInformation', 
                   'void', 
                   [param('ns3::NgcX2Sap::LoadInformationParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): void ns3::NrFrSoftAlgorithm::DoReportDlCqiInfo(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportDlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): void ns3::NrFrSoftAlgorithm::DoReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('DoReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): void ns3::NrFrSoftAlgorithm::DoReportUlCqiInfo(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): void ns3::NrFrSoftAlgorithm::DoReportUlCqiInfo(std::map<unsigned short, std::vector<double, std::allocator<double> >, std::less<unsigned short>, std::allocator<std::pair<unsigned short const, std::vector<double, std::allocator<double> > > > > ulCqiMap) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('std::map< unsigned short, std::vector< double > >', 'ulCqiMap')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-soft-algorithm.h (module 'nr'): void ns3::NrFrSoftAlgorithm::Reconfigure() [member function]
    cls.add_method('Reconfigure', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NrFrStrictAlgorithm_methods(root_module, cls):
    ## nr-fr-strict-algorithm.h (module 'nr'): ns3::NrFrStrictAlgorithm::NrFrStrictAlgorithm(ns3::NrFrStrictAlgorithm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFrStrictAlgorithm const &', 'arg0')])
    ## nr-fr-strict-algorithm.h (module 'nr'): ns3::NrFrStrictAlgorithm::NrFrStrictAlgorithm() [constructor]
    cls.add_constructor([])
    ## nr-fr-strict-algorithm.h (module 'nr'): ns3::NrFfrRrcSapProvider * ns3::NrFrStrictAlgorithm::GetNrFfrRrcSapProvider() [member function]
    cls.add_method('GetNrFfrRrcSapProvider', 
                   'ns3::NrFfrRrcSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): ns3::NrFfrSapProvider * ns3::NrFrStrictAlgorithm::GetNrFfrSapProvider() [member function]
    cls.add_method('GetNrFfrSapProvider', 
                   'ns3::NrFfrSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): static ns3::TypeId ns3::NrFrStrictAlgorithm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): void ns3::NrFrStrictAlgorithm::SetNrFfrRrcSapUser(ns3::NrFfrRrcSapUser * s) [member function]
    cls.add_method('SetNrFfrRrcSapUser', 
                   'void', 
                   [param('ns3::NrFfrRrcSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): void ns3::NrFrStrictAlgorithm::SetNrFfrSapUser(ns3::NrFfrSapUser * s) [member function]
    cls.add_method('SetNrFfrSapUser', 
                   'void', 
                   [param('ns3::NrFfrSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): void ns3::NrFrStrictAlgorithm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFrStrictAlgorithm::DoGetAvailableDlRbg() [member function]
    cls.add_method('DoGetAvailableDlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): std::vector<bool, std::allocator<bool> > ns3::NrFrStrictAlgorithm::DoGetAvailableUlRbg() [member function]
    cls.add_method('DoGetAvailableUlRbg', 
                   'std::vector< bool >', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): uint8_t ns3::NrFrStrictAlgorithm::DoGetMinContinuousUlBandwidth() [member function]
    cls.add_method('DoGetMinContinuousUlBandwidth', 
                   'uint8_t', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): uint8_t ns3::NrFrStrictAlgorithm::DoGetTpc(uint16_t rnti) [member function]
    cls.add_method('DoGetTpc', 
                   'uint8_t', 
                   [param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): void ns3::NrFrStrictAlgorithm::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): bool ns3::NrFrStrictAlgorithm::DoIsDlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsDlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): bool ns3::NrFrStrictAlgorithm::DoIsUlRbgAvailableForUe(int i, uint16_t rnti) [member function]
    cls.add_method('DoIsUlRbgAvailableForUe', 
                   'bool', 
                   [param('int', 'i'), param('uint16_t', 'rnti')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): void ns3::NrFrStrictAlgorithm::DoRecvLoadInformation(ns3::NgcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('DoRecvLoadInformation', 
                   'void', 
                   [param('ns3::NgcX2Sap::LoadInformationParams', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): void ns3::NrFrStrictAlgorithm::DoReportDlCqiInfo(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportDlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): void ns3::NrFrStrictAlgorithm::DoReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('DoReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): void ns3::NrFrStrictAlgorithm::DoReportUlCqiInfo(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & params) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const &', 'params')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): void ns3::NrFrStrictAlgorithm::DoReportUlCqiInfo(std::map<unsigned short, std::vector<double, std::allocator<double> >, std::less<unsigned short>, std::allocator<std::pair<unsigned short const, std::vector<double, std::allocator<double> > > > > ulCqiMap) [member function]
    cls.add_method('DoReportUlCqiInfo', 
                   'void', 
                   [param('std::map< unsigned short, std::vector< double > >', 'ulCqiMap')], 
                   visibility='protected', is_virtual=True)
    ## nr-fr-strict-algorithm.h (module 'nr'): void ns3::NrFrStrictAlgorithm::Reconfigure() [member function]
    cls.add_method('Reconfigure', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NrHandoverAlgorithm_methods(root_module, cls):
    ## nr-handover-algorithm.h (module 'nr'): ns3::NrHandoverAlgorithm::NrHandoverAlgorithm(ns3::NrHandoverAlgorithm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrHandoverAlgorithm const &', 'arg0')])
    ## nr-handover-algorithm.h (module 'nr'): ns3::NrHandoverAlgorithm::NrHandoverAlgorithm() [constructor]
    cls.add_constructor([])
    ## nr-handover-algorithm.h (module 'nr'): ns3::NrHandoverManagementSapProvider * ns3::NrHandoverAlgorithm::GetNrHandoverManagementSapProvider() [member function]
    cls.add_method('GetNrHandoverManagementSapProvider', 
                   'ns3::NrHandoverManagementSapProvider *', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-handover-algorithm.h (module 'nr'): static ns3::TypeId ns3::NrHandoverAlgorithm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-handover-algorithm.h (module 'nr'): void ns3::NrHandoverAlgorithm::SetNrHandoverManagementSapUser(ns3::NrHandoverManagementSapUser * s) [member function]
    cls.add_method('SetNrHandoverManagementSapUser', 
                   'void', 
                   [param('ns3::NrHandoverManagementSapUser *', 's')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-handover-algorithm.h (module 'nr'): void ns3::NrHandoverAlgorithm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## nr-handover-algorithm.h (module 'nr'): void ns3::NrHandoverAlgorithm::DoReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('DoReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    return

def register_Ns3NrHarqPhy_methods(root_module, cls):
    ## nr-harq-phy.h (module 'nr'): ns3::NrHarqPhy::NrHarqPhy(ns3::NrHarqPhy const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrHarqPhy const &', 'arg0')])
    ## nr-harq-phy.h (module 'nr'): ns3::NrHarqPhy::NrHarqPhy() [constructor]
    cls.add_constructor([])
    ## nr-harq-phy.h (module 'nr'): double ns3::NrHarqPhy::GetAccumulatedMiDl(uint8_t harqProcId, uint8_t layer) [member function]
    cls.add_method('GetAccumulatedMiDl', 
                   'double', 
                   [param('uint8_t', 'harqProcId'), param('uint8_t', 'layer')])
    ## nr-harq-phy.h (module 'nr'): double ns3::NrHarqPhy::GetAccumulatedMiUl(uint16_t rnti) [member function]
    cls.add_method('GetAccumulatedMiUl', 
                   'double', 
                   [param('uint16_t', 'rnti')])
    ## nr-harq-phy.h (module 'nr'): ns3::HarqProcessInfoList_t ns3::NrHarqPhy::GetHarqProcessInfoDl(uint8_t harqProcId, uint8_t layer) [member function]
    cls.add_method('GetHarqProcessInfoDl', 
                   'ns3::HarqProcessInfoList_t', 
                   [param('uint8_t', 'harqProcId'), param('uint8_t', 'layer')])
    ## nr-harq-phy.h (module 'nr'): ns3::HarqProcessInfoList_t ns3::NrHarqPhy::GetHarqProcessInfoUl(uint16_t rnti, uint8_t harqProcId) [member function]
    cls.add_method('GetHarqProcessInfoUl', 
                   'ns3::HarqProcessInfoList_t', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'harqProcId')])
    ## nr-harq-phy.h (module 'nr'): void ns3::NrHarqPhy::ResetDlHarqProcessStatus(uint8_t id) [member function]
    cls.add_method('ResetDlHarqProcessStatus', 
                   'void', 
                   [param('uint8_t', 'id')])
    ## nr-harq-phy.h (module 'nr'): void ns3::NrHarqPhy::ResetUlHarqProcessStatus(uint16_t rnti, uint8_t id) [member function]
    cls.add_method('ResetUlHarqProcessStatus', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'id')])
    ## nr-harq-phy.h (module 'nr'): void ns3::NrHarqPhy::SubframeIndication(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('SubframeIndication', 
                   'void', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')])
    ## nr-harq-phy.h (module 'nr'): void ns3::NrHarqPhy::UpdateDlHarqProcessStatus(uint8_t id, uint8_t layer, double mi, uint16_t infoBytes, uint16_t codeBytes) [member function]
    cls.add_method('UpdateDlHarqProcessStatus', 
                   'void', 
                   [param('uint8_t', 'id'), param('uint8_t', 'layer'), param('double', 'mi'), param('uint16_t', 'infoBytes'), param('uint16_t', 'codeBytes')])
    ## nr-harq-phy.h (module 'nr'): void ns3::NrHarqPhy::UpdateUlHarqProcessStatus(uint16_t rnti, double mi, uint16_t infoBytes, uint16_t codeBytes) [member function]
    cls.add_method('UpdateUlHarqProcessStatus', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('double', 'mi'), param('uint16_t', 'infoBytes'), param('uint16_t', 'codeBytes')])
    return

def register_Ns3NrHelper_methods(root_module, cls):
    ## nr-helper.h (module 'nr'): ns3::NrHelper::NrHelper(ns3::NrHelper const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrHelper const &', 'arg0')])
    ## nr-helper.h (module 'nr'): ns3::NrHelper::NrHelper() [constructor]
    cls.add_constructor([])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::ActivateDataRadioBearer(ns3::NetDeviceContainer ueDevices, ns3::EpsBearer bearer) [member function]
    cls.add_method('ActivateDataRadioBearer', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'ueDevices'), param('ns3::EpsBearer', 'bearer')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::ActivateDataRadioBearer(ns3::Ptr<ns3::NetDevice> ueDevice, ns3::EpsBearer bearer) [member function]
    cls.add_method('ActivateDataRadioBearer', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice'), param('ns3::EpsBearer', 'bearer')])
    ## nr-helper.h (module 'nr'): uint8_t ns3::NrHelper::ActivateDedicatedEpsBearer(ns3::NetDeviceContainer ueDevices, ns3::EpsBearer bearer, ns3::Ptr<ns3::NgcTft> tft) [member function]
    cls.add_method('ActivateDedicatedEpsBearer', 
                   'uint8_t', 
                   [param('ns3::NetDeviceContainer', 'ueDevices'), param('ns3::EpsBearer', 'bearer'), param('ns3::Ptr< ns3::NgcTft >', 'tft')])
    ## nr-helper.h (module 'nr'): uint8_t ns3::NrHelper::ActivateDedicatedEpsBearer(ns3::Ptr<ns3::NetDevice> ueDevice, ns3::EpsBearer bearer, ns3::Ptr<ns3::NgcTft> tft) [member function]
    cls.add_method('ActivateDedicatedEpsBearer', 
                   'uint8_t', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice'), param('ns3::EpsBearer', 'bearer'), param('ns3::Ptr< ns3::NgcTft >', 'tft')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::AddX2Interface(ns3::NodeContainer enbNodes) [member function]
    cls.add_method('AddX2Interface', 
                   'void', 
                   [param('ns3::NodeContainer', 'enbNodes')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::AddX2Interface(ns3::Ptr<ns3::Node> enbNode1, ns3::Ptr<ns3::Node> enbNode2) [member function]
    cls.add_method('AddX2Interface', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'enbNode1'), param('ns3::Ptr< ns3::Node >', 'enbNode2')])
    ## nr-helper.h (module 'nr'): int64_t ns3::NrHelper::AssignStreams(ns3::NetDeviceContainer c, int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('ns3::NetDeviceContainer', 'c'), param('int64_t', 'stream')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::Attach(ns3::NetDeviceContainer ueDevices) [member function]
    cls.add_method('Attach', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'ueDevices')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::Attach(ns3::Ptr<ns3::NetDevice> ueDevice) [member function]
    cls.add_method('Attach', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::Attach(ns3::NetDeviceContainer ueDevices, ns3::Ptr<ns3::NetDevice> enbDevice) [member function]
    cls.add_method('Attach', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'ueDevices'), param('ns3::Ptr< ns3::NetDevice >', 'enbDevice')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::Attach(ns3::Ptr<ns3::NetDevice> ueDevice, ns3::Ptr<ns3::NetDevice> enbDevice) [member function]
    cls.add_method('Attach', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice'), param('ns3::Ptr< ns3::NetDevice >', 'enbDevice')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::AttachToClosestEnb(ns3::NetDeviceContainer ueDevices, ns3::NetDeviceContainer enbDevices) [member function]
    cls.add_method('AttachToClosestEnb', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'ueDevices'), param('ns3::NetDeviceContainer', 'enbDevices')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::AttachToClosestEnb(ns3::Ptr<ns3::NetDevice> ueDevice, ns3::NetDeviceContainer enbDevices) [member function]
    cls.add_method('AttachToClosestEnb', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice'), param('ns3::NetDeviceContainer', 'enbDevices')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::DeActivateDedicatedEpsBearer(ns3::Ptr<ns3::NetDevice> ueDevice, ns3::Ptr<ns3::NetDevice> enbDevice, uint8_t bearerId) [member function]
    cls.add_method('DeActivateDedicatedEpsBearer', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice'), param('ns3::Ptr< ns3::NetDevice >', 'enbDevice'), param('uint8_t', 'bearerId')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnableDlMacTraces() [member function]
    cls.add_method('EnableDlMacTraces', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnableDlPhyTraces() [member function]
    cls.add_method('EnableDlPhyTraces', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnableDlRxPhyTraces() [member function]
    cls.add_method('EnableDlRxPhyTraces', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnableDlTxPhyTraces() [member function]
    cls.add_method('EnableDlTxPhyTraces', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnableLogComponents() [member function]
    cls.add_method('EnableLogComponents', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnableMacTraces() [member function]
    cls.add_method('EnableMacTraces', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnablePdcpTraces() [member function]
    cls.add_method('EnablePdcpTraces', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnablePhyTraces() [member function]
    cls.add_method('EnablePhyTraces', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnableRlcTraces() [member function]
    cls.add_method('EnableRlcTraces', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnableTraces() [member function]
    cls.add_method('EnableTraces', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnableUlMacTraces() [member function]
    cls.add_method('EnableUlMacTraces', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnableUlPhyTraces() [member function]
    cls.add_method('EnableUlPhyTraces', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnableUlRxPhyTraces() [member function]
    cls.add_method('EnableUlRxPhyTraces', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::EnableUlTxPhyTraces() [member function]
    cls.add_method('EnableUlTxPhyTraces', 
                   'void', 
                   [])
    ## nr-helper.h (module 'nr'): std::string ns3::NrHelper::GetFfrAlgorithmType() const [member function]
    cls.add_method('GetFfrAlgorithmType', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## nr-helper.h (module 'nr'): std::string ns3::NrHelper::GetHandoverAlgorithmType() const [member function]
    cls.add_method('GetHandoverAlgorithmType', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## nr-helper.h (module 'nr'): ns3::Ptr<ns3::NrRadioBearerStatsCalculator> ns3::NrHelper::GetPdcpStats() [member function]
    cls.add_method('GetPdcpStats', 
                   'ns3::Ptr< ns3::NrRadioBearerStatsCalculator >', 
                   [])
    ## nr-helper.h (module 'nr'): ns3::Ptr<ns3::NrRadioBearerStatsCalculator> ns3::NrHelper::GetRlcStats() [member function]
    cls.add_method('GetRlcStats', 
                   'ns3::Ptr< ns3::NrRadioBearerStatsCalculator >', 
                   [])
    ## nr-helper.h (module 'nr'): std::string ns3::NrHelper::GetSchedulerType() const [member function]
    cls.add_method('GetSchedulerType', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## nr-helper.h (module 'nr'): static ns3::TypeId ns3::NrHelper::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::HandoverRequest(ns3::Time hoTime, ns3::Ptr<ns3::NetDevice> ueDev, ns3::Ptr<ns3::NetDevice> sourceEnbDev, ns3::Ptr<ns3::NetDevice> targetEnbDev) [member function]
    cls.add_method('HandoverRequest', 
                   'void', 
                   [param('ns3::Time', 'hoTime'), param('ns3::Ptr< ns3::NetDevice >', 'ueDev'), param('ns3::Ptr< ns3::NetDevice >', 'sourceEnbDev'), param('ns3::Ptr< ns3::NetDevice >', 'targetEnbDev')])
    ## nr-helper.h (module 'nr'): ns3::NetDeviceContainer ns3::NrHelper::InstallEnbDevice(ns3::NodeContainer c) [member function]
    cls.add_method('InstallEnbDevice', 
                   'ns3::NetDeviceContainer', 
                   [param('ns3::NodeContainer', 'c')])
    ## nr-helper.h (module 'nr'): ns3::NetDeviceContainer ns3::NrHelper::InstallUeDevice(ns3::NodeContainer c) [member function]
    cls.add_method('InstallUeDevice', 
                   'ns3::NetDeviceContainer', 
                   [param('ns3::NodeContainer', 'c')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetEnbAntennaModelAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetEnbAntennaModelAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetEnbAntennaModelType(std::string type) [member function]
    cls.add_method('SetEnbAntennaModelType', 
                   'void', 
                   [param('std::string', 'type')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetEnbDeviceAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetEnbDeviceAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetNgcHelper(ns3::Ptr<ns3::NgcHelper> h) [member function]
    cls.add_method('SetNgcHelper', 
                   'void', 
                   [param('ns3::Ptr< ns3::NgcHelper >', 'h')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetFadingModel(std::string type) [member function]
    cls.add_method('SetFadingModel', 
                   'void', 
                   [param('std::string', 'type')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetFadingModelAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetFadingModelAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetFfrAlgorithmAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetFfrAlgorithmAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetFfrAlgorithmType(std::string type) [member function]
    cls.add_method('SetFfrAlgorithmType', 
                   'void', 
                   [param('std::string', 'type')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetHandoverAlgorithmAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetHandoverAlgorithmAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetHandoverAlgorithmType(std::string type) [member function]
    cls.add_method('SetHandoverAlgorithmType', 
                   'void', 
                   [param('std::string', 'type')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetPathlossModelAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetPathlossModelAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetPathlossModelType(std::string type) [member function]
    cls.add_method('SetPathlossModelType', 
                   'void', 
                   [param('std::string', 'type')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetSchedulerAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetSchedulerAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetSchedulerType(std::string type) [member function]
    cls.add_method('SetSchedulerType', 
                   'void', 
                   [param('std::string', 'type')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetSpectrumChannelAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetSpectrumChannelAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetSpectrumChannelType(std::string type) [member function]
    cls.add_method('SetSpectrumChannelType', 
                   'void', 
                   [param('std::string', 'type')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetUeAntennaModelAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetUeAntennaModelAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetUeAntennaModelType(std::string type) [member function]
    cls.add_method('SetUeAntennaModelType', 
                   'void', 
                   [param('std::string', 'type')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::SetUeDeviceAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetUeDeviceAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## nr-helper.h (module 'nr'): void ns3::NrHelper::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NrHexGridEnbTopologyHelper_methods(root_module, cls):
    ## nr-hex-grid-enb-topology-helper.h (module 'nr'): ns3::NrHexGridEnbTopologyHelper::NrHexGridEnbTopologyHelper(ns3::NrHexGridEnbTopologyHelper const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrHexGridEnbTopologyHelper const &', 'arg0')])
    ## nr-hex-grid-enb-topology-helper.h (module 'nr'): ns3::NrHexGridEnbTopologyHelper::NrHexGridEnbTopologyHelper() [constructor]
    cls.add_constructor([])
    ## nr-hex-grid-enb-topology-helper.h (module 'nr'): void ns3::NrHexGridEnbTopologyHelper::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-hex-grid-enb-topology-helper.h (module 'nr'): static ns3::TypeId ns3::NrHexGridEnbTopologyHelper::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-hex-grid-enb-topology-helper.h (module 'nr'): void ns3::NrHexGridEnbTopologyHelper::SetNrHelper(ns3::Ptr<ns3::NrHelper> h) [member function]
    cls.add_method('SetNrHelper', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrHelper >', 'h')])
    ## nr-hex-grid-enb-topology-helper.h (module 'nr'): ns3::NetDeviceContainer ns3::NrHexGridEnbTopologyHelper::SetPositionAndInstallEnbDevice(ns3::NodeContainer c) [member function]
    cls.add_method('SetPositionAndInstallEnbDevice', 
                   'ns3::NetDeviceContainer', 
                   [param('ns3::NodeContainer', 'c')])
    return

def register_Ns3NrInterference_methods(root_module, cls):
    ## nr-interference.h (module 'nr'): ns3::NrInterference::NrInterference(ns3::NrInterference const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrInterference const &', 'arg0')])
    ## nr-interference.h (module 'nr'): ns3::NrInterference::NrInterference() [constructor]
    cls.add_constructor([])
    ## nr-interference.h (module 'nr'): void ns3::NrInterference::AddInterferenceChunkProcessor(ns3::Ptr<ns3::NrChunkProcessor> p) [member function]
    cls.add_method('AddInterferenceChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrChunkProcessor >', 'p')])
    ## nr-interference.h (module 'nr'): void ns3::NrInterference::AddRsPowerChunkProcessor(ns3::Ptr<ns3::NrChunkProcessor> p) [member function]
    cls.add_method('AddRsPowerChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrChunkProcessor >', 'p')])
    ## nr-interference.h (module 'nr'): void ns3::NrInterference::AddSignal(ns3::Ptr<ns3::SpectrumValue const> spd, ns3::Time const duration) [member function]
    cls.add_method('AddSignal', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'spd'), param('ns3::Time const', 'duration')])
    ## nr-interference.h (module 'nr'): void ns3::NrInterference::AddSinrChunkProcessor(ns3::Ptr<ns3::NrChunkProcessor> p) [member function]
    cls.add_method('AddSinrChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrChunkProcessor >', 'p')])
    ## nr-interference.h (module 'nr'): void ns3::NrInterference::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-interference.h (module 'nr'): void ns3::NrInterference::EndRx() [member function]
    cls.add_method('EndRx', 
                   'void', 
                   [])
    ## nr-interference.h (module 'nr'): static ns3::TypeId ns3::NrInterference::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-interference.h (module 'nr'): void ns3::NrInterference::SetNoisePowerSpectralDensity(ns3::Ptr<ns3::SpectrumValue const> noisePsd) [member function]
    cls.add_method('SetNoisePowerSpectralDensity', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'noisePsd')])
    ## nr-interference.h (module 'nr'): void ns3::NrInterference::StartRx(ns3::Ptr<ns3::SpectrumValue const> rxPsd) [member function]
    cls.add_method('StartRx', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'rxPsd')])
    return

def register_Ns3NrPdcp_methods(root_module, cls):
    ## nr-pdcp.h (module 'nr'): ns3::NrPdcp::NrPdcp(ns3::NrPdcp const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPdcp const &', 'arg0')])
    ## nr-pdcp.h (module 'nr'): ns3::NrPdcp::NrPdcp() [constructor]
    cls.add_constructor([])
    ## nr-pdcp.h (module 'nr'): void ns3::NrPdcp::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-pdcp.h (module 'nr'): ns3::NrPdcpSapProvider * ns3::NrPdcp::GetNrPdcpSapProvider() [member function]
    cls.add_method('GetNrPdcpSapProvider', 
                   'ns3::NrPdcpSapProvider *', 
                   [])
    ## nr-pdcp.h (module 'nr'): ns3::NrRlcSapUser * ns3::NrPdcp::GetNrRlcSapUser() [member function]
    cls.add_method('GetNrRlcSapUser', 
                   'ns3::NrRlcSapUser *', 
                   [])
    ## nr-pdcp.h (module 'nr'): ns3::NrPdcp::Status ns3::NrPdcp::GetStatus() [member function]
    cls.add_method('GetStatus', 
                   'ns3::NrPdcp::Status', 
                   [])
    ## nr-pdcp.h (module 'nr'): static ns3::TypeId ns3::NrPdcp::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-pdcp.h (module 'nr'): void ns3::NrPdcp::SetLcId(uint8_t lcId) [member function]
    cls.add_method('SetLcId', 
                   'void', 
                   [param('uint8_t', 'lcId')])
    ## nr-pdcp.h (module 'nr'): void ns3::NrPdcp::SetNrPdcpSapUser(ns3::NrPdcpSapUser * s) [member function]
    cls.add_method('SetNrPdcpSapUser', 
                   'void', 
                   [param('ns3::NrPdcpSapUser *', 's')])
    ## nr-pdcp.h (module 'nr'): void ns3::NrPdcp::SetNrRlcSapProvider(ns3::NrRlcSapProvider * s) [member function]
    cls.add_method('SetNrRlcSapProvider', 
                   'void', 
                   [param('ns3::NrRlcSapProvider *', 's')])
    ## nr-pdcp.h (module 'nr'): void ns3::NrPdcp::SetRnti(uint16_t rnti) [member function]
    cls.add_method('SetRnti', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## nr-pdcp.h (module 'nr'): void ns3::NrPdcp::SetStatus(ns3::NrPdcp::Status s) [member function]
    cls.add_method('SetStatus', 
                   'void', 
                   [param('ns3::NrPdcp::Status', 's')])
    ## nr-pdcp.h (module 'nr'): ns3::NrPdcp::MAX_PDCP_SN [variable]
    cls.add_static_attribute('MAX_PDCP_SN', 'uint16_t const', is_const=True)
    ## nr-pdcp.h (module 'nr'): void ns3::NrPdcp::DoReceivePdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoReceivePdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   visibility='protected', is_virtual=True)
    ## nr-pdcp.h (module 'nr'): void ns3::NrPdcp::DoTransmitPdcpSdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoTransmitPdcpSdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NrPdcpStatus_methods(root_module, cls):
    ## nr-pdcp.h (module 'nr'): ns3::NrPdcp::Status::Status() [constructor]
    cls.add_constructor([])
    ## nr-pdcp.h (module 'nr'): ns3::NrPdcp::Status::Status(ns3::NrPdcp::Status const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPdcp::Status const &', 'arg0')])
    ## nr-pdcp.h (module 'nr'): ns3::NrPdcp::Status::rxSn [variable]
    cls.add_instance_attribute('rxSn', 'uint16_t', is_const=False)
    ## nr-pdcp.h (module 'nr'): ns3::NrPdcp::Status::txSn [variable]
    cls.add_instance_attribute('txSn', 'uint16_t', is_const=False)
    return

def register_Ns3NrPhy_methods(root_module, cls):
    ## nr-phy.h (module 'nr'): ns3::NrPhy::NrPhy(ns3::NrPhy const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPhy const &', 'arg0')])
    ## nr-phy.h (module 'nr'): ns3::NrPhy::NrPhy() [constructor]
    cls.add_constructor([])
    ## nr-phy.h (module 'nr'): ns3::NrPhy::NrPhy(ns3::Ptr<ns3::NrSpectrumPhy> dlPhy, ns3::Ptr<ns3::NrSpectrumPhy> ulPhy) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::NrSpectrumPhy >', 'dlPhy'), param('ns3::Ptr< ns3::NrSpectrumPhy >', 'ulPhy')])
    ## nr-phy.h (module 'nr'): ns3::Ptr<ns3::SpectrumValue> ns3::NrPhy::CreateTxPowerSpectralDensity() [member function]
    cls.add_method('CreateTxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-phy.h (module 'nr'): void ns3::NrPhy::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-phy.h (module 'nr'): void ns3::NrPhy::DoSendMacPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoSendMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-phy.h (module 'nr'): void ns3::NrPhy::DoSetCellId(uint16_t cellId) [member function]
    cls.add_method('DoSetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## nr-phy.h (module 'nr'): void ns3::NrPhy::GenerateCtrlCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateCtrlCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-phy.h (module 'nr'): void ns3::NrPhy::GenerateDataCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateDataCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-phy.h (module 'nr'): std::list<ns3::Ptr<ns3::NrControlMessage>, std::allocator<ns3::Ptr<ns3::NrControlMessage> > > ns3::NrPhy::GetControlMessages() [member function]
    cls.add_method('GetControlMessages', 
                   'std::list< ns3::Ptr< ns3::NrControlMessage > >', 
                   [])
    ## nr-phy.h (module 'nr'): ns3::Ptr<ns3::NrNetDevice> ns3::NrPhy::GetDevice() const [member function]
    cls.add_method('GetDevice', 
                   'ns3::Ptr< ns3::NrNetDevice >', 
                   [], 
                   is_const=True)
    ## nr-phy.h (module 'nr'): ns3::Ptr<ns3::NrSpectrumPhy> ns3::NrPhy::GetDownlinkSpectrumPhy() [member function]
    cls.add_method('GetDownlinkSpectrumPhy', 
                   'ns3::Ptr< ns3::NrSpectrumPhy >', 
                   [])
    ## nr-phy.h (module 'nr'): ns3::Ptr<ns3::PacketBurst> ns3::NrPhy::GetPacketBurst() [member function]
    cls.add_method('GetPacketBurst', 
                   'ns3::Ptr< ns3::PacketBurst >', 
                   [])
    ## nr-phy.h (module 'nr'): uint8_t ns3::NrPhy::GetRbgSize() const [member function]
    cls.add_method('GetRbgSize', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-phy.h (module 'nr'): uint16_t ns3::NrPhy::GetSrsPeriodicity(uint16_t srcCi) const [member function]
    cls.add_method('GetSrsPeriodicity', 
                   'uint16_t', 
                   [param('uint16_t', 'srcCi')], 
                   is_const=True)
    ## nr-phy.h (module 'nr'): uint16_t ns3::NrPhy::GetSrsSubframeOffset(uint16_t srcCi) const [member function]
    cls.add_method('GetSrsSubframeOffset', 
                   'uint16_t', 
                   [param('uint16_t', 'srcCi')], 
                   is_const=True)
    ## nr-phy.h (module 'nr'): double ns3::NrPhy::GetTti() const [member function]
    cls.add_method('GetTti', 
                   'double', 
                   [], 
                   is_const=True)
    ## nr-phy.h (module 'nr'): static ns3::TypeId ns3::NrPhy::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-phy.h (module 'nr'): ns3::Ptr<ns3::NrSpectrumPhy> ns3::NrPhy::GetUplinkSpectrumPhy() [member function]
    cls.add_method('GetUplinkSpectrumPhy', 
                   'ns3::Ptr< ns3::NrSpectrumPhy >', 
                   [])
    ## nr-phy.h (module 'nr'): void ns3::NrPhy::ReportInterference(ns3::SpectrumValue const & interf) [member function]
    cls.add_method('ReportInterference', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'interf')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-phy.h (module 'nr'): void ns3::NrPhy::ReportRsReceivedPower(ns3::SpectrumValue const & power) [member function]
    cls.add_method('ReportRsReceivedPower', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'power')], 
                   is_pure_virtual=True, is_virtual=True)
    ## nr-phy.h (module 'nr'): void ns3::NrPhy::SetControlMessages(ns3::Ptr<ns3::NrControlMessage> m) [member function]
    cls.add_method('SetControlMessages', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrControlMessage >', 'm')])
    ## nr-phy.h (module 'nr'): void ns3::NrPhy::SetDevice(ns3::Ptr<ns3::NrNetDevice> d) [member function]
    cls.add_method('SetDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrNetDevice >', 'd')])
    ## nr-phy.h (module 'nr'): void ns3::NrPhy::SetDownlinkChannel(ns3::Ptr<ns3::SpectrumChannel> c) [member function]
    cls.add_method('SetDownlinkChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumChannel >', 'c')])
    ## nr-phy.h (module 'nr'): void ns3::NrPhy::SetMacPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('SetMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## nr-phy.h (module 'nr'): void ns3::NrPhy::SetTti(double tti) [member function]
    cls.add_method('SetTti', 
                   'void', 
                   [param('double', 'tti')])
    ## nr-phy.h (module 'nr'): void ns3::NrPhy::SetUplinkChannel(ns3::Ptr<ns3::SpectrumChannel> c) [member function]
    cls.add_method('SetUplinkChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumChannel >', 'c')])
    return

def register_Ns3NrRadioBearerInfo_methods(root_module, cls):
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrRadioBearerInfo::NrRadioBearerInfo(ns3::NrRadioBearerInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRadioBearerInfo const &', 'arg0')])
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrRadioBearerInfo::NrRadioBearerInfo() [constructor]
    cls.add_constructor([])
    ## nr-radio-bearer-info.h (module 'nr'): static ns3::TypeId ns3::NrRadioBearerInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrRadioBearerInfo::m_pdcp [variable]
    cls.add_instance_attribute('m_pdcp', 'ns3::Ptr< ns3::NrPdcp >', is_const=False)
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrRadioBearerInfo::m_rlc [variable]
    cls.add_instance_attribute('m_rlc', 'ns3::Ptr< ns3::NrRlc >', is_const=False)
    return

def register_Ns3NrRlc_methods(root_module, cls):
    ## nr-rlc.h (module 'nr'): ns3::NrRlc::NrRlc(ns3::NrRlc const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRlc const &', 'arg0')])
    ## nr-rlc.h (module 'nr'): ns3::NrRlc::NrRlc() [constructor]
    cls.add_constructor([])
    ## nr-rlc.h (module 'nr'): void ns3::NrRlc::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rlc.h (module 'nr'): ns3::NrMacSapUser * ns3::NrRlc::GetNrMacSapUser() [member function]
    cls.add_method('GetNrMacSapUser', 
                   'ns3::NrMacSapUser *', 
                   [])
    ## nr-rlc.h (module 'nr'): ns3::NrRlcSapProvider * ns3::NrRlc::GetNrRlcSapProvider() [member function]
    cls.add_method('GetNrRlcSapProvider', 
                   'ns3::NrRlcSapProvider *', 
                   [])
    ## nr-rlc.h (module 'nr'): static ns3::TypeId ns3::NrRlc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-rlc.h (module 'nr'): void ns3::NrRlc::SetLcId(uint8_t lcId) [member function]
    cls.add_method('SetLcId', 
                   'void', 
                   [param('uint8_t', 'lcId')])
    ## nr-rlc.h (module 'nr'): void ns3::NrRlc::SetNrMacSapProvider(ns3::NrMacSapProvider * s) [member function]
    cls.add_method('SetNrMacSapProvider', 
                   'void', 
                   [param('ns3::NrMacSapProvider *', 's')])
    ## nr-rlc.h (module 'nr'): void ns3::NrRlc::SetNrRlcSapUser(ns3::NrRlcSapUser * s) [member function]
    cls.add_method('SetNrRlcSapUser', 
                   'void', 
                   [param('ns3::NrRlcSapUser *', 's')])
    ## nr-rlc.h (module 'nr'): void ns3::NrRlc::SetRnti(uint16_t rnti) [member function]
    cls.add_method('SetRnti', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## nr-rlc.h (module 'nr'): void ns3::NrRlc::DoNotifyHarqDeliveryFailure() [member function]
    cls.add_method('DoNotifyHarqDeliveryFailure', 
                   'void', 
                   [], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-rlc.h (module 'nr'): void ns3::NrRlc::DoNotifyTxOpportunity(uint32_t bytes, uint8_t layer, uint8_t harqId) [member function]
    cls.add_method('DoNotifyTxOpportunity', 
                   'void', 
                   [param('uint32_t', 'bytes'), param('uint8_t', 'layer'), param('uint8_t', 'harqId')], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-rlc.h (module 'nr'): void ns3::NrRlc::DoReceivePdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoReceivePdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-rlc.h (module 'nr'): void ns3::NrRlc::DoTransmitPdcpPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoTransmitPdcpPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    return

def register_Ns3NrRlcAm_methods(root_module, cls):
    ## nr-rlc-am.h (module 'nr'): ns3::NrRlcAm::NrRlcAm(ns3::NrRlcAm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRlcAm const &', 'arg0')])
    ## nr-rlc-am.h (module 'nr'): ns3::NrRlcAm::NrRlcAm() [constructor]
    cls.add_constructor([])
    ## nr-rlc-am.h (module 'nr'): void ns3::NrRlcAm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rlc-am.h (module 'nr'): void ns3::NrRlcAm::DoNotifyHarqDeliveryFailure() [member function]
    cls.add_method('DoNotifyHarqDeliveryFailure', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rlc-am.h (module 'nr'): void ns3::NrRlcAm::DoNotifyTxOpportunity(uint32_t bytes, uint8_t layer, uint8_t harqId) [member function]
    cls.add_method('DoNotifyTxOpportunity', 
                   'void', 
                   [param('uint32_t', 'bytes'), param('uint8_t', 'layer'), param('uint8_t', 'harqId')], 
                   is_virtual=True)
    ## nr-rlc-am.h (module 'nr'): void ns3::NrRlcAm::DoReceivePdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoReceivePdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_virtual=True)
    ## nr-rlc-am.h (module 'nr'): void ns3::NrRlcAm::DoTransmitPdcpPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoTransmitPdcpPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_virtual=True)
    ## nr-rlc-am.h (module 'nr'): static ns3::TypeId ns3::NrRlcAm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    return

def register_Ns3NrRlcSm_methods(root_module, cls):
    ## nr-rlc.h (module 'nr'): ns3::NrRlcSm::NrRlcSm(ns3::NrRlcSm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRlcSm const &', 'arg0')])
    ## nr-rlc.h (module 'nr'): ns3::NrRlcSm::NrRlcSm() [constructor]
    cls.add_constructor([])
    ## nr-rlc.h (module 'nr'): void ns3::NrRlcSm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rlc.h (module 'nr'): void ns3::NrRlcSm::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rlc.h (module 'nr'): void ns3::NrRlcSm::DoNotifyHarqDeliveryFailure() [member function]
    cls.add_method('DoNotifyHarqDeliveryFailure', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rlc.h (module 'nr'): void ns3::NrRlcSm::DoNotifyTxOpportunity(uint32_t bytes, uint8_t layer, uint8_t harqId) [member function]
    cls.add_method('DoNotifyTxOpportunity', 
                   'void', 
                   [param('uint32_t', 'bytes'), param('uint8_t', 'layer'), param('uint8_t', 'harqId')], 
                   is_virtual=True)
    ## nr-rlc.h (module 'nr'): void ns3::NrRlcSm::DoReceivePdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoReceivePdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_virtual=True)
    ## nr-rlc.h (module 'nr'): void ns3::NrRlcSm::DoTransmitPdcpPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoTransmitPdcpPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_virtual=True)
    ## nr-rlc.h (module 'nr'): static ns3::TypeId ns3::NrRlcSm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    return

def register_Ns3NrRlcTm_methods(root_module, cls):
    ## nr-rlc-tm.h (module 'nr'): ns3::NrRlcTm::NrRlcTm(ns3::NrRlcTm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRlcTm const &', 'arg0')])
    ## nr-rlc-tm.h (module 'nr'): ns3::NrRlcTm::NrRlcTm() [constructor]
    cls.add_constructor([])
    ## nr-rlc-tm.h (module 'nr'): void ns3::NrRlcTm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rlc-tm.h (module 'nr'): void ns3::NrRlcTm::DoNotifyHarqDeliveryFailure() [member function]
    cls.add_method('DoNotifyHarqDeliveryFailure', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rlc-tm.h (module 'nr'): void ns3::NrRlcTm::DoNotifyTxOpportunity(uint32_t bytes, uint8_t layer, uint8_t harqId) [member function]
    cls.add_method('DoNotifyTxOpportunity', 
                   'void', 
                   [param('uint32_t', 'bytes'), param('uint8_t', 'layer'), param('uint8_t', 'harqId')], 
                   is_virtual=True)
    ## nr-rlc-tm.h (module 'nr'): void ns3::NrRlcTm::DoReceivePdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoReceivePdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_virtual=True)
    ## nr-rlc-tm.h (module 'nr'): void ns3::NrRlcTm::DoTransmitPdcpPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoTransmitPdcpPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_virtual=True)
    ## nr-rlc-tm.h (module 'nr'): static ns3::TypeId ns3::NrRlcTm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    return

def register_Ns3NrRlcUm_methods(root_module, cls):
    ## nr-rlc-um.h (module 'nr'): ns3::NrRlcUm::NrRlcUm(ns3::NrRlcUm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRlcUm const &', 'arg0')])
    ## nr-rlc-um.h (module 'nr'): ns3::NrRlcUm::NrRlcUm() [constructor]
    cls.add_constructor([])
    ## nr-rlc-um.h (module 'nr'): void ns3::NrRlcUm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rlc-um.h (module 'nr'): void ns3::NrRlcUm::DoNotifyHarqDeliveryFailure() [member function]
    cls.add_method('DoNotifyHarqDeliveryFailure', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rlc-um.h (module 'nr'): void ns3::NrRlcUm::DoNotifyTxOpportunity(uint32_t bytes, uint8_t layer, uint8_t harqId) [member function]
    cls.add_method('DoNotifyTxOpportunity', 
                   'void', 
                   [param('uint32_t', 'bytes'), param('uint8_t', 'layer'), param('uint8_t', 'harqId')], 
                   is_virtual=True)
    ## nr-rlc-um.h (module 'nr'): void ns3::NrRlcUm::DoReceivePdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoReceivePdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_virtual=True)
    ## nr-rlc-um.h (module 'nr'): void ns3::NrRlcUm::DoTransmitPdcpPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoTransmitPdcpPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_virtual=True)
    ## nr-rlc-um.h (module 'nr'): static ns3::TypeId ns3::NrRlcUm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    return

def register_Ns3NrSignalingRadioBearerInfo_methods(root_module, cls):
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrSignalingRadioBearerInfo::NrSignalingRadioBearerInfo() [constructor]
    cls.add_constructor([])
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrSignalingRadioBearerInfo::NrSignalingRadioBearerInfo(ns3::NrSignalingRadioBearerInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrSignalingRadioBearerInfo const &', 'arg0')])
    ## nr-radio-bearer-info.h (module 'nr'): static ns3::TypeId ns3::NrSignalingRadioBearerInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrSignalingRadioBearerInfo::m_logicalChannelConfig [variable]
    cls.add_instance_attribute('m_logicalChannelConfig', 'ns3::NrRrcSap::LogicalChannelConfig', is_const=False)
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrSignalingRadioBearerInfo::m_srbIdentity [variable]
    cls.add_instance_attribute('m_srbIdentity', 'uint8_t', is_const=False)
    return

def register_Ns3NrSpectrumPhy_methods(root_module, cls):
    ## nr-spectrum-phy.h (module 'nr'): ns3::NrSpectrumPhy::NrSpectrumPhy() [constructor]
    cls.add_constructor([])
    ## nr-spectrum-phy.h (module 'nr'): static ns3::TypeId ns3::NrSpectrumPhy::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetChannel(ns3::Ptr<ns3::SpectrumChannel> c) [member function]
    cls.add_method('SetChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumChannel >', 'c')], 
                   is_virtual=True)
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetMobility(ns3::Ptr<ns3::MobilityModel> m) [member function]
    cls.add_method('SetMobility', 
                   'void', 
                   [param('ns3::Ptr< ns3::MobilityModel >', 'm')], 
                   is_virtual=True)
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetDevice(ns3::Ptr<ns3::NetDevice> d) [member function]
    cls.add_method('SetDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'd')], 
                   is_virtual=True)
    ## nr-spectrum-phy.h (module 'nr'): ns3::Ptr<ns3::MobilityModel> ns3::NrSpectrumPhy::GetMobility() [member function]
    cls.add_method('GetMobility', 
                   'ns3::Ptr< ns3::MobilityModel >', 
                   [], 
                   is_virtual=True)
    ## nr-spectrum-phy.h (module 'nr'): ns3::Ptr<ns3::NetDevice> ns3::NrSpectrumPhy::GetDevice() const [member function]
    cls.add_method('GetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-spectrum-phy.h (module 'nr'): ns3::Ptr<ns3::SpectrumModel const> ns3::NrSpectrumPhy::GetRxSpectrumModel() const [member function]
    cls.add_method('GetRxSpectrumModel', 
                   'ns3::Ptr< ns3::SpectrumModel const >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-spectrum-phy.h (module 'nr'): ns3::Ptr<ns3::AntennaModel> ns3::NrSpectrumPhy::GetRxAntenna() [member function]
    cls.add_method('GetRxAntenna', 
                   'ns3::Ptr< ns3::AntennaModel >', 
                   [], 
                   is_virtual=True)
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::StartRx(ns3::Ptr<ns3::SpectrumSignalParameters> params) [member function]
    cls.add_method('StartRx', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumSignalParameters >', 'params')], 
                   is_virtual=True)
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::StartRxData(ns3::Ptr<ns3::NrSpectrumSignalParametersDataFrame> params) [member function]
    cls.add_method('StartRxData', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrSpectrumSignalParametersDataFrame >', 'params')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::StartRxDlCtrl(ns3::Ptr<ns3::NrSpectrumSignalParametersDlCtrlFrame> nrDlCtrlRxParams) [member function]
    cls.add_method('StartRxDlCtrl', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrSpectrumSignalParametersDlCtrlFrame >', 'nrDlCtrlRxParams')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::StartRxUlSrs(ns3::Ptr<ns3::NrSpectrumSignalParametersUlSrsFrame> nrUlSrsRxParams) [member function]
    cls.add_method('StartRxUlSrs', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrSpectrumSignalParametersUlSrsFrame >', 'nrUlSrsRxParams')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetHarqPhyModule(ns3::Ptr<ns3::NrHarqPhy> harq) [member function]
    cls.add_method('SetHarqPhyModule', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrHarqPhy >', 'harq')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetTxPowerSpectralDensity(ns3::Ptr<ns3::SpectrumValue> txPsd) [member function]
    cls.add_method('SetTxPowerSpectralDensity', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue >', 'txPsd')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetNoisePowerSpectralDensity(ns3::Ptr<ns3::SpectrumValue const> noisePsd) [member function]
    cls.add_method('SetNoisePowerSpectralDensity', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'noisePsd')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::Reset() [member function]
    cls.add_method('Reset', 
                   'void', 
                   [])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetAntenna(ns3::Ptr<ns3::AntennaModel> a) [member function]
    cls.add_method('SetAntenna', 
                   'void', 
                   [param('ns3::Ptr< ns3::AntennaModel >', 'a')])
    ## nr-spectrum-phy.h (module 'nr'): bool ns3::NrSpectrumPhy::StartTxDataFrame(ns3::Ptr<ns3::PacketBurst> pb, std::list<ns3::Ptr<ns3::NrControlMessage>, std::allocator<ns3::Ptr<ns3::NrControlMessage> > > ctrlMsgList, ns3::Time duration) [member function]
    cls.add_method('StartTxDataFrame', 
                   'bool', 
                   [param('ns3::Ptr< ns3::PacketBurst >', 'pb'), param('std::list< ns3::Ptr< ns3::NrControlMessage > >', 'ctrlMsgList'), param('ns3::Time', 'duration')])
    ## nr-spectrum-phy.h (module 'nr'): bool ns3::NrSpectrumPhy::StartTxDlCtrlFrame(std::list<ns3::Ptr<ns3::NrControlMessage>, std::allocator<ns3::Ptr<ns3::NrControlMessage> > > ctrlMsgList, bool pss) [member function]
    cls.add_method('StartTxDlCtrlFrame', 
                   'bool', 
                   [param('std::list< ns3::Ptr< ns3::NrControlMessage > >', 'ctrlMsgList'), param('bool', 'pss')])
    ## nr-spectrum-phy.h (module 'nr'): bool ns3::NrSpectrumPhy::StartTxUlSrsFrame() [member function]
    cls.add_method('StartTxUlSrsFrame', 
                   'bool', 
                   [])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetNrPhyTxEndCallback(ns3::NrPhyTxEndCallback c) [member function]
    cls.add_method('SetNrPhyTxEndCallback', 
                   'void', 
                   [param('ns3::NrPhyTxEndCallback', 'c')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetNrPhyRxDataEndErrorCallback(ns3::NrPhyRxDataEndErrorCallback c) [member function]
    cls.add_method('SetNrPhyRxDataEndErrorCallback', 
                   'void', 
                   [param('ns3::NrPhyRxDataEndErrorCallback', 'c')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetNrPhyRxDataEndOkCallback(ns3::NrPhyRxDataEndOkCallback c) [member function]
    cls.add_method('SetNrPhyRxDataEndOkCallback', 
                   'void', 
                   [param('ns3::NrPhyRxDataEndOkCallback', 'c')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetNrPhyRxCtrlEndOkCallback(ns3::NrPhyRxCtrlEndOkCallback c) [member function]
    cls.add_method('SetNrPhyRxCtrlEndOkCallback', 
                   'void', 
                   [param('ns3::NrPhyRxCtrlEndOkCallback', 'c')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetNrPhyRxCtrlEndErrorCallback(ns3::NrPhyRxCtrlEndErrorCallback c) [member function]
    cls.add_method('SetNrPhyRxCtrlEndErrorCallback', 
                   'void', 
                   [param('ns3::NrPhyRxCtrlEndErrorCallback', 'c')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetNrPhyRxPssCallback(ns3::NrPhyRxPssCallback c) [member function]
    cls.add_method('SetNrPhyRxPssCallback', 
                   'void', 
                   [param('ns3::NrPhyRxPssCallback', 'c')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetNrPhyDlHarqFeedbackCallback(ns3::NrPhyDlHarqFeedbackCallback c) [member function]
    cls.add_method('SetNrPhyDlHarqFeedbackCallback', 
                   'void', 
                   [param('ns3::NrPhyDlHarqFeedbackCallback', 'c')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetNrPhyUlHarqFeedbackCallback(ns3::NrPhyUlHarqFeedbackCallback c) [member function]
    cls.add_method('SetNrPhyUlHarqFeedbackCallback', 
                   'void', 
                   [param('ns3::NrPhyUlHarqFeedbackCallback', 'c')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetState(ns3::NrSpectrumPhy::State newState) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::NrSpectrumPhy::State', 'newState')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetCellId(uint16_t cellId) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::AddRsPowerChunkProcessor(ns3::Ptr<ns3::NrChunkProcessor> p) [member function]
    cls.add_method('AddRsPowerChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrChunkProcessor >', 'p')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::AddDataPowerChunkProcessor(ns3::Ptr<ns3::NrChunkProcessor> p) [member function]
    cls.add_method('AddDataPowerChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrChunkProcessor >', 'p')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::AddDataSinrChunkProcessor(ns3::Ptr<ns3::NrChunkProcessor> p) [member function]
    cls.add_method('AddDataSinrChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrChunkProcessor >', 'p')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::AddInterferenceCtrlChunkProcessor(ns3::Ptr<ns3::NrChunkProcessor> p) [member function]
    cls.add_method('AddInterferenceCtrlChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrChunkProcessor >', 'p')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::AddInterferenceDataChunkProcessor(ns3::Ptr<ns3::NrChunkProcessor> p) [member function]
    cls.add_method('AddInterferenceDataChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrChunkProcessor >', 'p')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::AddCtrlSinrChunkProcessor(ns3::Ptr<ns3::NrChunkProcessor> p) [member function]
    cls.add_method('AddCtrlSinrChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrChunkProcessor >', 'p')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::AddExpectedTb(uint16_t rnti, uint8_t ndi, uint16_t size, uint8_t mcs, std::vector<int, std::allocator<int> > map, uint8_t layer, uint8_t harqId, uint8_t rv, bool downlink) [member function]
    cls.add_method('AddExpectedTb', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'ndi'), param('uint16_t', 'size'), param('uint8_t', 'mcs'), param('std::vector< int >', 'map'), param('uint8_t', 'layer'), param('uint8_t', 'harqId'), param('uint8_t', 'rv'), param('bool', 'downlink')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::UpdateSinrPerceived(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('UpdateSinrPerceived', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')])
    ## nr-spectrum-phy.h (module 'nr'): void ns3::NrSpectrumPhy::SetTransmissionMode(uint8_t txMode) [member function]
    cls.add_method('SetTransmissionMode', 
                   'void', 
                   [param('uint8_t', 'txMode')])
    ## nr-spectrum-phy.h (module 'nr'): ns3::Ptr<ns3::SpectrumChannel> ns3::NrSpectrumPhy::GetChannel() [member function]
    cls.add_method('GetChannel', 
                   'ns3::Ptr< ns3::SpectrumChannel >', 
                   [])
    ## nr-spectrum-phy.h (module 'nr'): int64_t ns3::NrSpectrumPhy::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')])
    return

def register_Ns3NrSpectrumSignalParameters_methods(root_module, cls):
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParameters::NrSpectrumSignalParameters() [constructor]
    cls.add_constructor([])
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParameters::NrSpectrumSignalParameters(ns3::NrSpectrumSignalParameters const & p) [copy constructor]
    cls.add_constructor([param('ns3::NrSpectrumSignalParameters const &', 'p')])
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::Ptr<ns3::SpectrumSignalParameters> ns3::NrSpectrumSignalParameters::Copy() [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::SpectrumSignalParameters >', 
                   [], 
                   is_virtual=True)
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParameters::packetBurst [variable]
    cls.add_instance_attribute('packetBurst', 'ns3::Ptr< ns3::PacketBurst >', is_const=False)
    return

def register_Ns3NrSpectrumSignalParametersDataFrame_methods(root_module, cls):
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersDataFrame::NrSpectrumSignalParametersDataFrame() [constructor]
    cls.add_constructor([])
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersDataFrame::NrSpectrumSignalParametersDataFrame(ns3::NrSpectrumSignalParametersDataFrame const & p) [copy constructor]
    cls.add_constructor([param('ns3::NrSpectrumSignalParametersDataFrame const &', 'p')])
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::Ptr<ns3::SpectrumSignalParameters> ns3::NrSpectrumSignalParametersDataFrame::Copy() [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::SpectrumSignalParameters >', 
                   [], 
                   is_virtual=True)
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersDataFrame::cellId [variable]
    cls.add_instance_attribute('cellId', 'uint16_t', is_const=False)
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersDataFrame::ctrlMsgList [variable]
    cls.add_instance_attribute('ctrlMsgList', 'std::list< ns3::Ptr< ns3::NrControlMessage > >', is_const=False)
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersDataFrame::packetBurst [variable]
    cls.add_instance_attribute('packetBurst', 'ns3::Ptr< ns3::PacketBurst >', is_const=False)
    return

def register_Ns3NrSpectrumSignalParametersDlCtrlFrame_methods(root_module, cls):
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersDlCtrlFrame::NrSpectrumSignalParametersDlCtrlFrame() [constructor]
    cls.add_constructor([])
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersDlCtrlFrame::NrSpectrumSignalParametersDlCtrlFrame(ns3::NrSpectrumSignalParametersDlCtrlFrame const & p) [copy constructor]
    cls.add_constructor([param('ns3::NrSpectrumSignalParametersDlCtrlFrame const &', 'p')])
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::Ptr<ns3::SpectrumSignalParameters> ns3::NrSpectrumSignalParametersDlCtrlFrame::Copy() [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::SpectrumSignalParameters >', 
                   [], 
                   is_virtual=True)
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersDlCtrlFrame::cellId [variable]
    cls.add_instance_attribute('cellId', 'uint16_t', is_const=False)
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersDlCtrlFrame::ctrlMsgList [variable]
    cls.add_instance_attribute('ctrlMsgList', 'std::list< ns3::Ptr< ns3::NrControlMessage > >', is_const=False)
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersDlCtrlFrame::pss [variable]
    cls.add_instance_attribute('pss', 'bool', is_const=False)
    return

def register_Ns3NrSpectrumSignalParametersUlSrsFrame_methods(root_module, cls):
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersUlSrsFrame::NrSpectrumSignalParametersUlSrsFrame() [constructor]
    cls.add_constructor([])
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersUlSrsFrame::NrSpectrumSignalParametersUlSrsFrame(ns3::NrSpectrumSignalParametersUlSrsFrame const & p) [copy constructor]
    cls.add_constructor([param('ns3::NrSpectrumSignalParametersUlSrsFrame const &', 'p')])
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::Ptr<ns3::SpectrumSignalParameters> ns3::NrSpectrumSignalParametersUlSrsFrame::Copy() [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::SpectrumSignalParameters >', 
                   [], 
                   is_virtual=True)
    ## nr-spectrum-signal-parameters.h (module 'nr'): ns3::NrSpectrumSignalParametersUlSrsFrame::cellId [variable]
    cls.add_instance_attribute('cellId', 'uint16_t', is_const=False)
    return

def register_Ns3NrStatsCalculator_methods(root_module, cls):
    ## nr-stats-calculator.h (module 'nr'): ns3::NrStatsCalculator::NrStatsCalculator(ns3::NrStatsCalculator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrStatsCalculator const &', 'arg0')])
    ## nr-stats-calculator.h (module 'nr'): ns3::NrStatsCalculator::NrStatsCalculator() [constructor]
    cls.add_constructor([])
    ## nr-stats-calculator.h (module 'nr'): bool ns3::NrStatsCalculator::ExistsCellIdPath(std::string path) [member function]
    cls.add_method('ExistsCellIdPath', 
                   'bool', 
                   [param('std::string', 'path')])
    ## nr-stats-calculator.h (module 'nr'): bool ns3::NrStatsCalculator::ExistsImsiPath(std::string path) [member function]
    cls.add_method('ExistsImsiPath', 
                   'bool', 
                   [param('std::string', 'path')])
    ## nr-stats-calculator.h (module 'nr'): uint16_t ns3::NrStatsCalculator::GetCellIdPath(std::string path) [member function]
    cls.add_method('GetCellIdPath', 
                   'uint16_t', 
                   [param('std::string', 'path')])
    ## nr-stats-calculator.h (module 'nr'): std::string ns3::NrStatsCalculator::GetDlOutputFilename() [member function]
    cls.add_method('GetDlOutputFilename', 
                   'std::string', 
                   [])
    ## nr-stats-calculator.h (module 'nr'): uint64_t ns3::NrStatsCalculator::GetImsiPath(std::string path) [member function]
    cls.add_method('GetImsiPath', 
                   'uint64_t', 
                   [param('std::string', 'path')])
    ## nr-stats-calculator.h (module 'nr'): static ns3::TypeId ns3::NrStatsCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-stats-calculator.h (module 'nr'): std::string ns3::NrStatsCalculator::GetUlOutputFilename() [member function]
    cls.add_method('GetUlOutputFilename', 
                   'std::string', 
                   [])
    ## nr-stats-calculator.h (module 'nr'): void ns3::NrStatsCalculator::SetCellIdPath(std::string path, uint16_t cellId) [member function]
    cls.add_method('SetCellIdPath', 
                   'void', 
                   [param('std::string', 'path'), param('uint16_t', 'cellId')])
    ## nr-stats-calculator.h (module 'nr'): void ns3::NrStatsCalculator::SetDlOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetDlOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## nr-stats-calculator.h (module 'nr'): void ns3::NrStatsCalculator::SetImsiPath(std::string path, uint64_t imsi) [member function]
    cls.add_method('SetImsiPath', 
                   'void', 
                   [param('std::string', 'path'), param('uint64_t', 'imsi')])
    ## nr-stats-calculator.h (module 'nr'): void ns3::NrStatsCalculator::SetUlOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetUlOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## nr-stats-calculator.h (module 'nr'): static uint16_t ns3::NrStatsCalculator::FindCellIdFromEnbMac(std::string path, uint16_t rnti) [member function]
    cls.add_method('FindCellIdFromEnbMac', 
                   'uint16_t', 
                   [param('std::string', 'path'), param('uint16_t', 'rnti')], 
                   is_static=True, visibility='protected')
    ## nr-stats-calculator.h (module 'nr'): static uint16_t ns3::NrStatsCalculator::FindCellIdFromEnbRlcPath(std::string path) [member function]
    cls.add_method('FindCellIdFromEnbRlcPath', 
                   'uint16_t', 
                   [param('std::string', 'path')], 
                   is_static=True, visibility='protected')
    ## nr-stats-calculator.h (module 'nr'): static uint64_t ns3::NrStatsCalculator::FindImsiForEnb(std::string path, uint16_t rnti) [member function]
    cls.add_method('FindImsiForEnb', 
                   'uint64_t', 
                   [param('std::string', 'path'), param('uint16_t', 'rnti')], 
                   is_static=True, visibility='protected')
    ## nr-stats-calculator.h (module 'nr'): static uint64_t ns3::NrStatsCalculator::FindImsiForUe(std::string path, uint16_t rnti) [member function]
    cls.add_method('FindImsiForUe', 
                   'uint64_t', 
                   [param('std::string', 'path'), param('uint16_t', 'rnti')], 
                   is_static=True, visibility='protected')
    ## nr-stats-calculator.h (module 'nr'): static uint64_t ns3::NrStatsCalculator::FindImsiFromEnbMac(std::string path, uint16_t rnti) [member function]
    cls.add_method('FindImsiFromEnbMac', 
                   'uint64_t', 
                   [param('std::string', 'path'), param('uint16_t', 'rnti')], 
                   is_static=True, visibility='protected')
    ## nr-stats-calculator.h (module 'nr'): static uint64_t ns3::NrStatsCalculator::FindImsiFromEnbRlcPath(std::string path) [member function]
    cls.add_method('FindImsiFromEnbRlcPath', 
                   'uint64_t', 
                   [param('std::string', 'path')], 
                   is_static=True, visibility='protected')
    ## nr-stats-calculator.h (module 'nr'): static uint64_t ns3::NrStatsCalculator::FindImsiFromNrNetDevice(std::string path) [member function]
    cls.add_method('FindImsiFromNrNetDevice', 
                   'uint64_t', 
                   [param('std::string', 'path')], 
                   is_static=True, visibility='protected')
    ## nr-stats-calculator.h (module 'nr'): static uint64_t ns3::NrStatsCalculator::FindImsiFromUePhy(std::string path) [member function]
    cls.add_method('FindImsiFromUePhy', 
                   'uint64_t', 
                   [param('std::string', 'path')], 
                   is_static=True, visibility='protected')
    return

def register_Ns3NrUeMac_methods(root_module, cls):
    ## nr-ue-mac.h (module 'nr'): ns3::NrUeMac::NrUeMac(ns3::NrUeMac const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeMac const &', 'arg0')])
    ## nr-ue-mac.h (module 'nr'): ns3::NrUeMac::NrUeMac() [constructor]
    cls.add_constructor([])
    ## nr-ue-mac.h (module 'nr'): int64_t ns3::NrUeMac::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')])
    ## nr-ue-mac.h (module 'nr'): void ns3::NrUeMac::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-ue-mac.h (module 'nr'): void ns3::NrUeMac::DoSubframeIndication(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('DoSubframeIndication', 
                   'void', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')])
    ## nr-ue-mac.h (module 'nr'): ns3::NrMacSapProvider * ns3::NrUeMac::GetNrMacSapProvider() [member function]
    cls.add_method('GetNrMacSapProvider', 
                   'ns3::NrMacSapProvider *', 
                   [])
    ## nr-ue-mac.h (module 'nr'): ns3::NrUeCmacSapProvider * ns3::NrUeMac::GetNrUeCmacSapProvider() [member function]
    cls.add_method('GetNrUeCmacSapProvider', 
                   'ns3::NrUeCmacSapProvider *', 
                   [])
    ## nr-ue-mac.h (module 'nr'): ns3::NrUePhySapUser * ns3::NrUeMac::GetNrUePhySapUser() [member function]
    cls.add_method('GetNrUePhySapUser', 
                   'ns3::NrUePhySapUser *', 
                   [])
    ## nr-ue-mac.h (module 'nr'): static ns3::TypeId ns3::NrUeMac::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-ue-mac.h (module 'nr'): void ns3::NrUeMac::SetNrUeCmacSapUser(ns3::NrUeCmacSapUser * s) [member function]
    cls.add_method('SetNrUeCmacSapUser', 
                   'void', 
                   [param('ns3::NrUeCmacSapUser *', 's')])
    ## nr-ue-mac.h (module 'nr'): void ns3::NrUeMac::SetNrUePhySapProvider(ns3::NrUePhySapProvider * s) [member function]
    cls.add_method('SetNrUePhySapProvider', 
                   'void', 
                   [param('ns3::NrUePhySapProvider *', 's')])
    return

def register_Ns3NrUePhy_methods(root_module, cls):
    ## nr-ue-phy.h (module 'nr'): ns3::NrUePhy::NrUePhy(ns3::NrUePhy const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUePhy const &', 'arg0')])
    ## nr-ue-phy.h (module 'nr'): ns3::NrUePhy::NrUePhy() [constructor]
    cls.add_constructor([])
    ## nr-ue-phy.h (module 'nr'): ns3::NrUePhy::NrUePhy(ns3::Ptr<ns3::NrSpectrumPhy> dlPhy, ns3::Ptr<ns3::NrSpectrumPhy> ulPhy) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::NrSpectrumPhy >', 'dlPhy'), param('ns3::Ptr< ns3::NrSpectrumPhy >', 'ulPhy')])
    ## nr-ue-phy.h (module 'nr'): ns3::Ptr<ns3::DlCqiNrControlMessage> ns3::NrUePhy::CreateDlCqiFeedbackMessage(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('CreateDlCqiFeedbackMessage', 
                   'ns3::Ptr< ns3::DlCqiNrControlMessage >', 
                   [param('ns3::SpectrumValue const &', 'sinr')])
    ## nr-ue-phy.h (module 'nr'): ns3::Ptr<ns3::SpectrumValue> ns3::NrUePhy::CreateTxPowerSpectralDensity() [member function]
    cls.add_method('CreateTxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [], 
                   is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::GenerateCtrlCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateCtrlCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::GenerateDataCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateDataCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::GenerateMixedCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateMixedCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): ns3::Ptr<ns3::NrSpectrumPhy> ns3::NrUePhy::GetDlSpectrumPhy() const [member function]
    cls.add_method('GetDlSpectrumPhy', 
                   'ns3::Ptr< ns3::NrSpectrumPhy >', 
                   [], 
                   is_const=True)
    ## nr-ue-phy.h (module 'nr'): ns3::NrUeCphySapProvider * ns3::NrUePhy::GetNrUeCphySapProvider() [member function]
    cls.add_method('GetNrUeCphySapProvider', 
                   'ns3::NrUeCphySapProvider *', 
                   [])
    ## nr-ue-phy.h (module 'nr'): ns3::NrUePhySapProvider * ns3::NrUePhy::GetNrUePhySapProvider() [member function]
    cls.add_method('GetNrUePhySapProvider', 
                   'ns3::NrUePhySapProvider *', 
                   [])
    ## nr-ue-phy.h (module 'nr'): uint8_t ns3::NrUePhy::GetMacChDelay() const [member function]
    cls.add_method('GetMacChDelay', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-ue-phy.h (module 'nr'): double ns3::NrUePhy::GetNoiseFigure() const [member function]
    cls.add_method('GetNoiseFigure', 
                   'double', 
                   [], 
                   is_const=True)
    ## nr-ue-phy.h (module 'nr'): ns3::NrUePhy::State ns3::NrUePhy::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::NrUePhy::State', 
                   [], 
                   is_const=True)
    ## nr-ue-phy.h (module 'nr'): std::vector<int, std::allocator<int> > ns3::NrUePhy::GetSubChannelsForReception() [member function]
    cls.add_method('GetSubChannelsForReception', 
                   'std::vector< int >', 
                   [])
    ## nr-ue-phy.h (module 'nr'): std::vector<int, std::allocator<int> > ns3::NrUePhy::GetSubChannelsForTransmission() [member function]
    cls.add_method('GetSubChannelsForTransmission', 
                   'std::vector< int >', 
                   [])
    ## nr-ue-phy.h (module 'nr'): double ns3::NrUePhy::GetTxPower() const [member function]
    cls.add_method('GetTxPower', 
                   'double', 
                   [], 
                   is_const=True)
    ## nr-ue-phy.h (module 'nr'): static ns3::TypeId ns3::NrUePhy::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-ue-phy.h (module 'nr'): ns3::Ptr<ns3::NrSpectrumPhy> ns3::NrUePhy::GetUlSpectrumPhy() const [member function]
    cls.add_method('GetUlSpectrumPhy', 
                   'ns3::Ptr< ns3::NrSpectrumPhy >', 
                   [], 
                   is_const=True)
    ## nr-ue-phy.h (module 'nr'): ns3::Ptr<ns3::NrUePowerControl> ns3::NrUePhy::GetUplinkPowerControl() const [member function]
    cls.add_method('GetUplinkPowerControl', 
                   'ns3::Ptr< ns3::NrUePowerControl >', 
                   [], 
                   is_const=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::PhyPduReceived(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('PhyPduReceived', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::ReceiveNrControlMessageList(std::list<ns3::Ptr<ns3::NrControlMessage>, std::allocator<ns3::Ptr<ns3::NrControlMessage> > > arg0) [member function]
    cls.add_method('ReceiveNrControlMessageList', 
                   'void', 
                   [param('std::list< ns3::Ptr< ns3::NrControlMessage > >', 'arg0')], 
                   is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::ReceiveNrDlHarqFeedback(ns3::DlInfoListElement_s mes) [member function]
    cls.add_method('ReceiveNrDlHarqFeedback', 
                   'void', 
                   [param('ns3::DlInfoListElement_s', 'mes')], 
                   is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::ReceivePss(uint16_t cellId, ns3::Ptr<ns3::SpectrumValue> p) [member function]
    cls.add_method('ReceivePss', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('ns3::Ptr< ns3::SpectrumValue >', 'p')], 
                   is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::ReportDataInterference(ns3::SpectrumValue const & interf) [member function]
    cls.add_method('ReportDataInterference', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'interf')], 
                   is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::ReportInterference(ns3::SpectrumValue const & interf) [member function]
    cls.add_method('ReportInterference', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'interf')], 
                   is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::ReportRsReceivedPower(ns3::SpectrumValue const & power) [member function]
    cls.add_method('ReportRsReceivedPower', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'power')], 
                   is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::SendSrs() [member function]
    cls.add_method('SendSrs', 
                   'void', 
                   [])
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::SetHarqPhyModule(ns3::Ptr<ns3::NrHarqPhy> harq) [member function]
    cls.add_method('SetHarqPhyModule', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrHarqPhy >', 'harq')])
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::SetNrUeCphySapUser(ns3::NrUeCphySapUser * s) [member function]
    cls.add_method('SetNrUeCphySapUser', 
                   'void', 
                   [param('ns3::NrUeCphySapUser *', 's')])
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::SetNrUePhySapUser(ns3::NrUePhySapUser * s) [member function]
    cls.add_method('SetNrUePhySapUser', 
                   'void', 
                   [param('ns3::NrUePhySapUser *', 's')])
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::SetNoiseFigure(double nf) [member function]
    cls.add_method('SetNoiseFigure', 
                   'void', 
                   [param('double', 'nf')])
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::SetSubChannelsForReception(std::vector<int, std::allocator<int> > mask) [member function]
    cls.add_method('SetSubChannelsForReception', 
                   'void', 
                   [param('std::vector< int >', 'mask')])
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::SetSubChannelsForTransmission(std::vector<int, std::allocator<int> > mask) [member function]
    cls.add_method('SetSubChannelsForTransmission', 
                   'void', 
                   [param('std::vector< int >', 'mask')])
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::SetTxPower(double pow) [member function]
    cls.add_method('SetTxPower', 
                   'void', 
                   [param('double', 'pow')])
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::SubframeIndication(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('SubframeIndication', 
                   'void', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')])
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::DoSendNrControlMessage(ns3::Ptr<ns3::NrControlMessage> msg) [member function]
    cls.add_method('DoSendNrControlMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrControlMessage >', 'msg')], 
                   visibility='private', is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::DoSendMacPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoSendMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   visibility='private', is_virtual=True)
    ## nr-ue-phy.h (module 'nr'): void ns3::NrUePhy::DoSendRachPreamble(uint32_t prachId, uint32_t raRnti) [member function]
    cls.add_method('DoSendRachPreamble', 
                   'void', 
                   [param('uint32_t', 'prachId'), param('uint32_t', 'raRnti')], 
                   visibility='private', is_virtual=True)
    return

def register_Ns3NrUePowerControl_methods(root_module, cls):
    ## nr-ue-power-control.h (module 'nr'): ns3::NrUePowerControl::NrUePowerControl(ns3::NrUePowerControl const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUePowerControl const &', 'arg0')])
    ## nr-ue-power-control.h (module 'nr'): ns3::NrUePowerControl::NrUePowerControl() [constructor]
    cls.add_constructor([])
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::CalculatePucchTxPower() [member function]
    cls.add_method('CalculatePucchTxPower', 
                   'void', 
                   [])
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::CalculatePuschTxPower() [member function]
    cls.add_method('CalculatePuschTxPower', 
                   'void', 
                   [])
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::CalculateSrsTxPower() [member function]
    cls.add_method('CalculateSrsTxPower', 
                   'void', 
                   [])
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::ConfigureReferenceSignalPower(int8_t referenceSignalPower) [member function]
    cls.add_method('ConfigureReferenceSignalPower', 
                   'void', 
                   [param('int8_t', 'referenceSignalPower')])
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-ue-power-control.h (module 'nr'): double ns3::NrUePowerControl::GetPcmax() [member function]
    cls.add_method('GetPcmax', 
                   'double', 
                   [])
    ## nr-ue-power-control.h (module 'nr'): double ns3::NrUePowerControl::GetPucchTxPower(std::vector<int, std::allocator<int> > rb) [member function]
    cls.add_method('GetPucchTxPower', 
                   'double', 
                   [param('std::vector< int >', 'rb')])
    ## nr-ue-power-control.h (module 'nr'): double ns3::NrUePowerControl::GetPuschTxPower(std::vector<int, std::allocator<int> > rb) [member function]
    cls.add_method('GetPuschTxPower', 
                   'double', 
                   [param('std::vector< int >', 'rb')])
    ## nr-ue-power-control.h (module 'nr'): double ns3::NrUePowerControl::GetSrsTxPower(std::vector<int, std::allocator<int> > rb) [member function]
    cls.add_method('GetSrsTxPower', 
                   'double', 
                   [param('std::vector< int >', 'rb')])
    ## nr-ue-power-control.h (module 'nr'): static ns3::TypeId ns3::NrUePowerControl::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::ReportTpc(uint8_t tpc) [member function]
    cls.add_method('ReportTpc', 
                   'void', 
                   [param('uint8_t', 'tpc')])
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::SetAlpha(double value) [member function]
    cls.add_method('SetAlpha', 
                   'void', 
                   [param('double', 'value')])
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::SetCellId(uint16_t cellId) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::SetPcmax(double value) [member function]
    cls.add_method('SetPcmax', 
                   'void', 
                   [param('double', 'value')])
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::SetPoNominalPusch(int16_t value) [member function]
    cls.add_method('SetPoNominalPusch', 
                   'void', 
                   [param('int16_t', 'value')])
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::SetPoUePusch(int16_t value) [member function]
    cls.add_method('SetPoUePusch', 
                   'void', 
                   [param('int16_t', 'value')])
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::SetRnti(uint16_t rnti) [member function]
    cls.add_method('SetRnti', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::SetRsrp(double value) [member function]
    cls.add_method('SetRsrp', 
                   'void', 
                   [param('double', 'value')])
    ## nr-ue-power-control.h (module 'nr'): void ns3::NrUePowerControl::SetTxPower(double value) [member function]
    cls.add_method('SetTxPower', 
                   'void', 
                   [param('double', 'value')])
    return

def register_Ns3NrUeRrc_methods(root_module, cls):
    ## nr-ue-rrc.h (module 'nr'): ns3::NrUeRrc::NrUeRrc(ns3::NrUeRrc const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeRrc const &', 'arg0')])
    ## nr-ue-rrc.h (module 'nr'): ns3::NrUeRrc::NrUeRrc() [constructor]
    cls.add_constructor([])
    ## nr-ue-rrc.h (module 'nr'): ns3::NrAsSapProvider * ns3::NrUeRrc::GetAsSapProvider() [member function]
    cls.add_method('GetAsSapProvider', 
                   'ns3::NrAsSapProvider *', 
                   [])
    ## nr-ue-rrc.h (module 'nr'): uint16_t ns3::NrUeRrc::GetCellId() const [member function]
    cls.add_method('GetCellId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-ue-rrc.h (module 'nr'): uint8_t ns3::NrUeRrc::GetDlBandwidth() const [member function]
    cls.add_method('GetDlBandwidth', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-ue-rrc.h (module 'nr'): uint16_t ns3::NrUeRrc::GetDlEarfcn() const [member function]
    cls.add_method('GetDlEarfcn', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-ue-rrc.h (module 'nr'): uint64_t ns3::NrUeRrc::GetImsi() const [member function]
    cls.add_method('GetImsi', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## nr-ue-rrc.h (module 'nr'): ns3::NrUeCmacSapUser * ns3::NrUeRrc::GetNrUeCmacSapUser() [member function]
    cls.add_method('GetNrUeCmacSapUser', 
                   'ns3::NrUeCmacSapUser *', 
                   [])
    ## nr-ue-rrc.h (module 'nr'): ns3::NrUeCphySapUser * ns3::NrUeRrc::GetNrUeCphySapUser() [member function]
    cls.add_method('GetNrUeCphySapUser', 
                   'ns3::NrUeCphySapUser *', 
                   [])
    ## nr-ue-rrc.h (module 'nr'): ns3::NrUeRrcSapProvider * ns3::NrUeRrc::GetNrUeRrcSapProvider() [member function]
    cls.add_method('GetNrUeRrcSapProvider', 
                   'ns3::NrUeRrcSapProvider *', 
                   [])
    ## nr-ue-rrc.h (module 'nr'): uint16_t ns3::NrUeRrc::GetRnti() const [member function]
    cls.add_method('GetRnti', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-ue-rrc.h (module 'nr'): ns3::NrUeRrc::State ns3::NrUeRrc::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::NrUeRrc::State', 
                   [], 
                   is_const=True)
    ## nr-ue-rrc.h (module 'nr'): static ns3::TypeId ns3::NrUeRrc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-ue-rrc.h (module 'nr'): uint8_t ns3::NrUeRrc::GetUlBandwidth() const [member function]
    cls.add_method('GetUlBandwidth', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-ue-rrc.h (module 'nr'): uint16_t ns3::NrUeRrc::GetUlEarfcn() const [member function]
    cls.add_method('GetUlEarfcn', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-ue-rrc.h (module 'nr'): void ns3::NrUeRrc::SetAsSapUser(ns3::NrAsSapUser * s) [member function]
    cls.add_method('SetAsSapUser', 
                   'void', 
                   [param('ns3::NrAsSapUser *', 's')])
    ## nr-ue-rrc.h (module 'nr'): void ns3::NrUeRrc::SetImsi(uint64_t imsi) [member function]
    cls.add_method('SetImsi', 
                   'void', 
                   [param('uint64_t', 'imsi')])
    ## nr-ue-rrc.h (module 'nr'): void ns3::NrUeRrc::SetNrMacSapProvider(ns3::NrMacSapProvider * s) [member function]
    cls.add_method('SetNrMacSapProvider', 
                   'void', 
                   [param('ns3::NrMacSapProvider *', 's')])
    ## nr-ue-rrc.h (module 'nr'): void ns3::NrUeRrc::SetNrUeCmacSapProvider(ns3::NrUeCmacSapProvider * s) [member function]
    cls.add_method('SetNrUeCmacSapProvider', 
                   'void', 
                   [param('ns3::NrUeCmacSapProvider *', 's')])
    ## nr-ue-rrc.h (module 'nr'): void ns3::NrUeRrc::SetNrUeCphySapProvider(ns3::NrUeCphySapProvider * s) [member function]
    cls.add_method('SetNrUeCphySapProvider', 
                   'void', 
                   [param('ns3::NrUeCphySapProvider *', 's')])
    ## nr-ue-rrc.h (module 'nr'): void ns3::NrUeRrc::SetNrUeRrcSapUser(ns3::NrUeRrcSapUser * s) [member function]
    cls.add_method('SetNrUeRrcSapUser', 
                   'void', 
                   [param('ns3::NrUeRrcSapUser *', 's')])
    ## nr-ue-rrc.h (module 'nr'): void ns3::NrUeRrc::SetUseRlcSm(bool val) [member function]
    cls.add_method('SetUseRlcSm', 
                   'void', 
                   [param('bool', 'val')])
    ## nr-ue-rrc.h (module 'nr'): void ns3::NrUeRrc::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='private', is_virtual=True)
    ## nr-ue-rrc.h (module 'nr'): void ns3::NrUeRrc::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='private', is_virtual=True)
    return

def register_Ns3NrUeRrcProtocolIdeal_methods(root_module, cls):
    ## nr-rrc-protocol-ideal.h (module 'nr'): ns3::NrUeRrcProtocolIdeal::NrUeRrcProtocolIdeal(ns3::NrUeRrcProtocolIdeal const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeRrcProtocolIdeal const &', 'arg0')])
    ## nr-rrc-protocol-ideal.h (module 'nr'): ns3::NrUeRrcProtocolIdeal::NrUeRrcProtocolIdeal() [constructor]
    cls.add_constructor([])
    ## nr-rrc-protocol-ideal.h (module 'nr'): void ns3::NrUeRrcProtocolIdeal::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rrc-protocol-ideal.h (module 'nr'): ns3::NrUeRrcSapUser * ns3::NrUeRrcProtocolIdeal::GetNrUeRrcSapUser() [member function]
    cls.add_method('GetNrUeRrcSapUser', 
                   'ns3::NrUeRrcSapUser *', 
                   [])
    ## nr-rrc-protocol-ideal.h (module 'nr'): static ns3::TypeId ns3::NrUeRrcProtocolIdeal::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-rrc-protocol-ideal.h (module 'nr'): void ns3::NrUeRrcProtocolIdeal::SetNrUeRrcSapProvider(ns3::NrUeRrcSapProvider * p) [member function]
    cls.add_method('SetNrUeRrcSapProvider', 
                   'void', 
                   [param('ns3::NrUeRrcSapProvider *', 'p')])
    ## nr-rrc-protocol-ideal.h (module 'nr'): void ns3::NrUeRrcProtocolIdeal::SetUeRrc(ns3::Ptr<ns3::NrUeRrc> rrc) [member function]
    cls.add_method('SetUeRrc', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrUeRrc >', 'rrc')])
    return

def register_Ns3NrUeRrcProtocolReal_methods(root_module, cls):
    ## nr-rrc-protocol-real.h (module 'nr'): ns3::NrUeRrcProtocolReal::NrUeRrcProtocolReal(ns3::NrUeRrcProtocolReal const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrUeRrcProtocolReal const &', 'arg0')])
    ## nr-rrc-protocol-real.h (module 'nr'): ns3::NrUeRrcProtocolReal::NrUeRrcProtocolReal() [constructor]
    cls.add_constructor([])
    ## nr-rrc-protocol-real.h (module 'nr'): void ns3::NrUeRrcProtocolReal::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rrc-protocol-real.h (module 'nr'): ns3::NrUeRrcSapUser * ns3::NrUeRrcProtocolReal::GetNrUeRrcSapUser() [member function]
    cls.add_method('GetNrUeRrcSapUser', 
                   'ns3::NrUeRrcSapUser *', 
                   [])
    ## nr-rrc-protocol-real.h (module 'nr'): static ns3::TypeId ns3::NrUeRrcProtocolReal::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-rrc-protocol-real.h (module 'nr'): void ns3::NrUeRrcProtocolReal::SetNrUeRrcSapProvider(ns3::NrUeRrcSapProvider * p) [member function]
    cls.add_method('SetNrUeRrcSapProvider', 
                   'void', 
                   [param('ns3::NrUeRrcSapProvider *', 'p')])
    ## nr-rrc-protocol-real.h (module 'nr'): void ns3::NrUeRrcProtocolReal::SetUeRrc(ns3::Ptr<ns3::NrUeRrc> rrc) [member function]
    cls.add_method('SetUeRrc', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrUeRrc >', 'rrc')])
    return

def register_Ns3Mac48AddressChecker_methods(root_module, cls):
    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker() [constructor]
    cls.add_constructor([])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker(ns3::Mac48AddressChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Mac48AddressChecker const &', 'arg0')])
    return

def register_Ns3Mac48AddressValue_methods(root_module, cls):
    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue() [constructor]
    cls.add_constructor([])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48AddressValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Mac48AddressValue const &', 'arg0')])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48Address const & value) [constructor]
    cls.add_constructor([param('ns3::Mac48Address const &', 'value')])
    ## mac48-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Mac48AddressValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mac48-address.h (module 'network'): bool ns3::Mac48AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## mac48-address.h (module 'network'): ns3::Mac48Address ns3::Mac48AddressValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Mac48Address', 
                   [], 
                   is_const=True)
    ## mac48-address.h (module 'network'): std::string ns3::Mac48AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## mac48-address.h (module 'network'): void ns3::Mac48AddressValue::Set(ns3::Mac48Address const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Mac48Address const &', 'value')])
    return

def register_Ns3NrMacStatsCalculator_methods(root_module, cls):
    ## nr-mac-stats-calculator.h (module 'nr'): ns3::NrMacStatsCalculator::NrMacStatsCalculator(ns3::NrMacStatsCalculator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrMacStatsCalculator const &', 'arg0')])
    ## nr-mac-stats-calculator.h (module 'nr'): ns3::NrMacStatsCalculator::NrMacStatsCalculator() [constructor]
    cls.add_constructor([])
    ## nr-mac-stats-calculator.h (module 'nr'): void ns3::NrMacStatsCalculator::DlScheduling(uint16_t cellId, uint64_t imsi, uint32_t frameNo, uint32_t subframeNo, uint16_t rnti, uint8_t mcsTb1, uint16_t sizeTb1, uint8_t mcsTb2, uint16_t sizeTb2) [member function]
    cls.add_method('DlScheduling', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo'), param('uint16_t', 'rnti'), param('uint8_t', 'mcsTb1'), param('uint16_t', 'sizeTb1'), param('uint8_t', 'mcsTb2'), param('uint16_t', 'sizeTb2')])
    ## nr-mac-stats-calculator.h (module 'nr'): static void ns3::NrMacStatsCalculator::DlSchedulingCallback(ns3::Ptr<ns3::NrMacStatsCalculator> macStats, std::string path, uint32_t frameNo, uint32_t subframeNo, uint16_t rnti, uint8_t mcsTb1, uint16_t sizeTb1, uint8_t mcsTb2, uint16_t sizeTb2) [member function]
    cls.add_method('DlSchedulingCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrMacStatsCalculator >', 'macStats'), param('std::string', 'path'), param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo'), param('uint16_t', 'rnti'), param('uint8_t', 'mcsTb1'), param('uint16_t', 'sizeTb1'), param('uint8_t', 'mcsTb2'), param('uint16_t', 'sizeTb2')], 
                   is_static=True)
    ## nr-mac-stats-calculator.h (module 'nr'): std::string ns3::NrMacStatsCalculator::GetDlOutputFilename() [member function]
    cls.add_method('GetDlOutputFilename', 
                   'std::string', 
                   [])
    ## nr-mac-stats-calculator.h (module 'nr'): static ns3::TypeId ns3::NrMacStatsCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-mac-stats-calculator.h (module 'nr'): std::string ns3::NrMacStatsCalculator::GetUlOutputFilename() [member function]
    cls.add_method('GetUlOutputFilename', 
                   'std::string', 
                   [])
    ## nr-mac-stats-calculator.h (module 'nr'): void ns3::NrMacStatsCalculator::SetDlOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetDlOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## nr-mac-stats-calculator.h (module 'nr'): void ns3::NrMacStatsCalculator::SetUlOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetUlOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## nr-mac-stats-calculator.h (module 'nr'): void ns3::NrMacStatsCalculator::UlScheduling(uint16_t cellId, uint64_t imsi, uint32_t frameNo, uint32_t subframeNo, uint16_t rnti, uint8_t mcsTb, uint16_t sizeTb) [member function]
    cls.add_method('UlScheduling', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo'), param('uint16_t', 'rnti'), param('uint8_t', 'mcsTb'), param('uint16_t', 'sizeTb')])
    ## nr-mac-stats-calculator.h (module 'nr'): static void ns3::NrMacStatsCalculator::UlSchedulingCallback(ns3::Ptr<ns3::NrMacStatsCalculator> macStats, std::string path, uint32_t frameNo, uint32_t subframeNo, uint16_t rnti, uint8_t mcs, uint16_t size) [member function]
    cls.add_method('UlSchedulingCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrMacStatsCalculator >', 'macStats'), param('std::string', 'path'), param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo'), param('uint16_t', 'rnti'), param('uint8_t', 'mcs'), param('uint16_t', 'size')], 
                   is_static=True)
    return

def register_Ns3MibNrControlMessage_methods(root_module, cls):
    ## nr-control-messages.h (module 'nr'): ns3::MibNrControlMessage::MibNrControlMessage(ns3::MibNrControlMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::MibNrControlMessage const &', 'arg0')])
    ## nr-control-messages.h (module 'nr'): ns3::MibNrControlMessage::MibNrControlMessage() [constructor]
    cls.add_constructor([])
    ## nr-control-messages.h (module 'nr'): ns3::NrRrcSap::MasterInformationBlock ns3::MibNrControlMessage::GetMib() const [member function]
    cls.add_method('GetMib', 
                   'ns3::NrRrcSap::MasterInformationBlock', 
                   [], 
                   is_const=True)
    ## nr-control-messages.h (module 'nr'): void ns3::MibNrControlMessage::SetMib(ns3::NrRrcSap::MasterInformationBlock mib) [member function]
    cls.add_method('SetMib', 
                   'void', 
                   [param('ns3::NrRrcSap::MasterInformationBlock', 'mib')])
    return

def register_Ns3MobilityModel_methods(root_module, cls):
    ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel(ns3::MobilityModel const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::MobilityModel const &', 'arg0')])
    ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel() [constructor]
    cls.add_constructor([])
    ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')])
    ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetDistanceFrom(ns3::Ptr<const ns3::MobilityModel> position) const [member function]
    cls.add_method('GetDistanceFrom', 
                   'double', 
                   [param('ns3::Ptr< ns3::MobilityModel const >', 'position')], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetPosition() const [member function]
    cls.add_method('GetPosition', 
                   'ns3::Vector', 
                   [], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetRelativeSpeed(ns3::Ptr<const ns3::MobilityModel> other) const [member function]
    cls.add_method('GetRelativeSpeed', 
                   'double', 
                   [param('ns3::Ptr< ns3::MobilityModel const >', 'other')], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): static ns3::TypeId ns3::MobilityModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetVelocity() const [member function]
    cls.add_method('GetVelocity', 
                   'ns3::Vector', 
                   [], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::SetPosition(ns3::Vector const & position) [member function]
    cls.add_method('SetPosition', 
                   'void', 
                   [param('ns3::Vector const &', 'position')])
    ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::NotifyCourseChange() const [member function]
    cls.add_method('NotifyCourseChange', 
                   'void', 
                   [], 
                   is_const=True, visibility='protected')
    ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::DoAssignStreams(int64_t start) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'start')], 
                   visibility='private', is_virtual=True)
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetPosition() const [member function]
    cls.add_method('DoGetPosition', 
                   'ns3::Vector', 
                   [], 
                   is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetVelocity() const [member function]
    cls.add_method('DoGetVelocity', 
                   'ns3::Vector', 
                   [], 
                   is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
    ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::DoSetPosition(ns3::Vector const & position) [member function]
    cls.add_method('DoSetPosition', 
                   'void', 
                   [param('ns3::Vector const &', 'position')], 
                   is_pure_virtual=True, visibility='private', is_virtual=True)
    return

def register_Ns3NetDevice_methods(root_module, cls):
    ## net-device.h (module 'network'): ns3::NetDevice::NetDevice() [constructor]
    cls.add_constructor([])
    ## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NetDevice const &', 'arg0')])
    ## net-device.h (module 'network'): void ns3::NetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
    cls.add_method('AddLinkChangeCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetAddress() const [member function]
    cls.add_method('GetAddress', 
                   'ns3::Address', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetBroadcast() const [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Address', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Ptr<ns3::Channel> ns3::NetDevice::GetChannel() const [member function]
    cls.add_method('GetChannel', 
                   'ns3::Ptr< ns3::Channel >', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): uint32_t ns3::NetDevice::GetIfIndex() const [member function]
    cls.add_method('GetIfIndex', 
                   'uint32_t', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): uint16_t ns3::NetDevice::GetMtu() const [member function]
    cls.add_method('GetMtu', 
                   'uint16_t', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetMulticast(ns3::Ipv4Address multicastGroup) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv4Address', 'multicastGroup')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetMulticast(ns3::Ipv6Address addr) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv6Address', 'addr')], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Ptr<ns3::Node> ns3::NetDevice::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): static ns3::TypeId ns3::NetDevice::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsBridge() const [member function]
    cls.add_method('IsBridge', 
                   'bool', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsLinkUp() const [member function]
    cls.add_method('IsLinkUp', 
                   'bool', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsPointToPoint() const [member function]
    cls.add_method('IsPointToPoint', 
                   'bool', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::NeedsArp() const [member function]
    cls.add_method('NeedsArp', 
                   'bool', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::Send(ns3::Ptr<ns3::Packet> packet, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('Send', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::SendFrom(ns3::Ptr<ns3::Packet> packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('SendFrom', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'source'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetAddress(ns3::Address address) [member function]
    cls.add_method('SetAddress', 
                   'void', 
                   [param('ns3::Address', 'address')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetIfIndex(uint32_t const index) [member function]
    cls.add_method('SetIfIndex', 
                   'void', 
                   [param('uint32_t const', 'index')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::SetMtu(uint16_t const mtu) [member function]
    cls.add_method('SetMtu', 
                   'bool', 
                   [param('uint16_t const', 'mtu')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
    cls.add_method('SetPromiscReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
    cls.add_method('SetReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::SupportsSendFrom() const [member function]
    cls.add_method('SupportsSendFrom', 
                   'bool', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    return

def register_Ns3NixVector_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## nix-vector.h (module 'network'): ns3::NixVector::NixVector() [constructor]
    cls.add_constructor([])
    ## nix-vector.h (module 'network'): ns3::NixVector::NixVector(ns3::NixVector const & o) [copy constructor]
    cls.add_constructor([param('ns3::NixVector const &', 'o')])
    ## nix-vector.h (module 'network'): void ns3::NixVector::AddNeighborIndex(uint32_t newBits, uint32_t numberOfBits) [member function]
    cls.add_method('AddNeighborIndex', 
                   'void', 
                   [param('uint32_t', 'newBits'), param('uint32_t', 'numberOfBits')])
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::BitCount(uint32_t numberOfNeighbors) const [member function]
    cls.add_method('BitCount', 
                   'uint32_t', 
                   [param('uint32_t', 'numberOfNeighbors')], 
                   is_const=True)
    ## nix-vector.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::NixVector::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::NixVector >', 
                   [], 
                   is_const=True)
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::ExtractNeighborIndex(uint32_t numberOfBits) [member function]
    cls.add_method('ExtractNeighborIndex', 
                   'uint32_t', 
                   [param('uint32_t', 'numberOfBits')])
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetRemainingBits() [member function]
    cls.add_method('GetRemainingBits', 
                   'uint32_t', 
                   [])
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    return

def register_Ns3NrNoOpHandoverAlgorithm_methods(root_module, cls):
    ## no-op-handover-algorithm.h (module 'nr'): ns3::NrNoOpHandoverAlgorithm::NrNoOpHandoverAlgorithm(ns3::NrNoOpHandoverAlgorithm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrNoOpHandoverAlgorithm const &', 'arg0')])
    ## no-op-handover-algorithm.h (module 'nr'): ns3::NrNoOpHandoverAlgorithm::NrNoOpHandoverAlgorithm() [constructor]
    cls.add_constructor([])
    ## no-op-handover-algorithm.h (module 'nr'): ns3::NrHandoverManagementSapProvider * ns3::NrNoOpHandoverAlgorithm::GetNrHandoverManagementSapProvider() [member function]
    cls.add_method('GetNrHandoverManagementSapProvider', 
                   'ns3::NrHandoverManagementSapProvider *', 
                   [], 
                   is_virtual=True)
    ## no-op-handover-algorithm.h (module 'nr'): static ns3::TypeId ns3::NrNoOpHandoverAlgorithm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## no-op-handover-algorithm.h (module 'nr'): void ns3::NrNoOpHandoverAlgorithm::SetNrHandoverManagementSapUser(ns3::NrHandoverManagementSapUser * s) [member function]
    cls.add_method('SetNrHandoverManagementSapUser', 
                   'void', 
                   [param('ns3::NrHandoverManagementSapUser *', 's')], 
                   is_virtual=True)
    ## no-op-handover-algorithm.h (module 'nr'): void ns3::NrNoOpHandoverAlgorithm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## no-op-handover-algorithm.h (module 'nr'): void ns3::NrNoOpHandoverAlgorithm::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## no-op-handover-algorithm.h (module 'nr'): void ns3::NrNoOpHandoverAlgorithm::DoReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('DoReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3Node_methods(root_module, cls):
    ## node.h (module 'network'): ns3::Node::Node(ns3::Node const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Node const &', 'arg0')])
    ## node.h (module 'network'): ns3::Node::Node() [constructor]
    cls.add_constructor([])
    ## node.h (module 'network'): ns3::Node::Node(uint32_t systemId) [constructor]
    cls.add_constructor([param('uint32_t', 'systemId')])
    ## node.h (module 'network'): uint32_t ns3::Node::AddApplication(ns3::Ptr<ns3::Application> application) [member function]
    cls.add_method('AddApplication', 
                   'uint32_t', 
                   [param('ns3::Ptr< ns3::Application >', 'application')])
    ## node.h (module 'network'): uint32_t ns3::Node::AddDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
    cls.add_method('AddDevice', 
                   'uint32_t', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'device')])
    ## node.h (module 'network'): static bool ns3::Node::ChecksumEnabled() [member function]
    cls.add_method('ChecksumEnabled', 
                   'bool', 
                   [], 
                   is_static=True)
    ## node.h (module 'network'): ns3::Ptr<ns3::Application> ns3::Node::GetApplication(uint32_t index) const [member function]
    cls.add_method('GetApplication', 
                   'ns3::Ptr< ns3::Application >', 
                   [param('uint32_t', 'index')], 
                   is_const=True)
    ## node.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Node::GetDevice(uint32_t index) const [member function]
    cls.add_method('GetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [param('uint32_t', 'index')], 
                   is_const=True)
    ## node.h (module 'network'): uint32_t ns3::Node::GetId() const [member function]
    cls.add_method('GetId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): uint32_t ns3::Node::GetNApplications() const [member function]
    cls.add_method('GetNApplications', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): uint32_t ns3::Node::GetNDevices() const [member function]
    cls.add_method('GetNDevices', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): uint32_t ns3::Node::GetSystemId() const [member function]
    cls.add_method('GetSystemId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): static ns3::TypeId ns3::Node::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## node.h (module 'network'): void ns3::Node::RegisterDeviceAdditionListener(ns3::Callback<void,ns3::Ptr<ns3::NetDevice>,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> listener) [member function]
    cls.add_method('RegisterDeviceAdditionListener', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'listener')])
    ## node.h (module 'network'): void ns3::Node::RegisterProtocolHandler(ns3::Callback<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device, bool promiscuous=false) [member function]
    cls.add_method('RegisterProtocolHandler', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'handler'), param('uint16_t', 'protocolType'), param('ns3::Ptr< ns3::NetDevice >', 'device'), param('bool', 'promiscuous', default_value='false')])
    ## node.h (module 'network'): void ns3::Node::UnregisterDeviceAdditionListener(ns3::Callback<void,ns3::Ptr<ns3::NetDevice>,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> listener) [member function]
    cls.add_method('UnregisterDeviceAdditionListener', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'listener')])
    ## node.h (module 'network'): void ns3::Node::UnregisterProtocolHandler(ns3::Callback<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> handler) [member function]
    cls.add_method('UnregisterProtocolHandler', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'handler')])
    ## node.h (module 'network'): void ns3::Node::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## node.h (module 'network'): void ns3::Node::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NormalRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): ns3::NormalRandomVariable::INFINITE_VALUE [variable]
    cls.add_static_attribute('INFINITE_VALUE', 'double const', is_const=True)
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::NormalRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::NormalRandomVariable::NormalRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetMean() const [member function]
    cls.add_method('GetMean', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetVariance() const [member function]
    cls.add_method('GetVariance', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetBound() const [member function]
    cls.add_method('GetBound', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetValue(double mean, double variance, double bound=ns3::NormalRandomVariable::INFINITE_VALUE) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'mean'), param('double', 'variance'), param('double', 'bound', default_value='ns3::NormalRandomVariable::INFINITE_VALUE')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::NormalRandomVariable::GetInteger(uint32_t mean, uint32_t variance, uint32_t bound) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'mean'), param('uint32_t', 'variance'), param('uint32_t', 'bound')])
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::NormalRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3ObjectFactoryChecker_methods(root_module, cls):
    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker() [constructor]
    cls.add_constructor([])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker(ns3::ObjectFactoryChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::ObjectFactoryChecker const &', 'arg0')])
    return

def register_Ns3ObjectFactoryValue_methods(root_module, cls):
    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue() [constructor]
    cls.add_constructor([])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactoryValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::ObjectFactoryValue const &', 'arg0')])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactory const & value) [constructor]
    cls.add_constructor([param('ns3::ObjectFactory const &', 'value')])
    ## object-factory.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::ObjectFactoryValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## object-factory.h (module 'core'): bool ns3::ObjectFactoryValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## object-factory.h (module 'core'): ns3::ObjectFactory ns3::ObjectFactoryValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::ObjectFactory', 
                   [], 
                   is_const=True)
    ## object-factory.h (module 'core'): std::string ns3::ObjectFactoryValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## object-factory.h (module 'core'): void ns3::ObjectFactoryValue::Set(ns3::ObjectFactory const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::ObjectFactory const &', 'value')])
    return

def register_Ns3Packet_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## packet.h (module 'network'): ns3::Packet::Packet() [constructor]
    cls.add_constructor([])
    ## packet.h (module 'network'): ns3::Packet::Packet(ns3::Packet const & o) [copy constructor]
    cls.add_constructor([param('ns3::Packet const &', 'o')])
    ## packet.h (module 'network'): ns3::Packet::Packet(uint32_t size) [constructor]
    cls.add_constructor([param('uint32_t', 'size')])
    ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size, bool magic) [constructor]
    cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size'), param('bool', 'magic')])
    ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size) [constructor]
    cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## packet.h (module 'network'): void ns3::Packet::AddAtEnd(ns3::Ptr<const ns3::Packet> packet) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet const >', 'packet')])
    ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag) const [member function]
    cls.add_method('AddByteTag', 
                   'void', 
                   [param('ns3::Tag const &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::AddHeader(ns3::Header const & header) [member function]
    cls.add_method('AddHeader', 
                   'void', 
                   [param('ns3::Header const &', 'header')])
    ## packet.h (module 'network'): void ns3::Packet::AddPacketTag(ns3::Tag const & tag) const [member function]
    cls.add_method('AddPacketTag', 
                   'void', 
                   [param('ns3::Tag const &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::AddPaddingAtEnd(uint32_t size) [member function]
    cls.add_method('AddPaddingAtEnd', 
                   'void', 
                   [param('uint32_t', 'size')])
    ## packet.h (module 'network'): void ns3::Packet::AddTrailer(ns3::Trailer const & trailer) [member function]
    cls.add_method('AddTrailer', 
                   'void', 
                   [param('ns3::Trailer const &', 'trailer')])
    ## packet.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::Packet::BeginItem() const [member function]
    cls.add_method('BeginItem', 
                   'ns3::PacketMetadata::ItemIterator', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::Packet >', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::CopyData(uint8_t * buffer, uint32_t size) const [member function]
    cls.add_method('CopyData', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::CopyData(std::ostream * os, uint32_t size) const [member function]
    cls.add_method('CopyData', 
                   'void', 
                   [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::CreateFragment(uint32_t start, uint32_t length) const [member function]
    cls.add_method('CreateFragment', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('uint32_t', 'start'), param('uint32_t', 'length')], 
                   is_const=True)
    ## packet.h (module 'network'): static void ns3::Packet::EnableChecking() [member function]
    cls.add_method('EnableChecking', 
                   'void', 
                   [], 
                   is_static=True)
    ## packet.h (module 'network'): static void ns3::Packet::EnablePrinting() [member function]
    cls.add_method('EnablePrinting', 
                   'void', 
                   [], 
                   is_static=True)
    ## packet.h (module 'network'): bool ns3::Packet::FindFirstMatchingByteTag(ns3::Tag & tag) const [member function]
    cls.add_method('FindFirstMatchingByteTag', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::ByteTagIterator ns3::Packet::GetByteTagIterator() const [member function]
    cls.add_method('GetByteTagIterator', 
                   'ns3::ByteTagIterator', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::Packet::GetNixVector() const [member function]
    cls.add_method('GetNixVector', 
                   'ns3::Ptr< ns3::NixVector >', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::PacketTagIterator ns3::Packet::GetPacketTagIterator() const [member function]
    cls.add_method('GetPacketTagIterator', 
                   'ns3::PacketTagIterator', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint64_t ns3::Packet::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header) const [member function]
    cls.add_method('PeekHeader', 
                   'uint32_t', 
                   [param('ns3::Header &', 'header')], 
                   is_const=True)
    ## packet.h (module 'network'): bool ns3::Packet::PeekPacketTag(ns3::Tag & tag) const [member function]
    cls.add_method('PeekPacketTag', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekTrailer(ns3::Trailer & trailer) [member function]
    cls.add_method('PeekTrailer', 
                   'uint32_t', 
                   [param('ns3::Trailer &', 'trailer')])
    ## packet.h (module 'network'): void ns3::Packet::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::PrintByteTags(std::ostream & os) const [member function]
    cls.add_method('PrintByteTags', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::PrintPacketTags(std::ostream & os) const [member function]
    cls.add_method('PrintPacketTags', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::RemoveAllByteTags() [member function]
    cls.add_method('RemoveAllByteTags', 
                   'void', 
                   [])
    ## packet.h (module 'network'): void ns3::Packet::RemoveAllPacketTags() [member function]
    cls.add_method('RemoveAllPacketTags', 
                   'void', 
                   [])
    ## packet.h (module 'network'): void ns3::Packet::RemoveAtEnd(uint32_t size) [member function]
    cls.add_method('RemoveAtEnd', 
                   'void', 
                   [param('uint32_t', 'size')])
    ## packet.h (module 'network'): void ns3::Packet::RemoveAtStart(uint32_t size) [member function]
    cls.add_method('RemoveAtStart', 
                   'void', 
                   [param('uint32_t', 'size')])
    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header) [member function]
    cls.add_method('RemoveHeader', 
                   'uint32_t', 
                   [param('ns3::Header &', 'header')])
    ## packet.h (module 'network'): bool ns3::Packet::RemovePacketTag(ns3::Tag & tag) [member function]
    cls.add_method('RemovePacketTag', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')])
    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveTrailer(ns3::Trailer & trailer) [member function]
    cls.add_method('RemoveTrailer', 
                   'uint32_t', 
                   [param('ns3::Trailer &', 'trailer')])
    ## packet.h (module 'network'): bool ns3::Packet::ReplacePacketTag(ns3::Tag & tag) [member function]
    cls.add_method('ReplacePacketTag', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')])
    ## packet.h (module 'network'): uint32_t ns3::Packet::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::SetNixVector(ns3::Ptr<ns3::NixVector> nixVector) [member function]
    cls.add_method('SetNixVector', 
                   'void', 
                   [param('ns3::Ptr< ns3::NixVector >', 'nixVector')])
    ## packet.h (module 'network'): std::string ns3::Packet::ToString() const [member function]
    cls.add_method('ToString', 
                   'std::string', 
                   [], 
                   is_const=True)
    return

def register_Ns3ParetoRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ParetoRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ParetoRandomVariable::ParetoRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetMean() const [member function]
    cls.add_method('GetMean', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetShape() const [member function]
    cls.add_method('GetShape', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetBound() const [member function]
    cls.add_method('GetBound', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue(double mean, double shape, double bound) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'mean'), param('double', 'shape'), param('double', 'bound')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger(uint32_t mean, uint32_t shape, uint32_t bound) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'mean'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3NrPfFfMacScheduler_methods(root_module, cls):
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): ns3::NrPfFfMacScheduler::NrPfFfMacScheduler(ns3::NrPfFfMacScheduler const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPfFfMacScheduler const &', 'arg0')])
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): ns3::NrPfFfMacScheduler::NrPfFfMacScheduler() [constructor]
    cls.add_constructor([])
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): void ns3::NrPfFfMacScheduler::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): ns3::FfMacCschedSapProvider * ns3::NrPfFfMacScheduler::GetFfMacCschedSapProvider() [member function]
    cls.add_method('GetFfMacCschedSapProvider', 
                   'ns3::FfMacCschedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): ns3::FfMacSchedSapProvider * ns3::NrPfFfMacScheduler::GetFfMacSchedSapProvider() [member function]
    cls.add_method('GetFfMacSchedSapProvider', 
                   'ns3::FfMacSchedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): ns3::NrFfrSapUser * ns3::NrPfFfMacScheduler::GetNrFfrSapUser() [member function]
    cls.add_method('GetNrFfrSapUser', 
                   'ns3::NrFfrSapUser *', 
                   [], 
                   is_virtual=True)
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): static ns3::TypeId ns3::NrPfFfMacScheduler::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): void ns3::NrPfFfMacScheduler::SetFfMacCschedSapUser(ns3::FfMacCschedSapUser * s) [member function]
    cls.add_method('SetFfMacCschedSapUser', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): void ns3::NrPfFfMacScheduler::SetFfMacSchedSapUser(ns3::FfMacSchedSapUser * s) [member function]
    cls.add_method('SetFfMacSchedSapUser', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): void ns3::NrPfFfMacScheduler::SetNrFfrSapProvider(ns3::NrFfrSapProvider * s) [member function]
    cls.add_method('SetNrFfrSapProvider', 
                   'void', 
                   [param('ns3::NrFfrSapProvider *', 's')], 
                   is_virtual=True)
    ## nr-pf-ff-mac-scheduler.h (module 'nr'): void ns3::NrPfFfMacScheduler::TransmissionModeConfigurationUpdate(uint16_t rnti, uint8_t txMode) [member function]
    cls.add_method('TransmissionModeConfigurationUpdate', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'txMode')])
    return

def register_Ns3NrPhyRxStatsCalculator_methods(root_module, cls):
    ## nr-phy-rx-stats-calculator.h (module 'nr'): ns3::NrPhyRxStatsCalculator::NrPhyRxStatsCalculator(ns3::NrPhyRxStatsCalculator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPhyRxStatsCalculator const &', 'arg0')])
    ## nr-phy-rx-stats-calculator.h (module 'nr'): ns3::NrPhyRxStatsCalculator::NrPhyRxStatsCalculator() [constructor]
    cls.add_constructor([])
    ## nr-phy-rx-stats-calculator.h (module 'nr'): void ns3::NrPhyRxStatsCalculator::DlPhyReception(ns3::NrPhyReceptionStatParameters params) [member function]
    cls.add_method('DlPhyReception', 
                   'void', 
                   [param('ns3::NrPhyReceptionStatParameters', 'params')])
    ## nr-phy-rx-stats-calculator.h (module 'nr'): static void ns3::NrPhyRxStatsCalculator::DlPhyReceptionCallback(ns3::Ptr<ns3::NrPhyRxStatsCalculator> phyRxStats, std::string path, ns3::NrPhyReceptionStatParameters params) [member function]
    cls.add_method('DlPhyReceptionCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrPhyRxStatsCalculator >', 'phyRxStats'), param('std::string', 'path'), param('ns3::NrPhyReceptionStatParameters', 'params')], 
                   is_static=True)
    ## nr-phy-rx-stats-calculator.h (module 'nr'): std::string ns3::NrPhyRxStatsCalculator::GetDlRxOutputFilename() [member function]
    cls.add_method('GetDlRxOutputFilename', 
                   'std::string', 
                   [])
    ## nr-phy-rx-stats-calculator.h (module 'nr'): static ns3::TypeId ns3::NrPhyRxStatsCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-phy-rx-stats-calculator.h (module 'nr'): std::string ns3::NrPhyRxStatsCalculator::GetUlRxOutputFilename() [member function]
    cls.add_method('GetUlRxOutputFilename', 
                   'std::string', 
                   [])
    ## nr-phy-rx-stats-calculator.h (module 'nr'): void ns3::NrPhyRxStatsCalculator::SetDlRxOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetDlRxOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## nr-phy-rx-stats-calculator.h (module 'nr'): void ns3::NrPhyRxStatsCalculator::SetUlRxOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetUlRxOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## nr-phy-rx-stats-calculator.h (module 'nr'): void ns3::NrPhyRxStatsCalculator::UlPhyReception(ns3::NrPhyReceptionStatParameters params) [member function]
    cls.add_method('UlPhyReception', 
                   'void', 
                   [param('ns3::NrPhyReceptionStatParameters', 'params')])
    ## nr-phy-rx-stats-calculator.h (module 'nr'): static void ns3::NrPhyRxStatsCalculator::UlPhyReceptionCallback(ns3::Ptr<ns3::NrPhyRxStatsCalculator> phyRxStats, std::string path, ns3::NrPhyReceptionStatParameters params) [member function]
    cls.add_method('UlPhyReceptionCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrPhyRxStatsCalculator >', 'phyRxStats'), param('std::string', 'path'), param('ns3::NrPhyReceptionStatParameters', 'params')], 
                   is_static=True)
    return

def register_Ns3NrPhyStatsCalculator_methods(root_module, cls):
    ## nr-phy-stats-calculator.h (module 'nr'): ns3::NrPhyStatsCalculator::NrPhyStatsCalculator(ns3::NrPhyStatsCalculator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPhyStatsCalculator const &', 'arg0')])
    ## nr-phy-stats-calculator.h (module 'nr'): ns3::NrPhyStatsCalculator::NrPhyStatsCalculator() [constructor]
    cls.add_constructor([])
    ## nr-phy-stats-calculator.h (module 'nr'): std::string ns3::NrPhyStatsCalculator::GetCurrentCellRsrpSinrFilename() [member function]
    cls.add_method('GetCurrentCellRsrpSinrFilename', 
                   'std::string', 
                   [])
    ## nr-phy-stats-calculator.h (module 'nr'): std::string ns3::NrPhyStatsCalculator::GetInterferenceFilename() [member function]
    cls.add_method('GetInterferenceFilename', 
                   'std::string', 
                   [])
    ## nr-phy-stats-calculator.h (module 'nr'): static ns3::TypeId ns3::NrPhyStatsCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-phy-stats-calculator.h (module 'nr'): std::string ns3::NrPhyStatsCalculator::GetUeSinrFilename() [member function]
    cls.add_method('GetUeSinrFilename', 
                   'std::string', 
                   [])
    ## nr-phy-stats-calculator.h (module 'nr'): void ns3::NrPhyStatsCalculator::ReportCurrentCellRsrpSinr(uint16_t cellId, uint64_t imsi, uint16_t rnti, double rsrp, double sinr) [member function]
    cls.add_method('ReportCurrentCellRsrpSinr', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('double', 'rsrp'), param('double', 'sinr')])
    ## nr-phy-stats-calculator.h (module 'nr'): static void ns3::NrPhyStatsCalculator::ReportCurrentCellRsrpSinrCallback(ns3::Ptr<ns3::NrPhyStatsCalculator> phyStats, std::string path, uint16_t cellId, uint16_t rnti, double rsrp, double sinr) [member function]
    cls.add_method('ReportCurrentCellRsrpSinrCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrPhyStatsCalculator >', 'phyStats'), param('std::string', 'path'), param('uint16_t', 'cellId'), param('uint16_t', 'rnti'), param('double', 'rsrp'), param('double', 'sinr')], 
                   is_static=True)
    ## nr-phy-stats-calculator.h (module 'nr'): void ns3::NrPhyStatsCalculator::ReportInterference(uint16_t cellId, ns3::Ptr<ns3::SpectrumValue> interference) [member function]
    cls.add_method('ReportInterference', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('ns3::Ptr< ns3::SpectrumValue >', 'interference')])
    ## nr-phy-stats-calculator.h (module 'nr'): static void ns3::NrPhyStatsCalculator::ReportInterference(ns3::Ptr<ns3::NrPhyStatsCalculator> phyStats, std::string path, uint16_t cellId, ns3::Ptr<ns3::SpectrumValue> interference) [member function]
    cls.add_method('ReportInterference', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrPhyStatsCalculator >', 'phyStats'), param('std::string', 'path'), param('uint16_t', 'cellId'), param('ns3::Ptr< ns3::SpectrumValue >', 'interference')], 
                   is_static=True)
    ## nr-phy-stats-calculator.h (module 'nr'): void ns3::NrPhyStatsCalculator::ReportUeSinr(uint16_t cellId, uint64_t imsi, uint16_t rnti, double sinrLinear) [member function]
    cls.add_method('ReportUeSinr', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('double', 'sinrLinear')])
    ## nr-phy-stats-calculator.h (module 'nr'): static void ns3::NrPhyStatsCalculator::ReportUeSinr(ns3::Ptr<ns3::NrPhyStatsCalculator> phyStats, std::string path, uint16_t cellId, uint16_t rnti, double sinrLinear) [member function]
    cls.add_method('ReportUeSinr', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrPhyStatsCalculator >', 'phyStats'), param('std::string', 'path'), param('uint16_t', 'cellId'), param('uint16_t', 'rnti'), param('double', 'sinrLinear')], 
                   is_static=True)
    ## nr-phy-stats-calculator.h (module 'nr'): void ns3::NrPhyStatsCalculator::SetCurrentCellRsrpSinrFilename(std::string filename) [member function]
    cls.add_method('SetCurrentCellRsrpSinrFilename', 
                   'void', 
                   [param('std::string', 'filename')])
    ## nr-phy-stats-calculator.h (module 'nr'): void ns3::NrPhyStatsCalculator::SetInterferenceFilename(std::string filename) [member function]
    cls.add_method('SetInterferenceFilename', 
                   'void', 
                   [param('std::string', 'filename')])
    ## nr-phy-stats-calculator.h (module 'nr'): void ns3::NrPhyStatsCalculator::SetUeSinrFilename(std::string filename) [member function]
    cls.add_method('SetUeSinrFilename', 
                   'void', 
                   [param('std::string', 'filename')])
    return

def register_Ns3NrPhyTxStatsCalculator_methods(root_module, cls):
    ## nr-phy-tx-stats-calculator.h (module 'nr'): ns3::NrPhyTxStatsCalculator::NrPhyTxStatsCalculator(ns3::NrPhyTxStatsCalculator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPhyTxStatsCalculator const &', 'arg0')])
    ## nr-phy-tx-stats-calculator.h (module 'nr'): ns3::NrPhyTxStatsCalculator::NrPhyTxStatsCalculator() [constructor]
    cls.add_constructor([])
    ## nr-phy-tx-stats-calculator.h (module 'nr'): void ns3::NrPhyTxStatsCalculator::DlPhyTransmission(ns3::NrPhyTransmissionStatParameters params) [member function]
    cls.add_method('DlPhyTransmission', 
                   'void', 
                   [param('ns3::NrPhyTransmissionStatParameters', 'params')])
    ## nr-phy-tx-stats-calculator.h (module 'nr'): static void ns3::NrPhyTxStatsCalculator::DlPhyTransmissionCallback(ns3::Ptr<ns3::NrPhyTxStatsCalculator> phyTxStats, std::string path, ns3::NrPhyTransmissionStatParameters params) [member function]
    cls.add_method('DlPhyTransmissionCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrPhyTxStatsCalculator >', 'phyTxStats'), param('std::string', 'path'), param('ns3::NrPhyTransmissionStatParameters', 'params')], 
                   is_static=True)
    ## nr-phy-tx-stats-calculator.h (module 'nr'): std::string ns3::NrPhyTxStatsCalculator::GetDlTxOutputFilename() [member function]
    cls.add_method('GetDlTxOutputFilename', 
                   'std::string', 
                   [])
    ## nr-phy-tx-stats-calculator.h (module 'nr'): static ns3::TypeId ns3::NrPhyTxStatsCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-phy-tx-stats-calculator.h (module 'nr'): std::string ns3::NrPhyTxStatsCalculator::GetUlTxOutputFilename() [member function]
    cls.add_method('GetUlTxOutputFilename', 
                   'std::string', 
                   [])
    ## nr-phy-tx-stats-calculator.h (module 'nr'): void ns3::NrPhyTxStatsCalculator::SetDlTxOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetDlTxOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## nr-phy-tx-stats-calculator.h (module 'nr'): void ns3::NrPhyTxStatsCalculator::SetUlTxOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetUlTxOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## nr-phy-tx-stats-calculator.h (module 'nr'): void ns3::NrPhyTxStatsCalculator::UlPhyTransmission(ns3::NrPhyTransmissionStatParameters params) [member function]
    cls.add_method('UlPhyTransmission', 
                   'void', 
                   [param('ns3::NrPhyTransmissionStatParameters', 'params')])
    ## nr-phy-tx-stats-calculator.h (module 'nr'): static void ns3::NrPhyTxStatsCalculator::UlPhyTransmissionCallback(ns3::Ptr<ns3::NrPhyTxStatsCalculator> phyTxStats, std::string path, ns3::NrPhyTransmissionStatParameters params) [member function]
    cls.add_method('UlPhyTransmissionCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrPhyTxStatsCalculator >', 'phyTxStats'), param('std::string', 'path'), param('ns3::NrPhyTransmissionStatParameters', 'params')], 
                   is_static=True)
    return

def register_Ns3PointToPointNgcHelper_methods(root_module, cls):
    ## point-to-point-ngc-helper.h (module 'nr'): ns3::PointToPointNgcHelper::PointToPointNgcHelper(ns3::PointToPointNgcHelper const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::PointToPointNgcHelper const &', 'arg0')])
    ## point-to-point-ngc-helper.h (module 'nr'): ns3::PointToPointNgcHelper::PointToPointNgcHelper() [constructor]
    cls.add_constructor([])
    ## point-to-point-ngc-helper.h (module 'nr'): uint8_t ns3::PointToPointNgcHelper::ActivateEpsBearer(ns3::Ptr<ns3::NetDevice> ueNrDevice, uint64_t imsi, ns3::Ptr<ns3::NgcTft> tft, ns3::EpsBearer bearer) [member function]
    cls.add_method('ActivateEpsBearer', 
                   'uint8_t', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueNrDevice'), param('uint64_t', 'imsi'), param('ns3::Ptr< ns3::NgcTft >', 'tft'), param('ns3::EpsBearer', 'bearer')], 
                   is_virtual=True)
    ## point-to-point-ngc-helper.h (module 'nr'): void ns3::PointToPointNgcHelper::AddEnb(ns3::Ptr<ns3::Node> enbNode, ns3::Ptr<ns3::NetDevice> nrEnbNetDevice, uint16_t cellId) [member function]
    cls.add_method('AddEnb', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'enbNode'), param('ns3::Ptr< ns3::NetDevice >', 'nrEnbNetDevice'), param('uint16_t', 'cellId')], 
                   is_virtual=True)
    ## point-to-point-ngc-helper.h (module 'nr'): void ns3::PointToPointNgcHelper::AddUe(ns3::Ptr<ns3::NetDevice> ueNrDevice, uint64_t imsi) [member function]
    cls.add_method('AddUe', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueNrDevice'), param('uint64_t', 'imsi')], 
                   is_virtual=True)
    ## point-to-point-ngc-helper.h (module 'nr'): void ns3::PointToPointNgcHelper::AddX2Interface(ns3::Ptr<ns3::Node> enbNode1, ns3::Ptr<ns3::Node> enbNode2) [member function]
    cls.add_method('AddX2Interface', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'enbNode1'), param('ns3::Ptr< ns3::Node >', 'enbNode2')], 
                   is_virtual=True)
    ## point-to-point-ngc-helper.h (module 'nr'): ns3::Ipv4InterfaceContainer ns3::PointToPointNgcHelper::AssignUeIpv4Address(ns3::NetDeviceContainer ueDevices) [member function]
    cls.add_method('AssignUeIpv4Address', 
                   'ns3::Ipv4InterfaceContainer', 
                   [param('ns3::NetDeviceContainer', 'ueDevices')], 
                   is_virtual=True)
    ## point-to-point-ngc-helper.h (module 'nr'): void ns3::PointToPointNgcHelper::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## point-to-point-ngc-helper.h (module 'nr'): ns3::Ptr<ns3::Node> ns3::PointToPointNgcHelper::GetUpfNode() [member function]
    cls.add_method('GetUpfNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_virtual=True)
    ## point-to-point-ngc-helper.h (module 'nr'): static ns3::TypeId ns3::PointToPointNgcHelper::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## point-to-point-ngc-helper.h (module 'nr'): ns3::Ipv4Address ns3::PointToPointNgcHelper::GetUeDefaultGatewayAddress() [member function]
    cls.add_method('GetUeDefaultGatewayAddress', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3PointerChecker_methods(root_module, cls):
    ## pointer.h (module 'core'): ns3::PointerChecker::PointerChecker() [constructor]
    cls.add_constructor([])
    ## pointer.h (module 'core'): ns3::PointerChecker::PointerChecker(ns3::PointerChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::PointerChecker const &', 'arg0')])
    ## pointer.h (module 'core'): ns3::TypeId ns3::PointerChecker::GetPointeeTypeId() const [member function]
    cls.add_method('GetPointeeTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_pure_virtual=True, is_const=True, is_virtual=True)
    return

def register_Ns3PointerValue_methods(root_module, cls):
    ## pointer.h (module 'core'): ns3::PointerValue::PointerValue(ns3::PointerValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::PointerValue const &', 'arg0')])
    ## pointer.h (module 'core'): ns3::PointerValue::PointerValue() [constructor]
    cls.add_constructor([])
    ## pointer.h (module 'core'): ns3::PointerValue::PointerValue(ns3::Ptr<ns3::Object> object) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::Object >', 'object')])
    ## pointer.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::PointerValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## pointer.h (module 'core'): bool ns3::PointerValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## pointer.h (module 'core'): ns3::Ptr<ns3::Object> ns3::PointerValue::GetObject() const [member function]
    cls.add_method('GetObject', 
                   'ns3::Ptr< ns3::Object >', 
                   [], 
                   is_const=True)
    ## pointer.h (module 'core'): std::string ns3::PointerValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## pointer.h (module 'core'): void ns3::PointerValue::SetObject(ns3::Ptr<ns3::Object> object) [member function]
    cls.add_method('SetObject', 
                   'void', 
                   [param('ns3::Ptr< ns3::Object >', 'object')])
    return

def register_Ns3NrPssFfMacScheduler_methods(root_module, cls):
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::NrPssFfMacScheduler::NrPssFfMacScheduler(ns3::NrPssFfMacScheduler const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrPssFfMacScheduler const &', 'arg0')])
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::NrPssFfMacScheduler::NrPssFfMacScheduler() [constructor]
    cls.add_constructor([])
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): void ns3::NrPssFfMacScheduler::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::FfMacCschedSapProvider * ns3::NrPssFfMacScheduler::GetFfMacCschedSapProvider() [member function]
    cls.add_method('GetFfMacCschedSapProvider', 
                   'ns3::FfMacCschedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::FfMacSchedSapProvider * ns3::NrPssFfMacScheduler::GetFfMacSchedSapProvider() [member function]
    cls.add_method('GetFfMacSchedSapProvider', 
                   'ns3::FfMacSchedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): ns3::NrFfrSapUser * ns3::NrPssFfMacScheduler::GetNrFfrSapUser() [member function]
    cls.add_method('GetNrFfrSapUser', 
                   'ns3::NrFfrSapUser *', 
                   [], 
                   is_virtual=True)
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): static ns3::TypeId ns3::NrPssFfMacScheduler::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): void ns3::NrPssFfMacScheduler::SetFfMacCschedSapUser(ns3::FfMacCschedSapUser * s) [member function]
    cls.add_method('SetFfMacCschedSapUser', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): void ns3::NrPssFfMacScheduler::SetFfMacSchedSapUser(ns3::FfMacSchedSapUser * s) [member function]
    cls.add_method('SetFfMacSchedSapUser', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): void ns3::NrPssFfMacScheduler::SetNrFfrSapProvider(ns3::NrFfrSapProvider * s) [member function]
    cls.add_method('SetNrFfrSapProvider', 
                   'void', 
                   [param('ns3::NrFfrSapProvider *', 's')], 
                   is_virtual=True)
    ## nr-pss-ff-mac-scheduler.h (module 'nr'): void ns3::NrPssFfMacScheduler::TransmissionModeConfigurationUpdate(uint16_t rnti, uint8_t txMode) [member function]
    cls.add_method('TransmissionModeConfigurationUpdate', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'txMode')])
    return

def register_Ns3RachPreambleNrControlMessage_methods(root_module, cls):
    ## nr-control-messages.h (module 'nr'): ns3::RachPreambleNrControlMessage::RachPreambleNrControlMessage(ns3::RachPreambleNrControlMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RachPreambleNrControlMessage const &', 'arg0')])
    ## nr-control-messages.h (module 'nr'): ns3::RachPreambleNrControlMessage::RachPreambleNrControlMessage() [constructor]
    cls.add_constructor([])
    ## nr-control-messages.h (module 'nr'): uint32_t ns3::RachPreambleNrControlMessage::GetRapId() const [member function]
    cls.add_method('GetRapId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## nr-control-messages.h (module 'nr'): void ns3::RachPreambleNrControlMessage::SetRapId(uint32_t rapid) [member function]
    cls.add_method('SetRapId', 
                   'void', 
                   [param('uint32_t', 'rapid')])
    return

def register_Ns3NrRadioBearerStatsCalculator_methods(root_module, cls):
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): ns3::NrRadioBearerStatsCalculator::NrRadioBearerStatsCalculator(ns3::NrRadioBearerStatsCalculator const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRadioBearerStatsCalculator const &', 'arg0')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): ns3::NrRadioBearerStatsCalculator::NrRadioBearerStatsCalculator() [constructor]
    cls.add_constructor([])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): ns3::NrRadioBearerStatsCalculator::NrRadioBearerStatsCalculator(std::string protocolType) [constructor]
    cls.add_constructor([param('std::string', 'protocolType')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): void ns3::NrRadioBearerStatsCalculator::DlRxPdu(uint16_t cellId, uint64_t imsi, uint16_t rnti, uint8_t lcid, uint32_t packetSize, uint64_t delay) [member function]
    cls.add_method('DlRxPdu', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('uint8_t', 'lcid'), param('uint32_t', 'packetSize'), param('uint64_t', 'delay')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): void ns3::NrRadioBearerStatsCalculator::DlTxPdu(uint16_t cellId, uint64_t imsi, uint16_t rnti, uint8_t lcid, uint32_t packetSize) [member function]
    cls.add_method('DlTxPdu', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('uint8_t', 'lcid'), param('uint32_t', 'packetSize')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): void ns3::NrRadioBearerStatsCalculator::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): uint32_t ns3::NrRadioBearerStatsCalculator::GetDlCellId(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlCellId', 
                   'uint32_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): double ns3::NrRadioBearerStatsCalculator::GetDlDelay(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlDelay', 
                   'double', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): std::vector<double, std::allocator<double> > ns3::NrRadioBearerStatsCalculator::GetDlDelayStats(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlDelayStats', 
                   'std::vector< double >', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): std::string ns3::NrRadioBearerStatsCalculator::GetDlOutputFilename() [member function]
    cls.add_method('GetDlOutputFilename', 
                   'std::string', 
                   [])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): std::string ns3::NrRadioBearerStatsCalculator::GetDlPdcpOutputFilename() [member function]
    cls.add_method('GetDlPdcpOutputFilename', 
                   'std::string', 
                   [])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): std::vector<double, std::allocator<double> > ns3::NrRadioBearerStatsCalculator::GetDlPduSizeStats(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlPduSizeStats', 
                   'std::vector< double >', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): uint64_t ns3::NrRadioBearerStatsCalculator::GetDlRxData(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlRxData', 
                   'uint64_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): uint32_t ns3::NrRadioBearerStatsCalculator::GetDlRxPackets(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlRxPackets', 
                   'uint32_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): uint64_t ns3::NrRadioBearerStatsCalculator::GetDlTxData(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlTxData', 
                   'uint64_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): uint32_t ns3::NrRadioBearerStatsCalculator::GetDlTxPackets(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlTxPackets', 
                   'uint32_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): ns3::Time ns3::NrRadioBearerStatsCalculator::GetEpoch() const [member function]
    cls.add_method('GetEpoch', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): ns3::Time ns3::NrRadioBearerStatsCalculator::GetStartTime() const [member function]
    cls.add_method('GetStartTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): static ns3::TypeId ns3::NrRadioBearerStatsCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): uint32_t ns3::NrRadioBearerStatsCalculator::GetUlCellId(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlCellId', 
                   'uint32_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): double ns3::NrRadioBearerStatsCalculator::GetUlDelay(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlDelay', 
                   'double', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): std::vector<double, std::allocator<double> > ns3::NrRadioBearerStatsCalculator::GetUlDelayStats(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlDelayStats', 
                   'std::vector< double >', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): std::string ns3::NrRadioBearerStatsCalculator::GetUlOutputFilename() [member function]
    cls.add_method('GetUlOutputFilename', 
                   'std::string', 
                   [])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): std::string ns3::NrRadioBearerStatsCalculator::GetUlPdcpOutputFilename() [member function]
    cls.add_method('GetUlPdcpOutputFilename', 
                   'std::string', 
                   [])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): std::vector<double, std::allocator<double> > ns3::NrRadioBearerStatsCalculator::GetUlPduSizeStats(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlPduSizeStats', 
                   'std::vector< double >', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): uint64_t ns3::NrRadioBearerStatsCalculator::GetUlRxData(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlRxData', 
                   'uint64_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): uint32_t ns3::NrRadioBearerStatsCalculator::GetUlRxPackets(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlRxPackets', 
                   'uint32_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): uint64_t ns3::NrRadioBearerStatsCalculator::GetUlTxData(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlTxData', 
                   'uint64_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): uint32_t ns3::NrRadioBearerStatsCalculator::GetUlTxPackets(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlTxPackets', 
                   'uint32_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): void ns3::NrRadioBearerStatsCalculator::SetDlPdcpOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetDlPdcpOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): void ns3::NrRadioBearerStatsCalculator::SetEpoch(ns3::Time e) [member function]
    cls.add_method('SetEpoch', 
                   'void', 
                   [param('ns3::Time', 'e')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): void ns3::NrRadioBearerStatsCalculator::SetStartTime(ns3::Time t) [member function]
    cls.add_method('SetStartTime', 
                   'void', 
                   [param('ns3::Time', 't')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): void ns3::NrRadioBearerStatsCalculator::SetUlPdcpOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetUlPdcpOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): void ns3::NrRadioBearerStatsCalculator::UlRxPdu(uint16_t cellId, uint64_t imsi, uint16_t rnti, uint8_t lcid, uint32_t packetSize, uint64_t delay) [member function]
    cls.add_method('UlRxPdu', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('uint8_t', 'lcid'), param('uint32_t', 'packetSize'), param('uint64_t', 'delay')])
    ## nr-radio-bearer-stats-calculator.h (module 'nr'): void ns3::NrRadioBearerStatsCalculator::UlTxPdu(uint16_t cellId, uint64_t imsi, uint16_t rnti, uint8_t lcid, uint32_t packetSize) [member function]
    cls.add_method('UlTxPdu', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('uint8_t', 'lcid'), param('uint32_t', 'packetSize')])
    return

def register_Ns3RarNrControlMessage_methods(root_module, cls):
    ## nr-control-messages.h (module 'nr'): ns3::RarNrControlMessage::RarNrControlMessage(ns3::RarNrControlMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RarNrControlMessage const &', 'arg0')])
    ## nr-control-messages.h (module 'nr'): ns3::RarNrControlMessage::RarNrControlMessage() [constructor]
    cls.add_constructor([])
    ## nr-control-messages.h (module 'nr'): void ns3::RarNrControlMessage::AddRar(ns3::RarNrControlMessage::Rar rar) [member function]
    cls.add_method('AddRar', 
                   'void', 
                   [param('ns3::RarNrControlMessage::Rar', 'rar')])
    ## nr-control-messages.h (module 'nr'): uint16_t ns3::RarNrControlMessage::GetRaRnti() const [member function]
    cls.add_method('GetRaRnti', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-control-messages.h (module 'nr'): std::_List_const_iterator<ns3::RarNrControlMessage::Rar> ns3::RarNrControlMessage::RarListBegin() const [member function]
    cls.add_method('RarListBegin', 
                   'std::_List_const_iterator< ns3::RarNrControlMessage::Rar >', 
                   [], 
                   is_const=True)
    ## nr-control-messages.h (module 'nr'): std::_List_const_iterator<ns3::RarNrControlMessage::Rar> ns3::RarNrControlMessage::RarListEnd() const [member function]
    cls.add_method('RarListEnd', 
                   'std::_List_const_iterator< ns3::RarNrControlMessage::Rar >', 
                   [], 
                   is_const=True)
    ## nr-control-messages.h (module 'nr'): void ns3::RarNrControlMessage::SetRaRnti(uint16_t raRnti) [member function]
    cls.add_method('SetRaRnti', 
                   'void', 
                   [param('uint16_t', 'raRnti')])
    return

def register_Ns3RarNrControlMessageRar_methods(root_module, cls):
    ## nr-control-messages.h (module 'nr'): ns3::RarNrControlMessage::Rar::Rar() [constructor]
    cls.add_constructor([])
    ## nr-control-messages.h (module 'nr'): ns3::RarNrControlMessage::Rar::Rar(ns3::RarNrControlMessage::Rar const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RarNrControlMessage::Rar const &', 'arg0')])
    ## nr-control-messages.h (module 'nr'): ns3::RarNrControlMessage::Rar::rapId [variable]
    cls.add_instance_attribute('rapId', 'uint8_t', is_const=False)
    ## nr-control-messages.h (module 'nr'): ns3::RarNrControlMessage::Rar::rarPayload [variable]
    cls.add_instance_attribute('rarPayload', 'ns3::BuildRarListElement_s', is_const=False)
    return

def register_Ns3NrRemSpectrumPhy_methods(root_module, cls):
    ## nr-rem-spectrum-phy.h (module 'nr'): ns3::NrRemSpectrumPhy::NrRemSpectrumPhy() [constructor]
    cls.add_constructor([])
    ## nr-rem-spectrum-phy.h (module 'nr'): void ns3::NrRemSpectrumPhy::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rem-spectrum-phy.h (module 'nr'): static ns3::TypeId ns3::NrRemSpectrumPhy::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-rem-spectrum-phy.h (module 'nr'): void ns3::NrRemSpectrumPhy::SetChannel(ns3::Ptr<ns3::SpectrumChannel> c) [member function]
    cls.add_method('SetChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumChannel >', 'c')], 
                   is_virtual=True)
    ## nr-rem-spectrum-phy.h (module 'nr'): void ns3::NrRemSpectrumPhy::SetMobility(ns3::Ptr<ns3::MobilityModel> m) [member function]
    cls.add_method('SetMobility', 
                   'void', 
                   [param('ns3::Ptr< ns3::MobilityModel >', 'm')], 
                   is_virtual=True)
    ## nr-rem-spectrum-phy.h (module 'nr'): void ns3::NrRemSpectrumPhy::SetDevice(ns3::Ptr<ns3::NetDevice> d) [member function]
    cls.add_method('SetDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'd')], 
                   is_virtual=True)
    ## nr-rem-spectrum-phy.h (module 'nr'): ns3::Ptr<ns3::MobilityModel> ns3::NrRemSpectrumPhy::GetMobility() [member function]
    cls.add_method('GetMobility', 
                   'ns3::Ptr< ns3::MobilityModel >', 
                   [], 
                   is_virtual=True)
    ## nr-rem-spectrum-phy.h (module 'nr'): ns3::Ptr<ns3::NetDevice> ns3::NrRemSpectrumPhy::GetDevice() const [member function]
    cls.add_method('GetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rem-spectrum-phy.h (module 'nr'): ns3::Ptr<ns3::SpectrumModel const> ns3::NrRemSpectrumPhy::GetRxSpectrumModel() const [member function]
    cls.add_method('GetRxSpectrumModel', 
                   'ns3::Ptr< ns3::SpectrumModel const >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rem-spectrum-phy.h (module 'nr'): ns3::Ptr<ns3::AntennaModel> ns3::NrRemSpectrumPhy::GetRxAntenna() [member function]
    cls.add_method('GetRxAntenna', 
                   'ns3::Ptr< ns3::AntennaModel >', 
                   [], 
                   is_virtual=True)
    ## nr-rem-spectrum-phy.h (module 'nr'): void ns3::NrRemSpectrumPhy::StartRx(ns3::Ptr<ns3::SpectrumSignalParameters> params) [member function]
    cls.add_method('StartRx', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumSignalParameters >', 'params')], 
                   is_virtual=True)
    ## nr-rem-spectrum-phy.h (module 'nr'): void ns3::NrRemSpectrumPhy::SetRxSpectrumModel(ns3::Ptr<ns3::SpectrumModel const> m) [member function]
    cls.add_method('SetRxSpectrumModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumModel const >', 'm')])
    ## nr-rem-spectrum-phy.h (module 'nr'): double ns3::NrRemSpectrumPhy::GetSinr(double noisePower) [member function]
    cls.add_method('GetSinr', 
                   'double', 
                   [param('double', 'noisePower')])
    ## nr-rem-spectrum-phy.h (module 'nr'): void ns3::NrRemSpectrumPhy::Deactivate() [member function]
    cls.add_method('Deactivate', 
                   'void', 
                   [])
    ## nr-rem-spectrum-phy.h (module 'nr'): bool ns3::NrRemSpectrumPhy::IsActive() [member function]
    cls.add_method('IsActive', 
                   'bool', 
                   [])
    ## nr-rem-spectrum-phy.h (module 'nr'): void ns3::NrRemSpectrumPhy::Reset() [member function]
    cls.add_method('Reset', 
                   'void', 
                   [])
    ## nr-rem-spectrum-phy.h (module 'nr'): void ns3::NrRemSpectrumPhy::SetUseDataChannel(bool value) [member function]
    cls.add_method('SetUseDataChannel', 
                   'void', 
                   [param('bool', 'value')])
    ## nr-rem-spectrum-phy.h (module 'nr'): void ns3::NrRemSpectrumPhy::SetRbId(int32_t rbId) [member function]
    cls.add_method('SetRbId', 
                   'void', 
                   [param('int32_t', 'rbId')])
    return

def register_Ns3NrRrFfMacScheduler_methods(root_module, cls):
    ## nr-rr-ff-mac-scheduler.h (module 'nr'): ns3::NrRrFfMacScheduler::NrRrFfMacScheduler(ns3::NrRrFfMacScheduler const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrRrFfMacScheduler const &', 'arg0')])
    ## nr-rr-ff-mac-scheduler.h (module 'nr'): ns3::NrRrFfMacScheduler::NrRrFfMacScheduler() [constructor]
    cls.add_constructor([])
    ## nr-rr-ff-mac-scheduler.h (module 'nr'): void ns3::NrRrFfMacScheduler::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-rr-ff-mac-scheduler.h (module 'nr'): ns3::FfMacCschedSapProvider * ns3::NrRrFfMacScheduler::GetFfMacCschedSapProvider() [member function]
    cls.add_method('GetFfMacCschedSapProvider', 
                   'ns3::FfMacCschedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-rr-ff-mac-scheduler.h (module 'nr'): ns3::FfMacSchedSapProvider * ns3::NrRrFfMacScheduler::GetFfMacSchedSapProvider() [member function]
    cls.add_method('GetFfMacSchedSapProvider', 
                   'ns3::FfMacSchedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-rr-ff-mac-scheduler.h (module 'nr'): ns3::NrFfrSapUser * ns3::NrRrFfMacScheduler::GetNrFfrSapUser() [member function]
    cls.add_method('GetNrFfrSapUser', 
                   'ns3::NrFfrSapUser *', 
                   [], 
                   is_virtual=True)
    ## nr-rr-ff-mac-scheduler.h (module 'nr'): static ns3::TypeId ns3::NrRrFfMacScheduler::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-rr-ff-mac-scheduler.h (module 'nr'): void ns3::NrRrFfMacScheduler::SetFfMacCschedSapUser(ns3::FfMacCschedSapUser * s) [member function]
    cls.add_method('SetFfMacCschedSapUser', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-rr-ff-mac-scheduler.h (module 'nr'): void ns3::NrRrFfMacScheduler::SetFfMacSchedSapUser(ns3::FfMacSchedSapUser * s) [member function]
    cls.add_method('SetFfMacSchedSapUser', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-rr-ff-mac-scheduler.h (module 'nr'): void ns3::NrRrFfMacScheduler::SetNrFfrSapProvider(ns3::NrFfrSapProvider * s) [member function]
    cls.add_method('SetNrFfrSapProvider', 
                   'void', 
                   [param('ns3::NrFfrSapProvider *', 's')], 
                   is_virtual=True)
    ## nr-rr-ff-mac-scheduler.h (module 'nr'): void ns3::NrRrFfMacScheduler::TransmissionModeConfigurationUpdate(uint16_t rnti, uint8_t txMode) [member function]
    cls.add_method('TransmissionModeConfigurationUpdate', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'txMode')])
    return

def register_Ns3RrcNrAsn1Header_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcNrAsn1Header::RrcNrAsn1Header(ns3::RrcNrAsn1Header const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcNrAsn1Header const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcNrAsn1Header::RrcNrAsn1Header() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): int ns3::RrcNrAsn1Header::GetMessageType() [member function]
    cls.add_method('GetMessageType', 
                   'int', 
                   [])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcNrAsn1Header::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_pure_virtual=True, visibility='protected', is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializeDrbToAddModList(std::list<ns3::NrRrcSap::DrbToAddMod, std::allocator<ns3::NrRrcSap::DrbToAddMod> > * drbToAddModLis, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeDrbToAddModList', 
                   'ns3::Buffer::Iterator', 
                   [param('std::list< ns3::NrRrcSap::DrbToAddMod > *', 'drbToAddModLis'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializeLogicalChannelConfig(ns3::NrRrcSap::LogicalChannelConfig * logicalChannelConfig, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeLogicalChannelConfig', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::NrRrcSap::LogicalChannelConfig *', 'logicalChannelConfig'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializeMeasConfig(ns3::NrRrcSap::MeasConfig * measConfig, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeMeasConfig', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::NrRrcSap::MeasConfig *', 'measConfig'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializeMeasResults(ns3::NrRrcSap::MeasResults * measResults, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeMeasResults', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::NrRrcSap::MeasResults *', 'measResults'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializePhysicalConfigDedicated(ns3::NrRrcSap::PhysicalConfigDedicated * physicalConfigDedicated, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializePhysicalConfigDedicated', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::NrRrcSap::PhysicalConfigDedicated *', 'physicalConfigDedicated'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializePlmnIdentity(uint32_t * plmnId, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializePlmnIdentity', 
                   'ns3::Buffer::Iterator', 
                   [param('uint32_t *', 'plmnId'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializeQoffsetRange(int8_t * qOffsetRange, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeQoffsetRange', 
                   'ns3::Buffer::Iterator', 
                   [param('int8_t *', 'qOffsetRange'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializeRachConfigCommon(ns3::NrRrcSap::RachConfigCommon * rachConfigCommon, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeRachConfigCommon', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::NrRrcSap::RachConfigCommon *', 'rachConfigCommon'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializeRadioResourceConfigCommon(ns3::NrRrcSap::RadioResourceConfigCommon * radioResourceConfigCommon, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeRadioResourceConfigCommon', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::NrRrcSap::RadioResourceConfigCommon *', 'radioResourceConfigCommon'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializeRadioResourceConfigCommonSib(ns3::NrRrcSap::RadioResourceConfigCommonSib * radioResourceConfigCommonSib, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeRadioResourceConfigCommonSib', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::NrRrcSap::RadioResourceConfigCommonSib *', 'radioResourceConfigCommonSib'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializeRadioResourceConfigDedicated(ns3::NrRrcSap::RadioResourceConfigDedicated * radioResourceConfigDedicated, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeRadioResourceConfigDedicated', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::NrRrcSap::RadioResourceConfigDedicated *', 'radioResourceConfigDedicated'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializeSrbToAddModList(std::list<ns3::NrRrcSap::SrbToAddMod, std::allocator<ns3::NrRrcSap::SrbToAddMod> > * srbToAddModList, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSrbToAddModList', 
                   'ns3::Buffer::Iterator', 
                   [param('std::list< ns3::NrRrcSap::SrbToAddMod > *', 'srbToAddModList'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializeSystemInformationBlockType1(ns3::NrRrcSap::SystemInformationBlockType1 * systemInformationBlockType1, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSystemInformationBlockType1', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::NrRrcSap::SystemInformationBlockType1 *', 'systemInformationBlockType1'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializeSystemInformationBlockType2(ns3::NrRrcSap::SystemInformationBlockType2 * systemInformationBlockType2, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeSystemInformationBlockType2', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::NrRrcSap::SystemInformationBlockType2 *', 'systemInformationBlockType2'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcNrAsn1Header::DeserializeThresholdEutra(ns3::NrRrcSap::ThresholdEutra * thresholdEutra, ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeThresholdEutra', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::NrRrcSap::ThresholdEutra *', 'thresholdEutra'), param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): ns3::TypeId ns3::RrcNrAsn1Header::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, visibility='protected', is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): static ns3::TypeId ns3::RrcNrAsn1Header::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_const=True, visibility='protected', is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, visibility='protected', is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::Print(std::ostream & os, ns3::NrRrcSap::RadioResourceConfigDedicated radioResourceConfigDedicated) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os'), param('ns3::NrRrcSap::RadioResourceConfigDedicated', 'radioResourceConfigDedicated')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializeDrbToAddModList(std::list<ns3::NrRrcSap::DrbToAddMod, std::allocator<ns3::NrRrcSap::DrbToAddMod> > drbToAddModList) const [member function]
    cls.add_method('SerializeDrbToAddModList', 
                   'void', 
                   [param('std::list< ns3::NrRrcSap::DrbToAddMod >', 'drbToAddModList')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializeLogicalChannelConfig(ns3::NrRrcSap::LogicalChannelConfig logicalChannelConfig) const [member function]
    cls.add_method('SerializeLogicalChannelConfig', 
                   'void', 
                   [param('ns3::NrRrcSap::LogicalChannelConfig', 'logicalChannelConfig')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializeMeasConfig(ns3::NrRrcSap::MeasConfig measConfig) const [member function]
    cls.add_method('SerializeMeasConfig', 
                   'void', 
                   [param('ns3::NrRrcSap::MeasConfig', 'measConfig')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializeMeasResults(ns3::NrRrcSap::MeasResults measResults) const [member function]
    cls.add_method('SerializeMeasResults', 
                   'void', 
                   [param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializePhysicalConfigDedicated(ns3::NrRrcSap::PhysicalConfigDedicated physicalConfigDedicated) const [member function]
    cls.add_method('SerializePhysicalConfigDedicated', 
                   'void', 
                   [param('ns3::NrRrcSap::PhysicalConfigDedicated', 'physicalConfigDedicated')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializePlmnIdentity(uint32_t plmnId) const [member function]
    cls.add_method('SerializePlmnIdentity', 
                   'void', 
                   [param('uint32_t', 'plmnId')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializeQoffsetRange(int8_t qOffsetRange) const [member function]
    cls.add_method('SerializeQoffsetRange', 
                   'void', 
                   [param('int8_t', 'qOffsetRange')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializeRachConfigCommon(ns3::NrRrcSap::RachConfigCommon rachConfigCommon) const [member function]
    cls.add_method('SerializeRachConfigCommon', 
                   'void', 
                   [param('ns3::NrRrcSap::RachConfigCommon', 'rachConfigCommon')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializeRadioResourceConfigCommon(ns3::NrRrcSap::RadioResourceConfigCommon radioResourceConfigCommon) const [member function]
    cls.add_method('SerializeRadioResourceConfigCommon', 
                   'void', 
                   [param('ns3::NrRrcSap::RadioResourceConfigCommon', 'radioResourceConfigCommon')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializeRadioResourceConfigCommonSib(ns3::NrRrcSap::RadioResourceConfigCommonSib radioResourceConfigCommonSib) const [member function]
    cls.add_method('SerializeRadioResourceConfigCommonSib', 
                   'void', 
                   [param('ns3::NrRrcSap::RadioResourceConfigCommonSib', 'radioResourceConfigCommonSib')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializeRadioResourceConfigDedicated(ns3::NrRrcSap::RadioResourceConfigDedicated radioResourceConfigDedicated) const [member function]
    cls.add_method('SerializeRadioResourceConfigDedicated', 
                   'void', 
                   [param('ns3::NrRrcSap::RadioResourceConfigDedicated', 'radioResourceConfigDedicated')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializeSrbToAddModList(std::list<ns3::NrRrcSap::SrbToAddMod, std::allocator<ns3::NrRrcSap::SrbToAddMod> > srbToAddModList) const [member function]
    cls.add_method('SerializeSrbToAddModList', 
                   'void', 
                   [param('std::list< ns3::NrRrcSap::SrbToAddMod >', 'srbToAddModList')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializeSystemInformationBlockType1(ns3::NrRrcSap::SystemInformationBlockType1 systemInformationBlockType1) const [member function]
    cls.add_method('SerializeSystemInformationBlockType1', 
                   'void', 
                   [param('ns3::NrRrcSap::SystemInformationBlockType1', 'systemInformationBlockType1')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializeSystemInformationBlockType2(ns3::NrRrcSap::SystemInformationBlockType2 systemInformationBlockType2) const [member function]
    cls.add_method('SerializeSystemInformationBlockType2', 
                   'void', 
                   [param('ns3::NrRrcSap::SystemInformationBlockType2', 'systemInformationBlockType2')], 
                   is_const=True, visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcNrAsn1Header::SerializeThresholdEutra(ns3::NrRrcSap::ThresholdEutra thresholdEutra) const [member function]
    cls.add_method('SerializeThresholdEutra', 
                   'void', 
                   [param('ns3::NrRrcSap::ThresholdEutra', 'thresholdEutra')], 
                   is_const=True, visibility='protected')
    return

def register_Ns3RrcDlCcchMessage_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcDlCcchMessage::RrcDlCcchMessage(ns3::RrcDlCcchMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcDlCcchMessage const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcDlCcchMessage::RrcDlCcchMessage() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcDlCcchMessage::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcDlCcchMessage::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcDlCcchMessage::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcDlCcchMessage::DeserializeDlCcchMessage(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeDlCcchMessage', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcDlCcchMessage::SerializeDlCcchMessage(int msgType) const [member function]
    cls.add_method('SerializeDlCcchMessage', 
                   'void', 
                   [param('int', 'msgType')], 
                   is_const=True, visibility='protected')
    return

def register_Ns3RrcDlDcchMessage_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcDlDcchMessage::RrcDlDcchMessage(ns3::RrcDlDcchMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcDlDcchMessage const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcDlDcchMessage::RrcDlDcchMessage() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcDlDcchMessage::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcDlDcchMessage::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcDlDcchMessage::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcDlDcchMessage::DeserializeDlDcchMessage(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeDlDcchMessage', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcDlDcchMessage::SerializeDlDcchMessage(int msgType) const [member function]
    cls.add_method('SerializeDlDcchMessage', 
                   'void', 
                   [param('int', 'msgType')], 
                   is_const=True, visibility='protected')
    return

def register_Ns3RrcUlCcchMessage_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcUlCcchMessage::RrcUlCcchMessage(ns3::RrcUlCcchMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcUlCcchMessage const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcUlCcchMessage::RrcUlCcchMessage() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcUlCcchMessage::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcUlCcchMessage::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcUlCcchMessage::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcUlCcchMessage::DeserializeUlCcchMessage(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeUlCcchMessage', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcUlCcchMessage::SerializeUlCcchMessage(int msgType) const [member function]
    cls.add_method('SerializeUlCcchMessage', 
                   'void', 
                   [param('int', 'msgType')], 
                   is_const=True, visibility='protected')
    return

def register_Ns3RrcUlDcchMessage_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcUlDcchMessage::RrcUlDcchMessage(ns3::RrcUlDcchMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcUlDcchMessage const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcUlDcchMessage::RrcUlDcchMessage() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcUlDcchMessage::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcUlDcchMessage::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcUlDcchMessage::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::Buffer::Iterator ns3::RrcUlDcchMessage::DeserializeUlDcchMessage(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('DeserializeUlDcchMessage', 
                   'ns3::Buffer::Iterator', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   visibility='protected')
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcUlDcchMessage::SerializeUlDcchMessage(int msgType) const [member function]
    cls.add_method('SerializeUlDcchMessage', 
                   'void', 
                   [param('int', 'msgType')], 
                   is_const=True, visibility='protected')
    return

def register_Ns3Sib1NrControlMessage_methods(root_module, cls):
    ## nr-control-messages.h (module 'nr'): ns3::Sib1NrControlMessage::Sib1NrControlMessage(ns3::Sib1NrControlMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Sib1NrControlMessage const &', 'arg0')])
    ## nr-control-messages.h (module 'nr'): ns3::Sib1NrControlMessage::Sib1NrControlMessage() [constructor]
    cls.add_constructor([])
    ## nr-control-messages.h (module 'nr'): ns3::NrRrcSap::SystemInformationBlockType1 ns3::Sib1NrControlMessage::GetSib1() const [member function]
    cls.add_method('GetSib1', 
                   'ns3::NrRrcSap::SystemInformationBlockType1', 
                   [], 
                   is_const=True)
    ## nr-control-messages.h (module 'nr'): void ns3::Sib1NrControlMessage::SetSib1(ns3::NrRrcSap::SystemInformationBlockType1 sib1) [member function]
    cls.add_method('SetSib1', 
                   'void', 
                   [param('ns3::NrRrcSap::SystemInformationBlockType1', 'sib1')])
    return

def register_Ns3SpectrumChannel_methods(root_module, cls):
    ## spectrum-channel.h (module 'spectrum'): ns3::SpectrumChannel::SpectrumChannel() [constructor]
    cls.add_constructor([])
    ## spectrum-channel.h (module 'spectrum'): ns3::SpectrumChannel::SpectrumChannel(ns3::SpectrumChannel const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SpectrumChannel const &', 'arg0')])
    ## spectrum-channel.h (module 'spectrum'): void ns3::SpectrumChannel::AddPropagationLossModel(ns3::Ptr<ns3::PropagationLossModel> loss) [member function]
    cls.add_method('AddPropagationLossModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::PropagationLossModel >', 'loss')], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-channel.h (module 'spectrum'): void ns3::SpectrumChannel::AddRx(ns3::Ptr<ns3::SpectrumPhy> phy) [member function]
    cls.add_method('AddRx', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumPhy >', 'phy')], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-channel.h (module 'spectrum'): void ns3::SpectrumChannel::AddSpectrumPropagationLossModel(ns3::Ptr<ns3::SpectrumPropagationLossModel> loss) [member function]
    cls.add_method('AddSpectrumPropagationLossModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumPropagationLossModel >', 'loss')], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-channel.h (module 'spectrum'): static ns3::TypeId ns3::SpectrumChannel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## spectrum-channel.h (module 'spectrum'): void ns3::SpectrumChannel::SetPropagationDelayModel(ns3::Ptr<ns3::PropagationDelayModel> delay) [member function]
    cls.add_method('SetPropagationDelayModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::PropagationDelayModel >', 'delay')], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-channel.h (module 'spectrum'): void ns3::SpectrumChannel::StartTx(ns3::Ptr<ns3::SpectrumSignalParameters> params) [member function]
    cls.add_method('StartTx', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumSignalParameters >', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3SrsCqiRntiVsp_methods(root_module, cls):
    ## nr-vendor-specific-parameters.h (module 'nr'): ns3::SrsCqiRntiVsp::SrsCqiRntiVsp(ns3::SrsCqiRntiVsp const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::SrsCqiRntiVsp const &', 'arg0')])
    ## nr-vendor-specific-parameters.h (module 'nr'): ns3::SrsCqiRntiVsp::SrsCqiRntiVsp(uint16_t rnti) [constructor]
    cls.add_constructor([param('uint16_t', 'rnti')])
    ## nr-vendor-specific-parameters.h (module 'nr'): uint16_t ns3::SrsCqiRntiVsp::GetRnti() [member function]
    cls.add_method('GetRnti', 
                   'uint16_t', 
                   [])
    return

def register_Ns3StringChecker_methods(root_module, cls):
    ## string.h (module 'core'): ns3::StringChecker::StringChecker() [constructor]
    cls.add_constructor([])
    ## string.h (module 'core'): ns3::StringChecker::StringChecker(ns3::StringChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::StringChecker const &', 'arg0')])
    return

def register_Ns3StringValue_methods(root_module, cls):
    ## string.h (module 'core'): ns3::StringValue::StringValue() [constructor]
    cls.add_constructor([])
    ## string.h (module 'core'): ns3::StringValue::StringValue(ns3::StringValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::StringValue const &', 'arg0')])
    ## string.h (module 'core'): ns3::StringValue::StringValue(std::string const & value) [constructor]
    cls.add_constructor([param('std::string const &', 'value')])
    ## string.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::StringValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## string.h (module 'core'): bool ns3::StringValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## string.h (module 'core'): std::string ns3::StringValue::Get() const [member function]
    cls.add_method('Get', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## string.h (module 'core'): std::string ns3::StringValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## string.h (module 'core'): void ns3::StringValue::Set(std::string const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string const &', 'value')])
    return

def register_Ns3NrTdBetFfMacScheduler_methods(root_module, cls):
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): ns3::NrTdBetFfMacScheduler::NrTdBetFfMacScheduler(ns3::NrTdBetFfMacScheduler const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrTdBetFfMacScheduler const &', 'arg0')])
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): ns3::NrTdBetFfMacScheduler::NrTdBetFfMacScheduler() [constructor]
    cls.add_constructor([])
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdBetFfMacScheduler::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): ns3::FfMacCschedSapProvider * ns3::NrTdBetFfMacScheduler::GetFfMacCschedSapProvider() [member function]
    cls.add_method('GetFfMacCschedSapProvider', 
                   'ns3::FfMacCschedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): ns3::FfMacSchedSapProvider * ns3::NrTdBetFfMacScheduler::GetFfMacSchedSapProvider() [member function]
    cls.add_method('GetFfMacSchedSapProvider', 
                   'ns3::FfMacSchedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): ns3::NrFfrSapUser * ns3::NrTdBetFfMacScheduler::GetNrFfrSapUser() [member function]
    cls.add_method('GetNrFfrSapUser', 
                   'ns3::NrFfrSapUser *', 
                   [], 
                   is_virtual=True)
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): static ns3::TypeId ns3::NrTdBetFfMacScheduler::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdBetFfMacScheduler::SetFfMacCschedSapUser(ns3::FfMacCschedSapUser * s) [member function]
    cls.add_method('SetFfMacCschedSapUser', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdBetFfMacScheduler::SetFfMacSchedSapUser(ns3::FfMacSchedSapUser * s) [member function]
    cls.add_method('SetFfMacSchedSapUser', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdBetFfMacScheduler::SetNrFfrSapProvider(ns3::NrFfrSapProvider * s) [member function]
    cls.add_method('SetNrFfrSapProvider', 
                   'void', 
                   [param('ns3::NrFfrSapProvider *', 's')], 
                   is_virtual=True)
    ## nr-tdbet-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdBetFfMacScheduler::TransmissionModeConfigurationUpdate(uint16_t rnti, uint8_t txMode) [member function]
    cls.add_method('TransmissionModeConfigurationUpdate', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'txMode')])
    return

def register_Ns3NrTdMtFfMacScheduler_methods(root_module, cls):
    ## tdmt-nr-ff-mac-scheduler.h (module 'nr'): ns3::NrTdMtFfMacScheduler::NrTdMtFfMacScheduler(ns3::NrTdMtFfMacScheduler const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrTdMtFfMacScheduler const &', 'arg0')])
    ## tdmt-nr-ff-mac-scheduler.h (module 'nr'): ns3::NrTdMtFfMacScheduler::NrTdMtFfMacScheduler() [constructor]
    cls.add_constructor([])
    ## tdmt-nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdMtFfMacScheduler::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## tdmt-nr-ff-mac-scheduler.h (module 'nr'): ns3::FfMacCschedSapProvider * ns3::NrTdMtFfMacScheduler::GetFfMacCschedSapProvider() [member function]
    cls.add_method('GetFfMacCschedSapProvider', 
                   'ns3::FfMacCschedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## tdmt-nr-ff-mac-scheduler.h (module 'nr'): ns3::FfMacSchedSapProvider * ns3::NrTdMtFfMacScheduler::GetFfMacSchedSapProvider() [member function]
    cls.add_method('GetFfMacSchedSapProvider', 
                   'ns3::FfMacSchedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## tdmt-nr-ff-mac-scheduler.h (module 'nr'): ns3::NrFfrSapUser * ns3::NrTdMtFfMacScheduler::GetNrFfrSapUser() [member function]
    cls.add_method('GetNrFfrSapUser', 
                   'ns3::NrFfrSapUser *', 
                   [], 
                   is_virtual=True)
    ## tdmt-nr-ff-mac-scheduler.h (module 'nr'): static ns3::TypeId ns3::NrTdMtFfMacScheduler::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## tdmt-nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdMtFfMacScheduler::SetFfMacCschedSapUser(ns3::FfMacCschedSapUser * s) [member function]
    cls.add_method('SetFfMacCschedSapUser', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser *', 's')], 
                   is_virtual=True)
    ## tdmt-nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdMtFfMacScheduler::SetFfMacSchedSapUser(ns3::FfMacSchedSapUser * s) [member function]
    cls.add_method('SetFfMacSchedSapUser', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser *', 's')], 
                   is_virtual=True)
    ## tdmt-nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdMtFfMacScheduler::SetNrFfrSapProvider(ns3::NrFfrSapProvider * s) [member function]
    cls.add_method('SetNrFfrSapProvider', 
                   'void', 
                   [param('ns3::NrFfrSapProvider *', 's')], 
                   is_virtual=True)
    ## tdmt-nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdMtFfMacScheduler::TransmissionModeConfigurationUpdate(uint16_t rnti, uint8_t txMode) [member function]
    cls.add_method('TransmissionModeConfigurationUpdate', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'txMode')])
    return

def register_Ns3NrTdTbfqFfMacScheduler_methods(root_module, cls):
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::NrTdTbfqFfMacScheduler::NrTdTbfqFfMacScheduler(ns3::NrTdTbfqFfMacScheduler const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrTdTbfqFfMacScheduler const &', 'arg0')])
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::NrTdTbfqFfMacScheduler::NrTdTbfqFfMacScheduler() [constructor]
    cls.add_constructor([])
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdTbfqFfMacScheduler::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::FfMacCschedSapProvider * ns3::NrTdTbfqFfMacScheduler::GetFfMacCschedSapProvider() [member function]
    cls.add_method('GetFfMacCschedSapProvider', 
                   'ns3::FfMacCschedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::FfMacSchedSapProvider * ns3::NrTdTbfqFfMacScheduler::GetFfMacSchedSapProvider() [member function]
    cls.add_method('GetFfMacSchedSapProvider', 
                   'ns3::FfMacSchedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::NrFfrSapUser * ns3::NrTdTbfqFfMacScheduler::GetNrFfrSapUser() [member function]
    cls.add_method('GetNrFfrSapUser', 
                   'ns3::NrFfrSapUser *', 
                   [], 
                   is_virtual=True)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): static ns3::TypeId ns3::NrTdTbfqFfMacScheduler::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdTbfqFfMacScheduler::SetFfMacCschedSapUser(ns3::FfMacCschedSapUser * s) [member function]
    cls.add_method('SetFfMacCschedSapUser', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdTbfqFfMacScheduler::SetFfMacSchedSapUser(ns3::FfMacSchedSapUser * s) [member function]
    cls.add_method('SetFfMacSchedSapUser', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdTbfqFfMacScheduler::SetNrFfrSapProvider(ns3::NrFfrSapProvider * s) [member function]
    cls.add_method('SetNrFfrSapProvider', 
                   'void', 
                   [param('ns3::NrFfrSapProvider *', 's')], 
                   is_virtual=True)
    ## nr-tdtbfq-ff-mac-scheduler.h (module 'nr'): void ns3::NrTdTbfqFfMacScheduler::TransmissionModeConfigurationUpdate(uint16_t rnti, uint8_t txMode) [member function]
    cls.add_method('TransmissionModeConfigurationUpdate', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'txMode')])
    return

def register_Ns3TimeValue_methods(root_module, cls):
    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue() [constructor]
    cls.add_constructor([])
    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::TimeValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::TimeValue const &', 'arg0')])
    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::Time const & value) [constructor]
    cls.add_constructor([param('ns3::Time const &', 'value')])
    ## nstime.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::TimeValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nstime.h (module 'core'): bool ns3::TimeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## nstime.h (module 'core'): ns3::Time ns3::TimeValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): std::string ns3::TimeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## nstime.h (module 'core'): void ns3::TimeValue::Set(ns3::Time const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Time const &', 'value')])
    return

def register_Ns3NrTtaFfMacScheduler_methods(root_module, cls):
    ## nr-tta-ff-mac-scheduler.h (module 'nr'): ns3::NrTtaFfMacScheduler::NrTtaFfMacScheduler(ns3::NrTtaFfMacScheduler const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrTtaFfMacScheduler const &', 'arg0')])
    ## nr-tta-ff-mac-scheduler.h (module 'nr'): ns3::NrTtaFfMacScheduler::NrTtaFfMacScheduler() [constructor]
    cls.add_constructor([])
    ## nr-tta-ff-mac-scheduler.h (module 'nr'): void ns3::NrTtaFfMacScheduler::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-tta-ff-mac-scheduler.h (module 'nr'): ns3::FfMacCschedSapProvider * ns3::NrTtaFfMacScheduler::GetFfMacCschedSapProvider() [member function]
    cls.add_method('GetFfMacCschedSapProvider', 
                   'ns3::FfMacCschedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-tta-ff-mac-scheduler.h (module 'nr'): ns3::FfMacSchedSapProvider * ns3::NrTtaFfMacScheduler::GetFfMacSchedSapProvider() [member function]
    cls.add_method('GetFfMacSchedSapProvider', 
                   'ns3::FfMacSchedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-tta-ff-mac-scheduler.h (module 'nr'): ns3::NrFfrSapUser * ns3::NrTtaFfMacScheduler::GetNrFfrSapUser() [member function]
    cls.add_method('GetNrFfrSapUser', 
                   'ns3::NrFfrSapUser *', 
                   [], 
                   is_virtual=True)
    ## nr-tta-ff-mac-scheduler.h (module 'nr'): static ns3::TypeId ns3::NrTtaFfMacScheduler::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-tta-ff-mac-scheduler.h (module 'nr'): void ns3::NrTtaFfMacScheduler::SetFfMacCschedSapUser(ns3::FfMacCschedSapUser * s) [member function]
    cls.add_method('SetFfMacCschedSapUser', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-tta-ff-mac-scheduler.h (module 'nr'): void ns3::NrTtaFfMacScheduler::SetFfMacSchedSapUser(ns3::FfMacSchedSapUser * s) [member function]
    cls.add_method('SetFfMacSchedSapUser', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-tta-ff-mac-scheduler.h (module 'nr'): void ns3::NrTtaFfMacScheduler::SetNrFfrSapProvider(ns3::NrFfrSapProvider * s) [member function]
    cls.add_method('SetNrFfrSapProvider', 
                   'void', 
                   [param('ns3::NrFfrSapProvider *', 's')], 
                   is_virtual=True)
    ## nr-tta-ff-mac-scheduler.h (module 'nr'): void ns3::NrTtaFfMacScheduler::TransmissionModeConfigurationUpdate(uint16_t rnti, uint8_t txMode) [member function]
    cls.add_method('TransmissionModeConfigurationUpdate', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'txMode')])
    return

def register_Ns3TypeIdChecker_methods(root_module, cls):
    ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::TypeIdChecker const &', 'arg0')])
    return

def register_Ns3TypeIdValue_methods(root_module, cls):
    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])
    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeId const & value) [constructor]
    cls.add_constructor([param('ns3::TypeId const &', 'value')])
    ## type-id.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::TypeIdValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## type-id.h (module 'core'): bool ns3::TypeIdValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeIdValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): std::string ns3::TypeIdValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## type-id.h (module 'core'): void ns3::TypeIdValue::Set(ns3::TypeId const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::TypeId const &', 'value')])
    return

def register_Ns3UintegerValue_methods(root_module, cls):
    ## uinteger.h (module 'core'): ns3::UintegerValue::UintegerValue() [constructor]
    cls.add_constructor([])
    ## uinteger.h (module 'core'): ns3::UintegerValue::UintegerValue(ns3::UintegerValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::UintegerValue const &', 'arg0')])
    ## uinteger.h (module 'core'): ns3::UintegerValue::UintegerValue(uint64_t const & value) [constructor]
    cls.add_constructor([param('uint64_t const &', 'value')])
    ## uinteger.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::UintegerValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## uinteger.h (module 'core'): bool ns3::UintegerValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## uinteger.h (module 'core'): uint64_t ns3::UintegerValue::Get() const [member function]
    cls.add_method('Get', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## uinteger.h (module 'core'): std::string ns3::UintegerValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## uinteger.h (module 'core'): void ns3::UintegerValue::Set(uint64_t const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('uint64_t const &', 'value')])
    return

def register_Ns3UlDciNrControlMessage_methods(root_module, cls):
    ## nr-control-messages.h (module 'nr'): ns3::UlDciNrControlMessage::UlDciNrControlMessage(ns3::UlDciNrControlMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::UlDciNrControlMessage const &', 'arg0')])
    ## nr-control-messages.h (module 'nr'): ns3::UlDciNrControlMessage::UlDciNrControlMessage() [constructor]
    cls.add_constructor([])
    ## nr-control-messages.h (module 'nr'): ns3::UlDciListElement_s ns3::UlDciNrControlMessage::GetDci() [member function]
    cls.add_method('GetDci', 
                   'ns3::UlDciListElement_s', 
                   [])
    ## nr-control-messages.h (module 'nr'): void ns3::UlDciNrControlMessage::SetDci(ns3::UlDciListElement_s dci) [member function]
    cls.add_method('SetDci', 
                   'void', 
                   [param('ns3::UlDciListElement_s', 'dci')])
    return

def register_Ns3Vector2DChecker_methods(root_module, cls):
    ## vector.h (module 'core'): ns3::Vector2DChecker::Vector2DChecker() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector2DChecker::Vector2DChecker(ns3::Vector2DChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Vector2DChecker const &', 'arg0')])
    return

def register_Ns3Vector2DValue_methods(root_module, cls):
    ## vector.h (module 'core'): ns3::Vector2DValue::Vector2DValue() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector2DValue::Vector2DValue(ns3::Vector2DValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Vector2DValue const &', 'arg0')])
    ## vector.h (module 'core'): ns3::Vector2DValue::Vector2DValue(ns3::Vector2D const & value) [constructor]
    cls.add_constructor([param('ns3::Vector2D const &', 'value')])
    ## vector.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::Vector2DValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## vector.h (module 'core'): bool ns3::Vector2DValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## vector.h (module 'core'): ns3::Vector2D ns3::Vector2DValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Vector2D', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): std::string ns3::Vector2DValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## vector.h (module 'core'): void ns3::Vector2DValue::Set(ns3::Vector2D const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Vector2D const &', 'value')])
    return

def register_Ns3Vector3DChecker_methods(root_module, cls):
    ## vector.h (module 'core'): ns3::Vector3DChecker::Vector3DChecker() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector3DChecker::Vector3DChecker(ns3::Vector3DChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Vector3DChecker const &', 'arg0')])
    return

def register_Ns3Vector3DValue_methods(root_module, cls):
    ## vector.h (module 'core'): ns3::Vector3DValue::Vector3DValue() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector3DValue::Vector3DValue(ns3::Vector3DValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Vector3DValue const &', 'arg0')])
    ## vector.h (module 'core'): ns3::Vector3DValue::Vector3DValue(ns3::Vector3D const & value) [constructor]
    cls.add_constructor([param('ns3::Vector3D const &', 'value')])
    ## vector.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::Vector3DValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## vector.h (module 'core'): bool ns3::Vector3DValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## vector.h (module 'core'): ns3::Vector3D ns3::Vector3DValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Vector3D', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): std::string ns3::Vector3DValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## vector.h (module 'core'): void ns3::Vector3DValue::Set(ns3::Vector3D const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Vector3D const &', 'value')])
    return

def register_Ns3VirtualNetDevice_methods(root_module, cls):
    ## virtual-net-device.h (module 'virtual-net-device'): ns3::VirtualNetDevice::VirtualNetDevice(ns3::VirtualNetDevice const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::VirtualNetDevice const &', 'arg0')])
    ## virtual-net-device.h (module 'virtual-net-device'): ns3::VirtualNetDevice::VirtualNetDevice() [constructor]
    cls.add_constructor([])
    ## virtual-net-device.h (module 'virtual-net-device'): void ns3::VirtualNetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
    cls.add_method('AddLinkChangeCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')], 
                   is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): ns3::Address ns3::VirtualNetDevice::GetAddress() const [member function]
    cls.add_method('GetAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): ns3::Address ns3::VirtualNetDevice::GetBroadcast() const [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): ns3::Ptr<ns3::Channel> ns3::VirtualNetDevice::GetChannel() const [member function]
    cls.add_method('GetChannel', 
                   'ns3::Ptr< ns3::Channel >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): uint32_t ns3::VirtualNetDevice::GetIfIndex() const [member function]
    cls.add_method('GetIfIndex', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): uint16_t ns3::VirtualNetDevice::GetMtu() const [member function]
    cls.add_method('GetMtu', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): ns3::Address ns3::VirtualNetDevice::GetMulticast(ns3::Ipv4Address multicastGroup) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv4Address', 'multicastGroup')], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): ns3::Address ns3::VirtualNetDevice::GetMulticast(ns3::Ipv6Address addr) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv6Address', 'addr')], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): ns3::Ptr<ns3::Node> ns3::VirtualNetDevice::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): static ns3::TypeId ns3::VirtualNetDevice::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## virtual-net-device.h (module 'virtual-net-device'): bool ns3::VirtualNetDevice::IsBridge() const [member function]
    cls.add_method('IsBridge', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): bool ns3::VirtualNetDevice::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): bool ns3::VirtualNetDevice::IsLinkUp() const [member function]
    cls.add_method('IsLinkUp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): bool ns3::VirtualNetDevice::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): bool ns3::VirtualNetDevice::IsPointToPoint() const [member function]
    cls.add_method('IsPointToPoint', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): bool ns3::VirtualNetDevice::NeedsArp() const [member function]
    cls.add_method('NeedsArp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): bool ns3::VirtualNetDevice::Receive(ns3::Ptr<ns3::Packet> packet, uint16_t protocol, ns3::Address const & source, ns3::Address const & destination, ns3::NetDevice::PacketType packetType) [member function]
    cls.add_method('Receive', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint16_t', 'protocol'), param('ns3::Address const &', 'source'), param('ns3::Address const &', 'destination'), param('ns3::NetDevice::PacketType', 'packetType')])
    ## virtual-net-device.h (module 'virtual-net-device'): bool ns3::VirtualNetDevice::Send(ns3::Ptr<ns3::Packet> packet, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('Send', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): bool ns3::VirtualNetDevice::SendFrom(ns3::Ptr<ns3::Packet> packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('SendFrom', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'source'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): void ns3::VirtualNetDevice::SetAddress(ns3::Address address) [member function]
    cls.add_method('SetAddress', 
                   'void', 
                   [param('ns3::Address', 'address')], 
                   is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): void ns3::VirtualNetDevice::SetIfIndex(uint32_t const index) [member function]
    cls.add_method('SetIfIndex', 
                   'void', 
                   [param('uint32_t const', 'index')], 
                   is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): void ns3::VirtualNetDevice::SetIsPointToPoint(bool isPointToPoint) [member function]
    cls.add_method('SetIsPointToPoint', 
                   'void', 
                   [param('bool', 'isPointToPoint')])
    ## virtual-net-device.h (module 'virtual-net-device'): bool ns3::VirtualNetDevice::SetMtu(uint16_t const mtu) [member function]
    cls.add_method('SetMtu', 
                   'bool', 
                   [param('uint16_t const', 'mtu')], 
                   is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): void ns3::VirtualNetDevice::SetNeedsArp(bool needsArp) [member function]
    cls.add_method('SetNeedsArp', 
                   'void', 
                   [param('bool', 'needsArp')])
    ## virtual-net-device.h (module 'virtual-net-device'): void ns3::VirtualNetDevice::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): void ns3::VirtualNetDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
    cls.add_method('SetPromiscReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): void ns3::VirtualNetDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
    cls.add_method('SetReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): void ns3::VirtualNetDevice::SetSendCallback(ns3::Callback<bool, ns3::Ptr<ns3::Packet>, ns3::Address const&, ns3::Address const&, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> transmitCb) [member function]
    cls.add_method('SetSendCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::Address const &, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'transmitCb')])
    ## virtual-net-device.h (module 'virtual-net-device'): void ns3::VirtualNetDevice::SetSupportsSendFrom(bool supportsSendFrom) [member function]
    cls.add_method('SetSupportsSendFrom', 
                   'void', 
                   [param('bool', 'supportsSendFrom')])
    ## virtual-net-device.h (module 'virtual-net-device'): bool ns3::VirtualNetDevice::SupportsSendFrom() const [member function]
    cls.add_method('SupportsSendFrom', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## virtual-net-device.h (module 'virtual-net-device'): void ns3::VirtualNetDevice::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NrA2A4RsrqHandoverAlgorithm_methods(root_module, cls):
    ## a2-a4-rsrq-handover-algorithm.h (module 'nr'): ns3::NrA2A4RsrqHandoverAlgorithm::NrA2A4RsrqHandoverAlgorithm(ns3::NrA2A4RsrqHandoverAlgorithm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrA2A4RsrqHandoverAlgorithm const &', 'arg0')])
    ## a2-a4-rsrq-handover-algorithm.h (module 'nr'): ns3::NrA2A4RsrqHandoverAlgorithm::NrA2A4RsrqHandoverAlgorithm() [constructor]
    cls.add_constructor([])
    ## a2-a4-rsrq-handover-algorithm.h (module 'nr'): ns3::NrHandoverManagementSapProvider * ns3::NrA2A4RsrqHandoverAlgorithm::GetNrHandoverManagementSapProvider() [member function]
    cls.add_method('GetNrHandoverManagementSapProvider', 
                   'ns3::NrHandoverManagementSapProvider *', 
                   [], 
                   is_virtual=True)
    ## a2-a4-rsrq-handover-algorithm.h (module 'nr'): static ns3::TypeId ns3::NrA2A4RsrqHandoverAlgorithm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## a2-a4-rsrq-handover-algorithm.h (module 'nr'): void ns3::NrA2A4RsrqHandoverAlgorithm::SetNrHandoverManagementSapUser(ns3::NrHandoverManagementSapUser * s) [member function]
    cls.add_method('SetNrHandoverManagementSapUser', 
                   'void', 
                   [param('ns3::NrHandoverManagementSapUser *', 's')], 
                   is_virtual=True)
    ## a2-a4-rsrq-handover-algorithm.h (module 'nr'): void ns3::NrA2A4RsrqHandoverAlgorithm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## a2-a4-rsrq-handover-algorithm.h (module 'nr'): void ns3::NrA2A4RsrqHandoverAlgorithm::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## a2-a4-rsrq-handover-algorithm.h (module 'nr'): void ns3::NrA2A4RsrqHandoverAlgorithm::DoReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('DoReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3NrA3RsrpHandoverAlgorithm_methods(root_module, cls):
    ## a3-rsrp-handover-algorithm.h (module 'nr'): ns3::NrA3RsrpHandoverAlgorithm::NrA3RsrpHandoverAlgorithm(ns3::NrA3RsrpHandoverAlgorithm const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrA3RsrpHandoverAlgorithm const &', 'arg0')])
    ## a3-rsrp-handover-algorithm.h (module 'nr'): ns3::NrA3RsrpHandoverAlgorithm::NrA3RsrpHandoverAlgorithm() [constructor]
    cls.add_constructor([])
    ## a3-rsrp-handover-algorithm.h (module 'nr'): ns3::NrHandoverManagementSapProvider * ns3::NrA3RsrpHandoverAlgorithm::GetNrHandoverManagementSapProvider() [member function]
    cls.add_method('GetNrHandoverManagementSapProvider', 
                   'ns3::NrHandoverManagementSapProvider *', 
                   [], 
                   is_virtual=True)
    ## a3-rsrp-handover-algorithm.h (module 'nr'): static ns3::TypeId ns3::NrA3RsrpHandoverAlgorithm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## a3-rsrp-handover-algorithm.h (module 'nr'): void ns3::NrA3RsrpHandoverAlgorithm::SetNrHandoverManagementSapUser(ns3::NrHandoverManagementSapUser * s) [member function]
    cls.add_method('SetNrHandoverManagementSapUser', 
                   'void', 
                   [param('ns3::NrHandoverManagementSapUser *', 's')], 
                   is_virtual=True)
    ## a3-rsrp-handover-algorithm.h (module 'nr'): void ns3::NrA3RsrpHandoverAlgorithm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## a3-rsrp-handover-algorithm.h (module 'nr'): void ns3::NrA3RsrpHandoverAlgorithm::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    ## a3-rsrp-handover-algorithm.h (module 'nr'): void ns3::NrA3RsrpHandoverAlgorithm::DoReportUeMeas(uint16_t rnti, ns3::NrRrcSap::MeasResults measResults) [member function]
    cls.add_method('DoReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::NrRrcSap::MeasResults', 'measResults')], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3AddressChecker_methods(root_module, cls):
    ## address.h (module 'network'): ns3::AddressChecker::AddressChecker() [constructor]
    cls.add_constructor([])
    ## address.h (module 'network'): ns3::AddressChecker::AddressChecker(ns3::AddressChecker const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::AddressChecker const &', 'arg0')])
    return

def register_Ns3AddressValue_methods(root_module, cls):
    ## address.h (module 'network'): ns3::AddressValue::AddressValue() [constructor]
    cls.add_constructor([])
    ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::AddressValue const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::AddressValue const &', 'arg0')])
    ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::Address const & value) [constructor]
    cls.add_constructor([param('ns3::Address const &', 'value')])
    ## address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::AddressValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## address.h (module 'network'): bool ns3::AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## address.h (module 'network'): ns3::Address ns3::AddressValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Address', 
                   [], 
                   is_const=True)
    ## address.h (module 'network'): std::string ns3::AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## address.h (module 'network'): void ns3::AddressValue::Set(ns3::Address const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Address const &', 'value')])
    return

def register_Ns3BsrNrControlMessage_methods(root_module, cls):
    ## nr-control-messages.h (module 'nr'): ns3::BsrNrControlMessage::BsrNrControlMessage(ns3::BsrNrControlMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::BsrNrControlMessage const &', 'arg0')])
    ## nr-control-messages.h (module 'nr'): ns3::BsrNrControlMessage::BsrNrControlMessage() [constructor]
    cls.add_constructor([])
    ## nr-control-messages.h (module 'nr'): ns3::MacCeListElement_s ns3::BsrNrControlMessage::GetBsr() [member function]
    cls.add_method('GetBsr', 
                   'ns3::MacCeListElement_s', 
                   [])
    ## nr-control-messages.h (module 'nr'): void ns3::BsrNrControlMessage::SetBsr(ns3::MacCeListElement_s bsr) [member function]
    cls.add_method('SetBsr', 
                   'void', 
                   [param('ns3::MacCeListElement_s', 'bsr')])
    return

def register_Ns3NrCqaFfMacScheduler_methods(root_module, cls):
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::NrCqaFfMacScheduler::NrCqaFfMacScheduler(ns3::NrCqaFfMacScheduler const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrCqaFfMacScheduler const &', 'arg0')])
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::NrCqaFfMacScheduler::NrCqaFfMacScheduler() [constructor]
    cls.add_constructor([])
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): void ns3::NrCqaFfMacScheduler::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::FfMacCschedSapProvider * ns3::NrCqaFfMacScheduler::GetFfMacCschedSapProvider() [member function]
    cls.add_method('GetFfMacCschedSapProvider', 
                   'ns3::FfMacCschedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::FfMacSchedSapProvider * ns3::NrCqaFfMacScheduler::GetFfMacSchedSapProvider() [member function]
    cls.add_method('GetFfMacSchedSapProvider', 
                   'ns3::FfMacSchedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): ns3::NrFfrSapUser * ns3::NrCqaFfMacScheduler::GetNrFfrSapUser() [member function]
    cls.add_method('GetNrFfrSapUser', 
                   'ns3::NrFfrSapUser *', 
                   [], 
                   is_virtual=True)
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): static ns3::TypeId ns3::NrCqaFfMacScheduler::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): void ns3::NrCqaFfMacScheduler::SetFfMacCschedSapUser(ns3::FfMacCschedSapUser * s) [member function]
    cls.add_method('SetFfMacCschedSapUser', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): void ns3::NrCqaFfMacScheduler::SetFfMacSchedSapUser(ns3::FfMacSchedSapUser * s) [member function]
    cls.add_method('SetFfMacSchedSapUser', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): void ns3::NrCqaFfMacScheduler::SetNrFfrSapProvider(ns3::NrFfrSapProvider * s) [member function]
    cls.add_method('SetNrFfrSapProvider', 
                   'void', 
                   [param('ns3::NrFfrSapProvider *', 's')], 
                   is_virtual=True)
    ## nr-cqa-ff-mac-scheduler.h (module 'nr'): void ns3::NrCqaFfMacScheduler::TransmissionModeConfigurationUpdate(uint16_t rnti, uint8_t txMode) [member function]
    cls.add_method('TransmissionModeConfigurationUpdate', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'txMode')])
    return

def register_Ns3DlCqiNrControlMessage_methods(root_module, cls):
    ## nr-control-messages.h (module 'nr'): ns3::DlCqiNrControlMessage::DlCqiNrControlMessage(ns3::DlCqiNrControlMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DlCqiNrControlMessage const &', 'arg0')])
    ## nr-control-messages.h (module 'nr'): ns3::DlCqiNrControlMessage::DlCqiNrControlMessage() [constructor]
    cls.add_constructor([])
    ## nr-control-messages.h (module 'nr'): ns3::CqiListElement_s ns3::DlCqiNrControlMessage::GetDlCqi() [member function]
    cls.add_method('GetDlCqi', 
                   'ns3::CqiListElement_s', 
                   [])
    ## nr-control-messages.h (module 'nr'): void ns3::DlCqiNrControlMessage::SetDlCqi(ns3::CqiListElement_s dlcqi) [member function]
    cls.add_method('SetDlCqi', 
                   'void', 
                   [param('ns3::CqiListElement_s', 'dlcqi')])
    return

def register_Ns3DlDciNrControlMessage_methods(root_module, cls):
    ## nr-control-messages.h (module 'nr'): ns3::DlDciNrControlMessage::DlDciNrControlMessage(ns3::DlDciNrControlMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DlDciNrControlMessage const &', 'arg0')])
    ## nr-control-messages.h (module 'nr'): ns3::DlDciNrControlMessage::DlDciNrControlMessage() [constructor]
    cls.add_constructor([])
    ## nr-control-messages.h (module 'nr'): ns3::DlDciListElement_s ns3::DlDciNrControlMessage::GetDci() [member function]
    cls.add_method('GetDci', 
                   'ns3::DlDciListElement_s', 
                   [])
    ## nr-control-messages.h (module 'nr'): void ns3::DlDciNrControlMessage::SetDci(ns3::DlDciListElement_s dci) [member function]
    cls.add_method('SetDci', 
                   'void', 
                   [param('ns3::DlDciListElement_s', 'dci')])
    return

def register_Ns3DlHarqFeedbackNrControlMessage_methods(root_module, cls):
    ## nr-control-messages.h (module 'nr'): ns3::DlHarqFeedbackNrControlMessage::DlHarqFeedbackNrControlMessage(ns3::DlHarqFeedbackNrControlMessage const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::DlHarqFeedbackNrControlMessage const &', 'arg0')])
    ## nr-control-messages.h (module 'nr'): ns3::DlHarqFeedbackNrControlMessage::DlHarqFeedbackNrControlMessage() [constructor]
    cls.add_constructor([])
    ## nr-control-messages.h (module 'nr'): ns3::DlInfoListElement_s ns3::DlHarqFeedbackNrControlMessage::GetDlHarqFeedback() [member function]
    cls.add_method('GetDlHarqFeedback', 
                   'ns3::DlInfoListElement_s', 
                   [])
    ## nr-control-messages.h (module 'nr'): void ns3::DlHarqFeedbackNrControlMessage::SetDlHarqFeedback(ns3::DlInfoListElement_s m) [member function]
    cls.add_method('SetDlHarqFeedback', 
                   'void', 
                   [param('ns3::DlInfoListElement_s', 'm')])
    return

def register_Ns3EmuNgcHelper_methods(root_module, cls):
    ## emu-ngc-helper.h (module 'nr'): ns3::EmuNgcHelper::EmuNgcHelper(ns3::EmuNgcHelper const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::EmuNgcHelper const &', 'arg0')])
    ## emu-ngc-helper.h (module 'nr'): ns3::EmuNgcHelper::EmuNgcHelper() [constructor]
    cls.add_constructor([])
    ## emu-ngc-helper.h (module 'nr'): uint8_t ns3::EmuNgcHelper::ActivateEpsBearer(ns3::Ptr<ns3::NetDevice> ueNrDevice, uint64_t imsi, ns3::Ptr<ns3::NgcTft> tft, ns3::EpsBearer bearer) [member function]
    cls.add_method('ActivateEpsBearer', 
                   'uint8_t', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueNrDevice'), param('uint64_t', 'imsi'), param('ns3::Ptr< ns3::NgcTft >', 'tft'), param('ns3::EpsBearer', 'bearer')], 
                   is_virtual=True)
    ## emu-ngc-helper.h (module 'nr'): void ns3::EmuNgcHelper::AddEnb(ns3::Ptr<ns3::Node> enbNode, ns3::Ptr<ns3::NetDevice> nrEnbNetDevice, uint16_t cellId) [member function]
    cls.add_method('AddEnb', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'enbNode'), param('ns3::Ptr< ns3::NetDevice >', 'nrEnbNetDevice'), param('uint16_t', 'cellId')], 
                   is_virtual=True)
    ## emu-ngc-helper.h (module 'nr'): void ns3::EmuNgcHelper::AddUe(ns3::Ptr<ns3::NetDevice> ueNrDevice, uint64_t imsi) [member function]
    cls.add_method('AddUe', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueNrDevice'), param('uint64_t', 'imsi')], 
                   is_virtual=True)
    ## emu-ngc-helper.h (module 'nr'): void ns3::EmuNgcHelper::AddX2Interface(ns3::Ptr<ns3::Node> enbNode1, ns3::Ptr<ns3::Node> enbNode2) [member function]
    cls.add_method('AddX2Interface', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'enbNode1'), param('ns3::Ptr< ns3::Node >', 'enbNode2')], 
                   is_virtual=True)
    ## emu-ngc-helper.h (module 'nr'): ns3::Ipv4InterfaceContainer ns3::EmuNgcHelper::AssignUeIpv4Address(ns3::NetDeviceContainer ueDevices) [member function]
    cls.add_method('AssignUeIpv4Address', 
                   'ns3::Ipv4InterfaceContainer', 
                   [param('ns3::NetDeviceContainer', 'ueDevices')], 
                   is_virtual=True)
    ## emu-ngc-helper.h (module 'nr'): void ns3::EmuNgcHelper::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## emu-ngc-helper.h (module 'nr'): void ns3::EmuNgcHelper::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## emu-ngc-helper.h (module 'nr'): ns3::Ptr<ns3::Node> ns3::EmuNgcHelper::GetUpfNode() [member function]
    cls.add_method('GetUpfNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_virtual=True)
    ## emu-ngc-helper.h (module 'nr'): static ns3::TypeId ns3::EmuNgcHelper::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## emu-ngc-helper.h (module 'nr'): ns3::Ipv4Address ns3::EmuNgcHelper::GetUeDefaultGatewayAddress() [member function]
    cls.add_method('GetUeDefaultGatewayAddress', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3NrFdBetFfMacScheduler_methods(root_module, cls):
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): ns3::NrFdBetFfMacScheduler::NrFdBetFfMacScheduler(ns3::NrFdBetFfMacScheduler const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFdBetFfMacScheduler const &', 'arg0')])
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): ns3::NrFdBetFfMacScheduler::NrFdBetFfMacScheduler() [constructor]
    cls.add_constructor([])
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdBetFfMacScheduler::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): ns3::FfMacCschedSapProvider * ns3::NrFdBetFfMacScheduler::GetFfMacCschedSapProvider() [member function]
    cls.add_method('GetFfMacCschedSapProvider', 
                   'ns3::FfMacCschedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): ns3::FfMacSchedSapProvider * ns3::NrFdBetFfMacScheduler::GetFfMacSchedSapProvider() [member function]
    cls.add_method('GetFfMacSchedSapProvider', 
                   'ns3::FfMacSchedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): ns3::NrFfrSapUser * ns3::NrFdBetFfMacScheduler::GetNrFfrSapUser() [member function]
    cls.add_method('GetNrFfrSapUser', 
                   'ns3::NrFfrSapUser *', 
                   [], 
                   is_virtual=True)
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): static ns3::TypeId ns3::NrFdBetFfMacScheduler::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdBetFfMacScheduler::SetFfMacCschedSapUser(ns3::FfMacCschedSapUser * s) [member function]
    cls.add_method('SetFfMacCschedSapUser', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdBetFfMacScheduler::SetFfMacSchedSapUser(ns3::FfMacSchedSapUser * s) [member function]
    cls.add_method('SetFfMacSchedSapUser', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdBetFfMacScheduler::SetNrFfrSapProvider(ns3::NrFfrSapProvider * s) [member function]
    cls.add_method('SetNrFfrSapProvider', 
                   'void', 
                   [param('ns3::NrFfrSapProvider *', 's')], 
                   is_virtual=True)
    ## nr-fdbet-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdBetFfMacScheduler::TransmissionModeConfigurationUpdate(uint16_t rnti, uint8_t txMode) [member function]
    cls.add_method('TransmissionModeConfigurationUpdate', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'txMode')])
    return

def register_Ns3NrFdMtFfMacScheduler_methods(root_module, cls):
    ## nr-fdmt-nr-ff-mac-scheduler.h (module 'nr'): ns3::NrFdMtFfMacScheduler::NrFdMtFfMacScheduler(ns3::NrFdMtFfMacScheduler const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFdMtFfMacScheduler const &', 'arg0')])
    ## nr-fdmt-nr-ff-mac-scheduler.h (module 'nr'): ns3::NrFdMtFfMacScheduler::NrFdMtFfMacScheduler() [constructor]
    cls.add_constructor([])
    ## nr-fdmt-nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdMtFfMacScheduler::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-fdmt-nr-ff-mac-scheduler.h (module 'nr'): ns3::FfMacCschedSapProvider * ns3::NrFdMtFfMacScheduler::GetFfMacCschedSapProvider() [member function]
    cls.add_method('GetFfMacCschedSapProvider', 
                   'ns3::FfMacCschedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fdmt-nr-ff-mac-scheduler.h (module 'nr'): ns3::FfMacSchedSapProvider * ns3::NrFdMtFfMacScheduler::GetFfMacSchedSapProvider() [member function]
    cls.add_method('GetFfMacSchedSapProvider', 
                   'ns3::FfMacSchedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fdmt-nr-ff-mac-scheduler.h (module 'nr'): ns3::NrFfrSapUser * ns3::NrFdMtFfMacScheduler::GetNrFfrSapUser() [member function]
    cls.add_method('GetNrFfrSapUser', 
                   'ns3::NrFfrSapUser *', 
                   [], 
                   is_virtual=True)
    ## nr-fdmt-nr-ff-mac-scheduler.h (module 'nr'): static ns3::TypeId ns3::NrFdMtFfMacScheduler::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-fdmt-nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdMtFfMacScheduler::SetFfMacCschedSapUser(ns3::FfMacCschedSapUser * s) [member function]
    cls.add_method('SetFfMacCschedSapUser', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fdmt-nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdMtFfMacScheduler::SetFfMacSchedSapUser(ns3::FfMacSchedSapUser * s) [member function]
    cls.add_method('SetFfMacSchedSapUser', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fdmt-nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdMtFfMacScheduler::SetNrFfrSapProvider(ns3::NrFfrSapProvider * s) [member function]
    cls.add_method('SetNrFfrSapProvider', 
                   'void', 
                   [param('ns3::NrFfrSapProvider *', 's')], 
                   is_virtual=True)
    ## nr-fdmt-nr-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdMtFfMacScheduler::TransmissionModeConfigurationUpdate(uint16_t rnti, uint8_t txMode) [member function]
    cls.add_method('TransmissionModeConfigurationUpdate', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'txMode')])
    return

def register_Ns3NrFdTbfqFfMacScheduler_methods(root_module, cls):
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::NrFdTbfqFfMacScheduler::NrFdTbfqFfMacScheduler(ns3::NrFdTbfqFfMacScheduler const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrFdTbfqFfMacScheduler const &', 'arg0')])
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::NrFdTbfqFfMacScheduler::NrFdTbfqFfMacScheduler() [constructor]
    cls.add_constructor([])
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdTbfqFfMacScheduler::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::FfMacCschedSapProvider * ns3::NrFdTbfqFfMacScheduler::GetFfMacCschedSapProvider() [member function]
    cls.add_method('GetFfMacCschedSapProvider', 
                   'ns3::FfMacCschedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::FfMacSchedSapProvider * ns3::NrFdTbfqFfMacScheduler::GetFfMacSchedSapProvider() [member function]
    cls.add_method('GetFfMacSchedSapProvider', 
                   'ns3::FfMacSchedSapProvider *', 
                   [], 
                   is_virtual=True)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): ns3::NrFfrSapUser * ns3::NrFdTbfqFfMacScheduler::GetNrFfrSapUser() [member function]
    cls.add_method('GetNrFfrSapUser', 
                   'ns3::NrFfrSapUser *', 
                   [], 
                   is_virtual=True)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): static ns3::TypeId ns3::NrFdTbfqFfMacScheduler::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdTbfqFfMacScheduler::SetFfMacCschedSapUser(ns3::FfMacCschedSapUser * s) [member function]
    cls.add_method('SetFfMacCschedSapUser', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdTbfqFfMacScheduler::SetFfMacSchedSapUser(ns3::FfMacSchedSapUser * s) [member function]
    cls.add_method('SetFfMacSchedSapUser', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser *', 's')], 
                   is_virtual=True)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdTbfqFfMacScheduler::SetNrFfrSapProvider(ns3::NrFfrSapProvider * s) [member function]
    cls.add_method('SetNrFfrSapProvider', 
                   'void', 
                   [param('ns3::NrFfrSapProvider *', 's')], 
                   is_virtual=True)
    ## nr-fdtbfq-ff-mac-scheduler.h (module 'nr'): void ns3::NrFdTbfqFfMacScheduler::TransmissionModeConfigurationUpdate(uint16_t rnti, uint8_t txMode) [member function]
    cls.add_method('TransmissionModeConfigurationUpdate', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'txMode')])
    return

def register_Ns3HandoverPreparationInfoHeader_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::HandoverPreparationInfoHeader::HandoverPreparationInfoHeader(ns3::HandoverPreparationInfoHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::HandoverPreparationInfoHeader const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::HandoverPreparationInfoHeader::HandoverPreparationInfoHeader() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::HandoverPreparationInfoHeader::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::AsConfig ns3::HandoverPreparationInfoHeader::GetAsConfig() const [member function]
    cls.add_method('GetAsConfig', 
                   'ns3::NrRrcSap::AsConfig', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::HandoverPreparationInfo ns3::HandoverPreparationInfoHeader::GetMessage() const [member function]
    cls.add_method('GetMessage', 
                   'ns3::NrRrcSap::HandoverPreparationInfo', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::HandoverPreparationInfoHeader::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::HandoverPreparationInfoHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::HandoverPreparationInfoHeader::SetMessage(ns3::NrRrcSap::HandoverPreparationInfo msg) [member function]
    cls.add_method('SetMessage', 
                   'void', 
                   [param('ns3::NrRrcSap::HandoverPreparationInfo', 'msg')])
    return

def register_Ns3NrDataRadioBearerInfo_methods(root_module, cls):
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrDataRadioBearerInfo::NrDataRadioBearerInfo() [constructor]
    cls.add_constructor([])
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrDataRadioBearerInfo::NrDataRadioBearerInfo(ns3::NrDataRadioBearerInfo const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrDataRadioBearerInfo const &', 'arg0')])
    ## nr-radio-bearer-info.h (module 'nr'): static ns3::TypeId ns3::NrDataRadioBearerInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrDataRadioBearerInfo::m_drbIdentity [variable]
    cls.add_instance_attribute('m_drbIdentity', 'uint8_t', is_const=False)
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrDataRadioBearerInfo::m_epsBearer [variable]
    cls.add_instance_attribute('m_epsBearer', 'ns3::EpsBearer', is_const=False)
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrDataRadioBearerInfo::m_epsBearerIdentity [variable]
    cls.add_instance_attribute('m_epsBearerIdentity', 'uint8_t', is_const=False)
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrDataRadioBearerInfo::m_gtpTeid [variable]
    cls.add_instance_attribute('m_gtpTeid', 'uint32_t', is_const=False)
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrDataRadioBearerInfo::m_logicalChannelConfig [variable]
    cls.add_instance_attribute('m_logicalChannelConfig', 'ns3::NrRrcSap::LogicalChannelConfig', is_const=False)
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrDataRadioBearerInfo::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'uint8_t', is_const=False)
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrDataRadioBearerInfo::m_rlcConfig [variable]
    cls.add_instance_attribute('m_rlcConfig', 'ns3::NrRrcSap::RlcConfig', is_const=False)
    ## nr-radio-bearer-info.h (module 'nr'): ns3::NrDataRadioBearerInfo::m_transportLayerAddress [variable]
    cls.add_instance_attribute('m_transportLayerAddress', 'ns3::Ipv4Address', is_const=False)
    return

def register_Ns3NrEnbPhy_methods(root_module, cls):
    ## nr-enb-phy.h (module 'nr'): ns3::NrEnbPhy::NrEnbPhy(ns3::NrEnbPhy const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::NrEnbPhy const &', 'arg0')])
    ## nr-enb-phy.h (module 'nr'): ns3::NrEnbPhy::NrEnbPhy() [constructor]
    cls.add_constructor([])
    ## nr-enb-phy.h (module 'nr'): ns3::NrEnbPhy::NrEnbPhy(ns3::Ptr<ns3::NrSpectrumPhy> dlPhy, ns3::Ptr<ns3::NrSpectrumPhy> ulPhy) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::NrSpectrumPhy >', 'dlPhy'), param('ns3::Ptr< ns3::NrSpectrumPhy >', 'ulPhy')])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::CalcChannelQualityForUe(std::vector<double, std::allocator<double> > sinr, ns3::Ptr<ns3::NrSpectrumPhy> ue) [member function]
    cls.add_method('CalcChannelQualityForUe', 
                   'void', 
                   [param('std::vector< double >', 'sinr'), param('ns3::Ptr< ns3::NrSpectrumPhy >', 'ue')])
    ## nr-enb-phy.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters ns3::NrEnbPhy::CreatePuschCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('CreatePuschCqiReport', 
                   'ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters', 
                   [param('ns3::SpectrumValue const &', 'sinr')])
    ## nr-enb-phy.h (module 'nr'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters ns3::NrEnbPhy::CreateSrsCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('CreateSrsCqiReport', 
                   'ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters', 
                   [param('ns3::SpectrumValue const &', 'sinr')])
    ## nr-enb-phy.h (module 'nr'): ns3::Ptr<ns3::SpectrumValue> ns3::NrEnbPhy::CreateTxPowerSpectralDensity() [member function]
    cls.add_method('CreateTxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [], 
                   is_virtual=True)
    ## nr-enb-phy.h (module 'nr'): ns3::Ptr<ns3::SpectrumValue> ns3::NrEnbPhy::CreateTxPowerSpectralDensityWithPowerAllocation() [member function]
    cls.add_method('CreateTxPowerSpectralDensityWithPowerAllocation', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [], 
                   is_virtual=True)
    ## nr-enb-phy.h (module 'nr'): std::list<ns3::UlDciNrControlMessage,std::allocator<ns3::UlDciNrControlMessage> > ns3::NrEnbPhy::DequeueUlDci() [member function]
    cls.add_method('DequeueUlDci', 
                   'std::list< ns3::UlDciNrControlMessage >', 
                   [])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-enb-phy.h (module 'nr'): int8_t ns3::NrEnbPhy::DoGetReferenceSignalPower() const [member function]
    cls.add_method('DoGetReferenceSignalPower', 
                   'int8_t', 
                   [], 
                   is_const=True)
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::EndFrame() [member function]
    cls.add_method('EndFrame', 
                   'void', 
                   [])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::EndSubFrame() [member function]
    cls.add_method('EndSubFrame', 
                   'void', 
                   [])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::GenerateCtrlCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateCtrlCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_virtual=True)
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::GenerateDataCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateDataCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_virtual=True)
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::GeneratePowerAllocationMap(uint16_t rnti, int rbId) [member function]
    cls.add_method('GeneratePowerAllocationMap', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('int', 'rbId')])
    ## nr-enb-phy.h (module 'nr'): ns3::Ptr<ns3::NrSpectrumPhy> ns3::NrEnbPhy::GetDlSpectrumPhy() const [member function]
    cls.add_method('GetDlSpectrumPhy', 
                   'ns3::Ptr< ns3::NrSpectrumPhy >', 
                   [], 
                   is_const=True)
    ## nr-enb-phy.h (module 'nr'): std::vector<int, std::allocator<int> > ns3::NrEnbPhy::GetDownlinkSubChannels() [member function]
    cls.add_method('GetDownlinkSubChannels', 
                   'std::vector< int >', 
                   [])
    ## nr-enb-phy.h (module 'nr'): ns3::NrEnbCphySapProvider * ns3::NrEnbPhy::GetNrEnbCphySapProvider() [member function]
    cls.add_method('GetNrEnbCphySapProvider', 
                   'ns3::NrEnbCphySapProvider *', 
                   [])
    ## nr-enb-phy.h (module 'nr'): ns3::NrEnbPhySapProvider * ns3::NrEnbPhy::GetNrEnbPhySapProvider() [member function]
    cls.add_method('GetNrEnbPhySapProvider', 
                   'ns3::NrEnbPhySapProvider *', 
                   [])
    ## nr-enb-phy.h (module 'nr'): uint8_t ns3::NrEnbPhy::GetMacChDelay() const [member function]
    cls.add_method('GetMacChDelay', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-enb-phy.h (module 'nr'): double ns3::NrEnbPhy::GetNoiseFigure() const [member function]
    cls.add_method('GetNoiseFigure', 
                   'double', 
                   [], 
                   is_const=True)
    ## nr-enb-phy.h (module 'nr'): double ns3::NrEnbPhy::GetTxPower() const [member function]
    cls.add_method('GetTxPower', 
                   'double', 
                   [], 
                   is_const=True)
    ## nr-enb-phy.h (module 'nr'): static ns3::TypeId ns3::NrEnbPhy::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-enb-phy.h (module 'nr'): ns3::Ptr<ns3::NrSpectrumPhy> ns3::NrEnbPhy::GetUlSpectrumPhy() const [member function]
    cls.add_method('GetUlSpectrumPhy', 
                   'ns3::Ptr< ns3::NrSpectrumPhy >', 
                   [], 
                   is_const=True)
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::PhyPduReceived(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('PhyPduReceived', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::QueueUlDci(ns3::UlDciNrControlMessage m) [member function]
    cls.add_method('QueueUlDci', 
                   'void', 
                   [param('ns3::UlDciNrControlMessage', 'm')])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::ReceiveNrControlMessage(ns3::Ptr<ns3::NrControlMessage> msg) [member function]
    cls.add_method('ReceiveNrControlMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrControlMessage >', 'msg')], 
                   is_virtual=True)
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::ReceiveNrControlMessageList(std::list<ns3::Ptr<ns3::NrControlMessage>, std::allocator<ns3::Ptr<ns3::NrControlMessage> > > arg0) [member function]
    cls.add_method('ReceiveNrControlMessageList', 
                   'void', 
                   [param('std::list< ns3::Ptr< ns3::NrControlMessage > >', 'arg0')], 
                   is_virtual=True)
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::ReceiveNrUlHarqFeedback(ns3::UlInfoListElement_s mes) [member function]
    cls.add_method('ReceiveNrUlHarqFeedback', 
                   'void', 
                   [param('ns3::UlInfoListElement_s', 'mes')], 
                   is_virtual=True)
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::ReportInterference(ns3::SpectrumValue const & interf) [member function]
    cls.add_method('ReportInterference', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'interf')], 
                   is_virtual=True)
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::ReportRsReceivedPower(ns3::SpectrumValue const & power) [member function]
    cls.add_method('ReportRsReceivedPower', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'power')], 
                   is_virtual=True)
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::SendControlChannels(std::list<ns3::Ptr<ns3::NrControlMessage>, std::allocator<ns3::Ptr<ns3::NrControlMessage> > > ctrlMsgList) [member function]
    cls.add_method('SendControlChannels', 
                   'void', 
                   [param('std::list< ns3::Ptr< ns3::NrControlMessage > >', 'ctrlMsgList')])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::SendDataChannels(ns3::Ptr<ns3::PacketBurst> pb) [member function]
    cls.add_method('SendDataChannels', 
                   'void', 
                   [param('ns3::Ptr< ns3::PacketBurst >', 'pb')])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::SetDownlinkSubChannels(std::vector<int, std::allocator<int> > mask) [member function]
    cls.add_method('SetDownlinkSubChannels', 
                   'void', 
                   [param('std::vector< int >', 'mask')])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::SetDownlinkSubChannelsWithPowerAllocation(std::vector<int, std::allocator<int> > mask) [member function]
    cls.add_method('SetDownlinkSubChannelsWithPowerAllocation', 
                   'void', 
                   [param('std::vector< int >', 'mask')])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::SetHarqPhyModule(ns3::Ptr<ns3::NrHarqPhy> harq) [member function]
    cls.add_method('SetHarqPhyModule', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrHarqPhy >', 'harq')])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::SetNrEnbCphySapUser(ns3::NrEnbCphySapUser * s) [member function]
    cls.add_method('SetNrEnbCphySapUser', 
                   'void', 
                   [param('ns3::NrEnbCphySapUser *', 's')])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::SetNrEnbPhySapUser(ns3::NrEnbPhySapUser * s) [member function]
    cls.add_method('SetNrEnbPhySapUser', 
                   'void', 
                   [param('ns3::NrEnbPhySapUser *', 's')])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::SetMacChDelay(uint8_t delay) [member function]
    cls.add_method('SetMacChDelay', 
                   'void', 
                   [param('uint8_t', 'delay')])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::SetNoiseFigure(double pow) [member function]
    cls.add_method('SetNoiseFigure', 
                   'void', 
                   [param('double', 'pow')])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::SetTxPower(double pow) [member function]
    cls.add_method('SetTxPower', 
                   'void', 
                   [param('double', 'pow')])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::StartFrame() [member function]
    cls.add_method('StartFrame', 
                   'void', 
                   [])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::StartSubFrame() [member function]
    cls.add_method('StartSubFrame', 
                   'void', 
                   [])
    ## nr-enb-phy.h (module 'nr'): void ns3::NrEnbPhy::DoSendMacPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoSendMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   visibility='private', is_virtual=True)
    return

def register_Ns3NrNetDevice_methods(root_module, cls):
    ## nr-net-device.h (module 'nr'): static ns3::TypeId ns3::NrNetDevice::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-net-device.h (module 'nr'): ns3::NrNetDevice::NrNetDevice() [constructor]
    cls.add_constructor([])
    ## nr-net-device.h (module 'nr'): void ns3::NrNetDevice::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-net-device.h (module 'nr'): void ns3::NrNetDevice::SetIfIndex(uint32_t const index) [member function]
    cls.add_method('SetIfIndex', 
                   'void', 
                   [param('uint32_t const', 'index')], 
                   is_virtual=True)
    ## nr-net-device.h (module 'nr'): uint32_t ns3::NrNetDevice::GetIfIndex() const [member function]
    cls.add_method('GetIfIndex', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): ns3::Ptr<ns3::Channel> ns3::NrNetDevice::GetChannel() const [member function]
    cls.add_method('GetChannel', 
                   'ns3::Ptr< ns3::Channel >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): bool ns3::NrNetDevice::SetMtu(uint16_t const mtu) [member function]
    cls.add_method('SetMtu', 
                   'bool', 
                   [param('uint16_t const', 'mtu')], 
                   is_virtual=True)
    ## nr-net-device.h (module 'nr'): uint16_t ns3::NrNetDevice::GetMtu() const [member function]
    cls.add_method('GetMtu', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): void ns3::NrNetDevice::SetAddress(ns3::Address address) [member function]
    cls.add_method('SetAddress', 
                   'void', 
                   [param('ns3::Address', 'address')], 
                   is_virtual=True)
    ## nr-net-device.h (module 'nr'): ns3::Address ns3::NrNetDevice::GetAddress() const [member function]
    cls.add_method('GetAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): bool ns3::NrNetDevice::IsLinkUp() const [member function]
    cls.add_method('IsLinkUp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): void ns3::NrNetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
    cls.add_method('AddLinkChangeCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')], 
                   is_virtual=True)
    ## nr-net-device.h (module 'nr'): bool ns3::NrNetDevice::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): ns3::Address ns3::NrNetDevice::GetBroadcast() const [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): bool ns3::NrNetDevice::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): bool ns3::NrNetDevice::IsPointToPoint() const [member function]
    cls.add_method('IsPointToPoint', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): bool ns3::NrNetDevice::IsBridge() const [member function]
    cls.add_method('IsBridge', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): ns3::Ptr<ns3::Node> ns3::NrNetDevice::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): void ns3::NrNetDevice::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_virtual=True)
    ## nr-net-device.h (module 'nr'): bool ns3::NrNetDevice::NeedsArp() const [member function]
    cls.add_method('NeedsArp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): void ns3::NrNetDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
    cls.add_method('SetReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_virtual=True)
    ## nr-net-device.h (module 'nr'): ns3::Address ns3::NrNetDevice::GetMulticast(ns3::Ipv4Address addr) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv4Address', 'addr')], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): ns3::Address ns3::NrNetDevice::GetMulticast(ns3::Ipv6Address addr) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv6Address', 'addr')], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): void ns3::NrNetDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
    cls.add_method('SetPromiscReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_virtual=True)
    ## nr-net-device.h (module 'nr'): bool ns3::NrNetDevice::SendFrom(ns3::Ptr<ns3::Packet> packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('SendFrom', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'source'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_virtual=True)
    ## nr-net-device.h (module 'nr'): bool ns3::NrNetDevice::SupportsSendFrom() const [member function]
    cls.add_method('SupportsSendFrom', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-net-device.h (module 'nr'): void ns3::NrNetDevice::Receive(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    return

def register_Ns3NrUeNetDevice_methods(root_module, cls):
    ## nr-ue-net-device.h (module 'nr'): static ns3::TypeId ns3::NrUeNetDevice::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-ue-net-device.h (module 'nr'): ns3::NrUeNetDevice::NrUeNetDevice() [constructor]
    cls.add_constructor([])
    ## nr-ue-net-device.h (module 'nr'): void ns3::NrUeNetDevice::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-ue-net-device.h (module 'nr'): bool ns3::NrUeNetDevice::Send(ns3::Ptr<ns3::Packet> packet, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('Send', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_virtual=True)
    ## nr-ue-net-device.h (module 'nr'): ns3::Ptr<ns3::NrUeMac> ns3::NrUeNetDevice::GetMac() const [member function]
    cls.add_method('GetMac', 
                   'ns3::Ptr< ns3::NrUeMac >', 
                   [], 
                   is_const=True)
    ## nr-ue-net-device.h (module 'nr'): ns3::Ptr<ns3::NrUeRrc> ns3::NrUeNetDevice::GetRrc() const [member function]
    cls.add_method('GetRrc', 
                   'ns3::Ptr< ns3::NrUeRrc >', 
                   [], 
                   is_const=True)
    ## nr-ue-net-device.h (module 'nr'): ns3::Ptr<ns3::NrUePhy> ns3::NrUeNetDevice::GetPhy() const [member function]
    cls.add_method('GetPhy', 
                   'ns3::Ptr< ns3::NrUePhy >', 
                   [], 
                   is_const=True)
    ## nr-ue-net-device.h (module 'nr'): ns3::Ptr<ns3::NgcUeNas> ns3::NrUeNetDevice::GetNas() const [member function]
    cls.add_method('GetNas', 
                   'ns3::Ptr< ns3::NgcUeNas >', 
                   [], 
                   is_const=True)
    ## nr-ue-net-device.h (module 'nr'): uint64_t ns3::NrUeNetDevice::GetImsi() const [member function]
    cls.add_method('GetImsi', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## nr-ue-net-device.h (module 'nr'): uint16_t ns3::NrUeNetDevice::GetDlEarfcn() const [member function]
    cls.add_method('GetDlEarfcn', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-ue-net-device.h (module 'nr'): void ns3::NrUeNetDevice::SetDlEarfcn(uint16_t earfcn) [member function]
    cls.add_method('SetDlEarfcn', 
                   'void', 
                   [param('uint16_t', 'earfcn')])
    ## nr-ue-net-device.h (module 'nr'): uint32_t ns3::NrUeNetDevice::GetCsgId() const [member function]
    cls.add_method('GetCsgId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## nr-ue-net-device.h (module 'nr'): void ns3::NrUeNetDevice::SetCsgId(uint32_t csgId) [member function]
    cls.add_method('SetCsgId', 
                   'void', 
                   [param('uint32_t', 'csgId')])
    ## nr-ue-net-device.h (module 'nr'): void ns3::NrUeNetDevice::SetTargetEnb(ns3::Ptr<ns3::NrEnbNetDevice> enb) [member function]
    cls.add_method('SetTargetEnb', 
                   'void', 
                   [param('ns3::Ptr< ns3::NrEnbNetDevice >', 'enb')])
    ## nr-ue-net-device.h (module 'nr'): ns3::Ptr<ns3::NrEnbNetDevice> ns3::NrUeNetDevice::GetTargetEnb() [member function]
    cls.add_method('GetTargetEnb', 
                   'ns3::Ptr< ns3::NrEnbNetDevice >', 
                   [])
    ## nr-ue-net-device.h (module 'nr'): void ns3::NrUeNetDevice::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3MeasurementReportHeader_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::MeasurementReportHeader::MeasurementReportHeader(ns3::MeasurementReportHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::MeasurementReportHeader const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::MeasurementReportHeader::MeasurementReportHeader() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::MeasurementReportHeader::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::MeasurementReport ns3::MeasurementReportHeader::GetMessage() const [member function]
    cls.add_method('GetMessage', 
                   'ns3::NrRrcSap::MeasurementReport', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::MeasurementReportHeader::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::MeasurementReportHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::MeasurementReportHeader::SetMessage(ns3::NrRrcSap::MeasurementReport msg) [member function]
    cls.add_method('SetMessage', 
                   'void', 
                   [param('ns3::NrRrcSap::MeasurementReport', 'msg')])
    return

def register_Ns3RrcConnectionReconfigurationCompleteHeader_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReconfigurationCompleteHeader::RrcConnectionReconfigurationCompleteHeader(ns3::RrcConnectionReconfigurationCompleteHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcConnectionReconfigurationCompleteHeader const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReconfigurationCompleteHeader::RrcConnectionReconfigurationCompleteHeader() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcConnectionReconfigurationCompleteHeader::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfigurationCompleted ns3::RrcConnectionReconfigurationCompleteHeader::GetMessage() const [member function]
    cls.add_method('GetMessage', 
                   'ns3::NrRrcSap::RrcConnectionReconfigurationCompleted', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): uint8_t ns3::RrcConnectionReconfigurationCompleteHeader::GetRrcTransactionIdentifier() const [member function]
    cls.add_method('GetRrcTransactionIdentifier', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReconfigurationCompleteHeader::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReconfigurationCompleteHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReconfigurationCompleteHeader::SetMessage(ns3::NrRrcSap::RrcConnectionReconfigurationCompleted msg) [member function]
    cls.add_method('SetMessage', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReconfigurationCompleted', 'msg')])
    return

def register_Ns3RrcConnectionReconfigurationHeader_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReconfigurationHeader::RrcConnectionReconfigurationHeader(ns3::RrcConnectionReconfigurationHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcConnectionReconfigurationHeader const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReconfigurationHeader::RrcConnectionReconfigurationHeader() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcConnectionReconfigurationHeader::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): std::list<ns3::NrRrcSap::DrbToAddMod, std::allocator<ns3::NrRrcSap::DrbToAddMod> > ns3::RrcConnectionReconfigurationHeader::GetDrbToAddModList() const [member function]
    cls.add_method('GetDrbToAddModList', 
                   'std::list< ns3::NrRrcSap::DrbToAddMod >', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): std::list<unsigned char, std::allocator<unsigned char> > ns3::RrcConnectionReconfigurationHeader::GetDrbToReleaseList() const [member function]
    cls.add_method('GetDrbToReleaseList', 
                   'std::list< unsigned char >', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): bool ns3::RrcConnectionReconfigurationHeader::GetHaveMeasConfig() [member function]
    cls.add_method('GetHaveMeasConfig', 
                   'bool', 
                   [])
    ## nr-rrc-header.h (module 'nr'): bool ns3::RrcConnectionReconfigurationHeader::GetHaveMobilityControlInfo() [member function]
    cls.add_method('GetHaveMobilityControlInfo', 
                   'bool', 
                   [])
    ## nr-rrc-header.h (module 'nr'): bool ns3::RrcConnectionReconfigurationHeader::GetHaveRadioResourceConfigDedicated() [member function]
    cls.add_method('GetHaveRadioResourceConfigDedicated', 
                   'bool', 
                   [])
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::MeasConfig ns3::RrcConnectionReconfigurationHeader::GetMeasConfig() [member function]
    cls.add_method('GetMeasConfig', 
                   'ns3::NrRrcSap::MeasConfig', 
                   [])
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReconfiguration ns3::RrcConnectionReconfigurationHeader::GetMessage() const [member function]
    cls.add_method('GetMessage', 
                   'ns3::NrRrcSap::RrcConnectionReconfiguration', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::MobilityControlInfo ns3::RrcConnectionReconfigurationHeader::GetMobilityControlInfo() [member function]
    cls.add_method('GetMobilityControlInfo', 
                   'ns3::NrRrcSap::MobilityControlInfo', 
                   [])
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::PhysicalConfigDedicated ns3::RrcConnectionReconfigurationHeader::GetPhysicalConfigDedicated() const [member function]
    cls.add_method('GetPhysicalConfigDedicated', 
                   'ns3::NrRrcSap::PhysicalConfigDedicated', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigDedicated ns3::RrcConnectionReconfigurationHeader::GetRadioResourceConfigDedicated() [member function]
    cls.add_method('GetRadioResourceConfigDedicated', 
                   'ns3::NrRrcSap::RadioResourceConfigDedicated', 
                   [])
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigDedicated ns3::RrcConnectionReconfigurationHeader::GetRadioResourceConfigDedicated() const [member function]
    cls.add_method('GetRadioResourceConfigDedicated', 
                   'ns3::NrRrcSap::RadioResourceConfigDedicated', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): uint8_t ns3::RrcConnectionReconfigurationHeader::GetRrcTransactionIdentifier() const [member function]
    cls.add_method('GetRrcTransactionIdentifier', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): std::list<ns3::NrRrcSap::SrbToAddMod, std::allocator<ns3::NrRrcSap::SrbToAddMod> > ns3::RrcConnectionReconfigurationHeader::GetSrbToAddModList() const [member function]
    cls.add_method('GetSrbToAddModList', 
                   'std::list< ns3::NrRrcSap::SrbToAddMod >', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): bool ns3::RrcConnectionReconfigurationHeader::HavePhysicalConfigDedicated() const [member function]
    cls.add_method('HavePhysicalConfigDedicated', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReconfigurationHeader::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReconfigurationHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReconfigurationHeader::SetMessage(ns3::NrRrcSap::RrcConnectionReconfiguration msg) [member function]
    cls.add_method('SetMessage', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReconfiguration', 'msg')])
    return

def register_Ns3RrcConnectionReestablishmentCompleteHeader_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReestablishmentCompleteHeader::RrcConnectionReestablishmentCompleteHeader(ns3::RrcConnectionReestablishmentCompleteHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcConnectionReestablishmentCompleteHeader const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReestablishmentCompleteHeader::RrcConnectionReestablishmentCompleteHeader() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcConnectionReestablishmentCompleteHeader::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentComplete ns3::RrcConnectionReestablishmentCompleteHeader::GetMessage() const [member function]
    cls.add_method('GetMessage', 
                   'ns3::NrRrcSap::RrcConnectionReestablishmentComplete', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): uint8_t ns3::RrcConnectionReestablishmentCompleteHeader::GetRrcTransactionIdentifier() const [member function]
    cls.add_method('GetRrcTransactionIdentifier', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReestablishmentCompleteHeader::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReestablishmentCompleteHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReestablishmentCompleteHeader::SetMessage(ns3::NrRrcSap::RrcConnectionReestablishmentComplete msg) [member function]
    cls.add_method('SetMessage', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReestablishmentComplete', 'msg')])
    return

def register_Ns3RrcConnectionReestablishmentHeader_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReestablishmentHeader::RrcConnectionReestablishmentHeader(ns3::RrcConnectionReestablishmentHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcConnectionReestablishmentHeader const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReestablishmentHeader::RrcConnectionReestablishmentHeader() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcConnectionReestablishmentHeader::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishment ns3::RrcConnectionReestablishmentHeader::GetMessage() const [member function]
    cls.add_method('GetMessage', 
                   'ns3::NrRrcSap::RrcConnectionReestablishment', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigDedicated ns3::RrcConnectionReestablishmentHeader::GetRadioResourceConfigDedicated() const [member function]
    cls.add_method('GetRadioResourceConfigDedicated', 
                   'ns3::NrRrcSap::RadioResourceConfigDedicated', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): uint8_t ns3::RrcConnectionReestablishmentHeader::GetRrcTransactionIdentifier() const [member function]
    cls.add_method('GetRrcTransactionIdentifier', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReestablishmentHeader::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReestablishmentHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReestablishmentHeader::SetMessage(ns3::NrRrcSap::RrcConnectionReestablishment msg) [member function]
    cls.add_method('SetMessage', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReestablishment', 'msg')])
    return

def register_Ns3RrcConnectionReestablishmentRejectHeader_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReestablishmentRejectHeader::RrcConnectionReestablishmentRejectHeader(ns3::RrcConnectionReestablishmentRejectHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcConnectionReestablishmentRejectHeader const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReestablishmentRejectHeader::RrcConnectionReestablishmentRejectHeader() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcConnectionReestablishmentRejectHeader::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentReject ns3::RrcConnectionReestablishmentRejectHeader::GetMessage() const [member function]
    cls.add_method('GetMessage', 
                   'ns3::NrRrcSap::RrcConnectionReestablishmentReject', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReestablishmentRejectHeader::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReestablishmentRejectHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReestablishmentRejectHeader::SetMessage(ns3::NrRrcSap::RrcConnectionReestablishmentReject msg) [member function]
    cls.add_method('SetMessage', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReestablishmentReject', 'msg')])
    return

def register_Ns3RrcConnectionReestablishmentRequestHeader_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReestablishmentRequestHeader::RrcConnectionReestablishmentRequestHeader(ns3::RrcConnectionReestablishmentRequestHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcConnectionReestablishmentRequestHeader const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReestablishmentRequestHeader::RrcConnectionReestablishmentRequestHeader() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcConnectionReestablishmentRequestHeader::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReestablishmentRequest ns3::RrcConnectionReestablishmentRequestHeader::GetMessage() const [member function]
    cls.add_method('GetMessage', 
                   'ns3::NrRrcSap::RrcConnectionReestablishmentRequest', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::ReestablishmentCause ns3::RrcConnectionReestablishmentRequestHeader::GetReestablishmentCause() const [member function]
    cls.add_method('GetReestablishmentCause', 
                   'ns3::NrRrcSap::ReestablishmentCause', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::ReestabUeIdentity ns3::RrcConnectionReestablishmentRequestHeader::GetUeIdentity() const [member function]
    cls.add_method('GetUeIdentity', 
                   'ns3::NrRrcSap::ReestabUeIdentity', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReestablishmentRequestHeader::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReestablishmentRequestHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReestablishmentRequestHeader::SetMessage(ns3::NrRrcSap::RrcConnectionReestablishmentRequest msg) [member function]
    cls.add_method('SetMessage', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReestablishmentRequest', 'msg')])
    return

def register_Ns3RrcConnectionRejectHeader_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionRejectHeader::RrcConnectionRejectHeader(ns3::RrcConnectionRejectHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcConnectionRejectHeader const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionRejectHeader::RrcConnectionRejectHeader() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcConnectionRejectHeader::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RrcConnectionReject ns3::RrcConnectionRejectHeader::GetMessage() const [member function]
    cls.add_method('GetMessage', 
                   'ns3::NrRrcSap::RrcConnectionReject', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionRejectHeader::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionRejectHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionRejectHeader::SetMessage(ns3::NrRrcSap::RrcConnectionReject msg) [member function]
    cls.add_method('SetMessage', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionReject', 'msg')])
    return

def register_Ns3RrcConnectionReleaseHeader_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReleaseHeader::RrcConnectionReleaseHeader(ns3::RrcConnectionReleaseHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcConnectionReleaseHeader const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionReleaseHeader::RrcConnectionReleaseHeader() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcConnectionReleaseHeader::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RrcConnectionRelease ns3::RrcConnectionReleaseHeader::GetMessage() const [member function]
    cls.add_method('GetMessage', 
                   'ns3::NrRrcSap::RrcConnectionRelease', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReleaseHeader::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReleaseHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionReleaseHeader::SetMessage(ns3::NrRrcSap::RrcConnectionRelease msg) [member function]
    cls.add_method('SetMessage', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionRelease', 'msg')])
    return

def register_Ns3RrcConnectionRequestHeader_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionRequestHeader::RrcConnectionRequestHeader(ns3::RrcConnectionRequestHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcConnectionRequestHeader const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionRequestHeader::RrcConnectionRequestHeader() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcConnectionRequestHeader::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RrcConnectionRequest ns3::RrcConnectionRequestHeader::GetMessage() const [member function]
    cls.add_method('GetMessage', 
                   'ns3::NrRrcSap::RrcConnectionRequest', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): std::bitset<8ul> ns3::RrcConnectionRequestHeader::GetAmfid() const [member function]
    cls.add_method('GetAmfid', 
                   'std::bitset< 8ul >', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): std::bitset<32ul> ns3::RrcConnectionRequestHeader::GetMtmsi() const [member function]
    cls.add_method('GetMtmsi', 
                   'std::bitset< 32ul >', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): static ns3::TypeId ns3::RrcConnectionRequestHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionRequestHeader::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionRequestHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionRequestHeader::SetMessage(ns3::NrRrcSap::RrcConnectionRequest msg) [member function]
    cls.add_method('SetMessage', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionRequest', 'msg')])
    return

def register_Ns3RrcConnectionSetupCompleteHeader_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionSetupCompleteHeader::RrcConnectionSetupCompleteHeader(ns3::RrcConnectionSetupCompleteHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcConnectionSetupCompleteHeader const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionSetupCompleteHeader::RrcConnectionSetupCompleteHeader() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcConnectionSetupCompleteHeader::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RrcConnectionSetupCompleted ns3::RrcConnectionSetupCompleteHeader::GetMessage() const [member function]
    cls.add_method('GetMessage', 
                   'ns3::NrRrcSap::RrcConnectionSetupCompleted', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): uint8_t ns3::RrcConnectionSetupCompleteHeader::GetRrcTransactionIdentifier() const [member function]
    cls.add_method('GetRrcTransactionIdentifier', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionSetupCompleteHeader::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionSetupCompleteHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionSetupCompleteHeader::SetMessage(ns3::NrRrcSap::RrcConnectionSetupCompleted msg) [member function]
    cls.add_method('SetMessage', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionSetupCompleted', 'msg')])
    return

def register_Ns3RrcConnectionSetupHeader_methods(root_module, cls):
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionSetupHeader::RrcConnectionSetupHeader(ns3::RrcConnectionSetupHeader const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::RrcConnectionSetupHeader const &', 'arg0')])
    ## nr-rrc-header.h (module 'nr'): ns3::RrcConnectionSetupHeader::RrcConnectionSetupHeader() [constructor]
    cls.add_constructor([])
    ## nr-rrc-header.h (module 'nr'): uint32_t ns3::RrcConnectionSetupHeader::Deserialize(ns3::Buffer::Iterator bIterator) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'bIterator')], 
                   is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): std::list<ns3::NrRrcSap::DrbToAddMod, std::allocator<ns3::NrRrcSap::DrbToAddMod> > ns3::RrcConnectionSetupHeader::GetDrbToAddModList() const [member function]
    cls.add_method('GetDrbToAddModList', 
                   'std::list< ns3::NrRrcSap::DrbToAddMod >', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): std::list<unsigned char, std::allocator<unsigned char> > ns3::RrcConnectionSetupHeader::GetDrbToReleaseList() const [member function]
    cls.add_method('GetDrbToReleaseList', 
                   'std::list< unsigned char >', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RrcConnectionSetup ns3::RrcConnectionSetupHeader::GetMessage() const [member function]
    cls.add_method('GetMessage', 
                   'ns3::NrRrcSap::RrcConnectionSetup', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::PhysicalConfigDedicated ns3::RrcConnectionSetupHeader::GetPhysicalConfigDedicated() const [member function]
    cls.add_method('GetPhysicalConfigDedicated', 
                   'ns3::NrRrcSap::PhysicalConfigDedicated', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): ns3::NrRrcSap::RadioResourceConfigDedicated ns3::RrcConnectionSetupHeader::GetRadioResourceConfigDedicated() const [member function]
    cls.add_method('GetRadioResourceConfigDedicated', 
                   'ns3::NrRrcSap::RadioResourceConfigDedicated', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): uint8_t ns3::RrcConnectionSetupHeader::GetRrcTransactionIdentifier() const [member function]
    cls.add_method('GetRrcTransactionIdentifier', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): std::list<ns3::NrRrcSap::SrbToAddMod, std::allocator<ns3::NrRrcSap::SrbToAddMod> > ns3::RrcConnectionSetupHeader::GetSrbToAddModList() const [member function]
    cls.add_method('GetSrbToAddModList', 
                   'std::list< ns3::NrRrcSap::SrbToAddMod >', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): bool ns3::RrcConnectionSetupHeader::HavePhysicalConfigDedicated() const [member function]
    cls.add_method('HavePhysicalConfigDedicated', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionSetupHeader::PreSerialize() const [member function]
    cls.add_method('PreSerialize', 
                   'void', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionSetupHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## nr-rrc-header.h (module 'nr'): void ns3::RrcConnectionSetupHeader::SetMessage(ns3::NrRrcSap::RrcConnectionSetup msg) [member function]
    cls.add_method('SetMessage', 
                   'void', 
                   [param('ns3::NrRrcSap::RrcConnectionSetup', 'msg')])
    return

def register_Ns3NrEnbNetDevice_methods(root_module, cls):
    ## nr-enb-net-device.h (module 'nr'): static ns3::TypeId ns3::NrEnbNetDevice::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## nr-enb-net-device.h (module 'nr'): ns3::NrEnbNetDevice::NrEnbNetDevice() [constructor]
    cls.add_constructor([])
    ## nr-enb-net-device.h (module 'nr'): void ns3::NrEnbNetDevice::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## nr-enb-net-device.h (module 'nr'): bool ns3::NrEnbNetDevice::Send(ns3::Ptr<ns3::Packet> packet, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('Send', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_virtual=True)
    ## nr-enb-net-device.h (module 'nr'): ns3::Ptr<ns3::NrEnbMac> ns3::NrEnbNetDevice::GetMac() const [member function]
    cls.add_method('GetMac', 
                   'ns3::Ptr< ns3::NrEnbMac >', 
                   [], 
                   is_const=True)
    ## nr-enb-net-device.h (module 'nr'): ns3::Ptr<ns3::NrEnbPhy> ns3::NrEnbNetDevice::GetPhy() const [member function]
    cls.add_method('GetPhy', 
                   'ns3::Ptr< ns3::NrEnbPhy >', 
                   [], 
                   is_const=True)
    ## nr-enb-net-device.h (module 'nr'): ns3::Ptr<ns3::NrEnbRrc> ns3::NrEnbNetDevice::GetRrc() const [member function]
    cls.add_method('GetRrc', 
                   'ns3::Ptr< ns3::NrEnbRrc >', 
                   [], 
                   is_const=True)
    ## nr-enb-net-device.h (module 'nr'): uint16_t ns3::NrEnbNetDevice::GetCellId() const [member function]
    cls.add_method('GetCellId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-enb-net-device.h (module 'nr'): uint8_t ns3::NrEnbNetDevice::GetUlBandwidth() const [member function]
    cls.add_method('GetUlBandwidth', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-enb-net-device.h (module 'nr'): void ns3::NrEnbNetDevice::SetUlBandwidth(uint8_t bw) [member function]
    cls.add_method('SetUlBandwidth', 
                   'void', 
                   [param('uint8_t', 'bw')])
    ## nr-enb-net-device.h (module 'nr'): uint8_t ns3::NrEnbNetDevice::GetDlBandwidth() const [member function]
    cls.add_method('GetDlBandwidth', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## nr-enb-net-device.h (module 'nr'): void ns3::NrEnbNetDevice::SetDlBandwidth(uint8_t bw) [member function]
    cls.add_method('SetDlBandwidth', 
                   'void', 
                   [param('uint8_t', 'bw')])
    ## nr-enb-net-device.h (module 'nr'): uint16_t ns3::NrEnbNetDevice::GetDlEarfcn() const [member function]
    cls.add_method('GetDlEarfcn', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-enb-net-device.h (module 'nr'): void ns3::NrEnbNetDevice::SetDlEarfcn(uint16_t earfcn) [member function]
    cls.add_method('SetDlEarfcn', 
                   'void', 
                   [param('uint16_t', 'earfcn')])
    ## nr-enb-net-device.h (module 'nr'): uint16_t ns3::NrEnbNetDevice::GetUlEarfcn() const [member function]
    cls.add_method('GetUlEarfcn', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## nr-enb-net-device.h (module 'nr'): void ns3::NrEnbNetDevice::SetUlEarfcn(uint16_t earfcn) [member function]
    cls.add_method('SetUlEarfcn', 
                   'void', 
                   [param('uint16_t', 'earfcn')])
    ## nr-enb-net-device.h (module 'nr'): uint32_t ns3::NrEnbNetDevice::GetCsgId() const [member function]
    cls.add_method('GetCsgId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## nr-enb-net-device.h (module 'nr'): void ns3::NrEnbNetDevice::SetCsgId(uint32_t csgId) [member function]
    cls.add_method('SetCsgId', 
                   'void', 
                   [param('uint32_t', 'csgId')])
    ## nr-enb-net-device.h (module 'nr'): bool ns3::NrEnbNetDevice::GetCsgIndication() const [member function]
    cls.add_method('GetCsgIndication', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nr-enb-net-device.h (module 'nr'): void ns3::NrEnbNetDevice::SetCsgIndication(bool csgIndication) [member function]
    cls.add_method('SetCsgIndication', 
                   'void', 
                   [param('bool', 'csgIndication')])
    ## nr-enb-net-device.h (module 'nr'): void ns3::NrEnbNetDevice::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   visibility='protected', is_virtual=True)
    return

def register_Ns3ConfigMatchContainer_methods(root_module, cls):
    ## config.h (module 'core'): ns3::Config::MatchContainer::MatchContainer(ns3::Config::MatchContainer const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Config::MatchContainer const &', 'arg0')])
    ## config.h (module 'core'): ns3::Config::MatchContainer::MatchContainer() [constructor]
    cls.add_constructor([])
    ## config.h (module 'core'): ns3::Config::MatchContainer::MatchContainer(std::vector<ns3::Ptr<ns3::Object>, std::allocator<ns3::Ptr<ns3::Object> > > const & objects, std::vector<std::string, std::allocator<std::string> > const & contexts, std::string path) [constructor]
    cls.add_constructor([param('std::vector< ns3::Ptr< ns3::Object > > const &', 'objects'), param('std::vector< std::string > const &', 'contexts'), param('std::string', 'path')])
    ## config.h (module 'core'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Object>*,std::vector<ns3::Ptr<ns3::Object>, std::allocator<ns3::Ptr<ns3::Object> > > > ns3::Config::MatchContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Object > const, std::vector< ns3::Ptr< ns3::Object > > >', 
                   [], 
                   is_const=True)
    ## config.h (module 'core'): void ns3::Config::MatchContainer::Connect(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('Connect', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## config.h (module 'core'): void ns3::Config::MatchContainer::ConnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('ConnectWithoutContext', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## config.h (module 'core'): void ns3::Config::MatchContainer::Disconnect(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('Disconnect', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## config.h (module 'core'): void ns3::Config::MatchContainer::DisconnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('DisconnectWithoutContext', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## config.h (module 'core'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Object>*,std::vector<ns3::Ptr<ns3::Object>, std::allocator<ns3::Ptr<ns3::Object> > > > ns3::Config::MatchContainer::End() const [member function]
    cls.add_method('End', 
                   '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Object > const, std::vector< ns3::Ptr< ns3::Object > > >', 
                   [], 
                   is_const=True)
    ## config.h (module 'core'): ns3::Ptr<ns3::Object> ns3::Config::MatchContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::Object >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## config.h (module 'core'): std::string ns3::Config::MatchContainer::GetMatchedPath(uint32_t i) const [member function]
    cls.add_method('GetMatchedPath', 
                   'std::string', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## config.h (module 'core'): uint32_t ns3::Config::MatchContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## config.h (module 'core'): std::string ns3::Config::MatchContainer::GetPath() const [member function]
    cls.add_method('GetPath', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## config.h (module 'core'): void ns3::Config::MatchContainer::Set(std::string name, ns3::AttributeValue const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
    return

def register_Ns3HashImplementation_methods(root_module, cls):
    ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation(ns3::Hash::Implementation const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Hash::Implementation const &', 'arg0')])
    ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation() [constructor]
    cls.add_constructor([])
    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Implementation::GetHash32(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
                   is_pure_virtual=True, is_virtual=True)
    ## hash-function.h (module 'core'): uint64_t ns3::Hash::Implementation::GetHash64(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
                   is_virtual=True)
    ## hash-function.h (module 'core'): void ns3::Hash::Implementation::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3HashFunctionFnv1a_methods(root_module, cls):
    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a(ns3::Hash::Function::Fnv1a const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Hash::Function::Fnv1a const &', 'arg0')])
    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a() [constructor]
    cls.add_constructor([])
    ## hash-fnv.h (module 'core'): uint32_t ns3::Hash::Function::Fnv1a::GetHash32(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
                   is_virtual=True)
    ## hash-fnv.h (module 'core'): uint64_t ns3::Hash::Function::Fnv1a::GetHash64(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
                   is_virtual=True)
    ## hash-fnv.h (module 'core'): void ns3::Hash::Function::Fnv1a::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3HashFunctionHash32_methods(root_module, cls):
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Function::Hash32 const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Hash::Function::Hash32 const &', 'arg0')])
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Hash32Function_ptr hp) [constructor]
    cls.add_constructor([param('ns3::Hash::Hash32Function_ptr', 'hp')])
    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash32::GetHash32(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
                   is_virtual=True)
    ## hash-function.h (module 'core'): void ns3::Hash::Function::Hash32::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3HashFunctionHash64_methods(root_module, cls):
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Function::Hash64 const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Hash::Function::Hash64 const &', 'arg0')])
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Hash64Function_ptr hp) [constructor]
    cls.add_constructor([param('ns3::Hash::Hash64Function_ptr', 'hp')])
    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash64::GetHash32(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
                   is_virtual=True)
    ## hash-function.h (module 'core'): uint64_t ns3::Hash::Function::Hash64::GetHash64(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
                   is_virtual=True)
    ## hash-function.h (module 'core'): void ns3::Hash::Function::Hash64::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3HashFunctionMurmur3_methods(root_module, cls):
    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3(ns3::Hash::Function::Murmur3 const & arg0) [copy constructor]
    cls.add_constructor([param('ns3::Hash::Function::Murmur3 const &', 'arg0')])
    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3() [constructor]
    cls.add_constructor([])
    ## hash-murmur3.h (module 'core'): uint32_t ns3::Hash::Function::Murmur3::GetHash32(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
                   is_virtual=True)
    ## hash-murmur3.h (module 'core'): uint64_t ns3::Hash::Function::Murmur3::GetHash64(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
                   is_virtual=True)
    ## hash-murmur3.h (module 'core'): void ns3::Hash::Function::Murmur3::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_functions(root_module):
    module = root_module
    register_functions_ns3_Config(module.get_submodule('Config'), root_module)
    register_functions_ns3_FatalImpl(module.get_submodule('FatalImpl'), root_module)
    register_functions_ns3_Hash(module.get_submodule('Hash'), root_module)
    register_functions_ns3_TracedValueCallback(module.get_submodule('TracedValueCallback'), root_module)
    register_functions_ns3_internal(module.get_submodule('internal'), root_module)
    return

def register_functions_ns3_Config(module, root_module):
    return

def register_functions_ns3_FatalImpl(module, root_module):
    return

def register_functions_ns3_Hash(module, root_module):
    register_functions_ns3_Hash_Function(module.get_submodule('Function'), root_module)
    return

def register_functions_ns3_Hash_Function(module, root_module):
    return

def register_functions_ns3_TracedValueCallback(module, root_module):
    return

def register_functions_ns3_internal(module, root_module):
    return

def main():
    out = FileCodeSink(sys.stdout)
    root_module = module_init()
    register_types(root_module)
    register_methods(root_module)
    register_functions(root_module)
    root_module.generate(out)

if __name__ == '__main__':
    main()

