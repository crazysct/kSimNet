!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDRESS_H	address.h	22;"	d
ADDRESS_UTILS_H	address-utils.h	21;"	d
AHAS_FULL_TAIL	packetbb.cc	/^static const uint8_t AHAS_FULL_TAIL = 0x40;$/;"	v	file:
AHAS_HEAD	packetbb.cc	/^static const uint8_t AHAS_HEAD = 0x80;$/;"	v	file:
AHAS_MULTI_PRE_LEN	packetbb.cc	/^static const uint8_t AHAS_MULTI_PRE_LEN = 0x08;$/;"	v	file:
AHAS_SINGLE_PRE_LEN	packetbb.cc	/^static const uint8_t AHAS_SINGLE_PRE_LEN = 0x10;$/;"	v	file:
AHAS_ZERO_TAIL	packetbb.cc	/^static const uint8_t AHAS_ZERO_TAIL = 0x20;$/;"	v	file:
ASCII_A	mac16-address.cc	37;"	d	file:
ASCII_A	mac48-address.cc	36;"	d	file:
ASCII_A	mac64-address.cc	36;"	d	file:
ASCII_COLON	mac16-address.cc	39;"	d	file:
ASCII_COLON	mac48-address.cc	38;"	d	file:
ASCII_COLON	mac64-address.cc	38;"	d	file:
ASCII_DOT	ipv4-address.cc	30;"	d	file:
ASCII_FILE_H	ascii-file.h	24;"	d
ASCII_SLASH	ipv4-address.cc	32;"	d	file:
ASCII_TEST_H	ascii-test.h	24;"	d
ASCII_Z	mac16-address.cc	38;"	d	file:
ASCII_Z	mac48-address.cc	37;"	d	file:
ASCII_Z	mac64-address.cc	37;"	d	file:
ASCII_ZERO	ipv4-address.cc	31;"	d	file:
ASCII_ZERO	mac16-address.cc	40;"	d	file:
ASCII_ZERO	mac48-address.cc	39;"	d	file:
ASCII_ZERO	mac64-address.cc	39;"	d	file:
ASCII_a	mac16-address.cc	35;"	d	file:
ASCII_a	mac48-address.cc	34;"	d	file:
ASCII_a	mac64-address.cc	34;"	d	file:
ASCII_z	mac16-address.cc	36;"	d	file:
ASCII_z	mac48-address.cc	35;"	d	file:
ASCII_z	mac64-address.cc	35;"	d	file:
A_MPDU_STATUS_DELIMITER_CRC_ERROR	radiotap-header.h	/^    A_MPDU_STATUS_DELIMITER_CRC_ERROR = 0x10, \/**< Delimiter CRC error *\/$/;"	e	enum:ns3::RadiotapHeader::AmpduFlags
A_MPDU_STATUS_DELIMITER_CRC_KNOWN	radiotap-header.h	/^    A_MPDU_STATUS_DELIMITER_CRC_KNOWN = 0x20  \/**< Delimiter CRC value known: the delimiter CRC value field is valid *\/$/;"	e	enum:ns3::RadiotapHeader::AmpduFlags
A_MPDU_STATUS_IS_ZERO_LENGTH	radiotap-header.h	/^    A_MPDU_STATUS_IS_ZERO_LENGTH      = 0x02, \/**< Frame is 0-length subframe (valid only if 0x0001 is set) *\/$/;"	e	enum:ns3::RadiotapHeader::AmpduFlags
A_MPDU_STATUS_LAST	radiotap-header.h	/^    A_MPDU_STATUS_LAST                = 0x08, \/**< This frame is the last subframe *\/$/;"	e	enum:ns3::RadiotapHeader::AmpduFlags
A_MPDU_STATUS_LAST_KNOWN	radiotap-header.h	/^    A_MPDU_STATUS_LAST_KNOWN          = 0x04, \/**< Last subframe is known (should be set for all subframes in an A-MPDU) *\/$/;"	e	enum:ns3::RadiotapHeader::AmpduFlags
A_MPDU_STATUS_NONE	radiotap-header.h	/^    A_MPDU_STATUS_NONE                = 0x00, \/**< No flags set *\/$/;"	e	enum:ns3::RadiotapHeader::AmpduFlags
A_MPDU_STATUS_REPORT_ZERO_LENGTH	radiotap-header.h	/^    A_MPDU_STATUS_REPORT_ZERO_LENGTH  = 0x01, \/**< Driver reports 0-length subframes *\/$/;"	e	enum:ns3::RadiotapHeader::AmpduFlags
Add	error-channel.cc	/^ErrorChannel::Add (Ptr<SimpleNetDevice> device)$/;"	f	class:ns3::ErrorChannel
Add	simple-channel.cc	/^SimpleChannel::Add (Ptr<SimpleNetDevice> device)$/;"	f	class:ns3::SimpleChannel
AddLinkChangeCallback	simple-net-device.cc	/^SimpleNetDevice::AddLinkChangeCallback (Callback<void> callback)$/;"	f	class:ns3::SimpleNetDevice
AddPacket	packet-burst.cc	/^PacketBurst::AddPacket (Ptr<Packet> packet)$/;"	f	class:ns3::PacketBurst
Address	address.cc	/^Address::Address ()$/;"	f	class:ns3::Address
Address	address.cc	/^Address::Address (const Address & address)$/;"	f	class:ns3::Address
Address	address.cc	/^Address::Address (uint8_t type, const uint8_t *buffer, uint8_t len)$/;"	f	class:ns3::Address
Address	address.h	/^class Address $/;"	c	namespace:ns3
AddressBack	packetbb.cc	/^PbbAddressBlock::AddressBack (void) const$/;"	f	class:ns3::PbbAddressBlock
AddressBegin	packetbb.cc	/^PbbAddressBlock::AddressBegin (void) const$/;"	f	class:ns3::PbbAddressBlock
AddressBegin	packetbb.cc	/^PbbAddressBlock::AddressBegin (void)$/;"	f	class:ns3::PbbAddressBlock
AddressBlockBack	packetbb.cc	/^PbbMessage::AddressBlockBack (void) const$/;"	f	class:ns3::PbbMessage
AddressBlockBack	packetbb.cc	/^PbbMessage::AddressBlockBack (void)$/;"	f	class:ns3::PbbMessage
AddressBlockBegin	packetbb.cc	/^PbbMessage::AddressBlockBegin (void) const$/;"	f	class:ns3::PbbMessage
AddressBlockBegin	packetbb.cc	/^PbbMessage::AddressBlockBegin (void)$/;"	f	class:ns3::PbbMessage
AddressBlockClear	packetbb.cc	/^PbbMessage::AddressBlockClear (void)$/;"	f	class:ns3::PbbMessage
AddressBlockDeserialize	packetbb.cc	/^PbbMessageIpv4::AddressBlockDeserialize (Buffer::Iterator &start) const$/;"	f	class:ns3::PbbMessageIpv4
AddressBlockDeserialize	packetbb.cc	/^PbbMessageIpv6::AddressBlockDeserialize (Buffer::Iterator &start) const$/;"	f	class:ns3::PbbMessageIpv6
AddressBlockEmpty	packetbb.cc	/^PbbMessage::AddressBlockEmpty (void) const$/;"	f	class:ns3::PbbMessage
AddressBlockEnd	packetbb.cc	/^PbbMessage::AddressBlockEnd (void) const$/;"	f	class:ns3::PbbMessage
AddressBlockEnd	packetbb.cc	/^PbbMessage::AddressBlockEnd (void)$/;"	f	class:ns3::PbbMessage
AddressBlockErase	packetbb.cc	/^PbbMessage::AddressBlockErase (PbbMessage::AddressBlockIterator first,$/;"	f	class:ns3::PbbMessage
AddressBlockErase	packetbb.cc	/^PbbMessage::AddressBlockErase (PbbMessage::AddressBlockIterator position)$/;"	f	class:ns3::PbbMessage
AddressBlockFront	packetbb.cc	/^PbbMessage::AddressBlockFront (void) const$/;"	f	class:ns3::PbbMessage
AddressBlockFront	packetbb.cc	/^PbbMessage::AddressBlockFront (void)$/;"	f	class:ns3::PbbMessage
AddressBlockIterator	packetbb.h	/^  typedef std::list< Ptr<PbbAddressBlock> >::iterator AddressBlockIterator;$/;"	t	class:ns3::PbbMessage
AddressBlockPopBack	packetbb.cc	/^PbbMessage::AddressBlockPopBack (void)$/;"	f	class:ns3::PbbMessage
AddressBlockPopFront	packetbb.cc	/^PbbMessage::AddressBlockPopFront (void)$/;"	f	class:ns3::PbbMessage
AddressBlockPushBack	packetbb.cc	/^PbbMessage::AddressBlockPushBack (Ptr<PbbAddressBlock> tlv)$/;"	f	class:ns3::PbbMessage
AddressBlockPushFront	packetbb.cc	/^PbbMessage::AddressBlockPushFront (Ptr<PbbAddressBlock> tlv)$/;"	f	class:ns3::PbbMessage
AddressBlockSize	packetbb.cc	/^PbbMessage::AddressBlockSize (void) const$/;"	f	class:ns3::PbbMessage
AddressClear	packetbb.cc	/^PbbAddressBlock::AddressClear (void)$/;"	f	class:ns3::PbbAddressBlock
AddressEmpty	packetbb.cc	/^PbbAddressBlock::AddressEmpty (void) const$/;"	f	class:ns3::PbbAddressBlock
AddressEnd	packetbb.cc	/^PbbAddressBlock::AddressEnd (void) const$/;"	f	class:ns3::PbbAddressBlock
AddressEnd	packetbb.cc	/^PbbAddressBlock::AddressEnd (void)$/;"	f	class:ns3::PbbAddressBlock
AddressErase	packetbb.cc	/^PbbAddressBlock::AddressErase (PbbAddressBlock::AddressIterator first,$/;"	f	class:ns3::PbbAddressBlock
AddressErase	packetbb.cc	/^PbbAddressBlock::AddressErase (PbbAddressBlock::AddressIterator position)$/;"	f	class:ns3::PbbAddressBlock
AddressFront	packetbb.cc	/^PbbAddressBlock::AddressFront (void) const$/;"	f	class:ns3::PbbAddressBlock
AddressIterator	packetbb.h	/^  typedef std::list< Address >::iterator AddressIterator;$/;"	t	class:ns3::PbbAddressBlock
AddressPopBack	packetbb.cc	/^PbbAddressBlock::AddressPopBack (void)$/;"	f	class:ns3::PbbAddressBlock
AddressPopFront	packetbb.cc	/^PbbAddressBlock::AddressPopFront (void)$/;"	f	class:ns3::PbbAddressBlock
AddressPushBack	packetbb.cc	/^PbbAddressBlock::AddressPushBack (Address tlv)$/;"	f	class:ns3::PbbAddressBlock
AddressPushFront	packetbb.cc	/^PbbAddressBlock::AddressPushFront (Address tlv)$/;"	f	class:ns3::PbbAddressBlock
AddressSize	packetbb.cc	/^PbbAddressBlock::AddressSize (void) const$/;"	f	class:ns3::PbbAddressBlock
Allocate	mac16-address.cc	/^Mac16Address::Allocate (void)$/;"	f	class:ns3::Mac16Address
Allocate	mac48-address.cc	/^Mac48Address::Allocate (void)$/;"	f	class:ns3::Mac48Address
Allocate	mac64-address.cc	/^Mac64Address::Allocate (void)$/;"	f	class:ns3::Mac64Address
AllocateFlowId	flow-id-tag.cc	/^FlowIdTag::AllocateFlowId (void)$/;"	f	class:ns3::FlowIdTag
AmpduFlags	radiotap-header.h	/^  enum AmpduFlags$/;"	g	class:ns3::RadiotapHeader
AppendItemTypeIfNotPresent	queue.cc	/^QueueBase::AppendItemTypeIfNotPresent (std::string& typeId, const std::string& itemType)$/;"	f	class:ns3::QueueBase
AsciiFile	ascii-file.cc	/^AsciiFile::AsciiFile ()$/;"	f	class:ns3::AsciiFile
AsciiFile	ascii-file.h	/^class AsciiFile$/;"	c	namespace:ns3
AsciiToIpv4Host	ipv4-address.cc	/^AsciiToIpv4Host (char const *address)$/;"	f	namespace:ns3
AsciiToIpv6Host	ipv6-address.cc	/^static bool AsciiToIpv6Host (const char *address, uint8_t addr[16])$/;"	f	namespace:ns3
AsciiToLowCase	mac16-address.cc	/^AsciiToLowCase (char c)$/;"	f	namespace:ns3
AsciiToLowCase	mac48-address.cc	/^AsciiToLowCase (char c)$/;"	f	namespace:ns3
AsciiToLowCase	mac64-address.cc	/^AsciiToLowCase (char c)$/;"	f	namespace:ns3
AssignStreams	error-model.cc	/^BurstErrorModel::AssignStreams (int64_t stream)$/;"	f	class:ns3::BurstErrorModel
AssignStreams	error-model.cc	/^RateErrorModel::AssignStreams (int64_t stream)$/;"	f	class:ns3::RateErrorModel
Available	dynamic-queue-limits.cc	/^DynamicQueueLimits::Available () const$/;"	f	class:ns3::DynamicQueueLimits
BROADCAST_BY_PEER	sll-header.h	/^    BROADCAST_BY_PEER = 1, \/**< packet was broadcast by somebody else *\/$/;"	e	enum:ns3::SllHeader::PacketType
Back	packetbb.cc	/^PbbAddressTlvBlock::Back (void) const$/;"	f	class:ns3::PbbAddressTlvBlock
Back	packetbb.cc	/^PbbTlvBlock::Back (void) const$/;"	f	class:ns3::PbbTlvBlock
Begin	packet-burst.cc	/^PacketBurst::Begin (void) const$/;"	f	class:ns3::PacketBurst
Begin	packetbb.cc	/^PbbAddressTlvBlock::Begin (void) const$/;"	f	class:ns3::PbbAddressTlvBlock
Begin	packetbb.cc	/^PbbAddressTlvBlock::Begin (void)$/;"	f	class:ns3::PbbAddressTlvBlock
Begin	packetbb.cc	/^PbbTlvBlock::Begin (void) const$/;"	f	class:ns3::PbbTlvBlock
Begin	packetbb.cc	/^PbbTlvBlock::Begin (void)$/;"	f	class:ns3::PbbTlvBlock
BinaryErrorModel	error-model.cc	/^BinaryErrorModel::BinaryErrorModel ()$/;"	f	class:ns3::BinaryErrorModel
BinaryErrorModel	error-model.h	/^class BinaryErrorModel : public ErrorModel$/;"	c	namespace:ns3
Bind	packet-socket.cc	/^PacketSocket::Bind (const Address &address)$/;"	f	class:ns3::PacketSocket
Bind	packet-socket.cc	/^PacketSocket::Bind (void)$/;"	f	class:ns3::PacketSocket
Bind6	packet-socket.cc	/^PacketSocket::Bind6 (void)$/;"	f	class:ns3::PacketSocket
BlackList	simple-channel.cc	/^SimpleChannel::BlackList (Ptr<SimpleNetDevice> from, Ptr<SimpleNetDevice> to)$/;"	f	class:ns3::SimpleChannel
BurstErrorModel	error-model.cc	/^BurstErrorModel::BurstErrorModel () : m_counter (0), m_currentBurstSz (0)$/;"	f	class:ns3::BurstErrorModel
BurstErrorModel	error-model.h	/^class BurstErrorModel : public ErrorModel$/;"	c	namespace:ns3
CHANNEL_FLAG_CCK	radiotap-header.h	/^    CHANNEL_FLAG_CCK           = 0x0020, \/**< CCK channel *\/$/;"	e	enum:ns3::RadiotapHeader::ChannelFlags
CHANNEL_FLAG_DYNAMIC	radiotap-header.h	/^    CHANNEL_FLAG_DYNAMIC       = 0x0400, \/**< Dynamic CCK-OFDM channel *\/$/;"	e	enum:ns3::RadiotapHeader::ChannelFlags
CHANNEL_FLAG_GFSK	radiotap-header.h	/^    CHANNEL_FLAG_GFSK          = 0x0800  \/**< GFSK channel (FHSS PHY) *\/$/;"	e	enum:ns3::RadiotapHeader::ChannelFlags
CHANNEL_FLAG_NONE	radiotap-header.h	/^    CHANNEL_FLAG_NONE          = 0x0000, \/**< No flags set *\/$/;"	e	enum:ns3::RadiotapHeader::ChannelFlags
CHANNEL_FLAG_OFDM	radiotap-header.h	/^    CHANNEL_FLAG_OFDM          = 0x0040, \/**< OFDM channel *\/$/;"	e	enum:ns3::RadiotapHeader::ChannelFlags
CHANNEL_FLAG_PASSIVE	radiotap-header.h	/^    CHANNEL_FLAG_PASSIVE       = 0x0200, \/**< Only passive scan allowed *\/$/;"	e	enum:ns3::RadiotapHeader::ChannelFlags
CHANNEL_FLAG_SPECTRUM_2GHZ	radiotap-header.h	/^    CHANNEL_FLAG_SPECTRUM_2GHZ = 0x0080, \/**< 2 GHz spectrum channel *\/$/;"	e	enum:ns3::RadiotapHeader::ChannelFlags
CHANNEL_FLAG_SPECTRUM_5GHZ	radiotap-header.h	/^    CHANNEL_FLAG_SPECTRUM_5GHZ = 0x0100, \/**< 5 GHz spectrum channel *\/$/;"	e	enum:ns3::RadiotapHeader::ChannelFlags
CHANNEL_FLAG_TURBO	radiotap-header.h	/^    CHANNEL_FLAG_TURBO         = 0x0010, \/**< Turbo Channel *\/$/;"	e	enum:ns3::RadiotapHeader::ChannelFlags
CRC32Calculate	crc32.cc	/^CRC32Calculate (const uint8_t *data, int length)$/;"	f	namespace:ns3
CRC32_H	crc32.h	21;"	d
CalcFcs	ethernet-trailer.cc	/^EthernetTrailer::CalcFcs (Ptr<const Packet> p)$/;"	f	class:ns3::EthernetTrailer
CalculateBitsTxTime	data-rate.cc	/^Time DataRate::CalculateBitsTxTime (uint32_t bits) const$/;"	f	class:ns3::DataRate
CalculateBytesTxTime	data-rate.cc	/^Time DataRate::CalculateBytesTxTime (uint32_t bytes) const$/;"	f	class:ns3::DataRate
CalculateTxTime	data-rate.cc	/^double DataRate::CalculateTxTime (uint32_t bytes) const$/;"	f	class:ns3::DataRate
ChannelFlags	radiotap-header.h	/^  enum ChannelFlags$/;"	g	class:ns3::RadiotapHeader
CheckCompatible	address.cc	/^Address::CheckCompatible (uint8_t type, uint8_t len) const$/;"	f	class:ns3::Address
CheckFcs	ethernet-trailer.cc	/^EthernetTrailer::CheckFcs (Ptr<const Packet> p) const$/;"	f	class:ns3::EthernetTrailer
Clear	packetbb.cc	/^PbbAddressTlvBlock::Clear (void)$/;"	f	class:ns3::PbbAddressTlvBlock
Clear	packetbb.cc	/^PbbTlvBlock::Clear (void)$/;"	f	class:ns3::PbbTlvBlock
Clear	pcap-file-wrapper.cc	/^PcapFileWrapper::Clear (void)$/;"	f	class:ns3::PcapFileWrapper
Clear	pcap-file.cc	/^PcapFile::Clear (void)$/;"	f	class:ns3::PcapFile
Close	ascii-file.cc	/^AsciiFile::Close (void)$/;"	f	class:ns3::AsciiFile
Close	packet-socket.cc	/^PacketSocket::Close (void)$/;"	f	class:ns3::PacketSocket
Close	pcap-file-wrapper.cc	/^PcapFileWrapper::Close (void)$/;"	f	class:ns3::PcapFileWrapper
Close	pcap-file.cc	/^PcapFile::Close (void)$/;"	f	class:ns3::PcapFile
CombineMask	ipv4-address.cc	/^Ipv4Address::CombineMask (Ipv4Mask const &mask) const$/;"	f	class:ns3::Ipv4Address
CombinePrefix	ipv6-address.cc	/^Ipv6Address Ipv6Address::CombinePrefix (Ipv6Prefix const& prefix)$/;"	f	class:ns3::Ipv6Address
Completed	dynamic-queue-limits.cc	/^DynamicQueueLimits::Completed (uint32_t count)$/;"	f	class:ns3::DynamicQueueLimits
Connect	packet-socket.cc	/^PacketSocket::Connect (const Address &ad)$/;"	f	class:ns3::PacketSocket
ConnectByObject	packet-probe.cc	/^PacketProbe::ConnectByObject (std::string traceSource, Ptr<Object> obj)$/;"	f	class:ns3::PacketProbe
ConnectByPath	packet-probe.cc	/^PacketProbe::ConnectByPath (std::string path)$/;"	f	class:ns3::PacketProbe
ConnectQueueTraces	net-device-queue-interface.h	/^NetDeviceQueueInterface::ConnectQueueTraces (Ptr<Queue1> queue, int txq)$/;"	f	class:ns3::NetDeviceQueueInterface
ConstAddressBlockIterator	packetbb.h	/^  typedef std::list< Ptr<PbbAddressBlock> >::const_iterator ConstAddressBlockIterator;$/;"	t	class:ns3::PbbMessage
ConstAddressIterator	packetbb.h	/^  typedef std::list< Address >::const_iterator ConstAddressIterator;$/;"	t	class:ns3::PbbAddressBlock
ConstIterator	packetbb.h	/^  typedef std::list< Ptr<PbbAddressTlv> >::const_iterator ConstIterator;$/;"	t	class:ns3::PbbAddressTlvBlock
ConstIterator	packetbb.h	/^  typedef std::list< Ptr<PbbTlv> >::const_iterator ConstIterator;$/;"	t	class:ns3::PbbTlvBlock
ConstIterator	queue.h	/^  typedef typename std::list<Ptr<Item> >::const_iterator ConstIterator;$/;"	t	class:ns3::Queue
ConstMessageIterator	packetbb.h	/^  typedef std::list< Ptr<PbbMessage> >::const_iterator ConstMessageIterator;$/;"	t	class:ns3::PbbPacket
ConstPrefixIterator	packetbb.h	/^  typedef std::list<uint8_t>::const_iterator ConstPrefixIterator;$/;"	t	class:ns3::PbbAddressBlock
ConstTlvIterator	packetbb.h	/^  typedef PbbAddressTlvBlock::ConstIterator ConstTlvIterator;$/;"	t	class:ns3::PbbAddressBlock
ConstTlvIterator	packetbb.h	/^  typedef std::list< Ptr<PbbTlv> >::const_iterator ConstTlvIterator;$/;"	t	class:ns3::PbbMessage
ConstTlvIterator	packetbb.h	/^  typedef std::list< Ptr<PbbTlv> >::const_iterator ConstTlvIterator;$/;"	t	class:ns3::PbbPacket
ConvertFrom	inet-socket-address.cc	/^InetSocketAddress::ConvertFrom (const Address &address)$/;"	f	class:ns3::InetSocketAddress
ConvertFrom	inet6-socket-address.cc	/^Inet6SocketAddress Inet6SocketAddress::ConvertFrom (const Address &addr)$/;"	f	class:ns3::Inet6SocketAddress
ConvertFrom	ipv4-address.cc	/^Ipv4Address::ConvertFrom (const Address &address)$/;"	f	class:ns3::Ipv4Address
ConvertFrom	ipv6-address.cc	/^Ipv6Address Ipv6Address::ConvertFrom (const Address &address)$/;"	f	class:ns3::Ipv6Address
ConvertFrom	mac16-address.cc	/^Mac16Address::ConvertFrom (const Address &address)$/;"	f	class:ns3::Mac16Address
ConvertFrom	mac48-address.cc	/^Mac48Address::ConvertFrom (const Address &address)$/;"	f	class:ns3::Mac48Address
ConvertFrom	mac64-address.cc	/^Mac64Address::ConvertFrom (const Address &address)$/;"	f	class:ns3::Mac64Address
ConvertFrom	packet-socket-address.cc	/^PacketSocketAddress::ConvertFrom (const Address &address)$/;"	f	class:ns3::PacketSocketAddress
ConvertTo	inet-socket-address.cc	/^InetSocketAddress::ConvertTo (void) const$/;"	f	class:ns3::InetSocketAddress
ConvertTo	inet6-socket-address.cc	/^Address Inet6SocketAddress::ConvertTo (void) const$/;"	f	class:ns3::Inet6SocketAddress
ConvertTo	ipv4-address.cc	/^Ipv4Address::ConvertTo (void) const$/;"	f	class:ns3::Ipv4Address
ConvertTo	ipv6-address.cc	/^Address Ipv6Address::ConvertTo (void) const$/;"	f	class:ns3::Ipv6Address
ConvertTo	mac16-address.cc	/^Mac16Address::ConvertTo (void) const$/;"	f	class:ns3::Mac16Address
ConvertTo	mac48-address.cc	/^Mac48Address::ConvertTo (void) const$/;"	f	class:ns3::Mac48Address
ConvertTo	mac64-address.cc	/^Mac64Address::ConvertTo (void) const$/;"	f	class:ns3::Mac64Address
ConvertTo	packet-socket-address.cc	/^PacketSocketAddress::ConvertTo (void) const$/;"	f	class:ns3::PacketSocketAddress
Copy	packet-burst.cc	/^Ptr<PacketBurst> PacketBurst::Copy (void) const$/;"	f	class:ns3::PacketBurst
CopyAllFrom	address.cc	/^Address::CopyAllFrom (const uint8_t *buffer, uint8_t len)$/;"	f	class:ns3::Address
CopyAllTo	address.cc	/^Address::CopyAllTo (uint8_t *buffer, uint8_t len) const$/;"	f	class:ns3::Address
CopyFrom	address.cc	/^Address::CopyFrom (const uint8_t *buffer, uint8_t len)$/;"	f	class:ns3::Address
CopyFrom	mac16-address.cc	/^Mac16Address::CopyFrom (const uint8_t buffer[2])$/;"	f	class:ns3::Mac16Address
CopyFrom	mac48-address.cc	/^Mac48Address::CopyFrom (const uint8_t buffer[6])$/;"	f	class:ns3::Mac48Address
CopyFrom	mac64-address.cc	/^Mac64Address::CopyFrom (const uint8_t buffer[8])$/;"	f	class:ns3::Mac64Address
CopyTo	address.cc	/^Address::CopyTo (uint8_t buffer[MAX_SIZE]) const$/;"	f	class:ns3::Address
CopyTo	mac16-address.cc	/^Mac16Address::CopyTo (uint8_t buffer[2]) const$/;"	f	class:ns3::Mac16Address
CopyTo	mac48-address.cc	/^Mac48Address::CopyTo (uint8_t buffer[6]) const$/;"	f	class:ns3::Mac48Address
CopyTo	mac64-address.cc	/^Mac64Address::CopyTo (uint8_t buffer[8]) const$/;"	f	class:ns3::Mac64Address
CreateSocket	packet-socket-factory.cc	/^Ptr<Socket> PacketSocketFactory::CreateSocket (void)$/;"	f	class:ns3::PacketSocketFactory
CreateTxQueues	net-device-queue-interface.cc	/^NetDeviceQueueInterface::CreateTxQueues (void)$/;"	f	class:ns3::NetDeviceQueueInterface
CreateTxQueues	original_net-device.cc	/^NetDeviceQueueInterface::CreateTxQueues (void)$/;"	f	class:ns3::NetDeviceQueueInterface
DATA_RATE_H	data-rate.h	22;"	d
DQL_MAX_LIMIT	dynamic-queue-limits.cc	/^static const uint32_t DQL_MAX_LIMIT = (UINTMAX \/ 2) - DQL_MAX_OBJECT;$/;"	v	file:
DQL_MAX_OBJECT	dynamic-queue-limits.cc	/^static const uint32_t DQL_MAX_OBJECT = UINTMAX \/ 16;$/;"	v	file:
DROPTAIL_H	drop-tail-queue.h	20;"	d
DROPTAIL_H	original_drop-tail-queue.h	20;"	d
DYNAMIC_QUEUE_LIMITS_H	dynamic-queue-limits.h	27;"	d
DataRate	data-rate.cc	/^DataRate::DataRate ()$/;"	f	class:ns3::DataRate
DataRate	data-rate.cc	/^DataRate::DataRate (std::string rate)$/;"	f	class:ns3::DataRate
DataRate	data-rate.cc	/^DataRate::DataRate(uint64_t bps)$/;"	f	class:ns3::DataRate
DataRate	data-rate.h	/^class DataRate$/;"	c	namespace:ns3
Dequeue	drop-tail-queue.h	/^DropTailQueue<Item>::Dequeue (void)$/;"	f	class:ns3::DropTailQueue
Dequeue	original_queue.cc	/^Queue1::Dequeue (void)$/;"	f	class:ns3::Queue1
DequeueAll	original_queue.cc	/^Queue1::DequeueAll (void)$/;"	f	class:ns3::Queue1
Deserialize	address.cc	/^Address::Deserialize (TagBuffer buffer)$/;"	f	class:ns3::Address
Deserialize	ethernet-header.cc	/^EthernetHeader::Deserialize (Buffer::Iterator start)$/;"	f	class:ns3::EthernetHeader
Deserialize	ethernet-trailer.cc	/^EthernetTrailer::Deserialize (Buffer::Iterator end)$/;"	f	class:ns3::EthernetTrailer
Deserialize	flow-id-tag.cc	/^FlowIdTag::Deserialize (TagBuffer buf)$/;"	f	class:ns3::FlowIdTag
Deserialize	ipv4-address.cc	/^Ipv4Address::Deserialize (const uint8_t buf[4])$/;"	f	class:ns3::Ipv4Address
Deserialize	ipv6-address.cc	/^Ipv6Address Ipv6Address::Deserialize (const uint8_t buf[16])$/;"	f	class:ns3::Ipv6Address
Deserialize	llc-snap-header.cc	/^LlcSnapHeader::Deserialize (Buffer::Iterator start)$/;"	f	class:ns3::LlcSnapHeader
Deserialize	packet-socket.cc	/^DeviceNameTag::Deserialize (TagBuffer i)$/;"	f	class:ns3::DeviceNameTag
Deserialize	packet-socket.cc	/^PacketSocketTag::Deserialize (TagBuffer i)$/;"	f	class:ns3::PacketSocketTag
Deserialize	packetbb.cc	/^PbbAddressBlock::Deserialize (Buffer::Iterator &start)$/;"	f	class:ns3::PbbAddressBlock
Deserialize	packetbb.cc	/^PbbAddressTlvBlock::Deserialize (Buffer::Iterator &start)$/;"	f	class:ns3::PbbAddressTlvBlock
Deserialize	packetbb.cc	/^PbbMessage::Deserialize (Buffer::Iterator &start)$/;"	f	class:ns3::PbbMessage
Deserialize	packetbb.cc	/^PbbPacket::Deserialize (Buffer::Iterator start)$/;"	f	class:ns3::PbbPacket
Deserialize	packetbb.cc	/^PbbTlv::Deserialize (Buffer::Iterator &start)$/;"	f	class:ns3::PbbTlv
Deserialize	packetbb.cc	/^PbbTlvBlock::Deserialize (Buffer::Iterator &start)$/;"	f	class:ns3::PbbTlvBlock
Deserialize	radiotap-header.cc	/^RadiotapHeader::Deserialize (Buffer::Iterator start)$/;"	f	class:ns3::RadiotapHeader
Deserialize	simple-net-device.cc	/^SimpleTag::Deserialize (TagBuffer i)$/;"	f	class:ns3::SimpleTag
Deserialize	sll-header.cc	/^SllHeader::Deserialize (Buffer::Iterator start)$/;"	f	class:ns3::SllHeader
DeserializeAddress	packetbb.cc	/^PbbAddressBlockIpv4::DeserializeAddress (uint8_t *buffer) const$/;"	f	class:ns3::PbbAddressBlockIpv4
DeserializeAddress	packetbb.cc	/^PbbAddressBlockIpv6::DeserializeAddress (uint8_t *buffer) const$/;"	f	class:ns3::PbbAddressBlockIpv6
DeserializeMessage	packetbb.cc	/^PbbMessage::DeserializeMessage (Buffer::Iterator &start)$/;"	f	class:ns3::PbbMessage
DeserializeOriginatorAddress	packetbb.cc	/^PbbMessageIpv4::DeserializeOriginatorAddress (Buffer::Iterator &start) const$/;"	f	class:ns3::PbbMessageIpv4
DeserializeOriginatorAddress	packetbb.cc	/^PbbMessageIpv6::DeserializeOriginatorAddress (Buffer::Iterator &start) const$/;"	f	class:ns3::PbbMessageIpv6
DeviceNameTag	packet-socket.cc	/^DeviceNameTag::DeviceNameTag ()$/;"	f	class:ns3::DeviceNameTag
DeviceNameTag	packet-socket.h	/^class DeviceNameTag : public Tag$/;"	c	namespace:ns3
Diff	ascii-file.cc	/^AsciiFile::Diff (std::string const & f1,$/;"	f	class:ns3::AsciiFile
Diff	pcap-file.cc	/^PcapFile::Diff (std::string const & f1, std::string const & f2, $/;"	f	class:ns3::PcapFile
Disable	error-model.cc	/^ErrorModel::Disable (void)$/;"	f	class:ns3::ErrorModel
DoBind	packet-socket.cc	/^PacketSocket::DoBind (const PacketSocketAddress &address)$/;"	f	class:ns3::PacketSocket
DoCorrupt	error-model.cc	/^BinaryErrorModel::DoCorrupt (Ptr<Packet> p)$/;"	f	class:ns3::BinaryErrorModel
DoCorrupt	error-model.cc	/^BurstErrorModel::DoCorrupt (Ptr<Packet> p)$/;"	f	class:ns3::BurstErrorModel
DoCorrupt	error-model.cc	/^ListErrorModel::DoCorrupt (Ptr<Packet> p) $/;"	f	class:ns3::ListErrorModel
DoCorrupt	error-model.cc	/^RateErrorModel::DoCorrupt (Ptr<Packet> p) $/;"	f	class:ns3::RateErrorModel
DoCorrupt	error-model.cc	/^ReceiveListErrorModel::DoCorrupt (Ptr<Packet> p) $/;"	f	class:ns3::ReceiveListErrorModel
DoCorruptBit	error-model.cc	/^RateErrorModel::DoCorruptBit (Ptr<Packet> p)$/;"	f	class:ns3::RateErrorModel
DoCorruptByte	error-model.cc	/^RateErrorModel::DoCorruptByte (Ptr<Packet> p)$/;"	f	class:ns3::RateErrorModel
DoCorruptPkt	error-model.cc	/^RateErrorModel::DoCorruptPkt (Ptr<Packet> p)$/;"	f	class:ns3::RateErrorModel
DoDequeue	original_drop-tail-queue.cc	/^DropTailQueue1::DoDequeue (void)$/;"	f	class:ns3::DropTailQueue1
DoDequeue	queue.h	/^Queue<Item>::DoDequeue (ConstIterator pos)$/;"	f	class:ns3::Queue
DoDispose	net-device-queue-interface.cc	/^NetDeviceQueueInterface::DoDispose (void)$/;"	f	class:ns3::NetDeviceQueueInterface
DoDispose	original_net-device.cc	/^NetDeviceQueueInterface::DoDispose (void)$/;"	f	class:ns3::NetDeviceQueueInterface
DoDispose	packet-burst.cc	/^PacketBurst::DoDispose (void)$/;"	f	class:ns3::PacketBurst
DoDispose	packet-data-calculators.cc	/^PacketCounterCalculator::DoDispose (void)$/;"	f	class:PacketCounterCalculator
DoDispose	packet-data-calculators.cc	/^PacketSizeMinMaxAvgTotalCalculator::DoDispose (void)$/;"	f	class:PacketSizeMinMaxAvgTotalCalculator
DoDispose	packet-socket-client.cc	/^PacketSocketClient::DoDispose (void)$/;"	f	class:ns3::PacketSocketClient
DoDispose	packet-socket-server.cc	/^PacketSocketServer::DoDispose (void)$/;"	f	class:ns3::PacketSocketServer
DoDispose	packet-socket.cc	/^PacketSocket::DoDispose (void)$/;"	f	class:ns3::PacketSocket
DoDispose	simple-net-device.cc	/^SimpleNetDevice::DoDispose (void)$/;"	f	class:ns3::SimpleNetDevice
DoEnqueue	original_drop-tail-queue.cc	/^DropTailQueue1::DoEnqueue (Ptr<QueueItem1> item)$/;"	f	class:ns3::DropTailQueue1
DoEnqueue	queue.h	/^Queue<Item>::DoEnqueue (ConstIterator pos, Ptr<Item> item)$/;"	f	class:ns3::Queue
DoInitialize	simple-net-device.cc	/^SimpleNetDevice::DoInitialize (void)$/;"	f	class:ns3::SimpleNetDevice
DoNsLog	net-device-queue-interface.cc	/^NetDeviceQueue::DoNsLog (const enum LogLevel level, std::string str)$/;"	f	class:ns3::NetDeviceQueue
DoNsLog	queue.cc	/^QueueBase::DoNsLog (const enum LogLevel level, std::string str) const$/;"	f	class:ns3::QueueBase
DoParse	data-rate.cc	/^DataRate::DoParse (const std::string s, uint64_t *v)$/;"	f	class:ns3::DataRate
DoPeek	original_drop-tail-queue.cc	/^DropTailQueue1::DoPeek (void) const$/;"	f	class:ns3::DropTailQueue1
DoPeek	queue.h	/^Queue<Item>::DoPeek (ConstIterator pos) const$/;"	f	class:ns3::Queue
DoRemove	original_drop-tail-queue.cc	/^DropTailQueue1::DoRemove (void)$/;"	f	class:ns3::DropTailQueue1
DoRemove	queue.h	/^Queue<Item>::DoRemove (ConstIterator pos)$/;"	f	class:ns3::Queue
DoReset	error-model.cc	/^BinaryErrorModel::DoReset (void)$/;"	f	class:ns3::BinaryErrorModel
DoReset	error-model.cc	/^BurstErrorModel::DoReset (void)$/;"	f	class:ns3::BurstErrorModel
DoReset	error-model.cc	/^ListErrorModel::DoReset (void) $/;"	f	class:ns3::ListErrorModel
DoReset	error-model.cc	/^RateErrorModel::DoReset (void) $/;"	f	class:ns3::RateErrorModel
DoReset	error-model.cc	/^ReceiveListErrorModel::DoReset (void) $/;"	f	class:ns3::ReceiveListErrorModel
Drop	original_queue.cc	/^Queue1::Drop (Ptr<QueueItem1> item)$/;"	f	class:ns3::Queue1
DropAfterDequeue	queue.h	/^Queue<Item>::DropAfterDequeue (Ptr<Item> item)$/;"	f	class:ns3::Queue
DropBeforeEnqueue	queue.h	/^Queue<Item>::DropBeforeEnqueue (Ptr<Item> item)$/;"	f	class:ns3::Queue
DropCallback	original_queue.h	/^  typedef Callback<void, Ptr<QueueItem1> > DropCallback;$/;"	t	class:ns3::Queue1
DropTailQueue	drop-tail-queue.h	/^DropTailQueue<Item>::DropTailQueue () :$/;"	f	class:ns3::DropTailQueue
DropTailQueue	drop-tail-queue.h	/^class DropTailQueue : public Queue<Item>$/;"	c	namespace:ns3
DropTailQueue1	original_drop-tail-queue.cc	/^DropTailQueue1::DropTailQueue1 () :$/;"	f	class:ns3::DropTailQueue1
DropTailQueue1	original_drop-tail-queue.h	/^class DropTailQueue1 : public Queue1$/;"	c	namespace:ns3
DynamicQueueLimits	dynamic-queue-limits.cc	/^DynamicQueueLimits::DynamicQueueLimits ()$/;"	f	class:ns3::DynamicQueueLimits
DynamicQueueLimits	dynamic-queue-limits.h	/^class DynamicQueueLimits : public QueueLimits {$/;"	c	namespace:ns3
ERROR_CHANNEL_H	error-channel.h	21;"	d
ERROR_MODEL_H	error-model.h	64;"	d
ERROR_UNIT_BIT	error-model.h	/^    ERROR_UNIT_BIT,$/;"	e	enum:ns3::RateErrorModel::ErrorUnit
ERROR_UNIT_BYTE	error-model.h	/^    ERROR_UNIT_BYTE,$/;"	e	enum:ns3::RateErrorModel::ErrorUnit
ERROR_UNIT_PACKET	error-model.h	/^    ERROR_UNIT_PACKET$/;"	e	enum:ns3::RateErrorModel::ErrorUnit
ETHERNET_HEADER_H	ethernet-header.h	22;"	d
ETHERNET_TRAILER_H	ethernet-trailer.h	22;"	d
Empty	packetbb.cc	/^PbbAddressTlvBlock::Empty (void) const$/;"	f	class:ns3::PbbAddressTlvBlock
Empty	packetbb.cc	/^PbbTlvBlock::Empty (void) const$/;"	f	class:ns3::PbbTlvBlock
Enable	error-model.cc	/^ErrorModel::Enable (void)$/;"	f	class:ns3::ErrorModel
EnableFcs	ethernet-trailer.cc	/^EthernetTrailer::EnableFcs (bool enable)$/;"	f	class:ns3::EthernetTrailer
End	packet-burst.cc	/^PacketBurst::End (void) const$/;"	f	class:ns3::PacketBurst
End	packetbb.cc	/^PbbAddressTlvBlock::End (void) const$/;"	f	class:ns3::PbbAddressTlvBlock
End	packetbb.cc	/^PbbAddressTlvBlock::End (void)$/;"	f	class:ns3::PbbAddressTlvBlock
End	packetbb.cc	/^PbbTlvBlock::End (void) const$/;"	f	class:ns3::PbbTlvBlock
End	packetbb.cc	/^PbbTlvBlock::End (void)$/;"	f	class:ns3::PbbTlvBlock
Enqueue	drop-tail-queue.h	/^DropTailQueue<Item>::Enqueue (Ptr<Item> item)$/;"	f	class:ns3::DropTailQueue
Enqueue	original_queue.cc	/^Queue1::Enqueue (Ptr<QueueItem1> item)$/;"	f	class:ns3::Queue1
Eof	ascii-file.cc	/^AsciiFile::Eof (void) const$/;"	f	class:ns3::AsciiFile
Eof	pcap-file-wrapper.cc	/^PcapFileWrapper::Eof (void) const$/;"	f	class:ns3::PcapFileWrapper
Eof	pcap-file.cc	/^PcapFile::Eof (void) const$/;"	f	class:ns3::PcapFile
Erase	packetbb.cc	/^PbbAddressTlvBlock::Erase (PbbAddressTlvBlock::Iterator first, PbbAddressTlvBlock::Iterator last)$/;"	f	class:ns3::PbbAddressTlvBlock
Erase	packetbb.cc	/^PbbAddressTlvBlock::Erase (PbbAddressTlvBlock::Iterator position)$/;"	f	class:ns3::PbbAddressTlvBlock
Erase	packetbb.cc	/^PbbPacket::Erase (PbbPacket::MessageIterator first,$/;"	f	class:ns3::PbbPacket
Erase	packetbb.cc	/^PbbPacket::Erase (PbbPacket::MessageIterator position)$/;"	f	class:ns3::PbbPacket
Erase	packetbb.cc	/^PbbPacket::Erase (PbbPacket::TlvIterator first, PbbPacket::TlvIterator last)$/;"	f	class:ns3::PbbPacket
Erase	packetbb.cc	/^PbbPacket::Erase (PbbPacket::TlvIterator position)$/;"	f	class:ns3::PbbPacket
Erase	packetbb.cc	/^PbbTlvBlock::Erase (PbbTlvBlock::Iterator first, PbbTlvBlock::Iterator last)$/;"	f	class:ns3::PbbTlvBlock
Erase	packetbb.cc	/^PbbTlvBlock::Erase (PbbTlvBlock::Iterator position)$/;"	f	class:ns3::PbbTlvBlock
ErrorChannel	error-channel.cc	/^ErrorChannel::ErrorChannel ()$/;"	f	class:ns3::ErrorChannel
ErrorChannel	error-channel.h	/^class ErrorChannel : public SimpleChannel$/;"	c	namespace:ns3
ErrorModel	error-model.cc	/^ErrorModel::ErrorModel () :$/;"	f	class:ns3::ErrorModel
ErrorModel	error-model.h	/^class ErrorModel : public Object$/;"	c	namespace:ns3
ErrorUnit	error-model.h	/^  enum ErrorUnit$/;"	g	class:ns3::RateErrorModel
EthernetHeader	ethernet-header.cc	/^EthernetHeader::EthernetHeader ()$/;"	f	class:ns3::EthernetHeader
EthernetHeader	ethernet-header.cc	/^EthernetHeader::EthernetHeader (bool hasPreamble)$/;"	f	class:ns3::EthernetHeader
EthernetHeader	ethernet-header.h	/^class EthernetHeader : public Header $/;"	c	namespace:ns3
EthernetTrailer	ethernet-trailer.cc	/^EthernetTrailer::EthernetTrailer ()$/;"	f	class:ns3::EthernetTrailer
EthernetTrailer	ethernet-trailer.h	/^class EthernetTrailer : public Trailer $/;"	c	namespace:ns3
FLOW_ID_TAG_H	flow-id-tag.h	21;"	d
FRAME_FLAG_BAD_FCS	radiotap-header.h	/^    FRAME_FLAG_BAD_FCS        = 0x40, \/**< Frame failed FCS check *\/$/;"	e	enum:ns3::RadiotapHeader::FrameFlag
FRAME_FLAG_CFP	radiotap-header.h	/^    FRAME_FLAG_CFP            = 0x01, \/**< Frame sent\/received during CFP *\/$/;"	e	enum:ns3::RadiotapHeader::FrameFlag
FRAME_FLAG_DATA_PADDING	radiotap-header.h	/^    FRAME_FLAG_DATA_PADDING   = 0x20, \/**< Frame has padding between 802.11 header and payload (to 32-bit boundary) *\/$/;"	e	enum:ns3::RadiotapHeader::FrameFlag
FRAME_FLAG_FCS_INCLUDED	radiotap-header.h	/^    FRAME_FLAG_FCS_INCLUDED   = 0x10, \/**< Frame includes FCS *\/$/;"	e	enum:ns3::RadiotapHeader::FrameFlag
FRAME_FLAG_FRAGMENTED	radiotap-header.h	/^    FRAME_FLAG_FRAGMENTED     = 0x08, \/**< Frame sent\/received with fragmentation *\/$/;"	e	enum:ns3::RadiotapHeader::FrameFlag
FRAME_FLAG_NONE	radiotap-header.h	/^    FRAME_FLAG_NONE           = 0x00, \/**< No flags set *\/$/;"	e	enum:ns3::RadiotapHeader::FrameFlag
FRAME_FLAG_SHORT_GUARD	radiotap-header.h	/^    FRAME_FLAG_SHORT_GUARD    = 0x80  \/**< Frame used short guard interval (HT) *\/$/;"	e	enum:ns3::RadiotapHeader::FrameFlag
FRAME_FLAG_SHORT_PREAMBLE	radiotap-header.h	/^    FRAME_FLAG_SHORT_PREAMBLE = 0x02, \/**< Frame sent\/received with short preamble *\/$/;"	e	enum:ns3::RadiotapHeader::FrameFlag
FRAME_FLAG_WEP	radiotap-header.h	/^    FRAME_FLAG_WEP            = 0x04, \/**< Frame sent\/received with WEP encryption *\/$/;"	e	enum:ns3::RadiotapHeader::FrameFlag
Fail	ascii-file.cc	/^AsciiFile::Fail (void) const$/;"	f	class:ns3::AsciiFile
Fail	pcap-file-wrapper.cc	/^PcapFileWrapper::Fail (void) const$/;"	f	class:ns3::PcapFileWrapper
Fail	pcap-file.cc	/^PcapFile::Fail (void) const$/;"	f	class:ns3::PcapFile
FlowIdTag	flow-id-tag.cc	/^FlowIdTag::FlowIdTag ()$/;"	f	class:ns3::FlowIdTag
FlowIdTag	flow-id-tag.cc	/^FlowIdTag::FlowIdTag (uint32_t id)$/;"	f	class:ns3::FlowIdTag
FlowIdTag	flow-id-tag.h	/^class FlowIdTag : public Tag$/;"	c	namespace:ns3
Flush	queue.h	/^Queue<Item>::Flush (void)$/;"	f	class:ns3::Queue
ForwardUp	packet-socket.cc	/^PacketSocket::ForwardUp (Ptr<NetDevice> device, Ptr<const Packet> packet, $/;"	f	class:ns3::PacketSocket
FrameFlag	radiotap-header.h	/^  enum FrameFlag$/;"	g	class:ns3::RadiotapHeader
FrameUpdate	packet-data-calculators.cc	/^PacketCounterCalculator::FrameUpdate (std::string path,$/;"	f	class:PacketCounterCalculator
FrameUpdate	packet-data-calculators.cc	/^PacketSizeMinMaxAvgTotalCalculator::FrameUpdate (std::string path,$/;"	f	class:PacketSizeMinMaxAvgTotalCalculator
Front	packetbb.cc	/^PbbAddressTlvBlock::Front (void) const$/;"	f	class:ns3::PbbAddressTlvBlock
Front	packetbb.cc	/^PbbTlvBlock::Front (void) const$/;"	f	class:ns3::PbbTlvBlock
GENERIC_PHY_H	generic-phy.h	22;"	d
GenericPhyRxEndErrorCallback	generic-phy.h	/^typedef Callback< void > GenericPhyRxEndErrorCallback;$/;"	t	namespace:ns3
GenericPhyRxEndOkCallback	generic-phy.h	/^typedef Callback< void, Ptr<Packet> > GenericPhyRxEndOkCallback;$/;"	t	namespace:ns3
GenericPhyRxStartCallback	generic-phy.h	/^typedef Callback< void > GenericPhyRxStartCallback;$/;"	t	namespace:ns3
GenericPhyTxEndCallback	generic-phy.h	/^typedef Callback< void, Ptr<const Packet> > GenericPhyTxEndCallback;$/;"	t	namespace:ns3
GenericPhyTxStartCallback	generic-phy.h	/^typedef Callback< bool, Ptr<Packet> > GenericPhyTxStartCallback;$/;"	t	namespace:ns3
Get	ipv4-address.cc	/^Ipv4Address::Get (void) const$/;"	f	class:ns3::Ipv4Address
Get	ipv4-address.cc	/^Ipv4Mask::Get (void) const$/;"	f	class:ns3::Ipv4Mask
GetAddress	queue-item.cc	/^QueueDiscItem::GetAddress (void) const$/;"	f	class:ns3::QueueDiscItem
GetAddress	simple-net-device.cc	/^SimpleNetDevice::GetAddress (void) const$/;"	f	class:ns3::SimpleNetDevice
GetAddressLength	packetbb.cc	/^PbbAddressBlockIpv4::GetAddressLength (void) const$/;"	f	class:ns3::PbbAddressBlockIpv4
GetAddressLength	packetbb.cc	/^PbbAddressBlockIpv6::GetAddressLength (void) const$/;"	f	class:ns3::PbbAddressBlockIpv6
GetAddressLength	packetbb.cc	/^PbbMessage::GetAddressLength (void) const$/;"	f	class:ns3::PbbMessage
GetAddressLength	packetbb.cc	/^PbbMessageIpv4::GetAddressLength (void) const$/;"	f	class:ns3::PbbMessageIpv4
GetAddressLength	packetbb.cc	/^PbbMessageIpv6::GetAddressLength (void) const$/;"	f	class:ns3::PbbMessageIpv6
GetAllHostsMulticast	ipv6-address.cc	/^Ipv6Address Ipv6Address::GetAllHostsMulticast ()$/;"	f	class:ns3::Ipv6Address
GetAllNodesMulticast	ipv6-address.cc	/^Ipv6Address Ipv6Address::GetAllNodesMulticast ()$/;"	f	class:ns3::Ipv6Address
GetAllRoutersMulticast	ipv6-address.cc	/^Ipv6Address Ipv6Address::GetAllRoutersMulticast ()$/;"	f	class:ns3::Ipv6Address
GetAllowBroadcast	packet-socket.cc	/^PacketSocket::GetAllowBroadcast () const$/;"	f	class:ns3::PacketSocket
GetAmpduStatusFlags	radiotap-header.cc	/^RadiotapHeader::GetAmpduStatusFlags () const$/;"	f	class:ns3::RadiotapHeader
GetAmpduStatusRef	radiotap-header.cc	/^RadiotapHeader::GetAmpduStatusRef () const$/;"	f	class:ns3::RadiotapHeader
GetAntennaNoisePower	radiotap-header.cc	/^RadiotapHeader::GetAntennaNoisePower (void) const$/;"	f	class:ns3::RadiotapHeader
GetAntennaSignalPower	radiotap-header.cc	/^RadiotapHeader::GetAntennaSignalPower (void) const$/;"	f	class:ns3::RadiotapHeader
GetAny	ipv4-address.cc	/^Ipv4Address::GetAny (void)$/;"	f	class:ns3::Ipv4Address
GetAny	ipv6-address.cc	/^Ipv6Address Ipv6Address::GetAny ()$/;"	f	class:ns3::Ipv6Address
GetArpType	sll-header.cc	/^SllHeader::GetArpType () const$/;"	f	class:ns3::SllHeader
GetBitRate	data-rate.cc	/^uint64_t DataRate::GetBitRate () const$/;"	f	class:ns3::DataRate
GetBroadcast	ipv4-address.cc	/^Ipv4Address::GetBroadcast (void)$/;"	f	class:ns3::Ipv4Address
GetBroadcast	mac48-address.cc	/^Mac48Address::GetBroadcast (void)$/;"	f	class:ns3::Mac48Address
GetBroadcast	simple-net-device.cc	/^SimpleNetDevice::GetBroadcast (void) const$/;"	f	class:ns3::SimpleNetDevice
GetBurstRate	error-model.cc	/^BurstErrorModel::GetBurstRate (void) const$/;"	f	class:ns3::BurstErrorModel
GetBytes	ipv6-address.cc	/^void Ipv6Address::GetBytes (uint8_t buf[16]) const$/;"	f	class:ns3::Ipv6Address
GetBytes	ipv6-address.cc	/^void Ipv6Prefix::GetBytes (uint8_t buf[16]) const$/;"	f	class:ns3::Ipv6Prefix
GetChannel	simple-net-device.cc	/^SimpleNetDevice::GetChannel (void) const$/;"	f	class:ns3::SimpleNetDevice
GetChannelFlags	radiotap-header.cc	/^RadiotapHeader::GetChannelFlags (void) const$/;"	f	class:ns3::RadiotapHeader
GetChannelFrequency	radiotap-header.cc	/^RadiotapHeader::GetChannelFrequency (void) const$/;"	f	class:ns3::RadiotapHeader
GetDataLinkType	pcap-file-wrapper.cc	/^PcapFileWrapper::GetDataLinkType (void)$/;"	f	class:ns3::PcapFileWrapper
GetDataLinkType	pcap-file.cc	/^PcapFile::GetDataLinkType (void)$/;"	f	class:ns3::PcapFile
GetDestAddress	packet-socket.cc	/^PacketSocketTag::GetDestAddress (void) const$/;"	f	class:ns3::PacketSocketTag
GetDestination	ethernet-header.cc	/^EthernetHeader::GetDestination (void) const$/;"	f	class:ns3::EthernetHeader
GetDevice	error-channel.cc	/^ErrorChannel::GetDevice (uint32_t i) const$/;"	f	class:ns3::ErrorChannel
GetDevice	simple-channel.cc	/^SimpleChannel::GetDevice (uint32_t i) const$/;"	f	class:ns3::SimpleChannel
GetDeviceName	packet-socket.cc	/^DeviceNameTag::GetDeviceName (void) const$/;"	f	class:ns3::DeviceNameTag
GetDst	simple-net-device.cc	/^SimpleTag::GetDst (void) const$/;"	f	class:ns3::SimpleTag
GetErrno	packet-socket.cc	/^PacketSocket::GetErrno (void) const$/;"	f	class:ns3::PacketSocket
GetFcs	ethernet-trailer.cc	/^EthernetTrailer::GetFcs (void) const$/;"	f	class:ns3::EthernetTrailer
GetFlowId	flow-id-tag.cc	/^FlowIdTag::GetFlowId (void) const$/;"	f	class:ns3::FlowIdTag
GetFrameFlags	radiotap-header.cc	/^RadiotapHeader::GetFrameFlags (void) const$/;"	f	class:ns3::RadiotapHeader
GetHeadTail	packetbb.cc	/^PbbAddressBlock::GetHeadTail (uint8_t *head, uint8_t &headlen,$/;"	f	class:ns3::PbbAddressBlock
GetHeaderSize	ethernet-header.cc	/^EthernetHeader::GetHeaderSize (void) const$/;"	f	class:ns3::EthernetHeader
GetHopCount	packetbb.cc	/^PbbMessage::GetHopCount (void) const$/;"	f	class:ns3::PbbMessage
GetHopLimit	packetbb.cc	/^PbbMessage::GetHopLimit (void) const$/;"	f	class:ns3::PbbMessage
GetIfIndex	simple-net-device.cc	/^SimpleNetDevice::GetIfIndex (void) const$/;"	f	class:ns3::SimpleNetDevice
GetIndexStart	packetbb.cc	/^PbbAddressTlv::GetIndexStart (void) const$/;"	f	class:ns3::PbbAddressTlv
GetIndexStart	packetbb.cc	/^PbbTlv::GetIndexStart (void) const$/;"	f	class:ns3::PbbTlv
GetIndexStop	packetbb.cc	/^PbbAddressTlv::GetIndexStop (void) const$/;"	f	class:ns3::PbbAddressTlv
GetIndexStop	packetbb.cc	/^PbbTlv::GetIndexStop (void) const$/;"	f	class:ns3::PbbTlv
GetInstanceTypeId	ethernet-header.cc	/^EthernetHeader::GetInstanceTypeId (void) const$/;"	f	class:ns3::EthernetHeader
GetInstanceTypeId	ethernet-trailer.cc	/^EthernetTrailer::GetInstanceTypeId (void) const$/;"	f	class:ns3::EthernetTrailer
GetInstanceTypeId	flow-id-tag.cc	/^FlowIdTag::GetInstanceTypeId (void) const$/;"	f	class:ns3::FlowIdTag
GetInstanceTypeId	llc-snap-header.cc	/^LlcSnapHeader::GetInstanceTypeId (void) const$/;"	f	class:ns3::LlcSnapHeader
GetInstanceTypeId	packet-socket.cc	/^DeviceNameTag::GetInstanceTypeId (void) const$/;"	f	class:ns3::DeviceNameTag
GetInstanceTypeId	packet-socket.cc	/^PacketSocketTag::GetInstanceTypeId (void) const$/;"	f	class:ns3::PacketSocketTag
GetInstanceTypeId	packetbb.cc	/^PbbPacket::GetInstanceTypeId (void) const$/;"	f	class:ns3::PbbPacket
GetInstanceTypeId	radiotap-header.cc	/^RadiotapHeader::GetInstanceTypeId (void) const$/;"	f	class:ns3::RadiotapHeader
GetInstanceTypeId	simple-net-device.cc	/^SimpleTag::GetInstanceTypeId (void) const$/;"	f	class:ns3::SimpleTag
GetInstanceTypeId	sll-header.cc	/^SllHeader::GetInstanceTypeId (void) const$/;"	f	class:ns3::SllHeader
GetInverse	ipv4-address.cc	/^Ipv4Mask::GetInverse (void) const$/;"	f	class:ns3::Ipv4Mask
GetIpv4	inet-socket-address.cc	/^InetSocketAddress::GetIpv4 (void) const$/;"	f	class:ns3::InetSocketAddress
GetIpv4MappedAddress	ipv6-address.cc	/^Ipv4Address Ipv6Address::GetIpv4MappedAddress() const$/;"	f	class:ns3::Ipv6Address
GetIpv6	inet6-socket-address.cc	/^Ipv6Address Inet6SocketAddress::GetIpv6 (void) const$/;"	f	class:ns3::Inet6SocketAddress
GetLateTxQueuesCreation	net-device-queue-interface.cc	/^NetDeviceQueueInterface::GetLateTxQueuesCreation (void) const$/;"	f	class:ns3::NetDeviceQueueInterface
GetLength	address.cc	/^Address::GetLength (void) const$/;"	f	class:ns3::Address
GetLengthType	ethernet-header.cc	/^EthernetHeader::GetLengthType (void) const$/;"	f	class:ns3::EthernetHeader
GetList	error-model.cc	/^ListErrorModel::GetList (void) const $/;"	f	class:ns3::ListErrorModel
GetList	error-model.cc	/^ReceiveListErrorModel::GetList (void) const $/;"	f	class:ns3::ReceiveListErrorModel
GetLoopback	ipv4-address.cc	/^Ipv4Address::GetLoopback (void)$/;"	f	class:ns3::Ipv4Address
GetLoopback	ipv4-address.cc	/^Ipv4Mask::GetLoopback (void)$/;"	f	class:ns3::Ipv4Mask
GetLoopback	ipv6-address.cc	/^Ipv6Address Ipv6Address::GetLoopback ()$/;"	f	class:ns3::Ipv6Address
GetLoopback	ipv6-address.cc	/^Ipv6Prefix Ipv6Prefix::GetLoopback ()$/;"	f	class:ns3::Ipv6Prefix
GetMagic	pcap-file-wrapper.cc	/^PcapFileWrapper::GetMagic (void)$/;"	f	class:ns3::PcapFileWrapper
GetMagic	pcap-file.cc	/^PcapFile::GetMagic (void)$/;"	f	class:ns3::PcapFile
GetMaxBytes	original_queue.cc	/^Queue1::GetMaxBytes (void) const$/;"	f	class:ns3::Queue1
GetMaxBytes	queue.cc	/^QueueBase::GetMaxBytes (void) const$/;"	f	class:ns3::QueueBase
GetMaxPackets	original_queue.cc	/^Queue1::GetMaxPackets (void) const$/;"	f	class:ns3::Queue1
GetMaxPackets	queue.cc	/^QueueBase::GetMaxPackets (void) const$/;"	f	class:ns3::QueueBase
GetMcsFlags	radiotap-header.cc	/^RadiotapHeader::GetMcsFlags () const$/;"	f	class:ns3::RadiotapHeader
GetMcsKnown	radiotap-header.cc	/^RadiotapHeader::GetMcsKnown () const$/;"	f	class:ns3::RadiotapHeader
GetMcsRate	radiotap-header.cc	/^RadiotapHeader::GetMcsRate () const$/;"	f	class:ns3::RadiotapHeader
GetMinMtu	packet-socket.cc	/^PacketSocket::GetMinMtu (PacketSocketAddress ad) const$/;"	f	class:ns3::PacketSocket
GetMode	original_queue.cc	/^Queue1::GetMode (void) const$/;"	f	class:ns3::Queue1
GetMode	queue.cc	/^QueueBase::GetMode (void) const$/;"	f	class:ns3::QueueBase
GetMtu	simple-net-device.cc	/^SimpleNetDevice::GetMtu (void) const$/;"	f	class:ns3::SimpleNetDevice
GetMulticast	mac48-address.cc	/^Mac48Address Mac48Address::GetMulticast (Ipv6Address addr)$/;"	f	class:ns3::Mac48Address
GetMulticast	mac48-address.cc	/^Mac48Address::GetMulticast (Ipv4Address multicastGroup)$/;"	f	class:ns3::Mac48Address
GetMulticast	simple-net-device.cc	/^Address SimpleNetDevice::GetMulticast (Ipv6Address addr) const$/;"	f	class:ns3::SimpleNetDevice
GetMulticast	simple-net-device.cc	/^SimpleNetDevice::GetMulticast (Ipv4Address multicastGroup) const$/;"	f	class:ns3::SimpleNetDevice
GetMulticast6Prefix	mac48-address.cc	/^Mac48Address::GetMulticast6Prefix (void)$/;"	f	class:ns3::Mac48Address
GetMulticastPrefix	mac48-address.cc	/^Mac48Address::GetMulticastPrefix (void)$/;"	f	class:ns3::Mac48Address
GetNBytes	original_queue.cc	/^Queue1::GetNBytes (void) const$/;"	f	class:ns3::Queue1
GetNBytes	queue.cc	/^QueueBase::GetNBytes (void) const$/;"	f	class:ns3::QueueBase
GetNDevices	error-channel.cc	/^ErrorChannel::GetNDevices (void) const$/;"	f	class:ns3::ErrorChannel
GetNDevices	simple-channel.cc	/^SimpleChannel::GetNDevices (void) const$/;"	f	class:ns3::SimpleChannel
GetNPackets	original_queue.cc	/^Queue1::GetNPackets (void) const$/;"	f	class:ns3::Queue1
GetNPackets	packet-burst.cc	/^PacketBurst::GetNPackets (void) const$/;"	f	class:ns3::PacketBurst
GetNPackets	queue.cc	/^QueueBase::GetNPackets (void) const$/;"	f	class:ns3::QueueBase
GetNTxQueues	net-device-queue-interface.cc	/^NetDeviceQueueInterface::GetNTxQueues (void) const$/;"	f	class:ns3::NetDeviceQueueInterface
GetNTxQueues	original_net-device.cc	/^NetDeviceQueueInterface::GetNTxQueues (void) const$/;"	f	class:ns3::NetDeviceQueueInterface
GetNode	packet-socket.cc	/^PacketSocket::GetNode (void) const$/;"	f	class:ns3::PacketSocket
GetNode	simple-net-device.cc	/^SimpleNetDevice::GetNode (void) const$/;"	f	class:ns3::SimpleNetDevice
GetOnes	ipv4-address.cc	/^Ipv4Mask::GetOnes (void)$/;"	f	class:ns3::Ipv4Mask
GetOnes	ipv6-address.cc	/^Ipv6Address Ipv6Address::GetOnes ()$/;"	f	class:ns3::Ipv6Address
GetOnes	ipv6-address.cc	/^Ipv6Prefix Ipv6Prefix::GetOnes ()$/;"	f	class:ns3::Ipv6Prefix
GetOriginatorAddress	packetbb.cc	/^PbbMessage::GetOriginatorAddress (void) const$/;"	f	class:ns3::PbbMessage
GetPacket	original_net-device.cc	/^QueueItem::GetPacket (void) const$/;"	f	class:ns3::QueueItem
GetPacket	queue-item.cc	/^QueueItem::GetPacket (void) const$/;"	f	class:ns3::QueueItem
GetPacketSize	original_net-device.cc	/^QueueItem::GetPacketSize (void) const$/;"	f	class:ns3::QueueItem
GetPacketType	ethernet-header.cc	/^EthernetHeader::GetPacketType (void) const$/;"	f	class:ns3::EthernetHeader
GetPacketType	packet-socket.cc	/^PacketSocketTag::GetPacketType (void) const$/;"	f	class:ns3::PacketSocketTag
GetPacketType	sll-header.cc	/^SllHeader::GetPacketType (void) const$/;"	f	class:ns3::SllHeader
GetPackets	packet-burst.cc	/^PacketBurst::GetPackets (void) const$/;"	f	class:ns3::PacketBurst
GetPeerName	packet-socket.cc	/^PacketSocket::GetPeerName (Address &address) const$/;"	f	class:ns3::PacketSocket
GetPhysicalAddress	packet-socket-address.cc	/^PacketSocketAddress::GetPhysicalAddress (void) const$/;"	f	class:ns3::PacketSocketAddress
GetPort	inet-socket-address.cc	/^InetSocketAddress::GetPort (void) const$/;"	f	class:ns3::InetSocketAddress
GetPort	inet6-socket-address.cc	/^uint16_t Inet6SocketAddress::GetPort (void) const$/;"	f	class:ns3::Inet6SocketAddress
GetPreambleSfd	ethernet-header.cc	/^EthernetHeader::GetPreambleSfd (void) const$/;"	f	class:ns3::EthernetHeader
GetPrefixFlags	packetbb.cc	/^PbbAddressBlock::GetPrefixFlags (void) const$/;"	f	class:ns3::PbbAddressBlock
GetPrefixLength	ipv4-address.cc	/^Ipv4Mask::GetPrefixLength (void) const$/;"	f	class:ns3::Ipv4Mask
GetPrefixLength	ipv6-address.cc	/^uint8_t Ipv6Prefix::GetPrefixLength () const$/;"	f	class:ns3::Ipv6Prefix
GetPriority	packet-socket-client.cc	/^PacketSocketClient::GetPriority (void) const$/;"	f	class:ns3::PacketSocketClient
GetProto	simple-net-device.cc	/^SimpleTag::GetProto (void) const$/;"	f	class:ns3::SimpleTag
GetProtocol	packet-socket-address.cc	/^PacketSocketAddress::GetProtocol (void) const$/;"	f	class:ns3::PacketSocketAddress
GetProtocol	queue-item.cc	/^QueueDiscItem::GetProtocol (void) const$/;"	f	class:ns3::QueueDiscItem
GetQueue	simple-net-device.cc	/^SimpleNetDevice::GetQueue () const$/;"	f	class:ns3::SimpleNetDevice
GetQueueLimits	net-device-queue-interface.cc	/^NetDeviceQueue::GetQueueLimits ()$/;"	f	class:ns3::NetDeviceQueue
GetQueueLimits	original_net-device.cc	/^NetDeviceQueue::GetQueueLimits ()$/;"	f	class:ns3::NetDeviceQueue
GetRate	error-model.cc	/^RateErrorModel::GetRate (void) const $/;"	f	class:ns3::RateErrorModel
GetRate	radiotap-header.cc	/^RadiotapHeader::GetRate (void) const$/;"	f	class:ns3::RadiotapHeader
GetRxAvailable	packet-socket.cc	/^PacketSocket::GetRxAvailable (void) const$/;"	f	class:ns3::PacketSocket
GetSelectQueueCallback	net-device-queue-interface.cc	/^NetDeviceQueueInterface::GetSelectQueueCallback (void) const$/;"	f	class:ns3::NetDeviceQueueInterface
GetSelectQueueCallback	original_net-device.cc	/^NetDeviceQueueInterface::GetSelectQueueCallback (void) const$/;"	f	class:ns3::NetDeviceQueueInterface
GetSequenceNumber	packetbb.cc	/^PbbMessage::GetSequenceNumber (void) const$/;"	f	class:ns3::PbbMessage
GetSequenceNumber	packetbb.cc	/^PbbPacket::GetSequenceNumber (void) const$/;"	f	class:ns3::PbbPacket
GetSerializedSize	address.cc	/^Address::GetSerializedSize (void) const$/;"	f	class:ns3::Address
GetSerializedSize	ethernet-header.cc	/^EthernetHeader::GetSerializedSize (void) const$/;"	f	class:ns3::EthernetHeader
GetSerializedSize	ethernet-trailer.cc	/^EthernetTrailer::GetSerializedSize (void) const$/;"	f	class:ns3::EthernetTrailer
GetSerializedSize	flow-id-tag.cc	/^FlowIdTag::GetSerializedSize (void) const$/;"	f	class:ns3::FlowIdTag
GetSerializedSize	llc-snap-header.cc	/^LlcSnapHeader::GetSerializedSize (void) const$/;"	f	class:ns3::LlcSnapHeader
GetSerializedSize	packet-socket.cc	/^DeviceNameTag::GetSerializedSize (void) const$/;"	f	class:ns3::DeviceNameTag
GetSerializedSize	packet-socket.cc	/^PacketSocketTag::GetSerializedSize (void) const$/;"	f	class:ns3::PacketSocketTag
GetSerializedSize	packetbb.cc	/^PbbAddressBlock::GetSerializedSize (void) const$/;"	f	class:ns3::PbbAddressBlock
GetSerializedSize	packetbb.cc	/^PbbAddressTlvBlock::GetSerializedSize (void) const$/;"	f	class:ns3::PbbAddressTlvBlock
GetSerializedSize	packetbb.cc	/^PbbMessage::GetSerializedSize (void) const$/;"	f	class:ns3::PbbMessage
GetSerializedSize	packetbb.cc	/^PbbPacket::GetSerializedSize (void) const$/;"	f	class:ns3::PbbPacket
GetSerializedSize	packetbb.cc	/^PbbTlv::GetSerializedSize (void) const$/;"	f	class:ns3::PbbTlv
GetSerializedSize	packetbb.cc	/^PbbTlvBlock::GetSerializedSize (void) const$/;"	f	class:ns3::PbbTlvBlock
GetSerializedSize	radiotap-header.cc	/^RadiotapHeader::GetSerializedSize (void) const$/;"	f	class:ns3::RadiotapHeader
GetSerializedSize	simple-net-device.cc	/^SimpleTag::GetSerializedSize (void) const$/;"	f	class:ns3::SimpleTag
GetSerializedSize	sll-header.cc	/^SllHeader::GetSerializedSize (void)  const$/;"	f	class:ns3::SllHeader
GetSigFigs	pcap-file-wrapper.cc	/^PcapFileWrapper::GetSigFigs (void)$/;"	f	class:ns3::PcapFileWrapper
GetSigFigs	pcap-file.cc	/^PcapFile::GetSigFigs (void)$/;"	f	class:ns3::PcapFile
GetSingleDevice	packet-socket-address.cc	/^PacketSocketAddress::GetSingleDevice (void) const$/;"	f	class:ns3::PacketSocketAddress
GetSize	packet-burst.cc	/^PacketBurst::GetSize (void) const$/;"	f	class:ns3::PacketBurst
GetSize	queue-item.cc	/^QueueItem::GetSize (void) const$/;"	f	class:ns3::QueueItem
GetSnapLen	pcap-file-wrapper.cc	/^PcapFileWrapper::GetSnapLen (void)$/;"	f	class:ns3::PcapFileWrapper
GetSnapLen	pcap-file.cc	/^PcapFile::GetSnapLen (void)$/;"	f	class:ns3::PcapFile
GetSockName	packet-socket.cc	/^PacketSocket::GetSockName (Address &address) const$/;"	f	class:ns3::PacketSocket
GetSocketType	packet-socket.cc	/^PacketSocket::GetSocketType (void) const$/;"	f	class:ns3::PacketSocket
GetSource	ethernet-header.cc	/^EthernetHeader::GetSource (void) const$/;"	f	class:ns3::EthernetHeader
GetSrc	simple-net-device.cc	/^SimpleTag::GetSrc (void) const$/;"	f	class:ns3::SimpleTag
GetStream	output-stream-wrapper.cc	/^OutputStreamWrapper::GetStream (void)$/;"	f	class:ns3::OutputStreamWrapper
GetSubnetDirectedBroadcast	ipv4-address.cc	/^Ipv4Address::GetSubnetDirectedBroadcast (Ipv4Mask const &mask) const$/;"	f	class:ns3::Ipv4Address
GetSwapMode	pcap-file.cc	/^PcapFile::GetSwapMode (void)$/;"	f	class:ns3::PcapFile
GetTimeZoneOffset	pcap-file-wrapper.cc	/^PcapFileWrapper::GetTimeZoneOffset (void)$/;"	f	class:ns3::PcapFileWrapper
GetTimeZoneOffset	pcap-file.cc	/^PcapFile::GetTimeZoneOffset (void)$/;"	f	class:ns3::PcapFile
GetTos	inet-socket-address.cc	/^InetSocketAddress::GetTos (void) const$/;"	f	class:ns3::InetSocketAddress
GetTotalDroppedBytes	original_queue.cc	/^Queue1:: GetTotalDroppedBytes (void) const$/;"	f	class:ns3::Queue1
GetTotalDroppedBytes	queue.cc	/^QueueBase:: GetTotalDroppedBytes (void) const$/;"	f	class:ns3::QueueBase
GetTotalDroppedBytesAfterDequeue	queue.cc	/^QueueBase:: GetTotalDroppedBytesAfterDequeue (void) const$/;"	f	class:ns3::QueueBase
GetTotalDroppedBytesBeforeEnqueue	queue.cc	/^QueueBase:: GetTotalDroppedBytesBeforeEnqueue (void) const$/;"	f	class:ns3::QueueBase
GetTotalDroppedPackets	original_queue.cc	/^Queue1::GetTotalDroppedPackets (void) const$/;"	f	class:ns3::Queue1
GetTotalDroppedPackets	queue.cc	/^QueueBase::GetTotalDroppedPackets (void) const$/;"	f	class:ns3::QueueBase
GetTotalDroppedPacketsAfterDequeue	queue.cc	/^QueueBase::GetTotalDroppedPacketsAfterDequeue (void) const$/;"	f	class:ns3::QueueBase
GetTotalDroppedPacketsBeforeEnqueue	queue.cc	/^QueueBase::GetTotalDroppedPacketsBeforeEnqueue (void) const$/;"	f	class:ns3::QueueBase
GetTotalReceivedBytes	original_queue.cc	/^Queue1::GetTotalReceivedBytes (void) const$/;"	f	class:ns3::Queue1
GetTotalReceivedBytes	queue.cc	/^QueueBase::GetTotalReceivedBytes (void) const$/;"	f	class:ns3::QueueBase
GetTotalReceivedPackets	original_queue.cc	/^Queue1::GetTotalReceivedPackets (void) const$/;"	f	class:ns3::Queue1
GetTotalReceivedPackets	queue.cc	/^QueueBase::GetTotalReceivedPackets (void) const$/;"	f	class:ns3::QueueBase
GetTrailerSize	ethernet-trailer.cc	/^EthernetTrailer::GetTrailerSize (void) const$/;"	f	class:ns3::EthernetTrailer
GetTsft	radiotap-header.cc	/^RadiotapHeader::GetTsft () const$/;"	f	class:ns3::RadiotapHeader
GetTxAvailable	packet-socket.cc	/^PacketSocket::GetTxAvailable (void) const$/;"	f	class:ns3::PacketSocket
GetTxQueue	net-device-queue-interface.cc	/^NetDeviceQueueInterface::GetTxQueue (uint8_t i) const$/;"	f	class:ns3::NetDeviceQueueInterface
GetTxQueue	original_net-device.cc	/^NetDeviceQueueInterface::GetTxQueue (uint8_t i) const$/;"	f	class:ns3::NetDeviceQueueInterface
GetTxQueueIndex	queue-item.cc	/^QueueDiscItem::GetTxQueueIndex (void) const$/;"	f	class:ns3::QueueDiscItem
GetType	inet-socket-address.cc	/^InetSocketAddress::GetType (void)$/;"	f	class:ns3::InetSocketAddress
GetType	inet6-socket-address.cc	/^uint8_t Inet6SocketAddress::GetType (void)$/;"	f	class:ns3::Inet6SocketAddress
GetType	ipv4-address.cc	/^Ipv4Address::GetType (void)$/;"	f	class:ns3::Ipv4Address
GetType	ipv6-address.cc	/^uint8_t Ipv6Address::GetType (void)$/;"	f	class:ns3::Ipv6Address
GetType	llc-snap-header.cc	/^LlcSnapHeader::GetType (void)$/;"	f	class:ns3::LlcSnapHeader
GetType	mac16-address.cc	/^Mac16Address::GetType (void)$/;"	f	class:ns3::Mac16Address
GetType	mac48-address.cc	/^Mac48Address::GetType (void)$/;"	f	class:ns3::Mac48Address
GetType	mac64-address.cc	/^Mac64Address::GetType (void)$/;"	f	class:ns3::Mac64Address
GetType	packet-socket-address.cc	/^PacketSocketAddress::GetType (void)$/;"	f	class:ns3::PacketSocketAddress
GetType	packetbb.cc	/^PbbMessage::GetType (void) const$/;"	f	class:ns3::PbbMessage
GetType	packetbb.cc	/^PbbTlv::GetType (void) const$/;"	f	class:ns3::PbbTlv
GetTypeExt	packetbb.cc	/^PbbTlv::GetTypeExt (void) const$/;"	f	class:ns3::PbbTlv
GetTypeId	drop-tail-queue.h	/^DropTailQueue<Item>::GetTypeId (void)$/;"	f	class:ns3::DropTailQueue
GetTypeId	dynamic-queue-limits.cc	/^DynamicQueueLimits::GetTypeId (void)$/;"	f	class:ns3::DynamicQueueLimits
GetTypeId	error-channel.cc	/^ErrorChannel::GetTypeId (void)$/;"	f	class:ns3::ErrorChannel
GetTypeId	error-model.cc	/^TypeId BinaryErrorModel::GetTypeId (void)$/;"	f	class:ns3::BinaryErrorModel
GetTypeId	error-model.cc	/^TypeId BurstErrorModel::GetTypeId (void)$/;"	f	class:ns3::BurstErrorModel
GetTypeId	error-model.cc	/^TypeId ErrorModel::GetTypeId (void)$/;"	f	class:ns3::ErrorModel
GetTypeId	error-model.cc	/^TypeId ListErrorModel::GetTypeId (void)$/;"	f	class:ns3::ListErrorModel
GetTypeId	error-model.cc	/^TypeId RateErrorModel::GetTypeId (void)$/;"	f	class:ns3::RateErrorModel
GetTypeId	error-model.cc	/^TypeId ReceiveListErrorModel::GetTypeId (void)$/;"	f	class:ns3::ReceiveListErrorModel
GetTypeId	ethernet-header.cc	/^EthernetHeader::GetTypeId (void)$/;"	f	class:ns3::EthernetHeader
GetTypeId	ethernet-trailer.cc	/^EthernetTrailer::GetTypeId (void)$/;"	f	class:ns3::EthernetTrailer
GetTypeId	flow-id-tag.cc	/^FlowIdTag::GetTypeId (void)$/;"	f	class:ns3::FlowIdTag
GetTypeId	llc-snap-header.cc	/^LlcSnapHeader::GetTypeId (void)$/;"	f	class:ns3::LlcSnapHeader
GetTypeId	net-device-queue-interface.cc	/^TypeId NetDeviceQueueInterface::GetTypeId (void)$/;"	f	class:ns3::NetDeviceQueueInterface
GetTypeId	original_drop-tail-queue.cc	/^TypeId DropTailQueue1::GetTypeId (void)$/;"	f	class:ns3::DropTailQueue1
GetTypeId	original_net-device.cc	/^TypeId NetDevice::GetTypeId (void)$/;"	f	class:ns3::NetDevice
GetTypeId	original_net-device.cc	/^TypeId NetDeviceQueueInterface::GetTypeId (void)$/;"	f	class:ns3::NetDeviceQueueInterface
GetTypeId	original_queue.cc	/^Queue1::GetTypeId (void)$/;"	f	class:ns3::Queue1
GetTypeId	packet-burst.cc	/^PacketBurst::GetTypeId (void)$/;"	f	class:ns3::PacketBurst
GetTypeId	packet-data-calculators.cc	/^PacketCounterCalculator::GetTypeId (void)$/;"	f	class:PacketCounterCalculator
GetTypeId	packet-data-calculators.cc	/^PacketSizeMinMaxAvgTotalCalculator::GetTypeId (void)$/;"	f	class:PacketSizeMinMaxAvgTotalCalculator
GetTypeId	packet-probe.cc	/^PacketProbe::GetTypeId ()$/;"	f	class:ns3::PacketProbe
GetTypeId	packet-socket-client.cc	/^PacketSocketClient::GetTypeId (void)$/;"	f	class:ns3::PacketSocketClient
GetTypeId	packet-socket-factory.cc	/^PacketSocketFactory::GetTypeId (void)$/;"	f	class:ns3::PacketSocketFactory
GetTypeId	packet-socket-server.cc	/^PacketSocketServer::GetTypeId (void)$/;"	f	class:ns3::PacketSocketServer
GetTypeId	packet-socket.cc	/^DeviceNameTag::GetTypeId (void)$/;"	f	class:ns3::DeviceNameTag
GetTypeId	packet-socket.cc	/^PacketSocket::GetTypeId (void)$/;"	f	class:ns3::PacketSocket
GetTypeId	packet-socket.cc	/^PacketSocketTag::GetTypeId (void)$/;"	f	class:ns3::PacketSocketTag
GetTypeId	packetbb.cc	/^PbbPacket::GetTypeId (void)$/;"	f	class:ns3::PbbPacket
GetTypeId	pcap-file-wrapper.cc	/^PcapFileWrapper::GetTypeId (void)$/;"	f	class:ns3::PcapFileWrapper
GetTypeId	queue-limits.cc	/^QueueLimits::GetTypeId (void)$/;"	f	class:ns3::QueueLimits
GetTypeId	queue.cc	/^QueueBase::GetTypeId (void)$/;"	f	class:ns3::QueueBase
GetTypeId	queue.h	/^Queue<Item>::GetTypeId (void)$/;"	f	class:ns3::Queue
GetTypeId	radiotap-header.cc	/^TypeId RadiotapHeader::GetTypeId (void)$/;"	f	class:ns3::RadiotapHeader
GetTypeId	simple-channel.cc	/^SimpleChannel::GetTypeId (void)$/;"	f	class:ns3::SimpleChannel
GetTypeId	simple-net-device.cc	/^SimpleNetDevice::GetTypeId (void)$/;"	f	class:ns3::SimpleNetDevice
GetTypeId	simple-net-device.cc	/^SimpleTag::GetTypeId (void)$/;"	f	class:ns3::SimpleTag
GetTypeId	sll-header.cc	/^SllHeader::GetTypeId (void)$/;"	f	class:ns3::SllHeader
GetUint8Value	original_net-device.cc	/^QueueItem::GetUint8Value (QueueItem::Uint8Values field, uint8_t& value) const$/;"	f	class:ns3::QueueItem
GetUint8Value	queue-item.cc	/^QueueItem::GetUint8Value (QueueItem::Uint8Values field, uint8_t& value) const$/;"	f	class:ns3::QueueItem
GetUnit	error-model.cc	/^RateErrorModel::GetUnit (void) const $/;"	f	class:ns3::RateErrorModel
GetValue	packetbb.cc	/^PbbTlv::GetValue (void) const$/;"	f	class:ns3::PbbTlv
GetValue	sequence-number.h	/^  NUMERIC_TYPE GetValue () const$/;"	f	class:ns3::SequenceNumber
GetVersion	packetbb.cc	/^PbbPacket::GetVersion (void) const$/;"	f	class:ns3::PbbPacket
GetVersionMajor	pcap-file-wrapper.cc	/^PcapFileWrapper::GetVersionMajor (void)$/;"	f	class:ns3::PcapFileWrapper
GetVersionMajor	pcap-file.cc	/^PcapFile::GetVersionMajor (void)$/;"	f	class:ns3::PcapFile
GetVersionMinor	pcap-file-wrapper.cc	/^PcapFileWrapper::GetVersionMinor (void)$/;"	f	class:ns3::PcapFileWrapper
GetVersionMinor	pcap-file.cc	/^PcapFile::GetVersionMinor (void)$/;"	f	class:ns3::PcapFile
GetVhtBandwidth	radiotap-header.cc	/^RadiotapHeader::GetVhtBandwidth () const$/;"	f	class:ns3::RadiotapHeader
GetVhtCoding	radiotap-header.cc	/^RadiotapHeader::GetVhtCoding () const$/;"	f	class:ns3::RadiotapHeader
GetVhtFlags	radiotap-header.cc	/^RadiotapHeader::GetVhtFlags () const$/;"	f	class:ns3::RadiotapHeader
GetVhtGroupId	radiotap-header.cc	/^RadiotapHeader::GetVhtGroupId () const$/;"	f	class:ns3::RadiotapHeader
GetVhtKnown	radiotap-header.cc	/^RadiotapHeader::GetVhtKnown () const$/;"	f	class:ns3::RadiotapHeader
GetVhtMcsNssUser1	radiotap-header.cc	/^RadiotapHeader::GetVhtMcsNssUser1 () const$/;"	f	class:ns3::RadiotapHeader
GetVhtMcsNssUser2	radiotap-header.cc	/^RadiotapHeader::GetVhtMcsNssUser2 () const$/;"	f	class:ns3::RadiotapHeader
GetVhtMcsNssUser3	radiotap-header.cc	/^RadiotapHeader::GetVhtMcsNssUser3 () const$/;"	f	class:ns3::RadiotapHeader
GetVhtMcsNssUser4	radiotap-header.cc	/^RadiotapHeader::GetVhtMcsNssUser4 () const$/;"	f	class:ns3::RadiotapHeader
GetVhtPartialAid	radiotap-header.cc	/^RadiotapHeader::GetVhtPartialAid () const$/;"	f	class:ns3::RadiotapHeader
GetZero	ipv4-address.cc	/^Ipv4Address::GetZero (void)$/;"	f	class:ns3::Ipv4Address
GetZero	ipv4-address.cc	/^Ipv4Mask::GetZero (void)$/;"	f	class:ns3::Ipv4Mask
GetZero	ipv6-address.cc	/^Ipv6Address Ipv6Address::GetZero ()$/;"	f	class:ns3::Ipv6Address
GetZero	ipv6-address.cc	/^Ipv6Prefix Ipv6Prefix::GetZero ()$/;"	f	class:ns3::Ipv6Prefix
HandleRead	packet-socket-server.cc	/^PacketSocketServer::HandleRead (Ptr<Socket> socket)$/;"	f	class:ns3::PacketSocketServer
HasHopCount	packetbb.cc	/^PbbMessage::HasHopCount (void) const$/;"	f	class:ns3::PbbMessage
HasHopLimit	packetbb.cc	/^PbbMessage::HasHopLimit (void) const$/;"	f	class:ns3::PbbMessage
HasIndexStart	packetbb.cc	/^PbbAddressTlv::HasIndexStart (void) const$/;"	f	class:ns3::PbbAddressTlv
HasIndexStart	packetbb.cc	/^PbbTlv::HasIndexStart (void) const$/;"	f	class:ns3::PbbTlv
HasIndexStop	packetbb.cc	/^PbbAddressTlv::HasIndexStop (void) const$/;"	f	class:ns3::PbbAddressTlv
HasIndexStop	packetbb.cc	/^PbbTlv::HasIndexStop (void) const$/;"	f	class:ns3::PbbTlv
HasOriginatorAddress	packetbb.cc	/^PbbMessage::HasOriginatorAddress (void) const$/;"	f	class:ns3::PbbMessage
HasSequenceNumber	packetbb.cc	/^PbbMessage::HasSequenceNumber (void) const$/;"	f	class:ns3::PbbMessage
HasSequenceNumber	packetbb.cc	/^PbbPacket::HasSequenceNumber (void) const$/;"	f	class:ns3::PbbPacket
HasTypeExt	packetbb.cc	/^PbbTlv::HasTypeExt (void) const$/;"	f	class:ns3::PbbTlv
HasValue	packetbb.cc	/^PbbTlv::HasValue (void) const$/;"	f	class:ns3::PbbTlv
HasZeroTail	packetbb.cc	/^PbbAddressBlock::HasZeroTail (const uint8_t *tail, uint8_t taillen) const$/;"	f	class:ns3::PbbAddressBlock
Head	queue.h	/^typename Queue<Item>::ConstIterator Queue<Item>::Head (void) const$/;"	f	class:ns3::Queue
INET6_SOCKET_ADDRESS_H	inet6-socket-address.h	22;"	d
INET_SOCKET_ADDRESS_H	inet-socket-address.h	22;"	d
INTERCEPTED_PACKET	sll-header.h	/^    INTERCEPTED_PACKET = 3, \/**< packet was sent to somebody else by somebody else **\/$/;"	e	enum:ns3::SllHeader::PacketType
IPV4	packetbb.h	/^  IPV4 = 3,$/;"	e	enum:ns3::PbbAddressLength
IPV4_ADDRESS_H	ipv4-address.h	22;"	d
IPV6	packetbb.h	/^  IPV6 = 15,$/;"	e	enum:ns3::PbbAddressLength
IPV6_ADDRESS_H	ipv6-address.h	22;"	d
IP_DSFIELD	original_net-device.h	/^      IP_DSFIELD$/;"	e	enum:ns3::QueueItem::Uint8Values
IP_DSFIELD	queue-item.h	/^      IP_DSFIELD$/;"	e	enum:ns3::QueueItem::Uint8Values
Inet6SocketAddress	inet6-socket-address.cc	/^Inet6SocketAddress::Inet6SocketAddress (Ipv6Address ipv6)$/;"	f	class:ns3::Inet6SocketAddress
Inet6SocketAddress	inet6-socket-address.cc	/^Inet6SocketAddress::Inet6SocketAddress (Ipv6Address ipv6, uint16_t port)$/;"	f	class:ns3::Inet6SocketAddress
Inet6SocketAddress	inet6-socket-address.cc	/^Inet6SocketAddress::Inet6SocketAddress (const char* ipv6)$/;"	f	class:ns3::Inet6SocketAddress
Inet6SocketAddress	inet6-socket-address.cc	/^Inet6SocketAddress::Inet6SocketAddress (const char* ipv6, uint16_t port)$/;"	f	class:ns3::Inet6SocketAddress
Inet6SocketAddress	inet6-socket-address.cc	/^Inet6SocketAddress::Inet6SocketAddress (uint16_t port)$/;"	f	class:ns3::Inet6SocketAddress
Inet6SocketAddress	inet6-socket-address.h	/^class Inet6SocketAddress$/;"	c	namespace:ns3
InetSocketAddress	inet-socket-address.cc	/^InetSocketAddress::InetSocketAddress (Ipv4Address ipv4)$/;"	f	class:ns3::InetSocketAddress
InetSocketAddress	inet-socket-address.cc	/^InetSocketAddress::InetSocketAddress (Ipv4Address ipv4, uint16_t port)$/;"	f	class:ns3::InetSocketAddress
InetSocketAddress	inet-socket-address.cc	/^InetSocketAddress::InetSocketAddress (const char * ipv4)$/;"	f	class:ns3::InetSocketAddress
InetSocketAddress	inet-socket-address.cc	/^InetSocketAddress::InetSocketAddress (const char *ipv4, uint16_t port)$/;"	f	class:ns3::InetSocketAddress
InetSocketAddress	inet-socket-address.cc	/^InetSocketAddress::InetSocketAddress (uint16_t port)$/;"	f	class:ns3::InetSocketAddress
InetSocketAddress	inet-socket-address.h	/^class InetSocketAddress$/;"	c	namespace:ns3
Init	pcap-file-wrapper.cc	/^PcapFileWrapper::Init (uint32_t dataLinkType, uint32_t snapLen, int32_t tzCorrection)$/;"	f	class:ns3::PcapFileWrapper
Init	pcap-file.cc	/^PcapFile::Init (uint32_t dataLinkType, uint32_t snapLen, int32_t timeZoneCorrection, bool swapMode, bool nanosecMode)$/;"	f	class:ns3::PcapFile
Insert	packetbb.cc	/^PbbAddressTlvBlock::Insert (PbbAddressTlvBlock::Iterator position, const Ptr<PbbAddressTlv> tlv)$/;"	f	class:ns3::PbbAddressTlvBlock
Insert	packetbb.cc	/^PbbTlvBlock::Insert (PbbTlvBlock::Iterator position, const Ptr<PbbTlv> tlv)$/;"	f	class:ns3::PbbTlvBlock
Ipv4Address	ipv4-address.cc	/^Ipv4Address::Ipv4Address ()$/;"	f	class:ns3::Ipv4Address
Ipv4Address	ipv4-address.cc	/^Ipv4Address::Ipv4Address (char const *address)$/;"	f	class:ns3::Ipv4Address
Ipv4Address	ipv4-address.cc	/^Ipv4Address::Ipv4Address (uint32_t address)$/;"	f	class:ns3::Ipv4Address
Ipv4Address	ipv4-address.h	/^class Ipv4Address {$/;"	c	namespace:ns3
Ipv4AddressHash	ipv4-address.h	/^class Ipv4AddressHash : public std::unary_function<Ipv4Address, size_t> {$/;"	c	namespace:ns3
Ipv4Mask	ipv4-address.cc	/^Ipv4Mask::Ipv4Mask ()$/;"	f	class:ns3::Ipv4Mask
Ipv4Mask	ipv4-address.cc	/^Ipv4Mask::Ipv4Mask (char const *mask)$/;"	f	class:ns3::Ipv4Mask
Ipv4Mask	ipv4-address.cc	/^Ipv4Mask::Ipv4Mask (uint32_t mask)$/;"	f	class:ns3::Ipv4Mask
Ipv4Mask	ipv4-address.h	/^class Ipv4Mask {$/;"	c	namespace:ns3
Ipv6Address	ipv6-address.cc	/^Ipv6Address::Ipv6Address ()$/;"	f	class:ns3::Ipv6Address
Ipv6Address	ipv6-address.cc	/^Ipv6Address::Ipv6Address (Ipv6Address const& addr)$/;"	f	class:ns3::Ipv6Address
Ipv6Address	ipv6-address.cc	/^Ipv6Address::Ipv6Address (Ipv6Address const* addr)$/;"	f	class:ns3::Ipv6Address
Ipv6Address	ipv6-address.cc	/^Ipv6Address::Ipv6Address (char const* address)$/;"	f	class:ns3::Ipv6Address
Ipv6Address	ipv6-address.cc	/^Ipv6Address::Ipv6Address (uint8_t address[16])$/;"	f	class:ns3::Ipv6Address
Ipv6Address	ipv6-address.h	/^class Ipv6Address$/;"	c	namespace:ns3
Ipv6AddressHash	ipv6-address.h	/^class Ipv6AddressHash : public std::unary_function<Ipv6Address, size_t>$/;"	c	namespace:ns3
Ipv6Prefix	ipv6-address.cc	/^Ipv6Prefix::Ipv6Prefix ()$/;"	f	class:ns3::Ipv6Prefix
Ipv6Prefix	ipv6-address.cc	/^Ipv6Prefix::Ipv6Prefix (Ipv6Prefix const& prefix)$/;"	f	class:ns3::Ipv6Prefix
Ipv6Prefix	ipv6-address.cc	/^Ipv6Prefix::Ipv6Prefix (Ipv6Prefix const* prefix)$/;"	f	class:ns3::Ipv6Prefix
Ipv6Prefix	ipv6-address.cc	/^Ipv6Prefix::Ipv6Prefix (char const* prefix)$/;"	f	class:ns3::Ipv6Prefix
Ipv6Prefix	ipv6-address.cc	/^Ipv6Prefix::Ipv6Prefix (uint8_t prefix)$/;"	f	class:ns3::Ipv6Prefix
Ipv6Prefix	ipv6-address.cc	/^Ipv6Prefix::Ipv6Prefix (uint8_t prefix[16])$/;"	f	class:ns3::Ipv6Prefix
Ipv6Prefix	ipv6-address.h	/^class Ipv6Prefix$/;"	c	namespace:ns3
IsAllHostsMulticast	ipv6-address.cc	/^bool Ipv6Address::IsAllHostsMulticast () const$/;"	f	class:ns3::Ipv6Address
IsAllNodesMulticast	ipv6-address.cc	/^bool Ipv6Address::IsAllNodesMulticast () const$/;"	f	class:ns3::Ipv6Address
IsAllRoutersMulticast	ipv6-address.cc	/^bool Ipv6Address::IsAllRoutersMulticast () const$/;"	f	class:ns3::Ipv6Address
IsAny	ipv4-address.cc	/^Ipv4Address::IsAny (void) const$/;"	f	class:ns3::Ipv4Address
IsAny	ipv6-address.cc	/^bool Ipv6Address::IsAny () const$/;"	f	class:ns3::Ipv6Address
IsBridge	simple-net-device.cc	/^SimpleNetDevice::IsBridge (void) const$/;"	f	class:ns3::SimpleNetDevice
IsBroadcast	ipv4-address.cc	/^Ipv4Address::IsBroadcast (void) const$/;"	f	class:ns3::Ipv4Address
IsBroadcast	mac48-address.cc	/^Mac48Address::IsBroadcast (void) const$/;"	f	class:ns3::Mac48Address
IsBroadcast	simple-net-device.cc	/^SimpleNetDevice::IsBroadcast (void) const$/;"	f	class:ns3::SimpleNetDevice
IsCorrupt	error-model.cc	/^ErrorModel::IsCorrupt (Ptr<Packet> p)$/;"	f	class:ns3::ErrorModel
IsDocumentation	ipv6-address.cc	/^bool Ipv6Address::IsDocumentation () const$/;"	f	class:ns3::Ipv6Address
IsEmpty	original_queue.cc	/^Queue1::IsEmpty (void) const$/;"	f	class:ns3::Queue1
IsEmpty	queue.cc	/^QueueBase::IsEmpty (void) const$/;"	f	class:ns3::QueueBase
IsEnabled	error-model.cc	/^ErrorModel::IsEnabled (void) const$/;"	f	class:ns3::ErrorModel
IsEqual	ipv4-address.cc	/^Ipv4Mask::IsEqual (Ipv4Mask other) const$/;"	f	class:ns3::Ipv4Mask
IsEqual	ipv4-address.h	/^  bool IsEqual (const Ipv4Address &other) const$/;"	f	class:ns3::Ipv4Address
IsEqual	ipv6-address.cc	/^bool Ipv6Address::IsEqual (const Ipv6Address& other) const$/;"	f	class:ns3::Ipv6Address
IsEqual	ipv6-address.cc	/^bool Ipv6Prefix::IsEqual (const Ipv6Prefix& other) const$/;"	f	class:ns3::Ipv6Prefix
IsGroup	mac48-address.cc	/^Mac48Address::IsGroup (void) const$/;"	f	class:ns3::Mac48Address
IsInvalid	address.cc	/^Address::IsInvalid (void) const$/;"	f	class:ns3::Address
IsIpv4MappedAddress	ipv6-address.cc	/^bool Ipv6Address::IsIpv4MappedAddress () const$/;"	f	class:ns3::Ipv6Address
IsLinkLocal	ipv6-address.cc	/^bool Ipv6Address::IsLinkLocal () const$/;"	f	class:ns3::Ipv6Address
IsLinkLocalMulticast	ipv6-address.cc	/^bool Ipv6Address::IsLinkLocalMulticast () const$/;"	f	class:ns3::Ipv6Address
IsLinkUp	simple-net-device.cc	/^SimpleNetDevice::IsLinkUp (void) const$/;"	f	class:ns3::SimpleNetDevice
IsLocalMulticast	ipv4-address.cc	/^Ipv4Address::IsLocalMulticast (void) const$/;"	f	class:ns3::Ipv4Address
IsLocalhost	ipv4-address.cc	/^Ipv4Address::IsLocalhost (void) const$/;"	f	class:ns3::Ipv4Address
IsLocalhost	ipv6-address.cc	/^bool Ipv6Address::IsLocalhost () const$/;"	f	class:ns3::Ipv6Address
IsMatch	ipv4-address.cc	/^Ipv4Mask::IsMatch (Ipv4Address a, Ipv4Address b) const$/;"	f	class:ns3::Ipv4Mask
IsMatch	ipv6-address.cc	/^bool Ipv6Prefix::IsMatch (Ipv6Address a, Ipv6Address b) const$/;"	f	class:ns3::Ipv6Prefix
IsMatchingType	address.cc	/^Address::IsMatchingType (uint8_t type) const$/;"	f	class:ns3::Address
IsMatchingType	inet-socket-address.cc	/^InetSocketAddress::IsMatchingType (const Address &address)$/;"	f	class:ns3::InetSocketAddress
IsMatchingType	inet6-socket-address.cc	/^bool Inet6SocketAddress::IsMatchingType (const Address &addr)$/;"	f	class:ns3::Inet6SocketAddress
IsMatchingType	ipv4-address.cc	/^Ipv4Address::IsMatchingType (const Address &address)$/;"	f	class:ns3::Ipv4Address
IsMatchingType	ipv6-address.cc	/^bool Ipv6Address::IsMatchingType (const Address& address)$/;"	f	class:ns3::Ipv6Address
IsMatchingType	mac16-address.cc	/^Mac16Address::IsMatchingType (const Address &address)$/;"	f	class:ns3::Mac16Address
IsMatchingType	mac48-address.cc	/^Mac48Address::IsMatchingType (const Address &address)$/;"	f	class:ns3::Mac48Address
IsMatchingType	mac64-address.cc	/^Mac64Address::IsMatchingType (const Address &address)$/;"	f	class:ns3::Mac64Address
IsMatchingType	packet-socket-address.cc	/^PacketSocketAddress::IsMatchingType (const Address &address)$/;"	f	class:ns3::PacketSocketAddress
IsMulticast	address-utils.cc	/^bool IsMulticast (const Address &ad)$/;"	f	namespace:ns3::addressUtils
IsMulticast	ipv4-address.cc	/^Ipv4Address::IsMulticast (void) const$/;"	f	class:ns3::Ipv4Address
IsMulticast	ipv6-address.cc	/^bool Ipv6Address::IsMulticast () const$/;"	f	class:ns3::Ipv6Address
IsMulticast	simple-net-device.cc	/^SimpleNetDevice::IsMulticast (void) const$/;"	f	class:ns3::SimpleNetDevice
IsMultivalue	packetbb.cc	/^PbbAddressTlv::IsMultivalue (void) const$/;"	f	class:ns3::PbbAddressTlv
IsMultivalue	packetbb.cc	/^PbbTlv::IsMultivalue (void) const$/;"	f	class:ns3::PbbTlv
IsNanoSecMode	pcap-file.cc	/^PcapFile::IsNanoSecMode (void)$/;"	f	class:ns3::PcapFile
IsPointToPoint	simple-net-device.cc	/^SimpleNetDevice::IsPointToPoint (void) const$/;"	f	class:ns3::SimpleNetDevice
IsSingleDevice	packet-socket-address.cc	/^PacketSocketAddress::IsSingleDevice (void) const$/;"	f	class:ns3::PacketSocketAddress
IsSolicitedMulticast	ipv6-address.cc	/^bool Ipv6Address::IsSolicitedMulticast () const$/;"	f	class:ns3::Ipv6Address
IsStopped	net-device-queue-interface.cc	/^NetDeviceQueue::IsStopped (void) const$/;"	f	class:ns3::NetDeviceQueue
IsStopped	original_net-device.cc	/^NetDeviceQueue::IsStopped (void) const$/;"	f	class:ns3::NetDeviceQueue
IsSubnetDirectedBroadcast	ipv4-address.cc	/^Ipv4Address::IsSubnetDirectedBroadcast (Ipv4Mask const &mask) const$/;"	f	class:ns3::Ipv4Address
Iterator	packetbb.h	/^  typedef std::list< Ptr<PbbAddressTlv> >::iterator Iterator;$/;"	t	class:ns3::PbbAddressTlvBlock
Iterator	packetbb.h	/^  typedef std::list< Ptr<PbbTlv> >::iterator Iterator;$/;"	t	class:ns3::PbbTlvBlock
LENGTH	ethernet-header.h	/^  LENGTH,     \/**< Basic ethernet packet, no tags, type\/length field$/;"	e	enum:ns3::ethernet_header_t
LENGTH_SIZE	ethernet-header.h	/^  static const int LENGTH_SIZE = 2;   \/\/!< size of the length_type header field$/;"	m	class:ns3::EthernetHeader
LLC_SNAP_HEADER_H	llc-snap-header.h	22;"	d
LLC_SNAP_HEADER_LENGTH	llc-snap-header.h	/^static const uint16_t LLC_SNAP_HEADER_LENGTH = 8;$/;"	m	namespace:ns3
LinkChangeTracedCallback	original_net-device.h	/^  typedef void (* LinkChangeTracedCallback) (void);$/;"	t	class:ns3::NetDevice
ListErrorModel	error-model.cc	/^ListErrorModel::ListErrorModel ()$/;"	f	class:ns3::ListErrorModel
ListErrorModel	error-model.h	/^class ListErrorModel : public ErrorModel$/;"	c	namespace:ns3
Listen	packet-socket.cc	/^PacketSocket::Listen (void)$/;"	f	class:ns3::PacketSocket
LlcSnapHeader	llc-snap-header.cc	/^LlcSnapHeader::LlcSnapHeader ()$/;"	f	class:ns3::LlcSnapHeader
LlcSnapHeader	llc-snap-header.h	/^class LlcSnapHeader : public Header $/;"	c	namespace:ns3
MAC16_ADDRESS_H	mac16-address.h	21;"	d
MAC48_ADDRESS_H	mac48-address.h	21;"	d
MAC64_ADDRESS_H	mac64-address.h	21;"	d
MAC_ADDR_SIZE	ethernet-header.h	/^  static const int MAC_ADDR_SIZE = 6; \/\/!< size of src\/dest addr header fields$/;"	m	class:ns3::EthernetHeader
MAGIC	pcap-file.cc	/^const uint32_t MAGIC = 0xa1b2c3d4;            \/**< Magic number identifying standard pcap file format *\/$/;"	m	namespace:ns3	file:
MAX_SIZE	address.h	/^    MAX_SIZE = 20$/;"	e	enum:ns3::Address::MaxSize_e
MCS_FLAGS_BANDWIDTH_20L	radiotap-header.h	/^    MCS_FLAGS_BANDWIDTH_20L  = 0x02, \/**< 20L (20 MHz in lower half of 40 MHz channel) *\/$/;"	e	enum:ns3::RadiotapHeader::McsFlags
MCS_FLAGS_BANDWIDTH_20U	radiotap-header.h	/^    MCS_FLAGS_BANDWIDTH_20U  = 0x03, \/**< 20U (20 MHz in upper half of 40 MHz channel) *\/$/;"	e	enum:ns3::RadiotapHeader::McsFlags
MCS_FLAGS_BANDWIDTH_40	radiotap-header.h	/^    MCS_FLAGS_BANDWIDTH_40   = 0x01, \/**< 40 MHz *\/$/;"	e	enum:ns3::RadiotapHeader::McsFlags
MCS_FLAGS_FEC_TYPE	radiotap-header.h	/^    MCS_FLAGS_FEC_TYPE       = 0x10, \/**< LDPC FEC type *\/$/;"	e	enum:ns3::RadiotapHeader::McsFlags
MCS_FLAGS_GUARD_INTERVAL	radiotap-header.h	/^    MCS_FLAGS_GUARD_INTERVAL = 0x04, \/**< Short guard interval *\/$/;"	e	enum:ns3::RadiotapHeader::McsFlags
MCS_FLAGS_HT_GREENFIELD	radiotap-header.h	/^    MCS_FLAGS_HT_GREENFIELD  = 0x08, \/**< Greenfield HT format *\/$/;"	e	enum:ns3::RadiotapHeader::McsFlags
MCS_FLAGS_NESS_BIT_0	radiotap-header.h	/^    MCS_FLAGS_NESS_BIT_0     = 0x80, \/**< Ness - bit 0 (LSB) of Number of extension spatial streams *\/$/;"	e	enum:ns3::RadiotapHeader::McsFlags
MCS_FLAGS_NONE	radiotap-header.h	/^    MCS_FLAGS_NONE           = 0x00, \/**< Default: 20 MHz, long guard interval, mixed HT format and BCC FEC type *\/$/;"	e	enum:ns3::RadiotapHeader::McsFlags
MCS_FLAGS_STBC_STREAMS	radiotap-header.h	/^    MCS_FLAGS_STBC_STREAMS   = 0x60, \/**< STBC enabled *\/$/;"	e	enum:ns3::RadiotapHeader::McsFlags
MCS_KNOWN_BANDWIDTH	radiotap-header.h	/^    MCS_KNOWN_BANDWIDTH      = 0x01, \/**< Bandwidth *\/$/;"	e	enum:ns3::RadiotapHeader::McsKnown
MCS_KNOWN_FEC_TYPE	radiotap-header.h	/^    MCS_KNOWN_FEC_TYPE       = 0x10, \/**< FEC type *\/$/;"	e	enum:ns3::RadiotapHeader::McsKnown
MCS_KNOWN_GUARD_INTERVAL	radiotap-header.h	/^    MCS_KNOWN_GUARD_INTERVAL = 0x04, \/**< Guard interval *\/$/;"	e	enum:ns3::RadiotapHeader::McsKnown
MCS_KNOWN_HT_FORMAT	radiotap-header.h	/^    MCS_KNOWN_HT_FORMAT      = 0x08, \/**< HT format *\/$/;"	e	enum:ns3::RadiotapHeader::McsKnown
MCS_KNOWN_INDEX	radiotap-header.h	/^    MCS_KNOWN_INDEX          = 0x02, \/**< MCS index known *\/$/;"	e	enum:ns3::RadiotapHeader::McsKnown
MCS_KNOWN_NESS	radiotap-header.h	/^    MCS_KNOWN_NESS           = 0x40, \/**< Ness known (Number of extension spatial streams) *\/$/;"	e	enum:ns3::RadiotapHeader::McsKnown
MCS_KNOWN_NESS_BIT_1	radiotap-header.h	/^    MCS_KNOWN_NESS_BIT_1     = 0x80, \/**< Ness data - bit 1 (MSB) of Number of extension spatial streams *\/$/;"	e	enum:ns3::RadiotapHeader::McsKnown
MCS_KNOWN_NONE	radiotap-header.h	/^    MCS_KNOWN_NONE           = 0x00, \/**< No flags set *\/$/;"	e	enum:ns3::RadiotapHeader::McsKnown
MCS_KNOWN_STBC	radiotap-header.h	/^    MCS_KNOWN_STBC           = 0x20, \/**< STBC known *\/$/;"	e	enum:ns3::RadiotapHeader::McsKnown
MHAS_HOP_COUNT	packetbb.cc	/^static const uint8_t MHAS_HOP_COUNT = 0x20;$/;"	v	file:
MHAS_HOP_LIMIT	packetbb.cc	/^static const uint8_t MHAS_HOP_LIMIT = 0x40;$/;"	v	file:
MHAS_ORIG	packetbb.cc	/^static const uint8_t MHAS_ORIG = 0x80;$/;"	v	file:
MHAS_SEQ_NUM	packetbb.cc	/^static const uint8_t MHAS_SEQ_NUM = 0x10;$/;"	v	file:
MULTICAST_BY_PEER	sll-header.h	/^    MULTICAST_BY_PEER = 2, \/**< packet was multicast, but not broadcast, by somebody else *\/$/;"	e	enum:ns3::SllHeader::PacketType
Mac16Address	mac16-address.cc	/^Mac16Address::Mac16Address ()$/;"	f	class:ns3::Mac16Address
Mac16Address	mac16-address.cc	/^Mac16Address::Mac16Address (const char *str)$/;"	f	class:ns3::Mac16Address
Mac16Address	mac16-address.h	/^class Mac16Address$/;"	c	namespace:ns3
Mac48Address	mac48-address.cc	/^Mac48Address::Mac48Address ()$/;"	f	class:ns3::Mac48Address
Mac48Address	mac48-address.cc	/^Mac48Address::Mac48Address (const char *str)$/;"	f	class:ns3::Mac48Address
Mac48Address	mac48-address.h	/^class Mac48Address$/;"	c	namespace:ns3
Mac64Address	mac64-address.cc	/^Mac64Address::Mac64Address ()$/;"	f	class:ns3::Mac64Address
Mac64Address	mac64-address.cc	/^Mac64Address::Mac64Address (const char *str)$/;"	f	class:ns3::Mac64Address
Mac64Address	mac64-address.h	/^class Mac64Address$/;"	c	namespace:ns3
MakeAutoconfiguredAddress	ipv6-address.cc	/^Ipv6Address Ipv6Address::MakeAutoconfiguredAddress (Mac16Address addr, Ipv6Address prefix)$/;"	f	class:ns3::Ipv6Address
MakeAutoconfiguredAddress	ipv6-address.cc	/^Ipv6Address Ipv6Address::MakeAutoconfiguredAddress (Mac48Address addr, Ipv6Address prefix)$/;"	f	class:ns3::Ipv6Address
MakeAutoconfiguredAddress	ipv6-address.cc	/^Ipv6Address Ipv6Address::MakeAutoconfiguredAddress (Mac64Address addr, Ipv6Address prefix)$/;"	f	class:ns3::Ipv6Address
MakeAutoconfiguredLinkLocalAddress	ipv6-address.cc	/^Ipv6Address Ipv6Address::MakeAutoconfiguredLinkLocalAddress (Mac16Address addr)$/;"	f	class:ns3::Ipv6Address
MakeAutoconfiguredLinkLocalAddress	ipv6-address.cc	/^Ipv6Address Ipv6Address::MakeAutoconfiguredLinkLocalAddress (Mac48Address addr)$/;"	f	class:ns3::Ipv6Address
MakeAutoconfiguredLinkLocalAddress	ipv6-address.cc	/^Ipv6Address Ipv6Address::MakeAutoconfiguredLinkLocalAddress (Mac64Address addr)$/;"	f	class:ns3::Ipv6Address
MakeIpv4MappedAddress	ipv6-address.cc	/^Ipv6Address Ipv6Address::MakeIpv4MappedAddress(Ipv4Address addr)$/;"	f	class:ns3::Ipv6Address
MakeSolicitedAddress	ipv6-address.cc	/^Ipv6Address Ipv6Address::MakeSolicitedAddress (Ipv6Address addr)$/;"	f	class:ns3::Ipv6Address
MaxSize_e	address.h	/^  enum MaxSize_e {$/;"	g	class:ns3::Address
McsFlags	radiotap-header.h	/^  enum McsFlags$/;"	g	class:ns3::RadiotapHeader
McsKnown	radiotap-header.h	/^  enum McsKnown$/;"	g	class:ns3::RadiotapHeader
MessageBack	packetbb.cc	/^PbbPacket::MessageBack (void) const$/;"	f	class:ns3::PbbPacket
MessageBack	packetbb.cc	/^PbbPacket::MessageBack (void)$/;"	f	class:ns3::PbbPacket
MessageBegin	packetbb.cc	/^PbbPacket::MessageBegin (void) const$/;"	f	class:ns3::PbbPacket
MessageBegin	packetbb.cc	/^PbbPacket::MessageBegin (void)$/;"	f	class:ns3::PbbPacket
MessageClear	packetbb.cc	/^PbbPacket::MessageClear (void)$/;"	f	class:ns3::PbbPacket
MessageEmpty	packetbb.cc	/^PbbPacket::MessageEmpty (void) const$/;"	f	class:ns3::PbbPacket
MessageEnd	packetbb.cc	/^PbbPacket::MessageEnd (void) const$/;"	f	class:ns3::PbbPacket
MessageEnd	packetbb.cc	/^PbbPacket::MessageEnd (void)$/;"	f	class:ns3::PbbPacket
MessageFront	packetbb.cc	/^PbbPacket::MessageFront (void) const$/;"	f	class:ns3::PbbPacket
MessageFront	packetbb.cc	/^PbbPacket::MessageFront (void)$/;"	f	class:ns3::PbbPacket
MessageIterator	packetbb.h	/^  typedef std::list< Ptr<PbbMessage> >::iterator MessageIterator;$/;"	t	class:ns3::PbbPacket
MessagePopBack	packetbb.cc	/^PbbPacket::MessagePopBack (void)$/;"	f	class:ns3::PbbPacket
MessagePopFront	packetbb.cc	/^PbbPacket::MessagePopFront (void)$/;"	f	class:ns3::PbbPacket
MessagePushBack	packetbb.cc	/^PbbPacket::MessagePushBack (Ptr<PbbMessage> tlv)$/;"	f	class:ns3::PbbPacket
MessagePushFront	packetbb.cc	/^PbbPacket::MessagePushFront (Ptr<PbbMessage> tlv)$/;"	f	class:ns3::PbbPacket
MessageSize	packetbb.cc	/^PbbPacket::MessageSize (void) const$/;"	f	class:ns3::PbbPacket
NDQI_LOG	net-device-queue-interface.h	347;"	d
NET_DEVICE_H	original_net-device.h	23;"	d
NET_DEVICE_QUEUE_INTERFACE_H	net-device-queue-interface.h	21;"	d
NS3_PACKET_BROADCAST	original_net-device.h	/^    NS3_PACKET_BROADCAST = PACKET_BROADCAST,$/;"	e	enum:ns3::NetDevice::PacketType
NS3_PACKET_HOST	original_net-device.h	/^    NS3_PACKET_HOST = PACKET_HOST,$/;"	e	enum:ns3::NetDevice::PacketType
NS3_PACKET_MULTICAST	original_net-device.h	/^    NS3_PACKET_MULTICAST = PACKET_MULTICAST,$/;"	e	enum:ns3::NetDevice::PacketType
NS3_PACKET_OTHERHOST	original_net-device.h	/^    NS3_PACKET_OTHERHOST = PACKET_OTHERHOST,$/;"	e	enum:ns3::NetDevice::PacketType
NS3_SEQ_NUM_H	sequence-number.h	22;"	d
NS_ASCII_TEST_EXPECT_EQ	ascii-test.h	38;"	d
NS_MAGIC	pcap-file.cc	/^const uint32_t NS_MAGIC = 0xa1b23c4d;         \/**< Magic number identifying nanosec resolution pcap file format *\/$/;"	m	namespace:ns3	file:
NS_PCAP_TEST_EXPECT_EQ	pcap-test.h	38;"	d
NS_SWAPPED_MAGIC	pcap-file.cc	/^const uint32_t NS_SWAPPED_MAGIC = 0x4d3cb2a1; \/**< Looks this way if byte swapping is required *\/$/;"	m	namespace:ns3	file:
NeedsArp	simple-net-device.cc	/^SimpleNetDevice::NeedsArp (void) const$/;"	f	class:ns3::SimpleNetDevice
NetDevice	original_net-device.h	/^class NetDevice : public Object$/;"	c	namespace:ns3
NetDeviceQueue	net-device-queue-interface.cc	/^NetDeviceQueue::NetDeviceQueue ()$/;"	f	class:ns3::NetDeviceQueue
NetDeviceQueue	net-device-queue-interface.h	/^class NetDeviceQueue : public SimpleRefCount<NetDeviceQueue>$/;"	c	namespace:ns3
NetDeviceQueue	original_net-device.cc	/^NetDeviceQueue::NetDeviceQueue()$/;"	f	class:ns3::NetDeviceQueue
NetDeviceQueue	original_net-device.h	/^class NetDeviceQueue : public SimpleRefCount<NetDeviceQueue>$/;"	c	namespace:ns3
NetDeviceQueueInterface	net-device-queue-interface.cc	/^NetDeviceQueueInterface::NetDeviceQueueInterface ()$/;"	f	class:ns3::NetDeviceQueueInterface
NetDeviceQueueInterface	net-device-queue-interface.h	/^class NetDeviceQueueInterface : public Object$/;"	c	namespace:ns3
NetDeviceQueueInterface	original_net-device.cc	/^NetDeviceQueueInterface::NetDeviceQueueInterface ()$/;"	f	class:ns3::NetDeviceQueueInterface
NetDeviceQueueInterface	original_net-device.h	/^class NetDeviceQueueInterface : public Object$/;"	c	namespace:ns3
NotifyDrop	original_queue.cc	/^Queue1::NotifyDrop (Ptr<QueueItem1> item)$/;"	f	class:ns3::Queue1
NotifyNewAggregate	simple-net-device.cc	/^SimpleNetDevice::NotifyNewAggregate (void)$/;"	f	class:ns3::SimpleNetDevice
NotifyQueuedBytes	net-device-queue-interface.cc	/^NetDeviceQueue::NotifyQueuedBytes (uint32_t bytes)$/;"	f	class:ns3::NetDeviceQueue
NotifyQueuedBytes	original_net-device.cc	/^NetDeviceQueue::NotifyQueuedBytes (uint32_t bytes)$/;"	f	class:ns3::NetDeviceQueue
NotifyTransmittedBytes	net-device-queue-interface.cc	/^NetDeviceQueue::NotifyTransmittedBytes (uint32_t bytes)$/;"	f	class:ns3::NetDeviceQueue
NotifyTransmittedBytes	original_net-device.cc	/^NetDeviceQueue::NotifyTransmittedBytes (uint32_t bytes)$/;"	f	class:ns3::NetDeviceQueue
ORIGINAL_QUEUE_H	original_queue.h	25;"	d
OUTPUT_STREAM_WRAPPER_H	output-stream-wrapper.h	20;"	d
Open	ascii-file.cc	/^AsciiFile::Open (std::string const &filename, std::ios::openmode mode)$/;"	f	class:ns3::AsciiFile
Open	pcap-file-wrapper.cc	/^PcapFileWrapper::Open (std::string const &filename, std::ios::openmode mode)$/;"	f	class:ns3::PcapFileWrapper
Open	pcap-file.cc	/^PcapFile::Open (std::string const &filename, std::ios::openmode mode)$/;"	f	class:ns3::PcapFile
OutputStreamWrapper	output-stream-wrapper.cc	/^OutputStreamWrapper::OutputStreamWrapper (std::ostream* os)$/;"	f	class:ns3::OutputStreamWrapper
OutputStreamWrapper	output-stream-wrapper.cc	/^OutputStreamWrapper::OutputStreamWrapper (std::string filename, std::ios::openmode filemode)$/;"	f	class:ns3::OutputStreamWrapper
OutputStreamWrapper	output-stream-wrapper.h	/^class OutputStreamWrapper : public SimpleRefCount<OutputStreamWrapper>$/;"	c	namespace:ns3
PACKETBB_H	packetbb.h	26;"	d
PACKET_BROADCAST	original_net-device.h	/^    PACKET_BROADCAST,   \/**< Packet addressed to all *\/$/;"	e	enum:ns3::NetDevice::PacketType
PACKET_BURST_H	packet-burst.h	22;"	d
PACKET_DATA_CALCULATORS_H	packet-data-calculators.h	22;"	d
PACKET_HOST	original_net-device.h	/^    PACKET_HOST = 1,   \/**< Packet addressed oo us *\/$/;"	e	enum:ns3::NetDevice::PacketType
PACKET_MULTICAST	original_net-device.h	/^    PACKET_MULTICAST,   \/**< Packet addressed to multicast group *\/$/;"	e	enum:ns3::NetDevice::PacketType
PACKET_OTHERHOST	original_net-device.h	/^    PACKET_OTHERHOST,   \/**< Packet addressed to someone else *\/$/;"	e	enum:ns3::NetDevice::PacketType
PACKET_PROBE_H	packet-probe.h	25;"	d
PACKET_SOCKET_ADDRESS_H	packet-socket-address.h	21;"	d
PACKET_SOCKET_CLIENT_H	packet-socket-client.h	22;"	d
PACKET_SOCKET_FACTORY_H	packet-socket-factory.h	21;"	d
PACKET_SOCKET_H	packet-socket.h	22;"	d
PACKET_SOCKET_SERVER_H	packet-socket-server.h	22;"	d
PCAP_FILE_H	pcap-file.h	22;"	d
PCAP_FILE_WRAPPER_H	pcap-file-wrapper.h	20;"	d
PCAP_TEST_H	pcap-test.h	22;"	d
PHAS_SEQ_NUM	packetbb.cc	/^static const uint8_t PHAS_SEQ_NUM = 0x8;$/;"	v	file:
PHAS_TLV	packetbb.cc	/^static const uint8_t PHAS_TLV = 0x4;$/;"	v	file:
PREAMBLE_SIZE	ethernet-header.h	/^  static const int PREAMBLE_SIZE = 8; \/\/!< size of the preamble_sfd header field$/;"	m	class:ns3::EthernetHeader
PacketBurst	packet-burst.cc	/^PacketBurst::PacketBurst (void)$/;"	f	class:ns3::PacketBurst
PacketBurst	packet-burst.h	/^class PacketBurst : public Object$/;"	c	namespace:ns3
PacketCounterCalculator	packet-data-calculators.cc	/^PacketCounterCalculator::PacketCounterCalculator()$/;"	f	class:PacketCounterCalculator
PacketCounterCalculator	packet-data-calculators.h	/^class PacketCounterCalculator : public CounterCalculator<uint32_t> {$/;"	c	namespace:ns3
PacketDequeued	net-device-queue-interface.h	/^NetDeviceQueue::PacketDequeued (Ptr<Queue<Item> > queue,$/;"	f	class:ns3::NetDeviceQueue
PacketDiscarded	net-device-queue-interface.h	/^NetDeviceQueue::PacketDiscarded (Ptr<Queue<Item> > queue,$/;"	f	class:ns3::NetDeviceQueue
PacketEnqueued	net-device-queue-interface.h	/^NetDeviceQueue::PacketEnqueued (Ptr<Queue<Item> > queue,$/;"	f	class:ns3::NetDeviceQueue
PacketList	error-model.h	/^  typedef std::list<uint32_t> PacketList;$/;"	t	class:ns3::ListErrorModel
PacketList	error-model.h	/^  typedef std::list<uint32_t> PacketList;$/;"	t	class:ns3::ReceiveListErrorModel
PacketListCI	error-model.h	/^  typedef std::list<uint32_t>::const_iterator PacketListCI;$/;"	t	class:ns3::ListErrorModel
PacketListCI	error-model.h	/^  typedef std::list<uint32_t>::const_iterator PacketListCI;$/;"	t	class:ns3::ReceiveListErrorModel
PacketProbe	packet-probe.cc	/^PacketProbe::PacketProbe ()$/;"	f	class:ns3::PacketProbe
PacketProbe	packet-probe.h	/^class PacketProbe : public Probe$/;"	c	namespace:ns3
PacketSizeMinMaxAvgTotalCalculator	packet-data-calculators.cc	/^PacketSizeMinMaxAvgTotalCalculator::PacketSizeMinMaxAvgTotalCalculator()$/;"	f	class:PacketSizeMinMaxAvgTotalCalculator
PacketSizeMinMaxAvgTotalCalculator	packet-data-calculators.h	/^class PacketSizeMinMaxAvgTotalCalculator :$/;"	c	namespace:ns3
PacketSocket	packet-socket.cc	/^PacketSocket::PacketSocket () : m_rxAvailable (0)$/;"	f	class:ns3::PacketSocket
PacketSocket	packet-socket.h	/^class PacketSocket : public Socket$/;"	c	namespace:ns3
PacketSocketAddress	packet-socket-address.cc	/^PacketSocketAddress::PacketSocketAddress ()$/;"	f	class:ns3::PacketSocketAddress
PacketSocketAddress	packet-socket-address.h	/^class PacketSocketAddress$/;"	c	namespace:ns3
PacketSocketClient	packet-socket-client.cc	/^PacketSocketClient::PacketSocketClient ()$/;"	f	class:ns3::PacketSocketClient
PacketSocketClient	packet-socket-client.h	/^class PacketSocketClient : public Application$/;"	c	namespace:ns3
PacketSocketFactory	packet-socket-factory.cc	/^PacketSocketFactory::PacketSocketFactory ()$/;"	f	class:ns3::PacketSocketFactory
PacketSocketFactory	packet-socket-factory.h	/^class PacketSocketFactory : public SocketFactory$/;"	c	namespace:ns3
PacketSocketServer	packet-socket-server.cc	/^PacketSocketServer::PacketSocketServer ()$/;"	f	class:ns3::PacketSocketServer
PacketSocketServer	packet-socket-server.h	/^class PacketSocketServer : public Application$/;"	c	namespace:ns3
PacketSocketTag	packet-socket.cc	/^PacketSocketTag::PacketSocketTag ()$/;"	f	class:ns3::PacketSocketTag
PacketSocketTag	packet-socket.h	/^class PacketSocketTag : public Tag$/;"	c	namespace:ns3
PacketType	original_net-device.h	/^  enum PacketType$/;"	g	class:ns3::NetDevice
PacketType	sll-header.h	/^  enum PacketType$/;"	g	class:ns3::SllHeader
PacketUpdate	packet-data-calculators.cc	/^PacketCounterCalculator::PacketUpdate (std::string path,$/;"	f	class:PacketCounterCalculator
PacketUpdate	packet-data-calculators.cc	/^PacketSizeMinMaxAvgTotalCalculator::PacketUpdate (std::string path,$/;"	f	class:PacketSizeMinMaxAvgTotalCalculator
PbbAddressBlock	packetbb.cc	/^PbbAddressBlock::PbbAddressBlock ()$/;"	f	class:ns3::PbbAddressBlock
PbbAddressBlock	packetbb.h	/^class PbbAddressBlock : public SimpleRefCount<PbbAddressBlock>$/;"	c	namespace:ns3
PbbAddressBlockIpv4	packetbb.cc	/^PbbAddressBlockIpv4::PbbAddressBlockIpv4 ()$/;"	f	class:ns3::PbbAddressBlockIpv4
PbbAddressBlockIpv4	packetbb.h	/^class PbbAddressBlockIpv4 : public PbbAddressBlock$/;"	c	namespace:ns3
PbbAddressBlockIpv6	packetbb.cc	/^PbbAddressBlockIpv6::PbbAddressBlockIpv6 ()$/;"	f	class:ns3::PbbAddressBlockIpv6
PbbAddressBlockIpv6	packetbb.h	/^class PbbAddressBlockIpv6 : public PbbAddressBlock$/;"	c	namespace:ns3
PbbAddressLength	packetbb.h	/^enum PbbAddressLength {$/;"	g	namespace:ns3
PbbAddressTlv	packetbb.h	/^class PbbAddressTlv : public PbbTlv$/;"	c	namespace:ns3
PbbAddressTlvBlock	packetbb.cc	/^PbbAddressTlvBlock::PbbAddressTlvBlock (void)$/;"	f	class:ns3::PbbAddressTlvBlock
PbbAddressTlvBlock	packetbb.h	/^class PbbAddressTlvBlock$/;"	c	namespace:ns3
PbbMessage	packetbb.cc	/^PbbMessage::PbbMessage ()$/;"	f	class:ns3::PbbMessage
PbbMessage	packetbb.h	/^class PbbMessage : public SimpleRefCount<PbbMessage>$/;"	c	namespace:ns3
PbbMessageIpv4	packetbb.cc	/^PbbMessageIpv4::PbbMessageIpv4 ()$/;"	f	class:ns3::PbbMessageIpv4
PbbMessageIpv4	packetbb.h	/^class PbbMessageIpv4 : public PbbMessage {$/;"	c	namespace:ns3
PbbMessageIpv6	packetbb.cc	/^PbbMessageIpv6::PbbMessageIpv6 ()$/;"	f	class:ns3::PbbMessageIpv6
PbbMessageIpv6	packetbb.h	/^class PbbMessageIpv6 : public PbbMessage {$/;"	c	namespace:ns3
PbbPacket	packetbb.cc	/^PbbPacket::PbbPacket (void)$/;"	f	class:ns3::PbbPacket
PbbPacket	packetbb.h	/^class PbbPacket : public SimpleRefCount<PbbPacket,Header>$/;"	c	namespace:ns3
PbbTlv	packetbb.cc	/^PbbTlv::PbbTlv (void)$/;"	f	class:ns3::PbbTlv
PbbTlv	packetbb.h	/^class PbbTlv : public SimpleRefCount<PbbTlv>$/;"	c	namespace:ns3
PbbTlvBlock	packetbb.cc	/^PbbTlvBlock::PbbTlvBlock (void)$/;"	f	class:ns3::PbbTlvBlock
PbbTlvBlock	packetbb.h	/^class PbbTlvBlock$/;"	c	namespace:ns3
PcapFile	pcap-file.cc	/^PcapFile::PcapFile ()$/;"	f	class:ns3::PcapFile
PcapFile	pcap-file.h	/^class PcapFile$/;"	c	namespace:ns3
PcapFileHeader	pcap-file.h	/^  } PcapFileHeader;$/;"	t	class:ns3::PcapFile	typeref:struct:ns3::PcapFile::__anon1
PcapFileWrapper	pcap-file-wrapper.cc	/^PcapFileWrapper::PcapFileWrapper ()$/;"	f	class:ns3::PcapFileWrapper
PcapFileWrapper	pcap-file-wrapper.h	/^class PcapFileWrapper : public Object$/;"	c	namespace:ns3
PcapRecordHeader	pcap-file.h	/^  } PcapRecordHeader;$/;"	t	class:ns3::PcapFile	typeref:struct:ns3::PcapFile::__anon2
Peek	drop-tail-queue.h	/^DropTailQueue<Item>::Peek (void) const$/;"	f	class:ns3::DropTailQueue
Peek	original_queue.cc	/^Queue1::Peek (void) const$/;"	f	class:ns3::Queue1
PopBack	packetbb.cc	/^PbbAddressTlvBlock::PopBack (void)$/;"	f	class:ns3::PbbAddressTlvBlock
PopBack	packetbb.cc	/^PbbTlvBlock::PopBack (void)$/;"	f	class:ns3::PbbTlvBlock
PopFront	packetbb.cc	/^PbbAddressTlvBlock::PopFront (void)$/;"	f	class:ns3::PbbAddressTlvBlock
PopFront	packetbb.cc	/^PbbTlvBlock::PopFront (void)$/;"	f	class:ns3::PbbTlvBlock
Posdiff	dynamic-queue-limits.cc	/^DynamicQueueLimits::Posdiff (int32_t a, int32_t b)$/;"	f	class:ns3::DynamicQueueLimits
PrefixBack	packetbb.cc	/^PbbAddressBlock::PrefixBack (void) const$/;"	f	class:ns3::PbbAddressBlock
PrefixBegin	packetbb.cc	/^PbbAddressBlock::PrefixBegin (void) const$/;"	f	class:ns3::PbbAddressBlock
PrefixBegin	packetbb.cc	/^PbbAddressBlock::PrefixBegin (void)$/;"	f	class:ns3::PbbAddressBlock
PrefixClear	packetbb.cc	/^PbbAddressBlock::PrefixClear (void)$/;"	f	class:ns3::PbbAddressBlock
PrefixEmpty	packetbb.cc	/^PbbAddressBlock::PrefixEmpty (void) const$/;"	f	class:ns3::PbbAddressBlock
PrefixEnd	packetbb.cc	/^PbbAddressBlock::PrefixEnd (void) const$/;"	f	class:ns3::PbbAddressBlock
PrefixEnd	packetbb.cc	/^PbbAddressBlock::PrefixEnd (void)$/;"	f	class:ns3::PbbAddressBlock
PrefixErase	packetbb.cc	/^PbbAddressBlock::PrefixErase (PbbAddressBlock::PrefixIterator first, PbbAddressBlock::PrefixIterator last)$/;"	f	class:ns3::PbbAddressBlock
PrefixErase	packetbb.cc	/^PbbAddressBlock::PrefixErase (PbbAddressBlock::PrefixIterator position)$/;"	f	class:ns3::PbbAddressBlock
PrefixFront	packetbb.cc	/^PbbAddressBlock::PrefixFront (void) const$/;"	f	class:ns3::PbbAddressBlock
PrefixInsert	packetbb.cc	/^PbbAddressBlock::PrefixInsert (PbbAddressBlock::PrefixIterator position, const uint8_t value)$/;"	f	class:ns3::PbbAddressBlock
PrefixIterator	packetbb.h	/^  typedef std::list<uint8_t>::iterator PrefixIterator;$/;"	t	class:ns3::PbbAddressBlock
PrefixPopBack	packetbb.cc	/^PbbAddressBlock::PrefixPopBack (void)$/;"	f	class:ns3::PbbAddressBlock
PrefixPopFront	packetbb.cc	/^PbbAddressBlock::PrefixPopFront (void)$/;"	f	class:ns3::PbbAddressBlock
PrefixPushBack	packetbb.cc	/^PbbAddressBlock::PrefixPushBack (uint8_t prefix)$/;"	f	class:ns3::PbbAddressBlock
PrefixPushFront	packetbb.cc	/^PbbAddressBlock::PrefixPushFront (uint8_t prefix)$/;"	f	class:ns3::PbbAddressBlock
PrefixSize	packetbb.cc	/^PbbAddressBlock::PrefixSize (void) const$/;"	f	class:ns3::PbbAddressBlock
Print	ethernet-header.cc	/^EthernetHeader::Print (std::ostream &os) const$/;"	f	class:ns3::EthernetHeader
Print	ethernet-trailer.cc	/^EthernetTrailer::Print (std::ostream &os) const$/;"	f	class:ns3::EthernetTrailer
Print	flow-id-tag.cc	/^FlowIdTag::Print (std::ostream &os) const$/;"	f	class:ns3::FlowIdTag
Print	ipv4-address.cc	/^Ipv4Address::Print (std::ostream &os) const$/;"	f	class:ns3::Ipv4Address
Print	ipv4-address.cc	/^Ipv4Mask::Print (std::ostream &os) const$/;"	f	class:ns3::Ipv4Mask
Print	ipv6-address.cc	/^void Ipv6Address::Print (std::ostream& os) const$/;"	f	class:ns3::Ipv6Address
Print	ipv6-address.cc	/^void Ipv6Prefix::Print (std::ostream &os) const$/;"	f	class:ns3::Ipv6Prefix
Print	llc-snap-header.cc	/^LlcSnapHeader::Print (std::ostream &os) const$/;"	f	class:ns3::LlcSnapHeader
Print	original_net-device.cc	/^QueueItem::Print (std::ostream& os) const$/;"	f	class:ns3::QueueItem
Print	packet-socket.cc	/^DeviceNameTag::Print (std::ostream &os) const$/;"	f	class:ns3::DeviceNameTag
Print	packet-socket.cc	/^PacketSocketTag::Print (std::ostream &os) const$/;"	f	class:ns3::PacketSocketTag
Print	packetbb.cc	/^PbbAddressBlock::Print (std::ostream &os) const$/;"	f	class:ns3::PbbAddressBlock
Print	packetbb.cc	/^PbbAddressBlock::Print (std::ostream &os, int level) const$/;"	f	class:ns3::PbbAddressBlock
Print	packetbb.cc	/^PbbAddressTlvBlock::Print (std::ostream &os) const$/;"	f	class:ns3::PbbAddressTlvBlock
Print	packetbb.cc	/^PbbAddressTlvBlock::Print (std::ostream &os, int level) const$/;"	f	class:ns3::PbbAddressTlvBlock
Print	packetbb.cc	/^PbbMessage::Print (std::ostream &os) const$/;"	f	class:ns3::PbbMessage
Print	packetbb.cc	/^PbbMessage::Print (std::ostream &os, int level) const$/;"	f	class:ns3::PbbMessage
Print	packetbb.cc	/^PbbPacket::Print (std::ostream &os) const$/;"	f	class:ns3::PbbPacket
Print	packetbb.cc	/^PbbTlv::Print (std::ostream &os) const$/;"	f	class:ns3::PbbTlv
Print	packetbb.cc	/^PbbTlv::Print (std::ostream &os, int level) const$/;"	f	class:ns3::PbbTlv
Print	packetbb.cc	/^PbbTlvBlock::Print (std::ostream &os) const$/;"	f	class:ns3::PbbTlvBlock
Print	packetbb.cc	/^PbbTlvBlock::Print (std::ostream &os, int level) const$/;"	f	class:ns3::PbbTlvBlock
Print	queue-item.cc	/^QueueDiscItem::Print (std::ostream& os) const$/;"	f	class:ns3::QueueDiscItem
Print	queue-item.cc	/^QueueItem::Print (std::ostream& os) const$/;"	f	class:ns3::QueueItem
Print	radiotap-header.cc	/^RadiotapHeader::Print (std::ostream &os) const$/;"	f	class:ns3::RadiotapHeader
Print	simple-net-device.cc	/^SimpleTag::Print (std::ostream &os) const$/;"	f	class:ns3::SimpleTag
Print	sll-header.cc	/^SllHeader::Print (std::ostream &os)  const$/;"	f	class:ns3::SllHeader
PrintAddress	packetbb.cc	/^PbbAddressBlockIpv4::PrintAddress (std::ostream &os, ConstAddressIterator iter) const$/;"	f	class:ns3::PbbAddressBlockIpv4
PrintAddress	packetbb.cc	/^PbbAddressBlockIpv6::PrintAddress (std::ostream &os, ConstAddressIterator iter) const$/;"	f	class:ns3::PbbAddressBlockIpv6
PrintOriginatorAddress	packetbb.cc	/^PbbMessageIpv4::PrintOriginatorAddress (std::ostream &os) const$/;"	f	class:ns3::PbbMessageIpv4
PrintOriginatorAddress	packetbb.cc	/^PbbMessageIpv6::PrintOriginatorAddress (std::ostream &os) const$/;"	f	class:ns3::PbbMessageIpv6
PromiscReceiveCallback	original_net-device.h	/^                    const Address &, const Address &, enum PacketType > PromiscReceiveCallback;$/;"	t	class:ns3::NetDevice
PushBack	packetbb.cc	/^PbbAddressTlvBlock::PushBack (Ptr<PbbAddressTlv> tlv)$/;"	f	class:ns3::PbbAddressTlvBlock
PushBack	packetbb.cc	/^PbbTlvBlock::PushBack (Ptr<PbbTlv> tlv)$/;"	f	class:ns3::PbbTlvBlock
PushFront	packetbb.cc	/^PbbAddressTlvBlock::PushFront (Ptr<PbbAddressTlv> tlv)$/;"	f	class:ns3::PbbAddressTlvBlock
PushFront	packetbb.cc	/^PbbTlvBlock::PushFront (Ptr<PbbTlv> tlv)$/;"	f	class:ns3::PbbTlvBlock
QINQ	ethernet-header.h	/^  QINQ        \/**< Double tagged packet. Header includes two VLAN tags *\/$/;"	e	enum:ns3::ethernet_header_t
QUEUE_H	queue.h	24;"	d
QUEUE_ITEM_H	queue-item.h	21;"	d
QUEUE_LIMITS_H	queue-limits.h	23;"	d
QUEUE_LOG	queue.h	432;"	d
QUEUE_MODE_BYTES	original_queue.h	/^    QUEUE_MODE_BYTES,       \/**< Use number of bytes for maximum queue size *\/$/;"	e	enum:ns3::Queue1::QueueMode
QUEUE_MODE_BYTES	queue.h	/^    QUEUE_MODE_BYTES,       \/**< Use number of bytes for maximum queue size *\/$/;"	e	enum:ns3::QueueBase::QueueMode
QUEUE_MODE_PACKETS	original_queue.h	/^    QUEUE_MODE_PACKETS,     \/**< Use number of packets for maximum queue size *\/$/;"	e	enum:ns3::Queue1::QueueMode
QUEUE_MODE_PACKETS	queue.h	/^    QUEUE_MODE_PACKETS,     \/**< Use number of packets for maximum queue size *\/$/;"	e	enum:ns3::QueueBase::QueueMode
Queue	queue.h	/^Queue<Item>::Queue ()$/;"	f	class:ns3::Queue
Queue	queue.h	/^class Queue : public QueueBase$/;"	c	namespace:ns3
Queue1	original_queue.cc	/^Queue1::Queue1() :$/;"	f	class:ns3::Queue1
Queue1	original_queue.h	/^class Queue1 : public Object$/;"	c	namespace:ns3
QueueBase	queue.cc	/^QueueBase::QueueBase () :$/;"	f	class:ns3::QueueBase
QueueBase	queue.h	/^class QueueBase : public Object$/;"	c	namespace:ns3
QueueDiscItem	queue-item.cc	/^QueueDiscItem::QueueDiscItem (Ptr<Packet> p, const Address& addr, uint16_t protocol)$/;"	f	class:ns3::QueueDiscItem
QueueDiscItem	queue-item.h	/^class QueueDiscItem : public QueueItem {$/;"	c	namespace:ns3
QueueItem	original_net-device.cc	/^QueueItem::QueueItem (Ptr<Packet> p)$/;"	f	class:ns3::QueueItem
QueueItem	original_net-device.h	/^class QueueItem : public SimpleRefCount<QueueItem>$/;"	c	namespace:ns3
QueueItem	queue-item.cc	/^QueueItem::QueueItem (Ptr<Packet> p)$/;"	f	class:ns3::QueueItem
QueueItem	queue-item.h	/^class QueueItem : public SimpleRefCount<QueueItem>$/;"	c	namespace:ns3
QueueLimits	queue-limits.h	/^class QueueLimits : public Object {$/;"	c	namespace:ns3
QueueMode	original_queue.h	/^  enum QueueMode$/;"	g	class:ns3::Queue1
QueueMode	queue.h	/^  enum QueueMode$/;"	g	class:ns3::QueueBase
Queued	dynamic-queue-limits.cc	/^DynamicQueueLimits::Queued (uint32_t count)$/;"	f	class:ns3::DynamicQueueLimits
RADIOTAP_AMPDU_STATUS	radiotap-header.h	/^    RADIOTAP_AMPDU_STATUS      = 0x00100000,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_ANTENNA	radiotap-header.h	/^    RADIOTAP_ANTENNA           = 0x00000800,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_CHANNEL	radiotap-header.h	/^    RADIOTAP_CHANNEL           = 0x00000008,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_DBM_ANTNOISE	radiotap-header.h	/^    RADIOTAP_DBM_ANTNOISE      = 0x00000040,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_DBM_ANTSIGNAL	radiotap-header.h	/^    RADIOTAP_DBM_ANTSIGNAL     = 0x00000020,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_DBM_TX_POWER	radiotap-header.h	/^    RADIOTAP_DBM_TX_POWER      = 0x00000400,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_DB_ANTNOISE	radiotap-header.h	/^    RADIOTAP_DB_ANTNOISE       = 0x00002000,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_DB_ANTSIGNAL	radiotap-header.h	/^    RADIOTAP_DB_ANTSIGNAL      = 0x00001000,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_DB_TX_ATTENUATION	radiotap-header.h	/^    RADIOTAP_DB_TX_ATTENUATION = 0x00000200,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_EXT	radiotap-header.h	/^    RADIOTAP_EXT               = 0x10000000$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_FHSS	radiotap-header.h	/^    RADIOTAP_FHSS              = 0x00000010,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_FLAGS	radiotap-header.h	/^    RADIOTAP_FLAGS             = 0x00000002,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_HEADER_H	radiotap-header.h	23;"	d
RADIOTAP_LOCK_QUALITY	radiotap-header.h	/^    RADIOTAP_LOCK_QUALITY      = 0x00000080,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_MCS	radiotap-header.h	/^    RADIOTAP_MCS               = 0x00080000,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_RATE	radiotap-header.h	/^    RADIOTAP_RATE              = 0x00000004,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_RX_FLAGS	radiotap-header.h	/^    RADIOTAP_RX_FLAGS          = 0x00004000,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_TSFT	radiotap-header.h	/^    RADIOTAP_TSFT              = 0x00000001,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_TX_ATTENUATION	radiotap-header.h	/^    RADIOTAP_TX_ATTENUATION    = 0x00000100,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RADIOTAP_VHT	radiotap-header.h	/^    RADIOTAP_VHT               = 0x00200000,$/;"	e	enum:ns3::RadiotapHeader::RadiotapFlags
RadiotapFlags	radiotap-header.h	/^  enum RadiotapFlags$/;"	g	class:ns3::RadiotapHeader
RadiotapHeader	radiotap-header.cc	/^RadiotapHeader::RadiotapHeader ()$/;"	f	class:ns3::RadiotapHeader
RadiotapHeader	radiotap-header.h	/^class RadiotapHeader : public Header$/;"	c	namespace:ns3
RateErrorModel	error-model.cc	/^RateErrorModel::RateErrorModel ()$/;"	f	class:ns3::RateErrorModel
RateErrorModel	error-model.h	/^class RateErrorModel : public ErrorModel$/;"	c	namespace:ns3
Read	ascii-file.cc	/^AsciiFile::Read (std::string& line)$/;"	f	class:ns3::AsciiFile
Read	pcap-file-wrapper.cc	/^PcapFileWrapper::Read (Time &t)$/;"	f	class:ns3::PcapFileWrapper
Read	pcap-file.cc	/^PcapFile::Read ($/;"	f	class:ns3::PcapFile
ReadAndVerifyFileHeader	pcap-file.cc	/^PcapFile::ReadAndVerifyFileHeader (void)$/;"	f	class:ns3::PcapFile
ReadFrom	address-utils.cc	/^void ReadFrom (Buffer::Iterator &i, Address &ad, uint32_t len)$/;"	f	namespace:ns3
ReadFrom	address-utils.cc	/^void ReadFrom (Buffer::Iterator &i, Ipv4Address &ad)$/;"	f	namespace:ns3
ReadFrom	address-utils.cc	/^void ReadFrom (Buffer::Iterator &i, Ipv6Address &ad)$/;"	f	namespace:ns3
ReadFrom	address-utils.cc	/^void ReadFrom (Buffer::Iterator &i, Mac16Address &ad)$/;"	f	namespace:ns3
ReadFrom	address-utils.cc	/^void ReadFrom (Buffer::Iterator &i, Mac48Address &ad)$/;"	f	namespace:ns3
ReadFrom	address-utils.cc	/^void ReadFrom (Buffer::Iterator &i, Mac64Address &ad)$/;"	f	namespace:ns3
Receive	simple-net-device.cc	/^SimpleNetDevice::Receive (Ptr<Packet> packet, uint16_t protocol,$/;"	f	class:ns3::SimpleNetDevice
ReceiveCallback	original_net-device.h	/^  typedef Callback< bool, Ptr<NetDevice>, Ptr<const Packet>, uint16_t, const Address & > ReceiveCallback;$/;"	t	class:ns3::NetDevice
ReceiveListErrorModel	error-model.cc	/^ReceiveListErrorModel::ReceiveListErrorModel () :$/;"	f	class:ns3::ReceiveListErrorModel
ReceiveListErrorModel	error-model.h	/^class ReceiveListErrorModel : public ErrorModel$/;"	c	namespace:ns3
Recv	packet-socket.cc	/^PacketSocket::Recv (uint32_t maxSize, uint32_t flags)$/;"	f	class:ns3::PacketSocket
RecvFrom	packet-socket.cc	/^PacketSocket::RecvFrom (uint32_t maxSize, uint32_t flags, Address &fromAddress)$/;"	f	class:ns3::PacketSocket
Register	address.cc	/^Address::Register (void)$/;"	f	class:ns3::Address
Remove	drop-tail-queue.h	/^DropTailQueue<Item>::Remove (void)$/;"	f	class:ns3::DropTailQueue
Remove	original_queue.cc	/^Queue1::Remove (void)$/;"	f	class:ns3::Queue1
Reset	dynamic-queue-limits.cc	/^DynamicQueueLimits::Reset ()$/;"	f	class:ns3::DynamicQueueLimits
Reset	error-model.cc	/^ErrorModel::Reset (void)$/;"	f	class:ns3::ErrorModel
ResetQueueLimits	net-device-queue-interface.cc	/^NetDeviceQueue::ResetQueueLimits ()$/;"	f	class:ns3::NetDeviceQueue
ResetQueueLimits	original_net-device.cc	/^NetDeviceQueue::ResetQueueLimits ()$/;"	f	class:ns3::NetDeviceQueue
ResetStatistics	original_queue.cc	/^Queue1::ResetStatistics (void)$/;"	f	class:ns3::Queue1
ResetStatistics	queue.cc	/^QueueBase::ResetStatistics (void)$/;"	f	class:ns3::QueueBase
SENT_BY_US	sll-header.h	/^    SENT_BY_US  \/**< the packet was sent by us *\/$/;"	e	enum:ns3::SllHeader::PacketType
SGI_HASHMAP_H	sgi-hashmap.h	26;"	d
SIMPLE_CHANNEL_H	simple-channel.h	21;"	d
SIMPLE_NET_DEVICE_H	simple-net-device.h	21;"	d
SLL_HEADER_H	sll-header.h	21;"	d
SNAPLEN_DEFAULT	pcap-file.h	/^  static const uint32_t SNAPLEN_DEFAULT = 65535;       \/**< Default value for maximum octets to save per packet *\/$/;"	m	class:ns3::PcapFile
STATE_BOUND	packet-socket.h	/^    STATE_BOUND,     \/\/ open and bound$/;"	e	enum:ns3::PacketSocket::State
STATE_CLOSED	packet-socket.h	/^    STATE_CLOSED$/;"	e	enum:ns3::PacketSocket::State
STATE_CONNECTED	packet-socket.h	/^    STATE_CONNECTED, \/\/ open, bound and connected$/;"	e	enum:ns3::PacketSocket::State
STATE_OPEN	packet-socket.h	/^    STATE_OPEN,$/;"	e	enum:ns3::PacketSocket::State
SWAPPED_MAGIC	pcap-file.cc	/^const uint32_t SWAPPED_MAGIC = 0xd4c3b2a1;    \/**< Looks this way if byte swapping is required *\/$/;"	m	namespace:ns3	file:
SelectQueueCallback	net-device-queue-interface.h	/^  typedef Callback< uint8_t, Ptr<QueueItem> > SelectQueueCallback;$/;"	t	class:ns3::NetDeviceQueueInterface
SelectQueueCallback	original_net-device.h	/^  typedef Callback< uint8_t, Ptr<QueueItem> > SelectQueueCallback;$/;"	t	class:ns3::NetDeviceQueueInterface
Send	error-channel.cc	/^ErrorChannel::Send (Ptr<Packet> p, uint16_t protocol,$/;"	f	class:ns3::ErrorChannel
Send	packet-socket-client.cc	/^PacketSocketClient::Send (void)$/;"	f	class:ns3::PacketSocketClient
Send	packet-socket.cc	/^PacketSocket::Send (Ptr<Packet> p, uint32_t flags)$/;"	f	class:ns3::PacketSocket
Send	simple-channel.cc	/^SimpleChannel::Send (Ptr<Packet> p, uint16_t protocol,$/;"	f	class:ns3::SimpleChannel
Send	simple-net-device.cc	/^SimpleNetDevice::Send (Ptr<Packet> packet, const Address& dest, uint16_t protocolNumber)$/;"	f	class:ns3::SimpleNetDevice
SendFrom	simple-net-device.cc	/^SimpleNetDevice::SendFrom (Ptr<Packet> p, const Address& source, const Address& dest, uint16_t protocolNumber)$/;"	f	class:ns3::SimpleNetDevice
SendTo	packet-socket.cc	/^PacketSocket::SendTo (Ptr<Packet> p, uint32_t flags, const Address &address)$/;"	f	class:ns3::PacketSocket
SequenceNumber	sequence-number.h	/^  SequenceNumber ()$/;"	f	class:ns3::SequenceNumber
SequenceNumber	sequence-number.h	/^  SequenceNumber (SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> const &value)$/;"	f	class:ns3::SequenceNumber
SequenceNumber	sequence-number.h	/^  explicit SequenceNumber (NUMERIC_TYPE value)$/;"	f	class:ns3::SequenceNumber
SequenceNumber	sequence-number.h	/^class SequenceNumber$/;"	c	namespace:ns3
SequenceNumber16	sequence-number.h	/^typedef SequenceNumber<uint16_t, int16_t> SequenceNumber16;$/;"	t	namespace:ns3
SequenceNumber32	sequence-number.h	/^typedef SequenceNumber<uint32_t, int32_t> SequenceNumber32;$/;"	t	namespace:ns3
SequenceNumber32	sequence-number.h	/^typedef void (* SequenceNumber32)(SequenceNumber32 oldValue,$/;"	t	namespace:ns3::TracedValueCallback
SequenceNumber8	sequence-number.h	/^typedef SequenceNumber<uint8_t, int8_t> SequenceNumber8;$/;"	t	namespace:ns3
Serialize	address.cc	/^Address::Serialize (TagBuffer buffer) const$/;"	f	class:ns3::Address
Serialize	ethernet-header.cc	/^EthernetHeader::Serialize (Buffer::Iterator start) const$/;"	f	class:ns3::EthernetHeader
Serialize	ethernet-trailer.cc	/^EthernetTrailer::Serialize (Buffer::Iterator end) const$/;"	f	class:ns3::EthernetTrailer
Serialize	flow-id-tag.cc	/^FlowIdTag::Serialize (TagBuffer buf) const$/;"	f	class:ns3::FlowIdTag
Serialize	ipv4-address.cc	/^Ipv4Address::Serialize (uint8_t buf[4]) const$/;"	f	class:ns3::Ipv4Address
Serialize	ipv6-address.cc	/^void Ipv6Address::Serialize (uint8_t buf[16]) const$/;"	f	class:ns3::Ipv6Address
Serialize	llc-snap-header.cc	/^LlcSnapHeader::Serialize (Buffer::Iterator start) const$/;"	f	class:ns3::LlcSnapHeader
Serialize	packet-socket.cc	/^DeviceNameTag::Serialize (TagBuffer i) const$/;"	f	class:ns3::DeviceNameTag
Serialize	packet-socket.cc	/^PacketSocketTag::Serialize (TagBuffer i) const$/;"	f	class:ns3::PacketSocketTag
Serialize	packetbb.cc	/^PbbAddressBlock::Serialize (Buffer::Iterator &start) const$/;"	f	class:ns3::PbbAddressBlock
Serialize	packetbb.cc	/^PbbAddressTlvBlock::Serialize (Buffer::Iterator &start) const$/;"	f	class:ns3::PbbAddressTlvBlock
Serialize	packetbb.cc	/^PbbMessage::Serialize (Buffer::Iterator &start) const$/;"	f	class:ns3::PbbMessage
Serialize	packetbb.cc	/^PbbPacket::Serialize (Buffer::Iterator start) const$/;"	f	class:ns3::PbbPacket
Serialize	packetbb.cc	/^PbbTlv::Serialize (Buffer::Iterator &start) const$/;"	f	class:ns3::PbbTlv
Serialize	packetbb.cc	/^PbbTlvBlock::Serialize (Buffer::Iterator &start) const$/;"	f	class:ns3::PbbTlvBlock
Serialize	radiotap-header.cc	/^RadiotapHeader::Serialize (Buffer::Iterator start) const$/;"	f	class:ns3::RadiotapHeader
Serialize	simple-net-device.cc	/^SimpleTag::Serialize (TagBuffer i) const$/;"	f	class:ns3::SimpleTag
Serialize	sll-header.cc	/^SllHeader::Serialize (Buffer::Iterator start)  const$/;"	f	class:ns3::SllHeader
SerializeAddress	packetbb.cc	/^PbbAddressBlockIpv4::SerializeAddress (uint8_t *buffer, ConstAddressIterator iter) const$/;"	f	class:ns3::PbbAddressBlockIpv4
SerializeAddress	packetbb.cc	/^PbbAddressBlockIpv6::SerializeAddress (uint8_t *buffer, ConstAddressIterator iter) const$/;"	f	class:ns3::PbbAddressBlockIpv6
SerializeOriginatorAddress	packetbb.cc	/^PbbMessageIpv4::SerializeOriginatorAddress (Buffer::Iterator &start) const$/;"	f	class:ns3::PbbMessageIpv4
SerializeOriginatorAddress	packetbb.cc	/^PbbMessageIpv6::SerializeOriginatorAddress (Buffer::Iterator &start) const$/;"	f	class:ns3::PbbMessageIpv6
Set	ipv4-address.cc	/^Ipv4Address::Set (char const *address)$/;"	f	class:ns3::Ipv4Address
Set	ipv4-address.cc	/^Ipv4Address::Set (uint32_t address)$/;"	f	class:ns3::Ipv4Address
Set	ipv4-address.cc	/^Ipv4Mask::Set (uint32_t mask)$/;"	f	class:ns3::Ipv4Mask
Set	ipv6-address.cc	/^void Ipv6Address::Set (char const* address)$/;"	f	class:ns3::Ipv6Address
Set	ipv6-address.cc	/^void Ipv6Address::Set (uint8_t address[16])$/;"	f	class:ns3::Ipv6Address
SetAddress	simple-net-device.cc	/^SimpleNetDevice::SetAddress (Address address)$/;"	f	class:ns3::SimpleNetDevice
SetAllDevices	packet-socket-address.cc	/^PacketSocketAddress::SetAllDevices (void)$/;"	f	class:ns3::PacketSocketAddress
SetAllowBroadcast	packet-socket.cc	/^PacketSocket::SetAllowBroadcast (bool allowBroadcast)$/;"	f	class:ns3::PacketSocket
SetAmpduStatus	radiotap-header.cc	/^RadiotapHeader::SetAmpduStatus (uint32_t referenceNumber, uint16_t flags, uint8_t crc)$/;"	f	class:ns3::RadiotapHeader
SetAntennaNoisePower	radiotap-header.cc	/^RadiotapHeader::SetAntennaNoisePower (double noise)$/;"	f	class:ns3::RadiotapHeader
SetAntennaSignalPower	radiotap-header.cc	/^RadiotapHeader::SetAntennaSignalPower (double signal)$/;"	f	class:ns3::RadiotapHeader
SetArpType	sll-header.cc	/^SllHeader::SetArpType (uint16_t arphdType)$/;"	f	class:ns3::SllHeader
SetBurstRate	error-model.cc	/^BurstErrorModel::SetBurstRate (double rate)$/;"	f	class:ns3::BurstErrorModel
SetChannel	simple-net-device.cc	/^SimpleNetDevice::SetChannel (Ptr<SimpleChannel> channel)$/;"	f	class:ns3::SimpleNetDevice
SetChannelFrequencyAndFlags	radiotap-header.cc	/^RadiotapHeader::SetChannelFrequencyAndFlags (uint16_t frequency, uint16_t flags)$/;"	f	class:ns3::RadiotapHeader
SetDestAddress	packet-socket.cc	/^PacketSocketTag::SetDestAddress(Address a)$/;"	f	class:ns3::PacketSocketTag
SetDestination	ethernet-header.cc	/^EthernetHeader::SetDestination (Mac48Address dst)$/;"	f	class:ns3::EthernetHeader
SetDeviceName	packet-socket.cc	/^DeviceNameTag::SetDeviceName (std::string n)$/;"	f	class:ns3::DeviceNameTag
SetDropCallback	original_queue.cc	/^Queue1::SetDropCallback (DropCallback cb)$/;"	f	class:ns3::Queue1
SetDst	simple-net-device.cc	/^SimpleTag::SetDst (Mac48Address dst)$/;"	f	class:ns3::SimpleTag
SetDuplicateMode	error-channel.cc	/^ErrorChannel::SetDuplicateMode (bool mode)$/;"	f	class:ns3::ErrorChannel
SetDuplicateTime	error-channel.cc	/^ErrorChannel::SetDuplicateTime (Time delay)$/;"	f	class:ns3::ErrorChannel
SetFcs	ethernet-trailer.cc	/^EthernetTrailer::SetFcs (uint32_t fcs)$/;"	f	class:ns3::EthernetTrailer
SetFlowId	flow-id-tag.cc	/^FlowIdTag::SetFlowId (uint32_t id)$/;"	f	class:ns3::FlowIdTag
SetFrameFlags	radiotap-header.cc	/^RadiotapHeader::SetFrameFlags (uint8_t flags)$/;"	f	class:ns3::RadiotapHeader
SetHopCount	packetbb.cc	/^PbbMessage::SetHopCount (uint8_t hopCount)$/;"	f	class:ns3::PbbMessage
SetHopLimit	packetbb.cc	/^PbbMessage::SetHopLimit (uint8_t hopLimit)$/;"	f	class:ns3::PbbMessage
SetIfIndex	simple-net-device.cc	/^SimpleNetDevice::SetIfIndex (const uint32_t index)$/;"	f	class:ns3::SimpleNetDevice
SetIndexStart	packetbb.cc	/^PbbAddressTlv::SetIndexStart (uint8_t index)$/;"	f	class:ns3::PbbAddressTlv
SetIndexStart	packetbb.cc	/^PbbTlv::SetIndexStart (uint8_t index)$/;"	f	class:ns3::PbbTlv
SetIndexStop	packetbb.cc	/^PbbAddressTlv::SetIndexStop (uint8_t index)$/;"	f	class:ns3::PbbAddressTlv
SetIndexStop	packetbb.cc	/^PbbTlv::SetIndexStop (uint8_t index)$/;"	f	class:ns3::PbbTlv
SetIpv4	inet-socket-address.cc	/^InetSocketAddress::SetIpv4 (Ipv4Address address)$/;"	f	class:ns3::InetSocketAddress
SetIpv6	inet6-socket-address.cc	/^void Inet6SocketAddress::SetIpv6 (Ipv6Address ipv6)$/;"	f	class:ns3::Inet6SocketAddress
SetJumpingMode	error-channel.cc	/^ErrorChannel::SetJumpingMode (bool mode)$/;"	f	class:ns3::ErrorChannel
SetJumpingTime	error-channel.cc	/^ErrorChannel::SetJumpingTime (Time delay)$/;"	f	class:ns3::ErrorChannel
SetLateTxQueuesCreation	net-device-queue-interface.cc	/^NetDeviceQueueInterface::SetLateTxQueuesCreation (bool value)$/;"	f	class:ns3::NetDeviceQueueInterface
SetLengthType	ethernet-header.cc	/^EthernetHeader::SetLengthType (uint16_t lengthType)$/;"	f	class:ns3::EthernetHeader
SetList	error-model.cc	/^ListErrorModel::SetList (const std::list<uint32_t> &packetlist)$/;"	f	class:ns3::ListErrorModel
SetList	error-model.cc	/^ReceiveListErrorModel::SetList (const std::list<uint32_t> &packetlist)$/;"	f	class:ns3::ReceiveListErrorModel
SetLocal	packet-socket-server.cc	/^PacketSocketServer::SetLocal (PacketSocketAddress addr)$/;"	f	class:ns3::PacketSocketServer
SetMaxBytes	original_queue.cc	/^Queue1::SetMaxBytes (uint32_t maxBytes)$/;"	f	class:ns3::Queue1
SetMaxBytes	queue.cc	/^QueueBase::SetMaxBytes (uint32_t maxBytes)$/;"	f	class:ns3::QueueBase
SetMaxPackets	original_queue.cc	/^Queue1::SetMaxPackets (uint32_t maxPackets)$/;"	f	class:ns3::Queue1
SetMaxPackets	queue.cc	/^QueueBase::SetMaxPackets (uint32_t maxPackets)$/;"	f	class:ns3::QueueBase
SetMcsFields	radiotap-header.cc	/^RadiotapHeader::SetMcsFields (uint8_t known, uint8_t flags, uint8_t mcs)$/;"	f	class:ns3::RadiotapHeader
SetMode	original_queue.cc	/^Queue1::SetMode (Queue1::QueueMode mode)$/;"	f	class:ns3::Queue1
SetMode	queue.cc	/^QueueBase::SetMode (QueueBase::QueueMode mode)$/;"	f	class:ns3::QueueBase
SetMtu	simple-net-device.cc	/^SimpleNetDevice::SetMtu (const uint16_t mtu)$/;"	f	class:ns3::SimpleNetDevice
SetMultivalue	packetbb.cc	/^PbbAddressTlv::SetMultivalue (bool isMultivalue)$/;"	f	class:ns3::PbbAddressTlv
SetMultivalue	packetbb.cc	/^PbbTlv::SetMultivalue (bool isMultivalue)$/;"	f	class:ns3::PbbTlv
SetNode	packet-socket.cc	/^PacketSocket::SetNode (Ptr<Node> node)$/;"	f	class:ns3::PacketSocket
SetNode	simple-net-device.cc	/^SimpleNetDevice::SetNode (Ptr<Node> node)$/;"	f	class:ns3::SimpleNetDevice
SetOriginatorAddress	packetbb.cc	/^PbbMessage::SetOriginatorAddress (Address address)$/;"	f	class:ns3::PbbMessage
SetPacketType	packet-socket.cc	/^PacketSocketTag::SetPacketType(NetDevice::PacketType t)$/;"	f	class:ns3::PacketSocketTag
SetPacketType	sll-header.cc	/^SllHeader::SetPacketType (PacketType type)$/;"	f	class:ns3::SllHeader
SetPhysicalAddress	packet-socket-address.cc	/^PacketSocketAddress::SetPhysicalAddress (const Address address)$/;"	f	class:ns3::PacketSocketAddress
SetPort	inet-socket-address.cc	/^InetSocketAddress::SetPort (uint16_t port)$/;"	f	class:ns3::InetSocketAddress
SetPort	inet6-socket-address.cc	/^void Inet6SocketAddress::SetPort (uint16_t port)$/;"	f	class:ns3::Inet6SocketAddress
SetPreambleSfd	ethernet-header.cc	/^EthernetHeader::SetPreambleSfd (uint64_t preambleSfd)$/;"	f	class:ns3::EthernetHeader
SetPriority	packet-socket-client.cc	/^PacketSocketClient::SetPriority (uint8_t priority)$/;"	f	class:ns3::PacketSocketClient
SetPromiscReceiveCallback	simple-net-device.cc	/^SimpleNetDevice::SetPromiscReceiveCallback (PromiscReceiveCallback cb)$/;"	f	class:ns3::SimpleNetDevice
SetProto	simple-net-device.cc	/^SimpleTag::SetProto (uint16_t proto)$/;"	f	class:ns3::SimpleTag
SetProtocol	packet-socket-address.cc	/^PacketSocketAddress::SetProtocol (uint16_t protocol)$/;"	f	class:ns3::PacketSocketAddress
SetQueue	simple-net-device.cc	/^SimpleNetDevice::SetQueue (Ptr<Queue<Packet> > q)$/;"	f	class:ns3::SimpleNetDevice
SetQueueLimits	net-device-queue-interface.cc	/^NetDeviceQueue::SetQueueLimits (Ptr<QueueLimits> ql)$/;"	f	class:ns3::NetDeviceQueue
SetQueueLimits	original_net-device.cc	/^NetDeviceQueue::SetQueueLimits (Ptr<QueueLimits> ql)$/;"	f	class:ns3::NetDeviceQueue
SetRandomBurstSize	error-model.cc	/^BurstErrorModel::SetRandomBurstSize(Ptr<RandomVariableStream> burstSz)$/;"	f	class:ns3::BurstErrorModel
SetRandomVariable	error-model.cc	/^BurstErrorModel::SetRandomVariable (Ptr<RandomVariableStream> ranVar)$/;"	f	class:ns3::BurstErrorModel
SetRandomVariable	error-model.cc	/^RateErrorModel::SetRandomVariable (Ptr<RandomVariableStream> ranvar)$/;"	f	class:ns3::RateErrorModel
SetRate	error-model.cc	/^RateErrorModel::SetRate (double rate)$/;"	f	class:ns3::RateErrorModel
SetRate	radiotap-header.cc	/^RadiotapHeader::SetRate (uint8_t rate)$/;"	f	class:ns3::RadiotapHeader
SetReceiveCallback	simple-net-device.cc	/^SimpleNetDevice::SetReceiveCallback (NetDevice::ReceiveCallback cb)$/;"	f	class:ns3::SimpleNetDevice
SetReceiveErrorModel	simple-net-device.cc	/^SimpleNetDevice::SetReceiveErrorModel (Ptr<ErrorModel> em)$/;"	f	class:ns3::SimpleNetDevice
SetRemote	packet-socket-client.cc	/^PacketSocketClient::SetRemote (PacketSocketAddress addr)$/;"	f	class:ns3::PacketSocketClient
SetSelectQueueCallback	net-device-queue-interface.cc	/^NetDeviceQueueInterface::SetSelectQueueCallback (SelectQueueCallback cb)$/;"	f	class:ns3::NetDeviceQueueInterface
SetSelectQueueCallback	original_net-device.cc	/^NetDeviceQueueInterface::SetSelectQueueCallback (SelectQueueCallback cb)$/;"	f	class:ns3::NetDeviceQueueInterface
SetSequenceNumber	packetbb.cc	/^PbbMessage::SetSequenceNumber (uint16_t sequenceNumber)$/;"	f	class:ns3::PbbMessage
SetSequenceNumber	packetbb.cc	/^PbbPacket::SetSequenceNumber (uint16_t number)$/;"	f	class:ns3::PbbPacket
SetSingleDevice	packet-socket-address.cc	/^PacketSocketAddress::SetSingleDevice (uint32_t index)$/;"	f	class:ns3::PacketSocketAddress
SetSource	ethernet-header.cc	/^EthernetHeader::SetSource (Mac48Address source)$/;"	f	class:ns3::EthernetHeader
SetSrc	simple-net-device.cc	/^SimpleTag::SetSrc (Mac48Address src)$/;"	f	class:ns3::SimpleTag
SetTos	inet-socket-address.cc	/^InetSocketAddress::SetTos (uint8_t tos)$/;"	f	class:ns3::InetSocketAddress
SetTsft	radiotap-header.cc	/^RadiotapHeader::SetTsft (uint64_t value)$/;"	f	class:ns3::RadiotapHeader
SetTxQueueIndex	queue-item.cc	/^QueueDiscItem::SetTxQueueIndex (uint8_t txq)$/;"	f	class:ns3::QueueDiscItem
SetTxQueuesN	net-device-queue-interface.cc	/^NetDeviceQueueInterface::SetTxQueuesN (uint8_t numTxQueues)$/;"	f	class:ns3::NetDeviceQueueInterface
SetTxQueuesN	original_net-device.cc	/^NetDeviceQueueInterface::SetTxQueuesN (uint8_t numTxQueues)$/;"	f	class:ns3::NetDeviceQueueInterface
SetType	llc-snap-header.cc	/^LlcSnapHeader::SetType (uint16_t type)$/;"	f	class:ns3::LlcSnapHeader
SetType	packetbb.cc	/^PbbMessage::SetType (uint8_t type)$/;"	f	class:ns3::PbbMessage
SetType	packetbb.cc	/^PbbTlv::SetType (uint8_t type)$/;"	f	class:ns3::PbbTlv
SetTypeExt	packetbb.cc	/^PbbTlv::SetTypeExt (uint8_t typeExt)$/;"	f	class:ns3::PbbTlv
SetUnit	error-model.cc	/^RateErrorModel::SetUnit (enum ErrorUnit error_unit) $/;"	f	class:ns3::RateErrorModel
SetValue	packet-probe.cc	/^PacketProbe::SetValue (Ptr<const Packet> packet)$/;"	f	class:ns3::PacketProbe
SetValue	packetbb.cc	/^PbbTlv::SetValue (Buffer start)$/;"	f	class:ns3::PbbTlv
SetValue	packetbb.cc	/^PbbTlv::SetValue (const uint8_t * buffer, uint32_t size)$/;"	f	class:ns3::PbbTlv
SetValueByPath	packet-probe.cc	/^PacketProbe::SetValueByPath (std::string path, Ptr<const Packet> packet)$/;"	f	class:ns3::PacketProbe
SetVhtFields	radiotap-header.cc	/^RadiotapHeader::SetVhtFields (uint16_t known, uint8_t flags, uint8_t bandwidth, uint8_t mcs_nss[4], uint8_t coding, uint8_t group_id, uint16_t partial_aid)$/;"	f	class:ns3::RadiotapHeader
SetWakeCallback	net-device-queue-interface.cc	/^NetDeviceQueue::SetWakeCallback (WakeCallback cb)$/;"	f	class:ns3::NetDeviceQueue
SetWakeCallback	original_net-device.cc	/^NetDeviceQueue::SetWakeCallback (WakeCallback cb)$/;"	f	class:ns3::NetDeviceQueue
ShutdownRecv	packet-socket.cc	/^PacketSocket::ShutdownRecv (void)$/;"	f	class:ns3::PacketSocket
ShutdownSend	packet-socket.cc	/^PacketSocket::ShutdownSend (void)$/;"	f	class:ns3::PacketSocket
SimpleChannel	simple-channel.cc	/^SimpleChannel::SimpleChannel ()$/;"	f	class:ns3::SimpleChannel
SimpleChannel	simple-channel.h	/^class SimpleChannel : public Channel$/;"	c	namespace:ns3
SimpleNetDevice	simple-net-device.cc	/^SimpleNetDevice::SimpleNetDevice ()$/;"	f	class:ns3::SimpleNetDevice
SimpleNetDevice	simple-net-device.h	/^class SimpleNetDevice : public NetDevice$/;"	c	namespace:ns3
SimpleTag	simple-net-device.cc	/^class SimpleTag : public Tag {$/;"	c	namespace:ns3	file:
Size	packetbb.cc	/^PbbAddressTlvBlock::Size (void) const$/;"	f	class:ns3::PbbAddressTlvBlock
Size	packetbb.cc	/^PbbTlvBlock::Size (void) const$/;"	f	class:ns3::PbbTlvBlock
SllHeader	sll-header.cc	/^SllHeader::SllHeader ()$/;"	f	class:ns3::SllHeader
SllHeader	sll-header.h	/^class SllHeader : public Header$/;"	c	namespace:ns3
Start	net-device-queue-interface.cc	/^NetDeviceQueue::Start (void)$/;"	f	class:ns3::NetDeviceQueue
Start	original_net-device.cc	/^NetDeviceQueue::Start (void)$/;"	f	class:ns3::NetDeviceQueue
StartApplication	packet-socket-client.cc	/^PacketSocketClient::StartApplication (void)$/;"	f	class:ns3::PacketSocketClient
StartApplication	packet-socket-server.cc	/^PacketSocketServer::StartApplication (void)$/;"	f	class:ns3::PacketSocketServer
State	packet-socket.h	/^  enum State {$/;"	g	class:ns3::PacketSocket
Stop	net-device-queue-interface.cc	/^NetDeviceQueue::Stop (void)$/;"	f	class:ns3::NetDeviceQueue
Stop	original_net-device.cc	/^NetDeviceQueue::Stop (void)$/;"	f	class:ns3::NetDeviceQueue
StopApplication	packet-socket-client.cc	/^PacketSocketClient::StopApplication (void)$/;"	f	class:ns3::PacketSocketClient
StopApplication	packet-socket-server.cc	/^PacketSocketServer::StopApplication (void)$/;"	f	class:ns3::PacketSocketServer
SupportsSendFrom	simple-net-device.cc	/^SimpleNetDevice::SupportsSendFrom (void) const$/;"	f	class:ns3::SimpleNetDevice
Swap	pcap-file.cc	/^PcapFile::Swap (PcapFileHeader *from, PcapFileHeader *to)$/;"	f	class:ns3::PcapFile
Swap	pcap-file.cc	/^PcapFile::Swap (PcapRecordHeader *from, PcapRecordHeader *to)$/;"	f	class:ns3::PcapFile
Swap	pcap-file.cc	/^PcapFile::Swap (uint16_t val)$/;"	f	class:ns3::PcapFile
Swap	pcap-file.cc	/^PcapFile::Swap (uint32_t val)$/;"	f	class:ns3::PcapFile
Swap	pcap-file.cc	/^PcapFile::Swap (uint8_t val)$/;"	f	class:ns3::PcapFile
THAS_EXT_LEN	packetbb.cc	/^static const uint8_t THAS_EXT_LEN = 0x08;$/;"	v	file:
THAS_MULTI_INDEX	packetbb.cc	/^static const uint8_t THAS_MULTI_INDEX = 0x20;$/;"	v	file:
THAS_SINGLE_INDEX	packetbb.cc	/^static const uint8_t THAS_SINGLE_INDEX = 0x40;$/;"	v	file:
THAS_TYPE_EXT	packetbb.cc	/^static const uint8_t THAS_TYPE_EXT = 0x80;$/;"	v	file:
THAS_VALUE	packetbb.cc	/^static const uint8_t THAS_VALUE = 0x10;$/;"	v	file:
TIS_MULTIVALUE	packetbb.cc	/^static const uint8_t TIS_MULTIVALUE = 0x04;$/;"	v	file:
Tail	queue.h	/^typename Queue<Item>::ConstIterator Queue<Item>::Tail (void) const$/;"	f	class:ns3::Queue
TlvBack	packetbb.cc	/^PbbAddressBlock::TlvBack (void) const$/;"	f	class:ns3::PbbAddressBlock
TlvBack	packetbb.cc	/^PbbAddressBlock::TlvBack (void)$/;"	f	class:ns3::PbbAddressBlock
TlvBack	packetbb.cc	/^PbbMessage::TlvBack (void) const$/;"	f	class:ns3::PbbMessage
TlvBack	packetbb.cc	/^PbbMessage::TlvBack (void)$/;"	f	class:ns3::PbbMessage
TlvBack	packetbb.cc	/^PbbPacket::TlvBack (void) const$/;"	f	class:ns3::PbbPacket
TlvBack	packetbb.cc	/^PbbPacket::TlvBack (void)$/;"	f	class:ns3::PbbPacket
TlvBegin	packetbb.cc	/^PbbAddressBlock::TlvBegin (void) const$/;"	f	class:ns3::PbbAddressBlock
TlvBegin	packetbb.cc	/^PbbAddressBlock::TlvBegin (void)$/;"	f	class:ns3::PbbAddressBlock
TlvBegin	packetbb.cc	/^PbbMessage::TlvBegin (void) const$/;"	f	class:ns3::PbbMessage
TlvBegin	packetbb.cc	/^PbbMessage::TlvBegin (void)$/;"	f	class:ns3::PbbMessage
TlvBegin	packetbb.cc	/^PbbPacket::TlvBegin (void) const$/;"	f	class:ns3::PbbPacket
TlvBegin	packetbb.cc	/^PbbPacket::TlvBegin (void)$/;"	f	class:ns3::PbbPacket
TlvClear	packetbb.cc	/^PbbAddressBlock::TlvClear (void)$/;"	f	class:ns3::PbbAddressBlock
TlvClear	packetbb.cc	/^PbbMessage::TlvClear (void)$/;"	f	class:ns3::PbbMessage
TlvClear	packetbb.cc	/^PbbPacket::TlvClear (void)$/;"	f	class:ns3::PbbPacket
TlvEmpty	packetbb.cc	/^PbbAddressBlock::TlvEmpty (void) const$/;"	f	class:ns3::PbbAddressBlock
TlvEmpty	packetbb.cc	/^PbbMessage::TlvEmpty (void) const$/;"	f	class:ns3::PbbMessage
TlvEmpty	packetbb.cc	/^PbbPacket::TlvEmpty (void) const$/;"	f	class:ns3::PbbPacket
TlvEnd	packetbb.cc	/^PbbAddressBlock::TlvEnd (void) const$/;"	f	class:ns3::PbbAddressBlock
TlvEnd	packetbb.cc	/^PbbAddressBlock::TlvEnd (void)$/;"	f	class:ns3::PbbAddressBlock
TlvEnd	packetbb.cc	/^PbbMessage::TlvEnd (void) const$/;"	f	class:ns3::PbbMessage
TlvEnd	packetbb.cc	/^PbbMessage::TlvEnd (void)$/;"	f	class:ns3::PbbMessage
TlvEnd	packetbb.cc	/^PbbPacket::TlvEnd (void) const$/;"	f	class:ns3::PbbPacket
TlvEnd	packetbb.cc	/^PbbPacket::TlvEnd (void)$/;"	f	class:ns3::PbbPacket
TlvErase	packetbb.cc	/^PbbAddressBlock::TlvErase (PbbAddressBlock::TlvIterator first,$/;"	f	class:ns3::PbbAddressBlock
TlvErase	packetbb.cc	/^PbbAddressBlock::TlvErase (PbbAddressBlock::TlvIterator position)$/;"	f	class:ns3::PbbAddressBlock
TlvErase	packetbb.cc	/^PbbMessage::TlvErase (PbbMessage::TlvIterator first, PbbMessage::TlvIterator last)$/;"	f	class:ns3::PbbMessage
TlvErase	packetbb.cc	/^PbbMessage::TlvErase (PbbMessage::TlvIterator position)$/;"	f	class:ns3::PbbMessage
TlvFront	packetbb.cc	/^PbbAddressBlock::TlvFront (void) const$/;"	f	class:ns3::PbbAddressBlock
TlvFront	packetbb.cc	/^PbbAddressBlock::TlvFront (void)$/;"	f	class:ns3::PbbAddressBlock
TlvFront	packetbb.cc	/^PbbMessage::TlvFront (void) const$/;"	f	class:ns3::PbbMessage
TlvFront	packetbb.cc	/^PbbMessage::TlvFront (void)$/;"	f	class:ns3::PbbMessage
TlvFront	packetbb.cc	/^PbbPacket::TlvFront (void) const$/;"	f	class:ns3::PbbPacket
TlvFront	packetbb.cc	/^PbbPacket::TlvFront (void)$/;"	f	class:ns3::PbbPacket
TlvIterator	packetbb.h	/^  typedef PbbAddressTlvBlock::Iterator TlvIterator;$/;"	t	class:ns3::PbbAddressBlock
TlvIterator	packetbb.h	/^  typedef std::list< Ptr<PbbTlv> >::iterator TlvIterator;$/;"	t	class:ns3::PbbMessage
TlvIterator	packetbb.h	/^  typedef std::list< Ptr<PbbTlv> >::iterator TlvIterator;$/;"	t	class:ns3::PbbPacket
TlvPopBack	packetbb.cc	/^PbbAddressBlock::TlvPopBack (void)$/;"	f	class:ns3::PbbAddressBlock
TlvPopBack	packetbb.cc	/^PbbMessage::TlvPopBack (void)$/;"	f	class:ns3::PbbMessage
TlvPopBack	packetbb.cc	/^PbbPacket::TlvPopBack (void)$/;"	f	class:ns3::PbbPacket
TlvPopFront	packetbb.cc	/^PbbAddressBlock::TlvPopFront (void)$/;"	f	class:ns3::PbbAddressBlock
TlvPopFront	packetbb.cc	/^PbbMessage::TlvPopFront (void)$/;"	f	class:ns3::PbbMessage
TlvPopFront	packetbb.cc	/^PbbPacket::TlvPopFront (void)$/;"	f	class:ns3::PbbPacket
TlvPushBack	packetbb.cc	/^PbbAddressBlock::TlvPushBack (Ptr<PbbAddressTlv> tlv)$/;"	f	class:ns3::PbbAddressBlock
TlvPushBack	packetbb.cc	/^PbbMessage::TlvPushBack (Ptr<PbbTlv> tlv)$/;"	f	class:ns3::PbbMessage
TlvPushBack	packetbb.cc	/^PbbPacket::TlvPushBack (Ptr<PbbTlv> tlv)$/;"	f	class:ns3::PbbPacket
TlvPushFront	packetbb.cc	/^PbbAddressBlock::TlvPushFront (Ptr<PbbAddressTlv> tlv)$/;"	f	class:ns3::PbbAddressBlock
TlvPushFront	packetbb.cc	/^PbbMessage::TlvPushFront (Ptr<PbbTlv> tlv)$/;"	f	class:ns3::PbbMessage
TlvPushFront	packetbb.cc	/^PbbPacket::TlvPushFront (Ptr<PbbTlv> tlv)$/;"	f	class:ns3::PbbPacket
TlvSize	packetbb.cc	/^PbbAddressBlock::TlvSize (void) const$/;"	f	class:ns3::PbbAddressBlock
TlvSize	packetbb.cc	/^PbbMessage::TlvSize (void) const$/;"	f	class:ns3::PbbMessage
TlvSize	packetbb.cc	/^PbbPacket::TlvSize (void) const$/;"	f	class:ns3::PbbPacket
TraceSink	packet-probe.cc	/^PacketProbe::TraceSink (Ptr<const Packet> packet)$/;"	f	class:ns3::PacketProbe
TracedCallback	mac48-address.h	/^  typedef void (* TracedCallback)(Mac48Address value);$/;"	t	class:ns3::Mac48Address
TracedCallback	original_net-device.h	/^  typedef void (* TracedCallback) (Ptr<const QueueItem> item);$/;"	t	class:ns3::QueueItem
TracedCallback	packet-burst.h	/^  typedef void (* TracedCallback)(Ptr<const PacketBurst> burst);$/;"	t	class:ns3::PacketBurst
TracedCallback	queue-item.h	/^  typedef void (* TracedCallback) (Ptr<const QueueItem> item);$/;"	t	class:ns3::QueueItem
TracedValueCallback	sequence-number.h	/^namespace TracedValueCallback {$/;"	n	namespace:ns3
TransmitComplete	simple-net-device.cc	/^SimpleNetDevice::TransmitComplete ()$/;"	f	class:ns3::SimpleNetDevice
TransmitCompleteEvent	simple-net-device.h	/^  EventId TransmitCompleteEvent; \/\/!< the Tx Complete event$/;"	m	class:ns3::SimpleNetDevice
UINTMAX	dynamic-queue-limits.cc	/^static const uint32_t UINTMAX = std::numeric_limits<uint32_t>::max ();$/;"	v	file:
UNICAST_FROM_PEER_TO_ME	sll-header.h	/^    UNICAST_FROM_PEER_TO_ME = 0, \/**< the packet was specifically sent to us by somebody else *\/$/;"	e	enum:ns3::SllHeader::PacketType
Uint8Values	original_net-device.h	/^  enum Uint8Values$/;"	g	class:ns3::QueueItem
Uint8Values	queue-item.h	/^  enum Uint8Values$/;"	g	class:ns3::QueueItem
UnBlackList	simple-channel.cc	/^SimpleChannel::UnBlackList (Ptr<SimpleNetDevice> from, Ptr<SimpleNetDevice> to)$/;"	f	class:ns3::SimpleChannel
VERSION	packetbb.cc	/^static const uint8_t VERSION = 0;$/;"	v	file:
VERSION_MAJOR	pcap-file.cc	/^const uint16_t VERSION_MAJOR = 2;             \/**< Major version of supported pcap file format *\/$/;"	m	namespace:ns3	file:
VERSION_MINOR	pcap-file.cc	/^const uint16_t VERSION_MINOR = 4;             \/**< Minor version of supported pcap file format *\/$/;"	m	namespace:ns3	file:
VHT_FLAGS_BEAMFORMED	radiotap-header.h	/^    VHT_FLAGS_BEAMFORMED                   = 0x20, \/**< Set if beamforming is used (valid for SU PPDUs only). *\/$/;"	e	enum:ns3::RadiotapHeader::VhtFlags
VHT_FLAGS_GUARD_INTERVAL	radiotap-header.h	/^    VHT_FLAGS_GUARD_INTERVAL               = 0x04, \/**< Short guard interval *\/$/;"	e	enum:ns3::RadiotapHeader::VhtFlags
VHT_FLAGS_LDPC_EXTRA_OFDM_SYMBOL	radiotap-header.h	/^    VHT_FLAGS_LDPC_EXTRA_OFDM_SYMBOL       = 0x10, \/**< Set if one or more users are using LDPC and the encoding process resulted in extra OFDM symbol(s) *\/$/;"	e	enum:ns3::RadiotapHeader::VhtFlags
VHT_FLAGS_NONE	radiotap-header.h	/^    VHT_FLAGS_NONE                         = 0x00, \/**< No flags set *\/$/;"	e	enum:ns3::RadiotapHeader::VhtFlags
VHT_FLAGS_SHORT_GI_NSYM_DISAMBIGUATION	radiotap-header.h	/^    VHT_FLAGS_SHORT_GI_NSYM_DISAMBIGUATION = 0x08, \/**< Set if NSYM mod 10 = 9 (valid only if short GI is used).*\/$/;"	e	enum:ns3::RadiotapHeader::VhtFlags
VHT_FLAGS_STBC	radiotap-header.h	/^    VHT_FLAGS_STBC                         = 0x01, \/**< Set if all spatial streams of all users have space-time block coding *\/$/;"	e	enum:ns3::RadiotapHeader::VhtFlags
VHT_FLAGS_TXOP_PS_NOT_ALLOWED	radiotap-header.h	/^    VHT_FLAGS_TXOP_PS_NOT_ALLOWED          = 0x02, \/**< Set if STAs may not doze during TXOP (valid only for AP transmitters). *\/$/;"	e	enum:ns3::RadiotapHeader::VhtFlags
VHT_KNOWN_BANDWIDTH	radiotap-header.h	/^    VHT_KNOWN_BANDWIDTH                    = 0x0040, \/**< Bandwidth known *\/$/;"	e	enum:ns3::RadiotapHeader::VhtKnown
VHT_KNOWN_BEAMFORMED	radiotap-header.h	/^    VHT_KNOWN_BEAMFORMED                   = 0x0020, \/**< Beamformed known\/applicable (this flag should be set to zero for MU PPDUs). *\/$/;"	e	enum:ns3::RadiotapHeader::VhtKnown
VHT_KNOWN_GROUP_ID	radiotap-header.h	/^    VHT_KNOWN_GROUP_ID                     = 0x0080, \/**< Group ID known *\/$/;"	e	enum:ns3::RadiotapHeader::VhtKnown
VHT_KNOWN_GUARD_INTERVAL	radiotap-header.h	/^    VHT_KNOWN_GUARD_INTERVAL               = 0x0004, \/**< Guard interval *\/$/;"	e	enum:ns3::RadiotapHeader::VhtKnown
VHT_KNOWN_LDPC_EXTRA_OFDM_SYMBOL	radiotap-header.h	/^    VHT_KNOWN_LDPC_EXTRA_OFDM_SYMBOL       = 0x0010, \/**< LDPC extra OFDM symbol known *\/$/;"	e	enum:ns3::RadiotapHeader::VhtKnown
VHT_KNOWN_NONE	radiotap-header.h	/^    VHT_KNOWN_NONE                         = 0x0000, \/**< No flags set *\/$/;"	e	enum:ns3::RadiotapHeader::VhtKnown
VHT_KNOWN_PARTIAL_AID	radiotap-header.h	/^    VHT_KNOWN_PARTIAL_AID                  = 0x0100, \/**< Partial AID known\/applicable *\/$/;"	e	enum:ns3::RadiotapHeader::VhtKnown
VHT_KNOWN_SHORT_GI_NSYM_DISAMBIGUATION	radiotap-header.h	/^    VHT_KNOWN_SHORT_GI_NSYM_DISAMBIGUATION = 0x0008, \/**< Short GI NSYM disambiguation known *\/$/;"	e	enum:ns3::RadiotapHeader::VhtKnown
VHT_KNOWN_STBC	radiotap-header.h	/^    VHT_KNOWN_STBC                         = 0x0001, \/**< Space-time block coding (1 if all spatial streams of all users have STBC, 0 otherwise). *\/$/;"	e	enum:ns3::RadiotapHeader::VhtKnown
VHT_KNOWN_TXOP_PS_NOT_ALLOWED	radiotap-header.h	/^    VHT_KNOWN_TXOP_PS_NOT_ALLOWED          = 0x0002, \/**< TXOP_PS_NOT_ALLOWED known *\/$/;"	e	enum:ns3::RadiotapHeader::VhtKnown
VLAN	ethernet-header.h	/^  VLAN,       \/**< Single tagged packet. Header includes VLAN tag *\/$/;"	e	enum:ns3::ethernet_header_t
VhtFlags	radiotap-header.h	/^  enum VhtFlags$/;"	g	class:ns3::RadiotapHeader
VhtKnown	radiotap-header.h	/^  enum VhtKnown$/;"	g	class:ns3::RadiotapHeader
Wake	net-device-queue-interface.cc	/^NetDeviceQueue::Wake (void)$/;"	f	class:ns3::NetDeviceQueue
Wake	original_net-device.cc	/^NetDeviceQueue::Wake (void)$/;"	f	class:ns3::NetDeviceQueue
WakeCallback	net-device-queue-interface.h	/^  typedef Callback< void > WakeCallback;$/;"	t	class:ns3::NetDeviceQueue
WakeCallback	original_net-device.h	/^  typedef Callback< void > WakeCallback;$/;"	t	class:ns3::NetDeviceQueue
Write	pcap-file-wrapper.cc	/^PcapFileWrapper::Write (Time t, Ptr<const Packet> p)$/;"	f	class:ns3::PcapFileWrapper
Write	pcap-file-wrapper.cc	/^PcapFileWrapper::Write (Time t, const Header &header, Ptr<const Packet> p)$/;"	f	class:ns3::PcapFileWrapper
Write	pcap-file-wrapper.cc	/^PcapFileWrapper::Write (Time t, uint8_t const *buffer, uint32_t length)$/;"	f	class:ns3::PcapFileWrapper
Write	pcap-file.cc	/^PcapFile::Write (uint32_t tsSec, uint32_t tsUsec, Ptr<const Packet> p)$/;"	f	class:ns3::PcapFile
Write	pcap-file.cc	/^PcapFile::Write (uint32_t tsSec, uint32_t tsUsec, const Header &header, Ptr<const Packet> p)$/;"	f	class:ns3::PcapFile
Write	pcap-file.cc	/^PcapFile::Write (uint32_t tsSec, uint32_t tsUsec, uint8_t const * const data, uint32_t totalLen)$/;"	f	class:ns3::PcapFile
WriteFileHeader	pcap-file.cc	/^PcapFile::WriteFileHeader (void)$/;"	f	class:ns3::PcapFile
WritePacketHeader	pcap-file.cc	/^PcapFile::WritePacketHeader (uint32_t tsSec, uint32_t tsUsec, uint32_t totalLen)$/;"	f	class:ns3::PcapFile
WriteTo	address-utils.cc	/^void WriteTo (Buffer::Iterator &i, Ipv4Address ad)$/;"	f	namespace:ns3
WriteTo	address-utils.cc	/^void WriteTo (Buffer::Iterator &i, Ipv6Address ad)$/;"	f	namespace:ns3
WriteTo	address-utils.cc	/^void WriteTo (Buffer::Iterator &i, Mac16Address ad)$/;"	f	namespace:ns3
WriteTo	address-utils.cc	/^void WriteTo (Buffer::Iterator &i, Mac48Address ad)$/;"	f	namespace:ns3
WriteTo	address-utils.cc	/^void WriteTo (Buffer::Iterator &i, Mac64Address ad)$/;"	f	namespace:ns3
WriteTo	address-utils.cc	/^void WriteTo (Buffer::Iterator &i, const Address &ad)$/;"	f	namespace:ns3
ZONE_DEFAULT	pcap-file.h	/^  static const int32_t  ZONE_DEFAULT    = 0;           \/**< Time zone offset for current location *\/$/;"	m	class:ns3::PcapFile
__DEPRECATED	sgi-hashmap.h	46;"	d
__DEPRECATED	sgi-hashmap.h	51;"	d
__DEPRECATED	sgi-hashmap.h	56;"	d
addressUtils	address-utils.cc	/^namespace addressUtils {$/;"	n	namespace:ns3	file:
addressUtils	address-utils.h	/^namespace addressUtils {$/;"	n	namespace:ns3
crc32table	crc32.cc	/^static uint32_t crc32table[256] = {$/;"	m	namespace:ns3	file:
ethernet_header_t	ethernet-header.h	/^enum ethernet_header_t {$/;"	g	namespace:ns3
lookuphash	ipv6-address.cc	/^static uint32_t lookuphash (unsigned char* k, uint32_t length, uint32_t level)$/;"	f	file:
m_addrSize	packetbb.h	/^  PbbAddressLength m_addrSize; \/\/!< the address size$/;"	m	class:ns3::PbbMessage
m_address	ipv4-address.h	/^  uint32_t m_address; \/\/!< IPv4 address$/;"	m	class:ns3::Ipv4Address
m_address	ipv6-address.h	/^  uint8_t m_address[16];$/;"	m	class:ns3::Ipv6Address
m_address	mac16-address.h	/^  uint8_t m_address[2]; \/\/!< address value$/;"	m	class:ns3::Mac16Address
m_address	mac48-address.h	/^  uint8_t m_address[6]; \/\/!< address value$/;"	m	class:ns3::Mac48Address
m_address	mac64-address.h	/^  uint8_t m_address[8]; \/\/!< address value$/;"	m	class:ns3::Mac64Address
m_address	packet-socket-address.h	/^  Address m_address;      \/\/!< Destination address$/;"	m	class:ns3::PacketSocketAddress
m_address	queue-item.h	/^  Address m_address;      \/\/!< MAC destination address$/;"	m	class:ns3::QueueDiscItem
m_address	simple-net-device.h	/^  Mac48Address m_address; \/\/!< MAC address$/;"	m	class:ns3::SimpleNetDevice
m_address	sll-header.h	/^  uint64_t m_address;       \/**< Address *\/$/;"	m	class:ns3::SllHeader
m_addressBlockList	packetbb.h	/^  std::list< Ptr<PbbAddressBlock> > m_addressBlockList; \/\/!< PbbAddressBlock container$/;"	m	class:ns3::PbbMessage
m_addressLength	sll-header.h	/^  uint16_t m_addressLength; \/**< Address length *\/$/;"	m	class:ns3::SllHeader
m_addressList	packetbb.h	/^  std::list<Address> m_addressList; \/\/!< Addreses container$/;"	m	class:ns3::PbbAddressBlock
m_addressTlvList	packetbb.h	/^  PbbAddressTlvBlock m_addressTlvList; \/\/!< PbbAddressTlv container$/;"	m	class:ns3::PbbAddressBlock
m_adjLimit	dynamic-queue-limits.h	/^  uint32_t m_adjLimit;                  \/\/!< limit + num_completed$/;"	m	class:ns3::DynamicQueueLimits
m_ampduStatusCRC	radiotap-header.h	/^  uint8_t m_ampduStatusCRC;       \/\/!< A-MPDU Status Flags, delimiter CRC value.$/;"	m	class:ns3::RadiotapHeader
m_ampduStatusFlags	radiotap-header.h	/^  uint16_t m_ampduStatusFlags;    \/\/!< A-MPDU Status Flags, information about the received A-MPDU.$/;"	m	class:ns3::RadiotapHeader
m_ampduStatusPad	radiotap-header.h	/^  uint8_t m_ampduStatusPad;       \/\/!< A-MPDU Status Flags, padding before A-MPDU Status Field.$/;"	m	class:ns3::RadiotapHeader
m_ampduStatusRef	radiotap-header.h	/^  uint32_t m_ampduStatusRef;      \/\/!< A-MPDU Status Flags, reference number.$/;"	m	class:ns3::RadiotapHeader
m_antennaNoise	radiotap-header.h	/^  int8_t m_antennaNoise;    \/\/!< RF noise power at the antenna, dB difference from an arbitrary, fixed reference.$/;"	m	class:ns3::RadiotapHeader
m_antennaSignal	radiotap-header.h	/^  int8_t m_antennaSignal;   \/\/!< RF signal power at the antenna, dB difference from an arbitrary, fixed reference.$/;"	m	class:ns3::RadiotapHeader
m_arphdType	sll-header.h	/^  uint16_t m_arphdType;     \/**< ARP protocol hardware identifier *\/$/;"	m	class:ns3::SllHeader
m_blackListedDevices	simple-channel.h	/^  std::map<Ptr<SimpleNetDevice>, std::vector<Ptr<SimpleNetDevice> > > m_blackListedDevices; \/\/!< devices blocked on a device$/;"	m	class:ns3::SimpleChannel
m_bps	data-rate.h	/^  uint64_t m_bps; \/\/!< data rate [bps]$/;"	m	class:ns3::DataRate
m_bps	simple-net-device.h	/^  DataRate m_bps; \/\/!< The device nominal Data rate. Zero means infinite$/;"	m	class:ns3::SimpleNetDevice
m_burstRate	error-model.h	/^  double m_burstRate;                         \/\/!< the burst error event$/;"	m	class:ns3::BurstErrorModel
m_burstSize	error-model.h	/^  Ptr<RandomVariableStream> m_burstSize;      \/\/!< the number of packets being flagged as errored$/;"	m	class:ns3::BurstErrorModel
m_burstStart	error-model.h	/^  Ptr<RandomVariableStream> m_burstStart;     \/\/!< the error decision variable$/;"	m	class:ns3::BurstErrorModel
m_bytesRx	packet-socket-server.h	/^  uint32_t m_bytesRx;  \/\/!< Total bytes received$/;"	m	class:ns3::PacketSocketServer
m_calcFcs	ethernet-trailer.h	/^  bool m_calcFcs;$/;"	m	class:ns3::EthernetTrailer
m_channel	simple-net-device.h	/^  Ptr<SimpleChannel> m_channel; \/\/!< the channel the device is connected to$/;"	m	class:ns3::SimpleNetDevice
m_channelFlags	radiotap-header.h	/^  uint16_t m_channelFlags;  \/\/!< Tx\/Rx channel flags.$/;"	m	class:ns3::RadiotapHeader
m_channelFreq	radiotap-header.h	/^  uint16_t m_channelFreq;   \/\/!< Tx\/Rx frequency in MHz.$/;"	m	class:ns3::RadiotapHeader
m_channelPad	radiotap-header.h	/^  uint8_t m_channelPad;     \/\/!< Tx\/Rx channel padding.$/;"	m	class:ns3::RadiotapHeader
m_counter	error-model.h	/^  uint32_t m_counter;$/;"	m	class:ns3::BurstErrorModel
m_counter	error-model.h	/^  uint8_t m_counter; \/\/!< internal state counter.$/;"	m	class:ns3::BinaryErrorModel
m_currentBurstSz	error-model.h	/^  uint32_t m_currentBurstSz;                  \/\/!< the current burst size$/;"	m	class:ns3::BurstErrorModel
m_data	address.h	/^  uint8_t m_data[MAX_SIZE]; \/\/!< The address value$/;"	m	class:ns3::Address
m_delay	simple-channel.h	/^  Time m_delay; \/\/!< The assigned speed-of-light delay of the channel$/;"	m	class:ns3::SimpleChannel
m_deliveryQueue	packet-socket.h	/^  std::queue<std::pair<Ptr<Packet>, Address> > m_deliveryQueue; \/\/!< Rx queue$/;"	m	class:ns3::PacketSocket
m_destAddr	packet-socket.h	/^  Address m_destAddr;       \/\/!< Default destination address$/;"	m	class:ns3::PacketSocket
m_destAddr	packet-socket.h	/^  Address m_destAddr; \/\/!< Destination address$/;"	m	class:ns3::PacketSocketTag
m_destination	ethernet-header.h	/^  Mac48Address m_destination;   \/\/!< Destination address$/;"	m	class:ns3::EthernetHeader
m_destroyable	output-stream-wrapper.h	/^  bool m_destroyable; \/\/!< Can be destroyed$/;"	m	class:ns3::OutputStreamWrapper
m_device	packet-socket-address.h	/^  uint32_t m_device;      \/\/!< Outgoing NetDevice index$/;"	m	class:ns3::PacketSocketAddress
m_device	packet-socket.h	/^  uint32_t m_device;        \/\/!< index of the bound NetDevice$/;"	m	class:ns3::PacketSocket
m_deviceName	packet-socket.h	/^  std::string m_deviceName; \/\/!< Device name$/;"	m	class:ns3::DeviceNameTag
m_devices	error-channel.h	/^  std::vector<Ptr<SimpleNetDevice> > m_devices; \/\/!< devices connected by the channel$/;"	m	class:ns3::ErrorChannel
m_devices	simple-channel.h	/^  std::vector<Ptr<SimpleNetDevice> > m_devices; \/\/!< devices connected by the channel$/;"	m	class:ns3::SimpleChannel
m_dropCallback	original_queue.h	/^  DropCallback m_dropCallback;        \/\/!< drop callback$/;"	m	class:ns3::Queue1
m_dropTrace	packet-socket.h	/^  TracedCallback<Ptr<const Packet> > m_dropTrace;$/;"	m	class:ns3::PacketSocket
m_dst	simple-net-device.cc	/^  Mac48Address m_dst; \/\/!< destination address$/;"	m	class:ns3::SimpleTag	file:
m_duplicate	error-channel.h	/^  bool m_duplicate;         \/\/!< Flag for Duplicate mode.$/;"	m	class:ns3::ErrorChannel
m_duplicateState	error-channel.h	/^  uint8_t m_duplicateState; \/\/!< Counter for even\/odd packets in Duplicate mode.$/;"	m	class:ns3::ErrorChannel
m_duplicateTime	error-channel.h	/^  Time m_duplicateTime;     \/\/!< Duplicate time in Duplicate mode.$/;"	m	class:ns3::ErrorChannel
m_enPreambleSfd	ethernet-header.h	/^  bool m_enPreambleSfd;$/;"	m	class:ns3::EthernetHeader
m_enable	error-model.h	/^  bool m_enable; \/\/!< True if the error model is enabled$/;"	m	class:ns3::ErrorModel
m_errno	packet-socket.h	/^  mutable enum SocketErrno m_errno; \/\/!< Socket error code$/;"	m	class:ns3::PacketSocket	typeref:enum:ns3::PacketSocket::SocketErrno
m_etherType	llc-snap-header.h	/^  uint16_t m_etherType; \/\/!< the Ethertype$/;"	m	class:ns3::LlcSnapHeader
m_fcs	ethernet-trailer.h	/^  uint32_t m_fcs; \/\/!< Value of the fcs contained in the trailer$/;"	m	class:ns3::EthernetTrailer
m_file	ascii-file.h	/^  std::fstream   m_file;     \/\/!< output file$/;"	m	class:ns3::AsciiFile
m_file	pcap-file-wrapper.h	/^  PcapFile m_file; \/\/!< Pcap file$/;"	m	class:ns3::PcapFileWrapper
m_file	pcap-file.h	/^  std::fstream   m_file;        \/\/!< file stream$/;"	m	class:ns3::PcapFile
m_fileHeader	pcap-file.h	/^  PcapFileHeader m_fileHeader;  \/\/!< file header$/;"	m	class:ns3::PcapFile
m_filename	ascii-file.h	/^  std::string    m_filename; \/\/!< output file name$/;"	m	class:ns3::AsciiFile
m_filename	pcap-file.h	/^  std::string    m_filename;    \/\/!< file name$/;"	m	class:ns3::PcapFile
m_flags	radiotap-header.h	/^  uint8_t m_flags;          \/\/!< Properties of transmitted and received frames.$/;"	m	class:ns3::RadiotapHeader
m_flowId	flow-id-tag.h	/^  uint32_t m_flowId; \/\/!< Flow ID$/;"	m	class:ns3::FlowIdTag
m_hasHopCount	packetbb.h	/^  bool m_hasHopCount; \/\/!< Hop count present$/;"	m	class:ns3::PbbMessage
m_hasHopLimit	packetbb.h	/^  bool m_hasHopLimit; \/\/!< Hop limit present$/;"	m	class:ns3::PbbMessage
m_hasIndexStart	packetbb.h	/^  bool m_hasIndexStart; \/\/!< Start index present.$/;"	m	class:ns3::PbbTlv
m_hasIndexStop	packetbb.h	/^  bool m_hasIndexStop; \/\/!< Stop index present.$/;"	m	class:ns3::PbbTlv
m_hasOriginatorAddress	packetbb.h	/^  bool m_hasOriginatorAddress; \/\/!< Originator address present$/;"	m	class:ns3::PbbMessage
m_hasSequenceNumber	packetbb.h	/^  bool m_hasSequenceNumber;  \/\/!< Sequence number present$/;"	m	class:ns3::PbbMessage
m_hasTypeExt	packetbb.h	/^  bool m_hasTypeExt; \/\/!< Extended type present.$/;"	m	class:ns3::PbbTlv
m_hasValue	packetbb.h	/^  bool m_hasValue;     \/\/!< Has value.$/;"	m	class:ns3::PbbTlv
m_hasseqnum	packetbb.h	/^  bool m_hasseqnum; \/\/!< Sequence number present$/;"	m	class:ns3::PbbPacket
m_hopCount	packetbb.h	/^  uint8_t m_hopCount; \/\/!< Hop count$/;"	m	class:ns3::PbbMessage
m_hopLimit	packetbb.h	/^  uint8_t m_hopLimit; \/\/!< Hop limit$/;"	m	class:ns3::PbbMessage
m_ifIndex	simple-net-device.h	/^  uint32_t m_ifIndex; \/\/!< Interface index$/;"	m	class:ns3::SimpleNetDevice
m_inclLen	pcap-file.h	/^    uint32_t m_inclLen;       \/**< number of octets of packet saved in file *\/$/;"	m	struct:ns3::PcapFile::__anon2
m_indexStart	packetbb.h	/^  uint8_t m_indexStart; \/\/!< Start index.$/;"	m	class:ns3::PbbTlv
m_indexStop	packetbb.h	/^  uint8_t m_indexStop; \/\/!< Stop index.$/;"	m	class:ns3::PbbTlv
m_interval	packet-socket-client.h	/^  Time m_interval;       \/\/!< Packet inter-send time$/;"	m	class:ns3::PacketSocketClient
m_ipv4	inet-socket-address.h	/^  Ipv4Address m_ipv4; \/\/!< the IPv4 address$/;"	m	class:ns3::InetSocketAddress
m_ipv6	inet6-socket-address.h	/^  Ipv6Address m_ipv6;$/;"	m	class:ns3::Inet6SocketAddress
m_isMultivalue	packetbb.h	/^  bool m_isMultivalue; \/\/!< Is multivalue.$/;"	m	class:ns3::PbbTlv
m_isSingleDevice	packet-socket-address.h	/^  bool m_isSingleDevice;  \/\/!< True if directed to a specific outgoing NetDevice$/;"	m	class:ns3::PacketSocketAddress
m_isSingleDevice	packet-socket.h	/^  bool m_isSingleDevice;    \/\/!< Is bound to a single netDevice$/;"	m	class:ns3::PacketSocket
m_jumping	error-channel.h	/^  bool m_jumping;           \/\/!< Flag for Jumping mode.$/;"	m	class:ns3::ErrorChannel
m_jumpingState	error-channel.h	/^  uint8_t m_jumpingState;   \/\/!< Counter for even\/odd packets in Jumping mode.$/;"	m	class:ns3::ErrorChannel
m_jumpingTime	error-channel.h	/^  Time m_jumpingTime;       \/\/!< Delay time in Jumping mode.$/;"	m	class:ns3::ErrorChannel
m_lastObjCnt	dynamic-queue-limits.h	/^  uint32_t m_lastObjCnt;                \/\/!< Count at last queuing$/;"	m	class:ns3::DynamicQueueLimits
m_lateTxQueuesCreation	net-device-queue-interface.h	/^  bool m_lateTxQueuesCreation;   \/\/!< True if a device wants to create the TX queues by itself$/;"	m	class:ns3::NetDeviceQueueInterface
m_len	address.h	/^  uint8_t m_len;  \/\/!< Length of the address$/;"	m	class:ns3::Address
m_length	radiotap-header.h	/^  uint16_t m_length;        \/\/!< entire length of radiotap data + header$/;"	m	class:ns3::RadiotapHeader
m_lengthType	ethernet-header.h	/^  uint16_t m_lengthType;      \/\/!< Length or type of the packet$/;"	m	class:ns3::EthernetHeader
m_limit	dynamic-queue-limits.h	/^  TracedValue<uint32_t> m_limit;        \/\/!< Current limit$/;"	m	class:ns3::DynamicQueueLimits
m_linkChangeCallbacks	simple-net-device.h	/^  TracedCallback<> m_linkChangeCallbacks;$/;"	m	class:ns3::SimpleNetDevice
m_linkUp	simple-net-device.h	/^  bool m_linkUp; \/\/!< Flag indicating whether or not the link is up$/;"	m	class:ns3::SimpleNetDevice
m_localAddress	packet-socket-server.h	/^  PacketSocketAddress m_localAddress; \/\/!< Local address$/;"	m	class:ns3::PacketSocketServer
m_localAddressSet	packet-socket-server.h	/^  bool m_localAddressSet; \/\/!< Sanity check$/;"	m	class:ns3::PacketSocketServer
m_lowestSlack	dynamic-queue-limits.h	/^  uint32_t m_lowestSlack;               \/\/!< Lowest slack found$/;"	m	class:ns3::DynamicQueueLimits
m_magicNumber	pcap-file.h	/^    uint32_t m_magicNumber;   \/**< Magic number identifying this as a pcap file *\/$/;"	m	struct:ns3::PcapFile::__anon1
m_mask	ipv4-address.h	/^  uint32_t m_mask; \/\/!< IP mask$/;"	m	class:ns3::Ipv4Mask
m_maxBytes	original_queue.h	/^  uint32_t m_maxBytes;                \/\/!< max bytes in the queue$/;"	m	class:ns3::Queue1
m_maxBytes	queue.h	/^  uint32_t m_maxBytes;                \/\/!< max bytes in the queue$/;"	m	class:ns3::QueueBase
m_maxLimit	dynamic-queue-limits.h	/^  uint32_t m_maxLimit;                  \/\/!< Max limit$/;"	m	class:ns3::DynamicQueueLimits
m_maxPackets	original_queue.h	/^  uint32_t m_maxPackets;              \/\/!< max packets in the queue$/;"	m	class:ns3::Queue1
m_maxPackets	packet-socket-client.h	/^  uint32_t m_maxPackets; \/\/!< Maximum number of packets the application will send$/;"	m	class:ns3::PacketSocketClient
m_maxPackets	queue.h	/^  uint32_t m_maxPackets;              \/\/!< max packets in the queue$/;"	m	class:ns3::QueueBase
m_mcsFlags	radiotap-header.h	/^  uint8_t m_mcsFlags; \/\/!< MCS Flags, flags field.$/;"	m	class:ns3::RadiotapHeader
m_mcsKnown	radiotap-header.h	/^  uint8_t m_mcsKnown; \/\/!< MCS Flags, known information field.$/;"	m	class:ns3::RadiotapHeader
m_mcsRate	radiotap-header.h	/^  uint8_t m_mcsRate;  \/\/!< MCS Flags, mcs rate index.$/;"	m	class:ns3::RadiotapHeader
m_messageList	packetbb.h	/^  std::list< Ptr<PbbMessage> > m_messageList; \/\/!< PbbTlvBlock container$/;"	m	class:ns3::PbbPacket
m_minLimit	dynamic-queue-limits.h	/^  uint32_t m_minLimit;                  \/\/!< Minimum limit$/;"	m	class:ns3::DynamicQueueLimits
m_mode	original_queue.h	/^  QueueMode m_mode;                   \/\/!< queue mode (packets or bytes limited)$/;"	m	class:ns3::Queue1
m_mode	queue.h	/^  QueueMode m_mode;                   \/\/!< queue mode (packets or bytes)$/;"	m	class:ns3::QueueBase
m_mtu	simple-net-device.h	/^  uint16_t m_mtu;   \/\/!< MTU$/;"	m	class:ns3::SimpleNetDevice
m_nBytes	original_queue.h	/^  TracedValue<uint32_t> m_nBytes;   \/\/!< Number of bytes in the queue$/;"	m	class:ns3::Queue1
m_nBytes	queue.h	/^  TracedValue<uint32_t> m_nBytes;               \/\/!< Number of bytes in the queue$/;"	m	class:ns3::QueueBase
m_nPackets	original_queue.h	/^  TracedValue<uint32_t> m_nPackets; \/\/!< Number of packets in the queue$/;"	m	class:ns3::Queue1
m_nPackets	queue.h	/^  TracedValue<uint32_t> m_nPackets;             \/\/!< Number of packets in the queue$/;"	m	class:ns3::QueueBase
m_nTotalDroppedBytes	original_queue.h	/^  uint32_t m_nTotalDroppedBytes;    \/\/!< Total dropped bytes$/;"	m	class:ns3::Queue1
m_nTotalDroppedBytes	queue.h	/^  uint32_t m_nTotalDroppedBytes;                \/\/!< Total dropped bytes$/;"	m	class:ns3::QueueBase
m_nTotalDroppedBytesAfterDequeue	queue.h	/^  uint32_t m_nTotalDroppedBytesAfterDequeue;    \/\/!< Total dropped bytes after dequeue$/;"	m	class:ns3::QueueBase
m_nTotalDroppedBytesBeforeEnqueue	queue.h	/^  uint32_t m_nTotalDroppedBytesBeforeEnqueue;   \/\/!< Total dropped bytes before enqueue$/;"	m	class:ns3::QueueBase
m_nTotalDroppedPackets	original_queue.h	/^  uint32_t m_nTotalDroppedPackets;  \/\/!< Total dropped packets$/;"	m	class:ns3::Queue1
m_nTotalDroppedPackets	queue.h	/^  uint32_t m_nTotalDroppedPackets;              \/\/!< Total dropped packets$/;"	m	class:ns3::QueueBase
m_nTotalDroppedPacketsAfterDequeue	queue.h	/^  uint32_t m_nTotalDroppedPacketsAfterDequeue;  \/\/!< Total dropped packets after dequeue$/;"	m	class:ns3::QueueBase
m_nTotalDroppedPacketsBeforeEnqueue	queue.h	/^  uint32_t m_nTotalDroppedPacketsBeforeEnqueue; \/\/!< Total dropped packets before enqueue$/;"	m	class:ns3::QueueBase
m_nTotalReceivedBytes	original_queue.h	/^  uint32_t m_nTotalReceivedBytes;   \/\/!< Total received bytes$/;"	m	class:ns3::Queue1
m_nTotalReceivedBytes	queue.h	/^  uint32_t m_nTotalReceivedBytes;               \/\/!< Total received bytes$/;"	m	class:ns3::QueueBase
m_nTotalReceivedPackets	original_queue.h	/^  uint32_t m_nTotalReceivedPackets; \/\/!< Total received packets$/;"	m	class:ns3::Queue1
m_nTotalReceivedPackets	queue.h	/^  uint32_t m_nTotalReceivedPackets;             \/\/!< Total received packets$/;"	m	class:ns3::QueueBase
m_nanosecMode	pcap-file-wrapper.h	/^  bool     m_nanosecMode; \/\/!< Timestamps in nanosecond mode$/;"	m	class:ns3::PcapFileWrapper
m_nanosecMode	pcap-file.h	/^  bool m_nanosecMode;           \/\/!< nanosecond timestamp mode$/;"	m	class:ns3::PcapFile
m_node	packet-socket.h	/^  Ptr<Node> m_node;         \/\/!< the associated node$/;"	m	class:ns3::PacketSocket
m_node	simple-net-device.h	/^  Ptr<Node> m_node; \/\/!< Node this netDevice is associated to$/;"	m	class:ns3::SimpleNetDevice
m_numCompleted	dynamic-queue-limits.h	/^  uint32_t m_numCompleted;              \/\/!< Total ever completed$/;"	m	class:ns3::DynamicQueueLimits
m_numQueued	dynamic-queue-limits.h	/^  uint32_t m_numQueued;                 \/\/!< Total ever queued$/;"	m	class:ns3::DynamicQueueLimits
m_numTxQueues	net-device-queue-interface.h	/^  uint8_t m_numTxQueues;   \/\/!< Number of transmission queues to create$/;"	m	class:ns3::NetDeviceQueueInterface
m_numTxQueues	original_net-device.h	/^  uint8_t m_numTxQueues;   \/\/!< Number of transmission queues to create$/;"	m	class:ns3::NetDeviceQueueInterface
m_origLen	pcap-file.h	/^    uint32_t m_origLen;       \/**< actual length of original packet *\/$/;"	m	struct:ns3::PcapFile::__anon2
m_originatorAddress	packetbb.h	/^  Address m_originatorAddress; \/\/!< originator address$/;"	m	class:ns3::PbbMessage
m_ostream	output-stream-wrapper.h	/^  std::ostream *m_ostream; \/\/!< The output stream$/;"	m	class:ns3::OutputStreamWrapper
m_output	packet-probe.h	/^  TracedCallback<Ptr<const Packet> > m_output;$/;"	m	class:ns3::PacketProbe
m_outputBytes	packet-probe.h	/^  TracedCallback<uint32_t, uint32_t> m_outputBytes;$/;"	m	class:ns3::PacketProbe
m_packet	original_net-device.h	/^  Ptr<Packet> m_packet;$/;"	m	class:ns3::QueueItem
m_packet	packet-probe.h	/^  Ptr<const Packet> m_packet;$/;"	m	class:ns3::PacketProbe
m_packet	queue-item.h	/^  Ptr<Packet> m_packet;$/;"	m	class:ns3::QueueItem
m_packetList	error-model.h	/^  PacketList m_packetList; \/\/!< container of Uid of packets to corrupt$/;"	m	class:ns3::ListErrorModel
m_packetList	error-model.h	/^  PacketList m_packetList; \/\/!< container of sequence number of packets to corrupt$/;"	m	class:ns3::ReceiveListErrorModel
m_packetSizeOld	packet-probe.h	/^  uint32_t m_packetSizeOld;$/;"	m	class:ns3::PacketProbe
m_packetType	packet-socket.h	/^  NetDevice::PacketType m_packetType; \/\/!< Packet type$/;"	m	class:ns3::PacketSocketTag
m_packetType	sll-header.h	/^  PacketType m_packetType;  \/**< Packet type *\/$/;"	m	class:ns3::SllHeader
m_packets	original_drop-tail-queue.h	/^  std::queue<Ptr<QueueItem1> > m_packets; \/\/!< the items in the queue$/;"	m	class:ns3::DropTailQueue1
m_packets	packet-burst.h	/^  std::list<Ptr<Packet> > m_packets; \/\/!< the list of packets in the burst$/;"	m	class:ns3::PacketBurst
m_packets	queue.h	/^  std::list<Ptr<Item> > m_packets;          \/\/!< the items in the queue$/;"	m	class:ns3::Queue
m_peerAddress	packet-socket-client.h	/^  PacketSocketAddress m_peerAddress; \/\/!< Remote peer address$/;"	m	class:ns3::PacketSocketClient
m_peerAddressSet	packet-socket-client.h	/^  bool m_peerAddressSet; \/\/!< Sanity check$/;"	m	class:ns3::PacketSocketClient
m_phyRxDropTrace	simple-net-device.h	/^  TracedCallback<Ptr<const Packet> > m_phyRxDropTrace;$/;"	m	class:ns3::SimpleNetDevice
m_pktRx	packet-socket-server.h	/^  uint32_t m_pktRx;    \/\/!< The number of received packets$/;"	m	class:ns3::PacketSocketServer
m_pointToPointMode	simple-net-device.h	/^  bool m_pointToPointMode;$/;"	m	class:ns3::SimpleNetDevice
m_port	inet-socket-address.h	/^  uint16_t m_port;    \/\/!< the port$/;"	m	class:ns3::InetSocketAddress
m_port	inet6-socket-address.h	/^  uint16_t m_port;$/;"	m	class:ns3::Inet6SocketAddress
m_preambleSfd	ethernet-header.h	/^  uint64_t m_preambleSfd;     \/\/!< Value of the Preamble\/SFD fields$/;"	m	class:ns3::EthernetHeader
m_prefix	ipv6-address.h	/^  uint8_t m_prefix[16];$/;"	m	class:ns3::Ipv6Prefix
m_prefixList	packetbb.h	/^  std::list<uint8_t> m_prefixList; \/\/!< Prefixes container$/;"	m	class:ns3::PbbAddressBlock
m_present	radiotap-header.h	/^  uint32_t m_present;       \/\/!< bits describing which fields follow header$/;"	m	class:ns3::RadiotapHeader
m_prevLastObjCnt	dynamic-queue-limits.h	/^  uint32_t m_prevLastObjCnt;            \/\/!< Previous queuing cnt$/;"	m	class:ns3::DynamicQueueLimits
m_prevNumQueued	dynamic-queue-limits.h	/^  uint32_t m_prevNumQueued;             \/\/!< Previous queue total$/;"	m	class:ns3::DynamicQueueLimits
m_prevOvlimit	dynamic-queue-limits.h	/^  uint32_t m_prevOvlimit;               \/\/!< Previous over limit$/;"	m	class:ns3::DynamicQueueLimits
m_priority	packet-socket-client.h	/^  uint8_t m_priority;    \/\/!< Priority of the sent packets$/;"	m	class:ns3::PacketSocketClient
m_promiscCallback	simple-net-device.h	/^  NetDevice::PromiscReceiveCallback m_promiscCallback; \/\/!< Promiscuous receive callback$/;"	m	class:ns3::SimpleNetDevice
m_protocol	packet-socket-address.h	/^  uint16_t m_protocol;    \/\/!< Protocol$/;"	m	class:ns3::PacketSocketAddress
m_protocol	packet-socket.h	/^  uint16_t m_protocol;      \/\/!< Socket protocol$/;"	m	class:ns3::PacketSocket
m_protocol	queue-item.h	/^  uint16_t m_protocol;    \/\/!< L3 Protocol number$/;"	m	class:ns3::QueueDiscItem
m_protocolNumber	simple-net-device.cc	/^  uint16_t m_protocolNumber; \/\/!< protocol number$/;"	m	class:ns3::SimpleTag	file:
m_protocolType	sll-header.h	/^  uint16_t m_protocolType;  \/**< protocol type *\/$/;"	m	class:ns3::SllHeader
m_queue	simple-net-device.h	/^  Ptr<Queue<Packet> > m_queue; \/\/!< The Queue for outgoing packets.$/;"	m	class:ns3::SimpleNetDevice
m_queueInterface	simple-net-device.h	/^  Ptr<NetDeviceQueueInterface> m_queueInterface;   \/\/!< NetDevice queue interface$/;"	m	class:ns3::SimpleNetDevice
m_queueLimits	net-device-queue-interface.h	/^  Ptr<QueueLimits> m_queueLimits; \/\/!< Queue limits object$/;"	m	class:ns3::NetDeviceQueue
m_queueLimits	original_net-device.h	/^  Ptr<QueueLimits> m_queueLimits; \/\/!< Queue limits object$/;"	m	class:ns3::NetDeviceQueue
m_ranvar	error-model.h	/^  Ptr<RandomVariableStream> m_ranvar; \/\/!< rng stream$/;"	m	class:ns3::RateErrorModel
m_rate	error-model.h	/^  double m_rate; \/\/!< Error rate$/;"	m	class:ns3::RateErrorModel
m_rate	radiotap-header.h	/^  uint8_t m_rate;           \/\/!< TX\/RX data rate in units of 500 kbps$/;"	m	class:ns3::RadiotapHeader
m_rcvBufSize	packet-socket.h	/^  uint32_t m_rcvBufSize; \/\/!< Rx buffer size [Bytes]$/;"	m	class:ns3::PacketSocket
m_receiveErrorModel	simple-net-device.h	/^  Ptr<ErrorModel> m_receiveErrorModel; \/\/!< Receive error model.$/;"	m	class:ns3::SimpleNetDevice
m_rxAvailable	packet-socket.h	/^  uint32_t m_rxAvailable; \/\/!< Rx queue size [Bytes]$/;"	m	class:ns3::PacketSocket
m_rxCallback	simple-net-device.h	/^  NetDevice::ReceiveCallback m_rxCallback; \/\/!< Receive callback$/;"	m	class:ns3::SimpleNetDevice
m_rxTrace	packet-socket-server.h	/^  TracedCallback<Ptr<const Packet>, const Address &> m_rxTrace;$/;"	m	class:ns3::PacketSocketServer
m_selectQueueCallback	net-device-queue-interface.h	/^  SelectQueueCallback m_selectQueueCallback;   \/\/!< Select queue callback$/;"	m	class:ns3::NetDeviceQueueInterface
m_selectQueueCallback	original_net-device.h	/^  SelectQueueCallback m_selectQueueCallback;   \/\/!< Select queue callback$/;"	m	class:ns3::NetDeviceQueueInterface
m_sendEvent	packet-socket-client.h	/^  EventId m_sendEvent;   \/\/!< Event to send the next packet$/;"	m	class:ns3::PacketSocketClient
m_sent	packet-socket-client.h	/^  uint32_t m_sent;       \/\/!< Counter for sent packets$/;"	m	class:ns3::PacketSocketClient
m_seqnum	packetbb.h	/^  uint16_t m_seqnum; \/\/!< Sequence number$/;"	m	class:ns3::PbbPacket
m_sequenceNumber	packetbb.h	/^  uint16_t m_sequenceNumber; \/\/!< Sequence number$/;"	m	class:ns3::PbbMessage
m_shutdownRecv	packet-socket.h	/^  bool m_shutdownRecv;      \/\/!< Receive no longer allowed$/;"	m	class:ns3::PacketSocket
m_shutdownSend	packet-socket.h	/^  bool m_shutdownSend;      \/\/!< Send no longer allowed$/;"	m	class:ns3::PacketSocket
m_sigFigs	pcap-file.h	/^    uint32_t m_sigFigs;       \/**< Unused by pretty much everybody *\/$/;"	m	struct:ns3::PcapFile::__anon1
m_size	packet-socket-client.h	/^  uint32_t m_size;       \/\/!< Size of the sent packet$/;"	m	class:ns3::PacketSocketClient
m_slackHoldTime	dynamic-queue-limits.h	/^  Time m_slackHoldTime;                 \/\/!< Time to measure slack$/;"	m	class:ns3::DynamicQueueLimits
m_slackStartTime	dynamic-queue-limits.h	/^  Time m_slackStartTime;                \/\/!< Time slacks seen$/;"	m	class:ns3::DynamicQueueLimits
m_snapLen	pcap-file-wrapper.h	/^  uint32_t m_snapLen; \/\/!< max length of saved packets$/;"	m	class:ns3::PcapFileWrapper
m_snapLen	pcap-file.h	/^    uint32_t m_snapLen;       \/**< Maximum length of packet data stored in records *\/$/;"	m	struct:ns3::PcapFile::__anon1
m_socket	packet-socket-client.h	/^  Ptr<Socket> m_socket;  \/\/!< Socket$/;"	m	class:ns3::PacketSocketClient
m_socket	packet-socket-server.h	/^  Ptr<Socket> m_socket; \/\/!< Socket$/;"	m	class:ns3::PacketSocketServer
m_source	ethernet-header.h	/^  Mac48Address m_source;        \/\/!< Source address$/;"	m	class:ns3::EthernetHeader
m_src	simple-net-device.cc	/^  Mac48Address m_src; \/\/!< source address$/;"	m	class:ns3::SimpleTag	file:
m_state	packet-socket.h	/^  enum State m_state;       \/\/!< Socket state$/;"	m	class:ns3::PacketSocket	typeref:enum:ns3::PacketSocket::State
m_stoppedByDevice	net-device-queue-interface.h	/^  bool m_stoppedByDevice;         \/\/!< True if the queue has been stopped by the device$/;"	m	class:ns3::NetDeviceQueue
m_stoppedByDevice	original_net-device.h	/^  bool m_stoppedByDevice;         \/\/!< True if the queue has been stopped by the device$/;"	m	class:ns3::NetDeviceQueue
m_stoppedByQueueLimits	net-device-queue-interface.h	/^  bool m_stoppedByQueueLimits;    \/\/!< True if the queue has been stopped by a queue limits object$/;"	m	class:ns3::NetDeviceQueue
m_stoppedByQueueLimits	original_net-device.h	/^  bool m_stoppedByQueueLimits;    \/\/!< True if the queue has been stopped by a queue limits object$/;"	m	class:ns3::NetDeviceQueue
m_swapMode	pcap-file.h	/^  bool m_swapMode;              \/\/!< swap mode$/;"	m	class:ns3::PcapFile
m_timesInvoked	error-model.h	/^  uint32_t m_timesInvoked; \/\/!< number of times the error model has been invoked$/;"	m	class:ns3::ReceiveListErrorModel
m_tlvList	packetbb.h	/^  PbbTlvBlock m_tlvList; \/\/!< PbbTlv container$/;"	m	class:ns3::PbbPacket
m_tlvList	packetbb.h	/^  PbbTlvBlock m_tlvList; \/\/!< PbbTlvBlock$/;"	m	class:ns3::PbbMessage
m_tlvList	packetbb.h	/^  std::list< Ptr<PbbAddressTlv> > m_tlvList; \/\/!< PbbAddressTlv container$/;"	m	class:ns3::PbbAddressTlvBlock
m_tlvList	packetbb.h	/^  std::list< Ptr<PbbTlv> > m_tlvList; \/\/!< PbbTlv container$/;"	m	class:ns3::PbbTlvBlock
m_tos	inet-socket-address.h	/^  uint8_t m_tos;      \/\/!< the ToS$/;"	m	class:ns3::InetSocketAddress
m_traceDequeue	original_queue.h	/^  TracedCallback<Ptr<const Packet> > m_traceDequeue;$/;"	m	class:ns3::Queue1
m_traceDequeue	queue.h	/^  TracedCallback<Ptr<const Item> > m_traceDequeue;$/;"	m	class:ns3::Queue
m_traceDrop	original_queue.h	/^  TracedCallback<Ptr<const Packet> > m_traceDrop;$/;"	m	class:ns3::Queue1
m_traceDrop	queue.h	/^  TracedCallback<Ptr<const Item> > m_traceDrop;$/;"	m	class:ns3::Queue
m_traceDropAfterDequeue	queue.h	/^  TracedCallback<Ptr<const Item> > m_traceDropAfterDequeue;$/;"	m	class:ns3::Queue
m_traceDropBeforeEnqueue	queue.h	/^  TracedCallback<Ptr<const Item> > m_traceDropBeforeEnqueue;$/;"	m	class:ns3::Queue
m_traceEnqueue	original_queue.h	/^  TracedCallback<Ptr<const Packet> > m_traceEnqueue;$/;"	m	class:ns3::Queue1
m_traceEnqueue	queue.h	/^  TracedCallback<Ptr<const Item> > m_traceEnqueue;$/;"	m	class:ns3::Queue
m_traceMap	net-device-queue-interface.h	/^  std::map<Ptr<QueueBase>, std::vector<CallbackBase> > m_traceMap;   \/\/!< Map storing all the connected traces$/;"	m	class:ns3::NetDeviceQueueInterface
m_tsSec	pcap-file.h	/^    uint32_t m_tsSec;         \/**< seconds part of timestamp *\/$/;"	m	struct:ns3::PcapFile::__anon2
m_tsUsec	pcap-file.h	/^    uint32_t m_tsUsec;        \/**< microseconds part of timestamp (nsecs for PCAP_NSEC_MAGIC) *\/$/;"	m	struct:ns3::PcapFile::__anon2
m_tsft	radiotap-header.h	/^  uint64_t m_tsft;          \/\/!< Time Synchronization Function Timer (when the first bit of the MPDU arrived at the MAC)$/;"	m	class:ns3::RadiotapHeader
m_txQueuesVector	net-device-queue-interface.h	/^  std::vector< Ptr<NetDeviceQueue> > m_txQueuesVector;   \/\/!< Device transmission queues$/;"	m	class:ns3::NetDeviceQueueInterface
m_txQueuesVector	original_net-device.h	/^  std::vector< Ptr<NetDeviceQueue> > m_txQueuesVector;   \/\/!< Device transmission queues$/;"	m	class:ns3::NetDeviceQueueInterface
m_txTrace	packet-socket-client.h	/^  TracedCallback<Ptr<const Packet>, const Address &> m_txTrace;$/;"	m	class:ns3::PacketSocketClient
m_txq	queue-item.h	/^  uint8_t m_txq;          \/\/!< Transmission queue index$/;"	m	class:ns3::QueueDiscItem
m_type	address.h	/^  uint8_t m_type; \/\/!< Type of the address$/;"	m	class:ns3::Address
m_type	packetbb.h	/^  uint8_t m_type; \/\/!< Type of this TLV.$/;"	m	class:ns3::PbbTlv
m_type	packetbb.h	/^  uint8_t m_type; \/\/!< the type for this message$/;"	m	class:ns3::PbbMessage
m_type	pcap-file.h	/^    uint32_t m_type;          \/**< Data link type of packet data *\/$/;"	m	struct:ns3::PcapFile::__anon1
m_typeExt	packetbb.h	/^  uint8_t m_typeExt; \/\/!< Extended type.$/;"	m	class:ns3::PbbTlv
m_unit	error-model.h	/^  enum ErrorUnit m_unit; \/\/!< Error rate unit$/;"	m	class:ns3::RateErrorModel	typeref:enum:ns3::RateErrorModel::ErrorUnit
m_value	packetbb.h	/^  Buffer m_value;      \/\/!< Value.$/;"	m	class:ns3::PbbTlv
m_value	sequence-number.h	/^  NUMERIC_TYPE m_value; \/\/!< Sequence number value$/;"	m	class:ns3::SequenceNumber
m_version	packetbb.h	/^  uint8_t m_version; \/\/!< version$/;"	m	class:ns3::PbbPacket
m_versionMajor	pcap-file.h	/^    uint16_t m_versionMajor;  \/**< Major version identifying the version of pcap used in this file *\/$/;"	m	struct:ns3::PcapFile::__anon1
m_versionMinor	pcap-file.h	/^    uint16_t m_versionMinor;  \/**< Minor version identifying the version of pcap used in this file *\/$/;"	m	struct:ns3::PcapFile::__anon1
m_vhtBandwidth	radiotap-header.h	/^  uint8_t m_vhtBandwidth;   \/\/!< VHT bandwidth field.$/;"	m	class:ns3::RadiotapHeader
m_vhtCoding	radiotap-header.h	/^  uint8_t m_vhtCoding;      \/\/!< VHT coding field.$/;"	m	class:ns3::RadiotapHeader
m_vhtFlags	radiotap-header.h	/^  uint8_t m_vhtFlags;       \/\/!< VHT flags field.$/;"	m	class:ns3::RadiotapHeader
m_vhtGroupId	radiotap-header.h	/^  uint8_t m_vhtGroupId;     \/\/!< VHT group_id field.$/;"	m	class:ns3::RadiotapHeader
m_vhtKnown	radiotap-header.h	/^  uint16_t m_vhtKnown;      \/\/!< VHT known field.$/;"	m	class:ns3::RadiotapHeader
m_vhtMcsNss	radiotap-header.h	/^  uint8_t m_vhtMcsNss[4];   \/\/!< VHT mcs_nss field.$/;"	m	class:ns3::RadiotapHeader
m_vhtPad	radiotap-header.h	/^  uint8_t m_vhtPad;         \/\/!< VHT padding.$/;"	m	class:ns3::RadiotapHeader
m_vhtPartialAid	radiotap-header.h	/^  uint16_t m_vhtPartialAid; \/\/!< VHT partial_aid field.$/;"	m	class:ns3::RadiotapHeader
m_wakeCallback	net-device-queue-interface.h	/^  WakeCallback m_wakeCallback;    \/\/!< Wake callback$/;"	m	class:ns3::NetDeviceQueue
m_wakeCallback	original_net-device.h	/^  WakeCallback m_wakeCallback;    \/\/!< Wake callback$/;"	m	class:ns3::NetDeviceQueue
m_zone	pcap-file.h	/^    int32_t  m_zone;          \/**< Time zone correction to be applied to timestamps of packets *\/$/;"	m	struct:ns3::PcapFile::__anon1
mix	ipv6-address.cc	129;"	d	file:
mix	ipv6-address.cc	75;"	d	file:
ns3	address-utils.cc	/^namespace ns3 {$/;"	n	file:
ns3	address-utils.h	/^namespace ns3 {$/;"	n
ns3	address.cc	/^namespace ns3 {$/;"	n	file:
ns3	address.h	/^namespace ns3 {$/;"	n
ns3	ascii-file.cc	/^namespace ns3 {$/;"	n	file:
ns3	ascii-file.h	/^namespace ns3 {$/;"	n
ns3	crc32.cc	/^namespace ns3 {$/;"	n	file:
ns3	crc32.h	/^namespace ns3 {$/;"	n
ns3	data-rate.cc	/^namespace ns3 {$/;"	n	file:
ns3	data-rate.h	/^namespace ns3 {$/;"	n
ns3	drop-tail-queue.cc	/^namespace ns3 {$/;"	n	file:
ns3	drop-tail-queue.h	/^namespace ns3 {$/;"	n
ns3	dynamic-queue-limits.cc	/^namespace ns3 {$/;"	n	file:
ns3	dynamic-queue-limits.h	/^namespace ns3 {$/;"	n
ns3	error-channel.cc	/^namespace ns3 {$/;"	n	file:
ns3	error-channel.h	/^namespace ns3 {$/;"	n
ns3	error-model.cc	/^namespace ns3 {$/;"	n	file:
ns3	error-model.h	/^namespace ns3 {$/;"	n
ns3	ethernet-header.cc	/^namespace ns3 {$/;"	n	file:
ns3	ethernet-header.h	/^namespace ns3 {$/;"	n
ns3	ethernet-trailer.cc	/^namespace ns3 {$/;"	n	file:
ns3	ethernet-trailer.h	/^namespace ns3 {$/;"	n
ns3	flow-id-tag.cc	/^namespace ns3 {$/;"	n	file:
ns3	flow-id-tag.h	/^namespace ns3 {$/;"	n
ns3	generic-phy.h	/^namespace ns3 {$/;"	n
ns3	inet-socket-address.cc	/^namespace ns3 {$/;"	n	file:
ns3	inet-socket-address.h	/^namespace ns3 {$/;"	n
ns3	inet6-socket-address.cc	/^namespace ns3$/;"	n	file:
ns3	inet6-socket-address.h	/^namespace ns3 {$/;"	n
ns3	ipv4-address.cc	/^namespace ns3 {$/;"	n	file:
ns3	ipv4-address.h	/^namespace ns3 {$/;"	n
ns3	ipv6-address.cc	/^namespace ns3 {$/;"	n	file:
ns3	ipv6-address.h	/^namespace ns3 { $/;"	n
ns3	llc-snap-header.cc	/^namespace ns3 {$/;"	n	file:
ns3	llc-snap-header.h	/^namespace ns3 {$/;"	n
ns3	mac16-address.cc	/^namespace ns3 {$/;"	n	file:
ns3	mac16-address.h	/^namespace ns3 {$/;"	n
ns3	mac48-address.cc	/^namespace ns3 {$/;"	n	file:
ns3	mac48-address.h	/^namespace ns3 {$/;"	n
ns3	mac64-address.cc	/^namespace ns3 {$/;"	n	file:
ns3	mac64-address.h	/^namespace ns3 {$/;"	n
ns3	net-device-queue-interface.cc	/^namespace ns3 {$/;"	n	file:
ns3	net-device-queue-interface.h	/^namespace ns3 {$/;"	n
ns3	original_drop-tail-queue.cc	/^namespace ns3 {$/;"	n	file:
ns3	original_drop-tail-queue.h	/^namespace ns3 {$/;"	n
ns3	original_net-device.cc	/^namespace ns3 {$/;"	n	file:
ns3	original_net-device.h	/^namespace ns3 {$/;"	n
ns3	original_queue.cc	/^namespace ns3 {$/;"	n	file:
ns3	original_queue.h	/^namespace ns3 {$/;"	n
ns3	output-stream-wrapper.cc	/^namespace ns3 {$/;"	n	file:
ns3	output-stream-wrapper.h	/^namespace ns3 {$/;"	n
ns3	packet-burst.cc	/^namespace ns3 {$/;"	n	file:
ns3	packet-burst.h	/^namespace ns3 {$/;"	n
ns3	packet-data-calculators.h	/^namespace ns3 {$/;"	n
ns3	packet-probe.cc	/^namespace ns3 {$/;"	n	file:
ns3	packet-probe.h	/^namespace ns3 {$/;"	n
ns3	packet-socket-address.cc	/^namespace ns3 {$/;"	n	file:
ns3	packet-socket-address.h	/^namespace ns3 {$/;"	n
ns3	packet-socket-client.cc	/^namespace ns3 {$/;"	n	file:
ns3	packet-socket-client.h	/^namespace ns3 {$/;"	n
ns3	packet-socket-factory.cc	/^namespace ns3 {$/;"	n	file:
ns3	packet-socket-factory.h	/^namespace ns3 {$/;"	n
ns3	packet-socket-server.cc	/^namespace ns3 {$/;"	n	file:
ns3	packet-socket-server.h	/^namespace ns3 {$/;"	n
ns3	packet-socket.cc	/^namespace ns3 {$/;"	n	file:
ns3	packet-socket.h	/^namespace ns3 {$/;"	n
ns3	packetbb.cc	/^namespace ns3 {$/;"	n	file:
ns3	packetbb.h	/^namespace ns3 {$/;"	n
ns3	pcap-file-wrapper.cc	/^namespace ns3 {$/;"	n	file:
ns3	pcap-file-wrapper.h	/^namespace ns3 {$/;"	n
ns3	pcap-file.cc	/^namespace ns3 {$/;"	n	file:
ns3	pcap-file.h	/^namespace ns3 {$/;"	n
ns3	queue-item.cc	/^namespace ns3 {$/;"	n	file:
ns3	queue-item.h	/^namespace ns3 {$/;"	n
ns3	queue-limits.cc	/^namespace ns3 {$/;"	n	file:
ns3	queue-limits.h	/^namespace ns3 {$/;"	n
ns3	queue.cc	/^namespace ns3 {$/;"	n	file:
ns3	queue.h	/^namespace ns3 {$/;"	n
ns3	radiotap-header.cc	/^namespace ns3 {$/;"	n	file:
ns3	radiotap-header.h	/^namespace ns3 {$/;"	n
ns3	sequence-number.h	/^namespace ns3 {$/;"	n
ns3	simple-channel.cc	/^namespace ns3 {$/;"	n	file:
ns3	simple-channel.h	/^namespace ns3 {$/;"	n
ns3	simple-net-device.cc	/^namespace ns3 {$/;"	n	file:
ns3	simple-net-device.h	/^namespace ns3 {$/;"	n
ns3	sll-header.cc	/^namespace ns3 {$/;"	n	file:
ns3	sll-header.h	/^namespace ns3 {$/;"	n
operator !=	address.cc	/^bool operator != (const Address &a, const Address &b)$/;"	f	namespace:ns3
operator !=	data-rate.cc	/^bool DataRate::operator != (const DataRate& rhs) const$/;"	f	class:ns3::DataRate
operator !=	ipv4-address.cc	/^bool operator != (Ipv4Mask const &a, Ipv4Mask const &b)$/;"	f	namespace:ns3
operator !=	ipv4-address.h	/^inline bool operator != (const Ipv4Address &a, const Ipv4Address &b)$/;"	f	namespace:ns3
operator !=	ipv6-address.h	/^inline bool operator != (const Ipv6Address& a, const Ipv6Address& b)$/;"	f	namespace:ns3
operator !=	ipv6-address.h	/^inline bool operator != (const Ipv6Prefix& a, const Ipv6Prefix& b)$/;"	f	namespace:ns3
operator !=	mac16-address.h	/^inline bool operator != (const Mac16Address &a, const Mac16Address &b)$/;"	f	namespace:ns3
operator !=	mac48-address.h	/^inline bool operator != (const Mac48Address &a, const Mac48Address &b)$/;"	f	namespace:ns3
operator !=	mac64-address.h	/^inline bool operator != (const Mac64Address &a, const Mac64Address &b)$/;"	f	namespace:ns3
operator !=	packetbb.cc	/^PbbAddressBlock::operator!= (const PbbAddressBlock &other) const$/;"	f	class:ns3::PbbAddressBlock
operator !=	packetbb.cc	/^PbbAddressTlvBlock::operator!= (const PbbAddressTlvBlock &other) const$/;"	f	class:ns3::PbbAddressTlvBlock
operator !=	packetbb.cc	/^PbbMessage::operator!= (const PbbMessage &other) const$/;"	f	class:ns3::PbbMessage
operator !=	packetbb.cc	/^PbbPacket::operator!= (const PbbPacket &other) const$/;"	f	class:ns3::PbbPacket
operator !=	packetbb.cc	/^PbbTlv::operator!= (const PbbTlv &other) const$/;"	f	class:ns3::PbbTlv
operator !=	packetbb.cc	/^PbbTlvBlock::operator!= (const PbbTlvBlock &other) const$/;"	f	class:ns3::PbbTlvBlock
operator !=	sequence-number.h	/^  bool operator != (const SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> &other) const$/;"	f	class:ns3::SequenceNumber
operator ()	ipv4-address.cc	/^size_t Ipv4AddressHash::operator() (Ipv4Address const &x) const$/;"	f	class:ns3::Ipv4AddressHash
operator ()	ipv6-address.cc	/^size_t Ipv6AddressHash::operator () (Ipv6Address const &x) const$/;"	f	class:ns3::Ipv6AddressHash
operator *	data-rate.cc	/^double operator* (const DataRate& lhs, const Time& rhs)$/;"	f	namespace:ns3
operator *	data-rate.cc	/^double operator* (const Time& lhs, const DataRate& rhs)$/;"	f	namespace:ns3
operator +	sequence-number.h	/^  SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> operator + (SIGNED_TYPE delta) const$/;"	f	class:ns3::SequenceNumber
operator +	sequence-number.h	/^  SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> operator + (const SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> &other) const$/;"	f	class:ns3::SequenceNumber
operator ++	sequence-number.h	/^  SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> operator++ ()$/;"	f	class:ns3::SequenceNumber
operator ++	sequence-number.h	/^  SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> operator++ (int)$/;"	f	class:ns3::SequenceNumber
operator +=	sequence-number.h	/^  SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE>& operator+= (SIGNED_TYPE value)$/;"	f	class:ns3::SequenceNumber
operator -	sequence-number.h	/^  SIGNED_TYPE operator - (const SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> &other) const$/;"	f	class:ns3::SequenceNumber
operator -	sequence-number.h	/^  SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> operator - (SIGNED_TYPE delta) const$/;"	f	class:ns3::SequenceNumber
operator --	sequence-number.h	/^  SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> operator-- ()$/;"	f	class:ns3::SequenceNumber
operator --	sequence-number.h	/^  SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> operator-- (int)$/;"	f	class:ns3::SequenceNumber
operator -=	sequence-number.h	/^  SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE>& operator-= (SIGNED_TYPE value)$/;"	f	class:ns3::SequenceNumber
operator <	address.cc	/^bool operator < (const Address &a, const Address &b)$/;"	f	namespace:ns3
operator <	data-rate.cc	/^bool DataRate::operator < (const DataRate& rhs) const$/;"	f	class:ns3::DataRate
operator <	ipv4-address.h	/^inline bool operator < (const Ipv4Address &a, const Ipv4Address &b)$/;"	f	namespace:ns3
operator <	ipv6-address.h	/^inline bool operator < (const Ipv6Address& a, const Ipv6Address& b)$/;"	f	namespace:ns3
operator <	mac16-address.h	/^inline bool operator < (const Mac16Address &a, const Mac16Address &b)$/;"	f	namespace:ns3
operator <	mac48-address.h	/^inline bool operator < (const Mac48Address &a, const Mac48Address &b)$/;"	f	namespace:ns3
operator <	mac64-address.h	/^inline bool operator < (const Mac64Address &a, const Mac64Address &b)$/;"	f	namespace:ns3
operator <	sequence-number.h	/^  bool operator < (const SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> &other) const$/;"	f	class:ns3::SequenceNumber
operator <<	address.cc	/^std::ostream& operator<< (std::ostream& os, const Address & address)$/;"	f	namespace:ns3
operator <<	data-rate.cc	/^std::ostream &operator << (std::ostream &os, const DataRate &rate)$/;"	f	namespace:ns3
operator <<	ipv4-address.cc	/^std::ostream& operator<< (std::ostream& os, Ipv4Address const& address)$/;"	f	namespace:ns3
operator <<	ipv4-address.cc	/^std::ostream& operator<< (std::ostream& os, Ipv4Mask const& mask)$/;"	f	namespace:ns3
operator <<	ipv6-address.cc	/^std::ostream& operator << (std::ostream& os, Ipv6Address const& address)$/;"	f	namespace:ns3
operator <<	ipv6-address.cc	/^std::ostream& operator << (std::ostream& os, Ipv6Prefix const& prefix)$/;"	f	namespace:ns3
operator <<	mac16-address.cc	/^std::ostream & operator<< (std::ostream& os, const Mac16Address & address)$/;"	f	namespace:ns3
operator <<	mac48-address.cc	/^std::ostream& operator<< (std::ostream& os, const Mac48Address & address)$/;"	f	namespace:ns3
operator <<	mac64-address.cc	/^std::ostream& operator<< (std::ostream& os, const Mac64Address & address)$/;"	f	namespace:ns3
operator <<	original_net-device.cc	/^std::ostream & operator << (std::ostream &os, const QueueItem &item)$/;"	f	namespace:ns3
operator <<	queue-item.cc	/^std::ostream & operator << (std::ostream &os, const QueueItem &item)$/;"	f	namespace:ns3
operator <<	sequence-number.h	/^operator<< (std::ostream& os, const SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> &val)$/;"	f	namespace:ns3
operator <=	data-rate.cc	/^bool DataRate::operator <= (const DataRate& rhs) const$/;"	f	class:ns3::DataRate
operator <=	sequence-number.h	/^  bool operator <= (const SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> &other) const$/;"	f	class:ns3::SequenceNumber
operator =	address.cc	/^Address::operator = (const Address &address)$/;"	f	class:ns3::Address
operator =	sequence-number.h	/^  SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE>& operator= (NUMERIC_TYPE value)$/;"	f	class:ns3::SequenceNumber
operator =	sequence-number.h	/^  SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE>& operator= (SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> const &value)$/;"	f	class:ns3::SequenceNumber
operator ==	address.cc	/^bool operator == (const Address &a, const Address &b)$/;"	f	namespace:ns3
operator ==	data-rate.cc	/^bool DataRate::operator == (const DataRate& rhs) const$/;"	f	class:ns3::DataRate
operator ==	ipv4-address.cc	/^bool operator == (Ipv4Mask const &a, Ipv4Mask const &b)$/;"	f	namespace:ns3
operator ==	ipv4-address.h	/^inline bool operator == (const Ipv4Address &a, const Ipv4Address &b)$/;"	f	namespace:ns3
operator ==	ipv6-address.h	/^inline bool operator == (const Ipv6Address& a, const Ipv6Address& b)$/;"	f	namespace:ns3
operator ==	ipv6-address.h	/^inline bool operator == (const Ipv6Prefix& a, const Ipv6Prefix& b)$/;"	f	namespace:ns3
operator ==	mac16-address.h	/^inline bool operator == (const Mac16Address &a, const Mac16Address &b)$/;"	f	namespace:ns3
operator ==	mac48-address.h	/^inline bool operator == (const Mac48Address &a, const Mac48Address &b)$/;"	f	namespace:ns3
operator ==	mac64-address.h	/^inline bool operator == (const Mac64Address &a, const Mac64Address &b)$/;"	f	namespace:ns3
operator ==	packetbb.cc	/^PbbAddressBlock::operator== (const PbbAddressBlock &other) const$/;"	f	class:ns3::PbbAddressBlock
operator ==	packetbb.cc	/^PbbAddressTlvBlock::operator== (const PbbAddressTlvBlock &other) const$/;"	f	class:ns3::PbbAddressTlvBlock
operator ==	packetbb.cc	/^PbbMessage::operator== (const PbbMessage &other) const$/;"	f	class:ns3::PbbMessage
operator ==	packetbb.cc	/^PbbPacket::operator== (const PbbPacket &other) const$/;"	f	class:ns3::PbbPacket
operator ==	packetbb.cc	/^PbbTlv::operator== (const PbbTlv &other) const$/;"	f	class:ns3::PbbTlv
operator ==	packetbb.cc	/^PbbTlvBlock::operator== (const PbbTlvBlock &other) const$/;"	f	class:ns3::PbbTlvBlock
operator ==	sequence-number.h	/^  bool operator == (const SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> &other) const$/;"	f	class:ns3::SequenceNumber
operator >	data-rate.cc	/^bool DataRate::operator >  (const DataRate& rhs) const$/;"	f	class:ns3::DataRate
operator >	sequence-number.h	/^  bool operator > (const SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> &other) const$/;"	f	class:ns3::SequenceNumber
operator >=	data-rate.cc	/^bool DataRate::operator >= (const DataRate& rhs) const$/;"	f	class:ns3::DataRate
operator >=	sequence-number.h	/^  bool operator >= (const SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> &other) const$/;"	f	class:ns3::SequenceNumber
operator >>	address.cc	/^std::istream& operator>> (std::istream& is, Address & address)$/;"	f	namespace:ns3
operator >>	data-rate.cc	/^std::istream &operator >> (std::istream &is, DataRate &rate)$/;"	f	namespace:ns3
operator >>	ipv4-address.cc	/^std::istream & operator >> (std::istream &is, Ipv4Address &address)$/;"	f	namespace:ns3
operator >>	ipv4-address.cc	/^std::istream & operator >> (std::istream &is, Ipv4Mask &mask)$/;"	f	namespace:ns3
operator >>	ipv6-address.cc	/^std::istream& operator >> (std::istream& is, Ipv6Address& address)$/;"	f	namespace:ns3
operator >>	ipv6-address.cc	/^std::istream& operator >> (std::istream& is, Ipv6Prefix& prefix)$/;"	f	namespace:ns3
operator >>	mac16-address.cc	/^std::istream& operator>> (std::istream& is, Mac16Address & address)$/;"	f	namespace:ns3
operator >>	mac48-address.cc	/^std::istream& operator>> (std::istream& is, Mac48Address & address)$/;"	f	namespace:ns3
operator >>	mac64-address.cc	/^std::istream& operator>> (std::istream& is, Mac64Address & address)$/;"	f	namespace:ns3
operator >>	sequence-number.h	/^std::istream & operator >> (std::istream &is, const SequenceNumber<NUMERIC_TYPE, SIGNED_TYPE> &val)$/;"	f	namespace:ns3
operator Address	inet-socket-address.cc	/^InetSocketAddress::operator Address () const$/;"	f	class:ns3::InetSocketAddress
operator Address	inet6-socket-address.cc	/^Inet6SocketAddress::operator Address (void) const$/;"	f	class:ns3::Inet6SocketAddress
operator Address	ipv4-address.cc	/^Ipv4Address::operator Address () const$/;"	f	class:ns3::Ipv4Address
operator Address	ipv6-address.cc	/^Ipv6Address::operator Address () const$/;"	f	class:ns3::Ipv6Address
operator Address	mac16-address.cc	/^Mac16Address::operator Address () const$/;"	f	class:ns3::Mac16Address
operator Address	mac48-address.cc	/^Mac48Address::operator Address () const$/;"	f	class:ns3::Mac48Address
operator Address	mac64-address.cc	/^Mac64Address::operator Address () const$/;"	f	class:ns3::Mac64Address
operator Address	packet-socket-address.cc	/^PacketSocketAddress::operator Address () const$/;"	f	class:ns3::PacketSocketAddress
sgi	sgi-hashmap.h	/^    namespace sgi { using ::hash_map; }; \/\/ inherit globals$/;"	n
~AsciiFile	ascii-file.cc	/^AsciiFile::~AsciiFile ()$/;"	f	class:ns3::AsciiFile
~BinaryErrorModel	error-model.cc	/^BinaryErrorModel::~BinaryErrorModel ()$/;"	f	class:ns3::BinaryErrorModel
~BurstErrorModel	error-model.cc	/^BurstErrorModel::~BurstErrorModel ()$/;"	f	class:ns3::BurstErrorModel
~DropTailQueue	drop-tail-queue.h	/^DropTailQueue<Item>::~DropTailQueue ()$/;"	f	class:ns3::DropTailQueue
~DropTailQueue1	original_drop-tail-queue.cc	/^DropTailQueue1::~DropTailQueue1 ()$/;"	f	class:ns3::DropTailQueue1
~DynamicQueueLimits	dynamic-queue-limits.cc	/^DynamicQueueLimits::~DynamicQueueLimits ()$/;"	f	class:ns3::DynamicQueueLimits
~ErrorModel	error-model.cc	/^ErrorModel::~ErrorModel ()$/;"	f	class:ns3::ErrorModel
~Ipv6Address	ipv6-address.cc	/^Ipv6Address::~Ipv6Address ()$/;"	f	class:ns3::Ipv6Address
~Ipv6Prefix	ipv6-address.cc	/^Ipv6Prefix::~Ipv6Prefix ()$/;"	f	class:ns3::Ipv6Prefix
~ListErrorModel	error-model.cc	/^ListErrorModel::~ListErrorModel () $/;"	f	class:ns3::ListErrorModel
~NetDevice	original_net-device.cc	/^NetDevice::~NetDevice ()$/;"	f	class:ns3::NetDevice
~NetDeviceQueue	net-device-queue-interface.cc	/^NetDeviceQueue::~NetDeviceQueue ()$/;"	f	class:ns3::NetDeviceQueue
~NetDeviceQueue	original_net-device.cc	/^NetDeviceQueue::~NetDeviceQueue ()$/;"	f	class:ns3::NetDeviceQueue
~NetDeviceQueueInterface	net-device-queue-interface.cc	/^NetDeviceQueueInterface::~NetDeviceQueueInterface ()$/;"	f	class:ns3::NetDeviceQueueInterface
~NetDeviceQueueInterface	original_net-device.cc	/^NetDeviceQueueInterface::~NetDeviceQueueInterface ()$/;"	f	class:ns3::NetDeviceQueueInterface
~OutputStreamWrapper	output-stream-wrapper.cc	/^OutputStreamWrapper::~OutputStreamWrapper ()$/;"	f	class:ns3::OutputStreamWrapper
~PacketBurst	packet-burst.cc	/^PacketBurst::~PacketBurst (void)$/;"	f	class:ns3::PacketBurst
~PacketCounterCalculator	packet-data-calculators.cc	/^PacketCounterCalculator::~PacketCounterCalculator()$/;"	f	class:PacketCounterCalculator
~PacketProbe	packet-probe.cc	/^PacketProbe::~PacketProbe ()$/;"	f	class:ns3::PacketProbe
~PacketSizeMinMaxAvgTotalCalculator	packet-data-calculators.cc	/^PacketSizeMinMaxAvgTotalCalculator::~PacketSizeMinMaxAvgTotalCalculator()$/;"	f	class:PacketSizeMinMaxAvgTotalCalculator
~PacketSocket	packet-socket.cc	/^PacketSocket::~PacketSocket ()$/;"	f	class:ns3::PacketSocket
~PacketSocketClient	packet-socket-client.cc	/^PacketSocketClient::~PacketSocketClient ()$/;"	f	class:ns3::PacketSocketClient
~PacketSocketServer	packet-socket-server.cc	/^PacketSocketServer::~PacketSocketServer ()$/;"	f	class:ns3::PacketSocketServer
~PbbAddressBlock	packetbb.cc	/^PbbAddressBlock::~PbbAddressBlock ()$/;"	f	class:ns3::PbbAddressBlock
~PbbAddressBlockIpv4	packetbb.cc	/^PbbAddressBlockIpv4::~PbbAddressBlockIpv4 ()$/;"	f	class:ns3::PbbAddressBlockIpv4
~PbbAddressBlockIpv6	packetbb.cc	/^PbbAddressBlockIpv6::~PbbAddressBlockIpv6 ()$/;"	f	class:ns3::PbbAddressBlockIpv6
~PbbAddressTlvBlock	packetbb.cc	/^PbbAddressTlvBlock::~PbbAddressTlvBlock (void)$/;"	f	class:ns3::PbbAddressTlvBlock
~PbbMessage	packetbb.cc	/^PbbMessage::~PbbMessage ()$/;"	f	class:ns3::PbbMessage
~PbbMessageIpv4	packetbb.cc	/^PbbMessageIpv4::~PbbMessageIpv4 ()$/;"	f	class:ns3::PbbMessageIpv4
~PbbMessageIpv6	packetbb.cc	/^PbbMessageIpv6::~PbbMessageIpv6 ()$/;"	f	class:ns3::PbbMessageIpv6
~PbbPacket	packetbb.cc	/^PbbPacket::~PbbPacket (void)$/;"	f	class:ns3::PbbPacket
~PbbTlv	packetbb.cc	/^PbbTlv::~PbbTlv (void)$/;"	f	class:ns3::PbbTlv
~PbbTlvBlock	packetbb.cc	/^PbbTlvBlock::~PbbTlvBlock (void)$/;"	f	class:ns3::PbbTlvBlock
~PcapFile	pcap-file.cc	/^PcapFile::~PcapFile ()$/;"	f	class:ns3::PcapFile
~PcapFileWrapper	pcap-file-wrapper.cc	/^PcapFileWrapper::~PcapFileWrapper ()$/;"	f	class:ns3::PcapFileWrapper
~Queue	queue.h	/^Queue<Item>::~Queue ()$/;"	f	class:ns3::Queue
~Queue1	original_queue.cc	/^Queue1::~Queue1()$/;"	f	class:ns3::Queue1
~QueueBase	queue.cc	/^QueueBase::~QueueBase ()$/;"	f	class:ns3::QueueBase
~QueueDiscItem	queue-item.cc	/^QueueDiscItem::~QueueDiscItem()$/;"	f	class:ns3::QueueDiscItem
~QueueItem	original_net-device.cc	/^QueueItem::~QueueItem()$/;"	f	class:ns3::QueueItem
~QueueItem	queue-item.cc	/^QueueItem::~QueueItem ()$/;"	f	class:ns3::QueueItem
~QueueLimits	queue-limits.cc	/^QueueLimits::~QueueLimits ()$/;"	f	class:ns3::QueueLimits
~RateErrorModel	error-model.cc	/^RateErrorModel::~RateErrorModel () $/;"	f	class:ns3::RateErrorModel
~ReceiveListErrorModel	error-model.cc	/^ReceiveListErrorModel::~ReceiveListErrorModel () $/;"	f	class:ns3::ReceiveListErrorModel
~SllHeader	sll-header.cc	/^SllHeader::~SllHeader ()$/;"	f	class:ns3::SllHeader
